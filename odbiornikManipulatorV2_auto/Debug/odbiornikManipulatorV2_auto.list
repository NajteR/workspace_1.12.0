
odbiornikManipulatorV2_auto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038ac  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080039e8  080039e8  000139e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a0c  08003a0c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003a0c  08003a0c  00013a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a14  08003a14  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a14  08003a14  00013a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a18  08003a18  00013a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000010  08003a2c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08003a2c  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7ac  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204f  00000000  00000000  0002d7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  0002f838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  00030550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f1d  00000000  00000000  00031190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f847  00000000  00000000  000470ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a249  00000000  00000000  000568f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0b3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000374c  00000000  00000000  000e0b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	080039d0 	.word	0x080039d0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	080039d0 	.word	0x080039d0

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__gesf2>:
 8000398:	f04f 3cff 	mov.w	ip, #4294967295
 800039c:	e006      	b.n	80003ac <__cmpsf2+0x4>
 800039e:	bf00      	nop

080003a0 <__lesf2>:
 80003a0:	f04f 0c01 	mov.w	ip, #1
 80003a4:	e002      	b.n	80003ac <__cmpsf2+0x4>
 80003a6:	bf00      	nop

080003a8 <__cmpsf2>:
 80003a8:	f04f 0c01 	mov.w	ip, #1
 80003ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80003b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80003b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003bc:	bf18      	it	ne
 80003be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003c2:	d011      	beq.n	80003e8 <__cmpsf2+0x40>
 80003c4:	b001      	add	sp, #4
 80003c6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80003ca:	bf18      	it	ne
 80003cc:	ea90 0f01 	teqne	r0, r1
 80003d0:	bf58      	it	pl
 80003d2:	ebb2 0003 	subspl.w	r0, r2, r3
 80003d6:	bf88      	it	hi
 80003d8:	17c8      	asrhi	r0, r1, #31
 80003da:	bf38      	it	cc
 80003dc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80003e0:	bf18      	it	ne
 80003e2:	f040 0001 	orrne.w	r0, r0, #1
 80003e6:	4770      	bx	lr
 80003e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003ec:	d102      	bne.n	80003f4 <__cmpsf2+0x4c>
 80003ee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80003f2:	d105      	bne.n	8000400 <__cmpsf2+0x58>
 80003f4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80003f8:	d1e4      	bne.n	80003c4 <__cmpsf2+0x1c>
 80003fa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80003fe:	d0e1      	beq.n	80003c4 <__cmpsf2+0x1c>
 8000400:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop

08000408 <__aeabi_cfrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	4608      	mov	r0, r1
 800040c:	4661      	mov	r1, ip
 800040e:	e7ff      	b.n	8000410 <__aeabi_cfcmpeq>

08000410 <__aeabi_cfcmpeq>:
 8000410:	b50f      	push	{r0, r1, r2, r3, lr}
 8000412:	f7ff ffc9 	bl	80003a8 <__cmpsf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	bf48      	it	mi
 800041a:	f110 0f00 	cmnmi.w	r0, #0
 800041e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000420 <__aeabi_fcmpeq>:
 8000420:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000424:	f7ff fff4 	bl	8000410 <__aeabi_cfcmpeq>
 8000428:	bf0c      	ite	eq
 800042a:	2001      	moveq	r0, #1
 800042c:	2000      	movne	r0, #0
 800042e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000432:	bf00      	nop

08000434 <__aeabi_fcmplt>:
 8000434:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000438:	f7ff ffea 	bl	8000410 <__aeabi_cfcmpeq>
 800043c:	bf34      	ite	cc
 800043e:	2001      	movcc	r0, #1
 8000440:	2000      	movcs	r0, #0
 8000442:	f85d fb08 	ldr.w	pc, [sp], #8
 8000446:	bf00      	nop

08000448 <__aeabi_fcmple>:
 8000448:	f84d ed08 	str.w	lr, [sp, #-8]!
 800044c:	f7ff ffe0 	bl	8000410 <__aeabi_cfcmpeq>
 8000450:	bf94      	ite	ls
 8000452:	2001      	movls	r0, #1
 8000454:	2000      	movhi	r0, #0
 8000456:	f85d fb08 	ldr.w	pc, [sp], #8
 800045a:	bf00      	nop

0800045c <__aeabi_fcmpge>:
 800045c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000460:	f7ff ffd2 	bl	8000408 <__aeabi_cfrcmple>
 8000464:	bf94      	ite	ls
 8000466:	2001      	movls	r0, #1
 8000468:	2000      	movhi	r0, #0
 800046a:	f85d fb08 	ldr.w	pc, [sp], #8
 800046e:	bf00      	nop

08000470 <__aeabi_fcmpgt>:
 8000470:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000474:	f7ff ffc8 	bl	8000408 <__aeabi_cfrcmple>
 8000478:	bf34      	ite	cc
 800047a:	2001      	movcc	r0, #1
 800047c:	2000      	movcs	r0, #0
 800047e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000482:	bf00      	nop

08000484 <__aeabi_f2uiz>:
 8000484:	0042      	lsls	r2, r0, #1
 8000486:	d20e      	bcs.n	80004a6 <__aeabi_f2uiz+0x22>
 8000488:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800048c:	d30b      	bcc.n	80004a6 <__aeabi_f2uiz+0x22>
 800048e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000492:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000496:	d409      	bmi.n	80004ac <__aeabi_f2uiz+0x28>
 8000498:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800049c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004a0:	fa23 f002 	lsr.w	r0, r3, r2
 80004a4:	4770      	bx	lr
 80004a6:	f04f 0000 	mov.w	r0, #0
 80004aa:	4770      	bx	lr
 80004ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004b0:	d101      	bne.n	80004b6 <__aeabi_f2uiz+0x32>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d102      	bne.n	80004bc <__aeabi_f2uiz+0x38>
 80004b6:	f04f 30ff 	mov.w	r0, #4294967295
 80004ba:	4770      	bx	lr
 80004bc:	f04f 0000 	mov.w	r0, #0
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <__aeabi_uldivmod>:
 80004c4:	b953      	cbnz	r3, 80004dc <__aeabi_uldivmod+0x18>
 80004c6:	b94a      	cbnz	r2, 80004dc <__aeabi_uldivmod+0x18>
 80004c8:	2900      	cmp	r1, #0
 80004ca:	bf08      	it	eq
 80004cc:	2800      	cmpeq	r0, #0
 80004ce:	bf1c      	itt	ne
 80004d0:	f04f 31ff 	movne.w	r1, #4294967295
 80004d4:	f04f 30ff 	movne.w	r0, #4294967295
 80004d8:	f000 b976 	b.w	80007c8 <__aeabi_idiv0>
 80004dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80004e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004e4:	f000 f806 	bl	80004f4 <__udivmoddi4>
 80004e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004f0:	b004      	add	sp, #16
 80004f2:	4770      	bx	lr

080004f4 <__udivmoddi4>:
 80004f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004f8:	9e08      	ldr	r6, [sp, #32]
 80004fa:	460d      	mov	r5, r1
 80004fc:	4604      	mov	r4, r0
 80004fe:	4688      	mov	r8, r1
 8000500:	2b00      	cmp	r3, #0
 8000502:	d14d      	bne.n	80005a0 <__udivmoddi4+0xac>
 8000504:	428a      	cmp	r2, r1
 8000506:	4694      	mov	ip, r2
 8000508:	d968      	bls.n	80005dc <__udivmoddi4+0xe8>
 800050a:	fab2 f282 	clz	r2, r2
 800050e:	b152      	cbz	r2, 8000526 <__udivmoddi4+0x32>
 8000510:	fa01 f302 	lsl.w	r3, r1, r2
 8000514:	f1c2 0120 	rsb	r1, r2, #32
 8000518:	fa20 f101 	lsr.w	r1, r0, r1
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	ea41 0803 	orr.w	r8, r1, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800052a:	fbb8 f7f1 	udiv	r7, r8, r1
 800052e:	fa1f fe8c 	uxth.w	lr, ip
 8000532:	fb01 8817 	mls	r8, r1, r7, r8
 8000536:	fb07 f00e 	mul.w	r0, r7, lr
 800053a:	0c23      	lsrs	r3, r4, #16
 800053c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000540:	4298      	cmp	r0, r3
 8000542:	d90a      	bls.n	800055a <__udivmoddi4+0x66>
 8000544:	eb1c 0303 	adds.w	r3, ip, r3
 8000548:	f107 35ff 	add.w	r5, r7, #4294967295
 800054c:	f080 811e 	bcs.w	800078c <__udivmoddi4+0x298>
 8000550:	4298      	cmp	r0, r3
 8000552:	f240 811b 	bls.w	800078c <__udivmoddi4+0x298>
 8000556:	3f02      	subs	r7, #2
 8000558:	4463      	add	r3, ip
 800055a:	1a1b      	subs	r3, r3, r0
 800055c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000560:	fb01 3310 	mls	r3, r1, r0, r3
 8000564:	fb00 fe0e 	mul.w	lr, r0, lr
 8000568:	b2a4      	uxth	r4, r4
 800056a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056e:	45a6      	cmp	lr, r4
 8000570:	d90a      	bls.n	8000588 <__udivmoddi4+0x94>
 8000572:	eb1c 0404 	adds.w	r4, ip, r4
 8000576:	f100 33ff 	add.w	r3, r0, #4294967295
 800057a:	f080 8109 	bcs.w	8000790 <__udivmoddi4+0x29c>
 800057e:	45a6      	cmp	lr, r4
 8000580:	f240 8106 	bls.w	8000790 <__udivmoddi4+0x29c>
 8000584:	4464      	add	r4, ip
 8000586:	3802      	subs	r0, #2
 8000588:	2100      	movs	r1, #0
 800058a:	eba4 040e 	sub.w	r4, r4, lr
 800058e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000592:	b11e      	cbz	r6, 800059c <__udivmoddi4+0xa8>
 8000594:	2300      	movs	r3, #0
 8000596:	40d4      	lsrs	r4, r2
 8000598:	e9c6 4300 	strd	r4, r3, [r6]
 800059c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0xc2>
 80005a4:	2e00      	cmp	r6, #0
 80005a6:	f000 80ee 	beq.w	8000786 <__udivmoddi4+0x292>
 80005aa:	2100      	movs	r1, #0
 80005ac:	e9c6 0500 	strd	r0, r5, [r6]
 80005b0:	4608      	mov	r0, r1
 80005b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b6:	fab3 f183 	clz	r1, r3
 80005ba:	2900      	cmp	r1, #0
 80005bc:	d14a      	bne.n	8000654 <__udivmoddi4+0x160>
 80005be:	42ab      	cmp	r3, r5
 80005c0:	d302      	bcc.n	80005c8 <__udivmoddi4+0xd4>
 80005c2:	4282      	cmp	r2, r0
 80005c4:	f200 80fc 	bhi.w	80007c0 <__udivmoddi4+0x2cc>
 80005c8:	1a84      	subs	r4, r0, r2
 80005ca:	eb65 0303 	sbc.w	r3, r5, r3
 80005ce:	2001      	movs	r0, #1
 80005d0:	4698      	mov	r8, r3
 80005d2:	2e00      	cmp	r6, #0
 80005d4:	d0e2      	beq.n	800059c <__udivmoddi4+0xa8>
 80005d6:	e9c6 4800 	strd	r4, r8, [r6]
 80005da:	e7df      	b.n	800059c <__udivmoddi4+0xa8>
 80005dc:	b902      	cbnz	r2, 80005e0 <__udivmoddi4+0xec>
 80005de:	deff      	udf	#255	; 0xff
 80005e0:	fab2 f282 	clz	r2, r2
 80005e4:	2a00      	cmp	r2, #0
 80005e6:	f040 8091 	bne.w	800070c <__udivmoddi4+0x218>
 80005ea:	eba1 000c 	sub.w	r0, r1, ip
 80005ee:	2101      	movs	r1, #1
 80005f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f4:	fa1f fe8c 	uxth.w	lr, ip
 80005f8:	fbb0 f3f7 	udiv	r3, r0, r7
 80005fc:	fb07 0013 	mls	r0, r7, r3, r0
 8000600:	0c25      	lsrs	r5, r4, #16
 8000602:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000606:	fb0e f003 	mul.w	r0, lr, r3
 800060a:	42a8      	cmp	r0, r5
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x12c>
 800060e:	eb1c 0505 	adds.w	r5, ip, r5
 8000612:	f103 38ff 	add.w	r8, r3, #4294967295
 8000616:	d202      	bcs.n	800061e <__udivmoddi4+0x12a>
 8000618:	42a8      	cmp	r0, r5
 800061a:	f200 80ce 	bhi.w	80007ba <__udivmoddi4+0x2c6>
 800061e:	4643      	mov	r3, r8
 8000620:	1a2d      	subs	r5, r5, r0
 8000622:	fbb5 f0f7 	udiv	r0, r5, r7
 8000626:	fb07 5510 	mls	r5, r7, r0, r5
 800062a:	fb0e fe00 	mul.w	lr, lr, r0
 800062e:	b2a4      	uxth	r4, r4
 8000630:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000634:	45a6      	cmp	lr, r4
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x156>
 8000638:	eb1c 0404 	adds.w	r4, ip, r4
 800063c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000640:	d202      	bcs.n	8000648 <__udivmoddi4+0x154>
 8000642:	45a6      	cmp	lr, r4
 8000644:	f200 80b6 	bhi.w	80007b4 <__udivmoddi4+0x2c0>
 8000648:	4628      	mov	r0, r5
 800064a:	eba4 040e 	sub.w	r4, r4, lr
 800064e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000652:	e79e      	b.n	8000592 <__udivmoddi4+0x9e>
 8000654:	f1c1 0720 	rsb	r7, r1, #32
 8000658:	408b      	lsls	r3, r1
 800065a:	fa22 fc07 	lsr.w	ip, r2, r7
 800065e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000662:	fa25 fa07 	lsr.w	sl, r5, r7
 8000666:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800066a:	fbba f8f9 	udiv	r8, sl, r9
 800066e:	fa20 f307 	lsr.w	r3, r0, r7
 8000672:	fb09 aa18 	mls	sl, r9, r8, sl
 8000676:	408d      	lsls	r5, r1
 8000678:	fa1f fe8c 	uxth.w	lr, ip
 800067c:	431d      	orrs	r5, r3
 800067e:	fa00 f301 	lsl.w	r3, r0, r1
 8000682:	fb08 f00e 	mul.w	r0, r8, lr
 8000686:	0c2c      	lsrs	r4, r5, #16
 8000688:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800068c:	42a0      	cmp	r0, r4
 800068e:	fa02 f201 	lsl.w	r2, r2, r1
 8000692:	d90b      	bls.n	80006ac <__udivmoddi4+0x1b8>
 8000694:	eb1c 0404 	adds.w	r4, ip, r4
 8000698:	f108 3aff 	add.w	sl, r8, #4294967295
 800069c:	f080 8088 	bcs.w	80007b0 <__udivmoddi4+0x2bc>
 80006a0:	42a0      	cmp	r0, r4
 80006a2:	f240 8085 	bls.w	80007b0 <__udivmoddi4+0x2bc>
 80006a6:	f1a8 0802 	sub.w	r8, r8, #2
 80006aa:	4464      	add	r4, ip
 80006ac:	1a24      	subs	r4, r4, r0
 80006ae:	fbb4 f0f9 	udiv	r0, r4, r9
 80006b2:	fb09 4410 	mls	r4, r9, r0, r4
 80006b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ba:	b2ad      	uxth	r5, r5
 80006bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80006c0:	45a6      	cmp	lr, r4
 80006c2:	d908      	bls.n	80006d6 <__udivmoddi4+0x1e2>
 80006c4:	eb1c 0404 	adds.w	r4, ip, r4
 80006c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80006cc:	d26c      	bcs.n	80007a8 <__udivmoddi4+0x2b4>
 80006ce:	45a6      	cmp	lr, r4
 80006d0:	d96a      	bls.n	80007a8 <__udivmoddi4+0x2b4>
 80006d2:	3802      	subs	r0, #2
 80006d4:	4464      	add	r4, ip
 80006d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006da:	fba0 9502 	umull	r9, r5, r0, r2
 80006de:	eba4 040e 	sub.w	r4, r4, lr
 80006e2:	42ac      	cmp	r4, r5
 80006e4:	46c8      	mov	r8, r9
 80006e6:	46ae      	mov	lr, r5
 80006e8:	d356      	bcc.n	8000798 <__udivmoddi4+0x2a4>
 80006ea:	d053      	beq.n	8000794 <__udivmoddi4+0x2a0>
 80006ec:	2e00      	cmp	r6, #0
 80006ee:	d069      	beq.n	80007c4 <__udivmoddi4+0x2d0>
 80006f0:	ebb3 0208 	subs.w	r2, r3, r8
 80006f4:	eb64 040e 	sbc.w	r4, r4, lr
 80006f8:	fa22 f301 	lsr.w	r3, r2, r1
 80006fc:	fa04 f707 	lsl.w	r7, r4, r7
 8000700:	431f      	orrs	r7, r3
 8000702:	40cc      	lsrs	r4, r1
 8000704:	e9c6 7400 	strd	r7, r4, [r6]
 8000708:	2100      	movs	r1, #0
 800070a:	e747      	b.n	800059c <__udivmoddi4+0xa8>
 800070c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000710:	f1c2 0120 	rsb	r1, r2, #32
 8000714:	fa25 f301 	lsr.w	r3, r5, r1
 8000718:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800071c:	fa20 f101 	lsr.w	r1, r0, r1
 8000720:	4095      	lsls	r5, r2
 8000722:	430d      	orrs	r5, r1
 8000724:	fbb3 f1f7 	udiv	r1, r3, r7
 8000728:	fb07 3311 	mls	r3, r7, r1, r3
 800072c:	fa1f fe8c 	uxth.w	lr, ip
 8000730:	0c28      	lsrs	r0, r5, #16
 8000732:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000736:	fb01 f30e 	mul.w	r3, r1, lr
 800073a:	4283      	cmp	r3, r0
 800073c:	fa04 f402 	lsl.w	r4, r4, r2
 8000740:	d908      	bls.n	8000754 <__udivmoddi4+0x260>
 8000742:	eb1c 0000 	adds.w	r0, ip, r0
 8000746:	f101 38ff 	add.w	r8, r1, #4294967295
 800074a:	d22f      	bcs.n	80007ac <__udivmoddi4+0x2b8>
 800074c:	4283      	cmp	r3, r0
 800074e:	d92d      	bls.n	80007ac <__udivmoddi4+0x2b8>
 8000750:	3902      	subs	r1, #2
 8000752:	4460      	add	r0, ip
 8000754:	1ac0      	subs	r0, r0, r3
 8000756:	fbb0 f3f7 	udiv	r3, r0, r7
 800075a:	fb07 0013 	mls	r0, r7, r3, r0
 800075e:	b2ad      	uxth	r5, r5
 8000760:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000764:	fb03 f00e 	mul.w	r0, r3, lr
 8000768:	42a8      	cmp	r0, r5
 800076a:	d908      	bls.n	800077e <__udivmoddi4+0x28a>
 800076c:	eb1c 0505 	adds.w	r5, ip, r5
 8000770:	f103 38ff 	add.w	r8, r3, #4294967295
 8000774:	d216      	bcs.n	80007a4 <__udivmoddi4+0x2b0>
 8000776:	42a8      	cmp	r0, r5
 8000778:	d914      	bls.n	80007a4 <__udivmoddi4+0x2b0>
 800077a:	3b02      	subs	r3, #2
 800077c:	4465      	add	r5, ip
 800077e:	1a28      	subs	r0, r5, r0
 8000780:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000784:	e738      	b.n	80005f8 <__udivmoddi4+0x104>
 8000786:	4631      	mov	r1, r6
 8000788:	4630      	mov	r0, r6
 800078a:	e707      	b.n	800059c <__udivmoddi4+0xa8>
 800078c:	462f      	mov	r7, r5
 800078e:	e6e4      	b.n	800055a <__udivmoddi4+0x66>
 8000790:	4618      	mov	r0, r3
 8000792:	e6f9      	b.n	8000588 <__udivmoddi4+0x94>
 8000794:	454b      	cmp	r3, r9
 8000796:	d2a9      	bcs.n	80006ec <__udivmoddi4+0x1f8>
 8000798:	ebb9 0802 	subs.w	r8, r9, r2
 800079c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80007a0:	3801      	subs	r0, #1
 80007a2:	e7a3      	b.n	80006ec <__udivmoddi4+0x1f8>
 80007a4:	4643      	mov	r3, r8
 80007a6:	e7ea      	b.n	800077e <__udivmoddi4+0x28a>
 80007a8:	4628      	mov	r0, r5
 80007aa:	e794      	b.n	80006d6 <__udivmoddi4+0x1e2>
 80007ac:	4641      	mov	r1, r8
 80007ae:	e7d1      	b.n	8000754 <__udivmoddi4+0x260>
 80007b0:	46d0      	mov	r8, sl
 80007b2:	e77b      	b.n	80006ac <__udivmoddi4+0x1b8>
 80007b4:	4464      	add	r4, ip
 80007b6:	3802      	subs	r0, #2
 80007b8:	e747      	b.n	800064a <__udivmoddi4+0x156>
 80007ba:	3b02      	subs	r3, #2
 80007bc:	4465      	add	r5, ip
 80007be:	e72f      	b.n	8000620 <__udivmoddi4+0x12c>
 80007c0:	4608      	mov	r0, r1
 80007c2:	e706      	b.n	80005d2 <__udivmoddi4+0xde>
 80007c4:	4631      	mov	r1, r6
 80007c6:	e6e9      	b.n	800059c <__udivmoddi4+0xa8>

080007c8 <__aeabi_idiv0>:
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b50      	ldr	r3, [pc, #320]	; (8000924 <MX_GPIO_Init+0x158>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a4f      	ldr	r2, [pc, #316]	; (8000924 <MX_GPIO_Init+0x158>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	61d3      	str	r3, [r2, #28]
 80007ee:	4b4d      	ldr	r3, [pc, #308]	; (8000924 <MX_GPIO_Init+0x158>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	4b4a      	ldr	r3, [pc, #296]	; (8000924 <MX_GPIO_Init+0x158>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	4a49      	ldr	r2, [pc, #292]	; (8000924 <MX_GPIO_Init+0x158>)
 8000800:	f043 0320 	orr.w	r3, r3, #32
 8000804:	61d3      	str	r3, [r2, #28]
 8000806:	4b47      	ldr	r3, [pc, #284]	; (8000924 <MX_GPIO_Init+0x158>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	f003 0320 	and.w	r3, r3, #32
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b44      	ldr	r3, [pc, #272]	; (8000924 <MX_GPIO_Init+0x158>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	4a43      	ldr	r2, [pc, #268]	; (8000924 <MX_GPIO_Init+0x158>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	61d3      	str	r3, [r2, #28]
 800081e:	4b41      	ldr	r3, [pc, #260]	; (8000924 <MX_GPIO_Init+0x158>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b3e      	ldr	r3, [pc, #248]	; (8000924 <MX_GPIO_Init+0x158>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	4a3d      	ldr	r2, [pc, #244]	; (8000924 <MX_GPIO_Init+0x158>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	61d3      	str	r3, [r2, #28]
 8000836:	4b3b      	ldr	r3, [pc, #236]	; (8000924 <MX_GPIO_Init+0x158>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	4b38      	ldr	r3, [pc, #224]	; (8000924 <MX_GPIO_Init+0x158>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a37      	ldr	r2, [pc, #220]	; (8000924 <MX_GPIO_Init+0x158>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	61d3      	str	r3, [r2, #28]
 800084e:	4b35      	ldr	r3, [pc, #212]	; (8000924 <MX_GPIO_Init+0x158>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L_D1_Pin|Czlon4_D1_Pin|Czlon3_D2_Pin|Czlon2_D2_Pin
 800085a:	2200      	movs	r2, #0
 800085c:	f241 51e4 	movw	r1, #5604	; 0x15e4
 8000860:	4831      	ldr	r0, [pc, #196]	; (8000928 <MX_GPIO_Init+0x15c>)
 8000862:	f001 fa99 	bl	8001d98 <HAL_GPIO_WritePin>
                          |Czlon3_D1_Pin|L_D2_Pin|R_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Czlon1_D2_Pin|Czlon2_D1_Pin|Czlon5_D1_Pin
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 800086c:	482f      	ldr	r0, [pc, #188]	; (800092c <MX_GPIO_Init+0x160>)
 800086e:	f001 fa93 	bl	8001d98 <HAL_GPIO_WritePin>
                          |Czlon4_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|CSN_Pin|Czlon1_D1_Pin|Czlon5_D2_Pin
 8000872:	2200      	movs	r2, #0
 8000874:	f241 4136 	movw	r1, #5174	; 0x1436
 8000878:	482d      	ldr	r0, [pc, #180]	; (8000930 <MX_GPIO_Init+0x164>)
 800087a:	f001 fa8d 	bl	8001d98 <HAL_GPIO_WritePin>
                          |Podstawa_D2_Pin|Podstawa_D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R_D1_GPIO_Port, R_D1_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2104      	movs	r1, #4
 8000882:	482c      	ldr	r0, [pc, #176]	; (8000934 <MX_GPIO_Init+0x168>)
 8000884:	f001 fa88 	bl	8001d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	4822      	ldr	r0, [pc, #136]	; (8000928 <MX_GPIO_Init+0x15c>)
 80008a0:	f001 f8ea 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = L_D1_Pin|Czlon4_D1_Pin|Czlon3_D2_Pin|Czlon2_D2_Pin
 80008a4:	f241 53e4 	movw	r3, #5604	; 0x15e4
 80008a8:	617b      	str	r3, [r7, #20]
                          |Czlon3_D1_Pin|L_D2_Pin|R_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	481a      	ldr	r0, [pc, #104]	; (8000928 <MX_GPIO_Init+0x15c>)
 80008be:	f001 f8db 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Czlon1_D2_Pin|Czlon2_D1_Pin|Czlon5_D1_Pin
 80008c2:	f44f 53d9 	mov.w	r3, #6944	; 0x1b20
 80008c6:	617b      	str	r3, [r7, #20]
                          |Czlon4_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4814      	ldr	r0, [pc, #80]	; (800092c <MX_GPIO_Init+0x160>)
 80008dc:	f001 f8cc 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin|Czlon1_D1_Pin|Czlon5_D2_Pin
 80008e0:	f241 4336 	movw	r3, #5174	; 0x1436
 80008e4:	617b      	str	r3, [r7, #20]
                          |Podstawa_D2_Pin|Podstawa_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_GPIO_Init+0x164>)
 80008fa:	f001 f8bd 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = R_D1_Pin;
 80008fe:	2304      	movs	r3, #4
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R_D1_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	4807      	ldr	r0, [pc, #28]	; (8000934 <MX_GPIO_Init+0x168>)
 8000916:	f001 f8af 	bl	8001a78 <HAL_GPIO_Init>

}
 800091a:	bf00      	nop
 800091c:	3728      	adds	r7, #40	; 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40020800 	.word	0x40020800
 800092c:	40020000 	.word	0x40020000
 8000930:	40020400 	.word	0x40020400
 8000934:	40020c00 	.word	0x40020c00

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093e:	f000 ff48 	bl	80017d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000942:	f000 f8c9 	bl	8000ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000946:	f7ff ff41 	bl	80007cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800094a:	f000 feaf 	bl	80016ac <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800094e:	f000 fb5f 	bl	8001010 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000952:	f000 fc35 	bl	80011c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000956:	f000 fcbd 	bl	80012d4 <MX_TIM4_Init>
  MX_TIM5_Init();
 800095a:	f000 fd4f 	bl	80013fc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800095e:	2100      	movs	r1, #0
 8000960:	4854      	ldr	r0, [pc, #336]	; (8000ab4 <main+0x17c>)
 8000962:	f002 f937 	bl	8002bd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000966:	2104      	movs	r1, #4
 8000968:	4852      	ldr	r0, [pc, #328]	; (8000ab4 <main+0x17c>)
 800096a:	f002 f933 	bl	8002bd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800096e:	2108      	movs	r1, #8
 8000970:	4850      	ldr	r0, [pc, #320]	; (8000ab4 <main+0x17c>)
 8000972:	f002 f92f 	bl	8002bd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000976:	210c      	movs	r1, #12
 8000978:	484e      	ldr	r0, [pc, #312]	; (8000ab4 <main+0x17c>)
 800097a:	f002 f92b 	bl	8002bd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800097e:	2100      	movs	r1, #0
 8000980:	484d      	ldr	r0, [pc, #308]	; (8000ab8 <main+0x180>)
 8000982:	f002 f927 	bl	8002bd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000986:	2104      	movs	r1, #4
 8000988:	484b      	ldr	r0, [pc, #300]	; (8000ab8 <main+0x180>)
 800098a:	f002 f923 	bl	8002bd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800098e:	2108      	movs	r1, #8
 8000990:	4849      	ldr	r0, [pc, #292]	; (8000ab8 <main+0x180>)
 8000992:	f002 f91f 	bl	8002bd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000996:	2104      	movs	r1, #4
 8000998:	4848      	ldr	r0, [pc, #288]	; (8000abc <main+0x184>)
 800099a:	f002 f91b 	bl	8002bd4 <HAL_TIM_PWM_Start>
  time = HAL_GetTick();
 800099e:	f000 ff7d 	bl	800189c <HAL_GetTick>
 80009a2:	4603      	mov	r3, r0
 80009a4:	4a46      	ldr	r2, [pc, #280]	; (8000ac0 <main+0x188>)
 80009a6:	6013      	str	r3, [r2, #0]
  timereset = HAL_GetTick();
 80009a8:	f000 ff78 	bl	800189c <HAL_GetTick>
 80009ac:	4603      	mov	r3, r0
 80009ae:	4a45      	ldr	r2, [pc, #276]	; (8000ac4 <main+0x18c>)
 80009b0:	6013      	str	r3, [r2, #0]
  stoppodst();
 80009b2:	f000 fa8f 	bl	8000ed4 <stoppodst>
  stopczlon5();
 80009b6:	f000 faeb 	bl	8000f90 <stopczlon5>
  stopczlon1();
 80009ba:	f000 fa9b 	bl	8000ef4 <stopczlon1>
  stopczlon2();
 80009be:	f000 faad 	bl	8000f1c <stopczlon2>
  stopczlon3();
 80009c2:	f000 fabf 	bl	8000f44 <stopczlon3>
  stopczlon4();
 80009c6:	f000 facf 	bl	8000f68 <stopczlon4>
  stopLmotorF();
 80009ca:	f000 faf5 	bl	8000fb8 <stopLmotorF>
  stopRmotorF();
 80009ce:	f000 fb05 	bl	8000fdc <stopRmotorF>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    if (HAL_UART_Receive(&huart2, uartData, 4, HAL_MAX_DELAY) == HAL_OK)
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
 80009d6:	2204      	movs	r2, #4
 80009d8:	493b      	ldr	r1, [pc, #236]	; (8000ac8 <main+0x190>)
 80009da:	483c      	ldr	r0, [pc, #240]	; (8000acc <main+0x194>)
 80009dc:	f002 fde8 	bl	80035b0 <HAL_UART_Receive>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d147      	bne.n	8000a76 <main+0x13e>
    {
      if (uartData[0] == START_BYTE)
 80009e6:	4b38      	ldr	r3, [pc, #224]	; (8000ac8 <main+0x190>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b2a      	cmp	r3, #42	; 0x2a
 80009ec:	d143      	bne.n	8000a76 <main+0x13e>
      {
        uint8_t lpwm = uartData[1];
 80009ee:	4b36      	ldr	r3, [pc, #216]	; (8000ac8 <main+0x190>)
 80009f0:	785b      	ldrb	r3, [r3, #1]
 80009f2:	71fb      	strb	r3, [r7, #7]
        uint8_t rpwm = uartData[2];
 80009f4:	4b34      	ldr	r3, [pc, #208]	; (8000ac8 <main+0x190>)
 80009f6:	789b      	ldrb	r3, [r3, #2]
 80009f8:	71bb      	strb	r3, [r7, #6]
        uint8_t checksum = uartData[3];
 80009fa:	4b33      	ldr	r3, [pc, #204]	; (8000ac8 <main+0x190>)
 80009fc:	78db      	ldrb	r3, [r3, #3]
 80009fe:	717b      	strb	r3, [r7, #5]

        if (checksum == (lpwm + rpwm + START_BYTE))
 8000a00:	797a      	ldrb	r2, [r7, #5]
 8000a02:	79f9      	ldrb	r1, [r7, #7]
 8000a04:	79bb      	ldrb	r3, [r7, #6]
 8000a06:	440b      	add	r3, r1
 8000a08:	332a      	adds	r3, #42	; 0x2a
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d133      	bne.n	8000a76 <main+0x13e>
        {
          pwmLeft = map(lpwm, 32, 127, -1000, 1000);
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	b298      	uxth	r0, r3
 8000a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8000a1c:	227f      	movs	r2, #127	; 0x7f
 8000a1e:	2120      	movs	r1, #32
 8000a20:	f000 f8a8 	bl	8000b74 <map>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fc5e 	bl	80002e8 <__aeabi_ui2f>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4a28      	ldr	r2, [pc, #160]	; (8000ad0 <main+0x198>)
 8000a30:	6013      	str	r3, [r2, #0]
          pwmRight = map(rpwm, 32, 127, -1000, 1000);
 8000a32:	79bb      	ldrb	r3, [r7, #6]
 8000a34:	b298      	uxth	r0, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8000a40:	227f      	movs	r2, #127	; 0x7f
 8000a42:	2120      	movs	r1, #32
 8000a44:	f000 f896 	bl	8000b74 <map>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fc4c 	bl	80002e8 <__aeabi_ui2f>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4a20      	ldr	r2, [pc, #128]	; (8000ad4 <main+0x19c>)
 8000a54:	6013      	str	r3, [r2, #0]

          rightside();
 8000a56:	f000 f92f 	bl	8000cb8 <rightside>
          leftside();
 8000a5a:	f000 f96d 	bl	8000d38 <leftside>
          motor5control();
 8000a5e:	f000 fa1f 	bl	8000ea0 <motor5control>
          motor4control();
 8000a62:	f000 fa05 	bl	8000e70 <motor4control>
          motor3control();
 8000a66:	f000 f9ed 	bl	8000e44 <motor3control>
          motor2control();
 8000a6a:	f000 f9d3 	bl	8000e14 <motor2control>
          motor1control();
 8000a6e:	f000 f9b7 	bl	8000de0 <motor1control>
          motor0control();
 8000a72:	f000 f99f 	bl	8000db4 <motor0control>
        }
      }
    }

    if (HAL_GetTick() - timereset > 500)
 8000a76:	f000 ff11 	bl	800189c <HAL_GetTick>
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <main+0x18c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a86:	d90f      	bls.n	8000aa8 <main+0x170>
    {
      stoppodst();
 8000a88:	f000 fa24 	bl	8000ed4 <stoppodst>
      stopczlon5();
 8000a8c:	f000 fa80 	bl	8000f90 <stopczlon5>
      stopczlon1();
 8000a90:	f000 fa30 	bl	8000ef4 <stopczlon1>
      stopczlon2();
 8000a94:	f000 fa42 	bl	8000f1c <stopczlon2>
      stopczlon3();
 8000a98:	f000 fa54 	bl	8000f44 <stopczlon3>
      stopczlon4();
 8000a9c:	f000 fa64 	bl	8000f68 <stopczlon4>
      stopLmotorF();
 8000aa0:	f000 fa8a 	bl	8000fb8 <stopLmotorF>
      stopRmotorF();
 8000aa4:	f000 fa9a 	bl	8000fdc <stopRmotorF>
 8000aa8:	2300      	movs	r3, #0
    }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200000d8 	.word	0x200000d8
 8000ab8:	20000098 	.word	0x20000098
 8000abc:	20000118 	.word	0x20000118
 8000ac0:	20000038 	.word	0x20000038
 8000ac4:	2000003c 	.word	0x2000003c
 8000ac8:	2000002c 	.word	0x2000002c
 8000acc:	20000158 	.word	0x20000158
 8000ad0:	20000034 	.word	0x20000034
 8000ad4:	20000030 	.word	0x20000030

08000ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b092      	sub	sp, #72	; 0x48
 8000adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	2234      	movs	r2, #52	; 0x34
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 ff6a 	bl	80039c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aec:	463b      	mov	r3, r7
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000afa:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <SystemClock_Config+0x98>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000b02:	4a1b      	ldr	r2, [pc, #108]	; (8000b70 <SystemClock_Config+0x98>)
 8000b04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b08:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b12:	2310      	movs	r3, #16
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b16:	2302      	movs	r3, #2
 8000b18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000b1e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000b22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000b24:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000b28:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 f94a 	bl	8001dc8 <HAL_RCC_OscConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b3a:	f000 fa63 	bl	8001004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3e:	230f      	movs	r3, #15
 8000b40:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b42:	2303      	movs	r3, #3
 8000b44:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b52:	463b      	mov	r3, r7
 8000b54:	2101      	movs	r1, #1
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 fc66 	bl	8002428 <HAL_RCC_ClockConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b62:	f000 fa4f 	bl	8001004 <Error_Handler>
  }
}
 8000b66:	bf00      	nop
 8000b68:	3748      	adds	r7, #72	; 0x48
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40007000 	.word	0x40007000

08000b74 <map>:

/* USER CODE BEGIN 4 */
uint16_t map(uint16_t input_value, uint16_t minRange, uint16_t maxRange, uint16_t New_minRange, uint16_t New_maxRange)
{
 8000b74:	b490      	push	{r4, r7}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	4611      	mov	r1, r2
 8000b80:	461a      	mov	r2, r3
 8000b82:	4623      	mov	r3, r4
 8000b84:	80fb      	strh	r3, [r7, #6]
 8000b86:	4603      	mov	r3, r0
 8000b88:	80bb      	strh	r3, [r7, #4]
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	807b      	strh	r3, [r7, #2]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	803b      	strh	r3, [r7, #0]
  return (((input_value - minRange) * (New_maxRange - New_minRange)) / (maxRange - minRange) + New_minRange);
 8000b92:	88fa      	ldrh	r2, [r7, #6]
 8000b94:	88bb      	ldrh	r3, [r7, #4]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	8a39      	ldrh	r1, [r7, #16]
 8000b9a:	883a      	ldrh	r2, [r7, #0]
 8000b9c:	1a8a      	subs	r2, r1, r2
 8000b9e:	fb03 f202 	mul.w	r2, r3, r2
 8000ba2:	8879      	ldrh	r1, [r7, #2]
 8000ba4:	88bb      	ldrh	r3, [r7, #4]
 8000ba6:	1acb      	subs	r3, r1, r3
 8000ba8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	883b      	ldrh	r3, [r7, #0]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	b29b      	uxth	r3, r3
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc90      	pop	{r4, r7}
 8000bbc:	4770      	bx	lr
	...

08000bc0 <PWMval>:

void PWMval(uint8_t ch, uint16_t val)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	460a      	mov	r2, r1
 8000bca:	71fb      	strb	r3, [r7, #7]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	80bb      	strh	r3, [r7, #4]
  switch (ch)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	2b07      	cmp	r3, #7
 8000bd4:	d83a      	bhi.n	8000c4c <PWMval+0x8c>
 8000bd6:	a201      	add	r2, pc, #4	; (adr r2, 8000bdc <PWMval+0x1c>)
 8000bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bdc:	08000bfd 	.word	0x08000bfd
 8000be0:	08000c07 	.word	0x08000c07
 8000be4:	08000c11 	.word	0x08000c11
 8000be8:	08000c1b 	.word	0x08000c1b
 8000bec:	08000c25 	.word	0x08000c25
 8000bf0:	08000c2f 	.word	0x08000c2f
 8000bf4:	08000c39 	.word	0x08000c39
 8000bf8:	08000c43 	.word	0x08000c43
  {
  case 0:
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, val);
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <PWMval+0x98>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	88ba      	ldrh	r2, [r7, #4]
 8000c02:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 8000c04:	e022      	b.n	8000c4c <PWMval+0x8c>
  case 1:
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, val);
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <PWMval+0x98>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	88ba      	ldrh	r2, [r7, #4]
 8000c0c:	639a      	str	r2, [r3, #56]	; 0x38
    break;
 8000c0e:	e01d      	b.n	8000c4c <PWMval+0x8c>
  case 2:
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, val);
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <PWMval+0x98>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	88ba      	ldrh	r2, [r7, #4]
 8000c16:	63da      	str	r2, [r3, #60]	; 0x3c
    break;
 8000c18:	e018      	b.n	8000c4c <PWMval+0x8c>
  case 3:
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, val);
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <PWMval+0x98>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	88ba      	ldrh	r2, [r7, #4]
 8000c20:	641a      	str	r2, [r3, #64]	; 0x40
    break;
 8000c22:	e013      	b.n	8000c4c <PWMval+0x8c>
  case 4:
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, val);
 8000c24:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <PWMval+0x9c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	88ba      	ldrh	r2, [r7, #4]
 8000c2a:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 8000c2c:	e00e      	b.n	8000c4c <PWMval+0x8c>
  case 5:
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, val);
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <PWMval+0x9c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	88ba      	ldrh	r2, [r7, #4]
 8000c34:	639a      	str	r2, [r3, #56]	; 0x38
    break;
 8000c36:	e009      	b.n	8000c4c <PWMval+0x8c>
  case 6:
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, val);
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <PWMval+0x9c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	88ba      	ldrh	r2, [r7, #4]
 8000c3e:	63da      	str	r2, [r3, #60]	; 0x3c
    break;
 8000c40:	e004      	b.n	8000c4c <PWMval+0x8c>
  case 7:
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, val);
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <PWMval+0xa0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	88ba      	ldrh	r2, [r7, #4]
 8000c48:	639a      	str	r2, [r3, #56]	; 0x38
    break;
 8000c4a:	bf00      	nop
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	200000d8 	.word	0x200000d8
 8000c5c:	20000098 	.word	0x20000098
 8000c60:	20000118 	.word	0x20000118

08000c64 <motorControl>:
    break;
  }
}

void motorControl(uint8_t motor, GPIO_TypeDef* dirPort1, uint16_t dirPin1, GPIO_TypeDef* dirPort2, uint16_t dirPin2, uint16_t pwmChannel, uint16_t pwmValue)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4603      	mov	r3, r0
 8000c70:	73fb      	strb	r3, [r7, #15]
 8000c72:	4613      	mov	r3, r2
 8000c74:	81bb      	strh	r3, [r7, #12]
  if (pwmValue > 50) {
 8000c76:	8c3b      	ldrh	r3, [r7, #32]
 8000c78:	2b32      	cmp	r3, #50	; 0x32
 8000c7a:	d913      	bls.n	8000ca4 <motorControl+0x40>
    HAL_GPIO_WritePin(dirPort1, dirPin1, GPIO_PIN_RESET);
 8000c7c:	89bb      	ldrh	r3, [r7, #12]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	4619      	mov	r1, r3
 8000c82:	68b8      	ldr	r0, [r7, #8]
 8000c84:	f001 f888 	bl	8001d98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(dirPort2, dirPin2, GPIO_PIN_SET);
 8000c88:	8b3b      	ldrh	r3, [r7, #24]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f001 f882 	bl	8001d98 <HAL_GPIO_WritePin>
    PWMval(pwmChannel, pwmValue);
 8000c94:	8bbb      	ldrh	r3, [r7, #28]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	8c3a      	ldrh	r2, [r7, #32]
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff8f 	bl	8000bc0 <PWMval>
  else
  {
	  PWMval(pwmChannel, 0);
  }

}
 8000ca2:	e005      	b.n	8000cb0 <motorControl+0x4c>
	  PWMval(pwmChannel, 0);
 8000ca4:	8bbb      	ldrh	r3, [r7, #28]
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff88 	bl	8000bc0 <PWMval>
}
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <rightside>:

void rightside()
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af04      	add	r7, sp, #16
  float targetPwm = pwmRight; // Ensure pwmRight and targetPwm are defined and used correctly
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <rightside+0x70>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	607b      	str	r3, [r7, #4]
  pwmRight += (targetPwm > pwmRight) ? step : -step;
 8000cc4:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <rightside+0x70>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff fbd0 	bl	8000470 <__aeabi_fcmpgt>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d002      	beq.n	8000cdc <rightside+0x24>
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <rightside+0x74>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	e003      	b.n	8000ce4 <rightside+0x2c>
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <rightside+0x74>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000ce4:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <rightside+0x70>)
 8000ce6:	6812      	ldr	r2, [r2, #0]
 8000ce8:	4611      	mov	r1, r2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fa4c 	bl	8000188 <__addsf3>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <rightside+0x70>)
 8000cf6:	601a      	str	r2, [r3, #0]
  motorControl(6, R_D1_GPIO_Port, R_D1_Pin, R_D2_GPIO_Port, R_D2_Pin, 6, pwmRight);
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <rightside+0x70>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fbc1 	bl	8000484 <__aeabi_f2uiz>
 8000d02:	4603      	mov	r3, r0
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	9302      	str	r3, [sp, #8]
 8000d08:	2306      	movs	r3, #6
 8000d0a:	9301      	str	r3, [sp, #4]
 8000d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <rightside+0x78>)
 8000d14:	2204      	movs	r2, #4
 8000d16:	4907      	ldr	r1, [pc, #28]	; (8000d34 <rightside+0x7c>)
 8000d18:	2006      	movs	r0, #6
 8000d1a:	f7ff ffa3 	bl	8000c64 <motorControl>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000030 	.word	0x20000030
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	40020800 	.word	0x40020800
 8000d34:	40020c00 	.word	0x40020c00

08000d38 <leftside>:

void leftside()
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af04      	add	r7, sp, #16
  float targetPwm = pwmLeft; // Ensure pwmLeft and targetPwm are defined and used correctly
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <leftside+0x70>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	607b      	str	r3, [r7, #4]
  pwmLeft += (targetPwm > pwmLeft) ? step : -step;
 8000d44:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <leftside+0x70>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff fb90 	bl	8000470 <__aeabi_fcmpgt>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d002      	beq.n	8000d5c <leftside+0x24>
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <leftside+0x74>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	e003      	b.n	8000d64 <leftside+0x2c>
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <leftside+0x74>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000d64:	4a10      	ldr	r2, [pc, #64]	; (8000da8 <leftside+0x70>)
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fa0c 	bl	8000188 <__addsf3>
 8000d70:	4603      	mov	r3, r0
 8000d72:	461a      	mov	r2, r3
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <leftside+0x70>)
 8000d76:	601a      	str	r2, [r3, #0]
  motorControl(7, L_D1_GPIO_Port, L_D1_Pin, L_D2_GPIO_Port, L_D2_Pin, 7, pwmLeft);
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <leftside+0x70>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fb81 	bl	8000484 <__aeabi_f2uiz>
 8000d82:	4603      	mov	r3, r0
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	9302      	str	r3, [sp, #8]
 8000d88:	2307      	movs	r3, #7
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <leftside+0x78>)
 8000d94:	2204      	movs	r2, #4
 8000d96:	4906      	ldr	r1, [pc, #24]	; (8000db0 <leftside+0x78>)
 8000d98:	2007      	movs	r0, #7
 8000d9a:	f7ff ff63 	bl	8000c64 <motorControl>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000034 	.word	0x20000034
 8000dac:	20000000 	.word	0x20000000
 8000db0:	40020800 	.word	0x40020800

08000db4 <motor0control>:

void motor0control() { motorControl(0, Podstawa_D1_GPIO_Port, Podstawa_D1_Pin, Podstawa_D2_GPIO_Port, Podstawa_D2_Pin, 0, 1000); }
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af04      	add	r7, sp, #16
 8000dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbe:	9302      	str	r3, [sp, #8]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	9301      	str	r3, [sp, #4]
 8000dc4:	2310      	movs	r3, #16
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <motor0control+0x28>)
 8000dca:	2220      	movs	r2, #32
 8000dcc:	4903      	ldr	r1, [pc, #12]	; (8000ddc <motor0control+0x28>)
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f7ff ff48 	bl	8000c64 <motorControl>
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40020400 	.word	0x40020400

08000de0 <motor1control>:
void motor1control() { motorControl(1, Czlon1_D1_GPIO_Port, Czlon1_D1_Pin, Czlon1_D2_GPIO_Port, Czlon1_D2_Pin, 1, 1000); }
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af04      	add	r7, sp, #16
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	9302      	str	r3, [sp, #8]
 8000dec:	2301      	movs	r3, #1
 8000dee:	9301      	str	r3, [sp, #4]
 8000df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <motor1control+0x2c>)
 8000df8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dfc:	4904      	ldr	r1, [pc, #16]	; (8000e10 <motor1control+0x30>)
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f7ff ff30 	bl	8000c64 <motorControl>
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40020000 	.word	0x40020000
 8000e10:	40020400 	.word	0x40020400

08000e14 <motor2control>:
void motor2control() { motorControl(2, Czlon2_D1_GPIO_Port, Czlon2_D1_Pin, Czlon2_D2_GPIO_Port, Czlon2_D2_Pin, 2, 1000); }
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af04      	add	r7, sp, #16
 8000e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1e:	9302      	str	r3, [sp, #8]
 8000e20:	2302      	movs	r3, #2
 8000e22:	9301      	str	r3, [sp, #4]
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <motor2control+0x28>)
 8000e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e2e:	4904      	ldr	r1, [pc, #16]	; (8000e40 <motor2control+0x2c>)
 8000e30:	2002      	movs	r0, #2
 8000e32:	f7ff ff17 	bl	8000c64 <motorControl>
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40020800 	.word	0x40020800
 8000e40:	40020000 	.word	0x40020000

08000e44 <motor3control>:
void motor3control() { motorControl(3, Czlon3_D1_GPIO_Port, Czlon3_D1_Pin, Czlon3_D2_GPIO_Port, Czlon3_D2_Pin, 3, 1000); }
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af04      	add	r7, sp, #16
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	9302      	str	r3, [sp, #8]
 8000e50:	2303      	movs	r3, #3
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	2340      	movs	r3, #64	; 0x40
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <motor3control+0x28>)
 8000e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e5e:	4903      	ldr	r1, [pc, #12]	; (8000e6c <motor3control+0x28>)
 8000e60:	2003      	movs	r0, #3
 8000e62:	f7ff feff 	bl	8000c64 <motorControl>
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40020800 	.word	0x40020800

08000e70 <motor4control>:
void motor4control() { motorControl(4, Czlon4_D1_GPIO_Port, Czlon4_D1_Pin, Czlon4_D2_GPIO_Port, Czlon4_D2_Pin, 4, 1000); }
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af04      	add	r7, sp, #16
 8000e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7a:	9302      	str	r3, [sp, #8]
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <motor4control+0x28>)
 8000e88:	2220      	movs	r2, #32
 8000e8a:	4904      	ldr	r1, [pc, #16]	; (8000e9c <motor4control+0x2c>)
 8000e8c:	2004      	movs	r0, #4
 8000e8e:	f7ff fee9 	bl	8000c64 <motorControl>
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	40020800 	.word	0x40020800

08000ea0 <motor5control>:
void motor5control() { motorControl(5, Czlon5_D1_GPIO_Port, Czlon5_D1_Pin, Czlon5_D2_GPIO_Port, Czlon5_D2_Pin, 5, 1000); }
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af04      	add	r7, sp, #16
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	9302      	str	r3, [sp, #8]
 8000eac:	2305      	movs	r3, #5
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <motor5control+0x2c>)
 8000eb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ebc:	4904      	ldr	r1, [pc, #16]	; (8000ed0 <motor5control+0x30>)
 8000ebe:	2005      	movs	r0, #5
 8000ec0:	f7ff fed0 	bl	8000c64 <motorControl>
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40020400 	.word	0x40020400
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <stoppodst>:

void stoppodst() { HAL_GPIO_WritePin(Podstawa_D1_GPIO_Port, Podstawa_D1_Pin, GPIO_PIN_SET); HAL_GPIO_WritePin(Podstawa_D2_GPIO_Port, Podstawa_D2_Pin, GPIO_PIN_SET); }
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2120      	movs	r1, #32
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <stoppodst+0x1c>)
 8000ede:	f000 ff5b 	bl	8001d98 <HAL_GPIO_WritePin>
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2110      	movs	r1, #16
 8000ee6:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <stoppodst+0x1c>)
 8000ee8:	f000 ff56 	bl	8001d98 <HAL_GPIO_WritePin>
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40020400 	.word	0x40020400

08000ef4 <stopczlon1>:
void stopczlon1() { HAL_GPIO_WritePin(Czlon1_D1_GPIO_Port, Czlon1_D1_Pin, GPIO_PIN_SET); HAL_GPIO_WritePin(Czlon1_D2_GPIO_Port, Czlon1_D2_Pin, GPIO_PIN_SET); }
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <stopczlon1+0x20>)
 8000f00:	f000 ff4a 	bl	8001d98 <HAL_GPIO_WritePin>
 8000f04:	2201      	movs	r2, #1
 8000f06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f0a:	4803      	ldr	r0, [pc, #12]	; (8000f18 <stopczlon1+0x24>)
 8000f0c:	f000 ff44 	bl	8001d98 <HAL_GPIO_WritePin>
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40020400 	.word	0x40020400
 8000f18:	40020000 	.word	0x40020000

08000f1c <stopczlon2>:
void stopczlon2() { HAL_GPIO_WritePin(Czlon2_D1_GPIO_Port, Czlon2_D1_Pin, GPIO_PIN_SET); HAL_GPIO_WritePin(Czlon2_D2_GPIO_Port, Czlon2_D2_Pin, GPIO_PIN_SET); }
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <stopczlon2+0x20>)
 8000f28:	f000 ff36 	bl	8001d98 <HAL_GPIO_WritePin>
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2180      	movs	r1, #128	; 0x80
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <stopczlon2+0x24>)
 8000f32:	f000 ff31 	bl	8001d98 <HAL_GPIO_WritePin>
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	40020800 	.word	0x40020800

08000f44 <stopczlon3>:
void stopczlon3() { HAL_GPIO_WritePin(Czlon3_D1_GPIO_Port, Czlon3_D1_Pin, GPIO_PIN_SET); HAL_GPIO_WritePin(Czlon3_D2_GPIO_Port, Czlon3_D2_Pin, GPIO_PIN_SET); }
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <stopczlon3+0x20>)
 8000f50:	f000 ff22 	bl	8001d98 <HAL_GPIO_WritePin>
 8000f54:	2201      	movs	r2, #1
 8000f56:	2140      	movs	r1, #64	; 0x40
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <stopczlon3+0x20>)
 8000f5a:	f000 ff1d 	bl	8001d98 <HAL_GPIO_WritePin>
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40020800 	.word	0x40020800

08000f68 <stopczlon4>:
void stopczlon4() { HAL_GPIO_WritePin(Czlon4_D1_GPIO_Port, Czlon4_D1_Pin, GPIO_PIN_SET); HAL_GPIO_WritePin(Czlon4_D2_GPIO_Port, Czlon4_D2_Pin, GPIO_PIN_SET); }
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2120      	movs	r1, #32
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <stopczlon4+0x20>)
 8000f72:	f000 ff11 	bl	8001d98 <HAL_GPIO_WritePin>
 8000f76:	2201      	movs	r2, #1
 8000f78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <stopczlon4+0x24>)
 8000f7e:	f000 ff0b 	bl	8001d98 <HAL_GPIO_WritePin>
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020000 	.word	0x40020000

08000f90 <stopczlon5>:
void stopczlon5() { HAL_GPIO_WritePin(Czlon5_D1_GPIO_Port, Czlon5_D1_Pin, GPIO_PIN_SET); HAL_GPIO_WritePin(Czlon5_D2_GPIO_Port, Czlon5_D2_Pin, GPIO_PIN_SET); }
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	2201      	movs	r2, #1
 8000f96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <stopczlon5+0x20>)
 8000f9c:	f000 fefc 	bl	8001d98 <HAL_GPIO_WritePin>
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa6:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <stopczlon5+0x24>)
 8000fa8:	f000 fef6 	bl	8001d98 <HAL_GPIO_WritePin>
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40020400 	.word	0x40020400

08000fb8 <stopLmotorF>:
void stopLmotorF() { HAL_GPIO_WritePin(L_D1_GPIO_Port, L_D1_Pin, GPIO_PIN_SET); HAL_GPIO_WritePin(L_D2_GPIO_Port, L_D2_Pin, GPIO_PIN_SET); }
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <stopLmotorF+0x20>)
 8000fc2:	f000 fee9 	bl	8001d98 <HAL_GPIO_WritePin>
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <stopLmotorF+0x20>)
 8000fce:	f000 fee3 	bl	8001d98 <HAL_GPIO_WritePin>
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40020800 	.word	0x40020800

08000fdc <stopRmotorF>:
void stopRmotorF() { HAL_GPIO_WritePin(R_D1_GPIO_Port, R_D1_Pin, GPIO_PIN_SET); HAL_GPIO_WritePin(R_D2_GPIO_Port, R_D2_Pin, GPIO_PIN_SET); }
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2104      	movs	r1, #4
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <stopRmotorF+0x20>)
 8000fe6:	f000 fed7 	bl	8001d98 <HAL_GPIO_WritePin>
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff0:	4803      	ldr	r0, [pc, #12]	; (8001000 <stopRmotorF+0x24>)
 8000ff2:	f000 fed1 	bl	8001d98 <HAL_GPIO_WritePin>
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40020c00 	.word	0x40020c00
 8001000:	40020800 	.word	0x40020800

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	e7fe      	b.n	800100c <Error_Handler+0x8>
	...

08001010 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <MX_SPI2_Init+0x64>)
 8001016:	4a18      	ldr	r2, [pc, #96]	; (8001078 <MX_SPI2_Init+0x68>)
 8001018:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <MX_SPI2_Init+0x64>)
 800101c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001020:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <MX_SPI2_Init+0x64>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <MX_SPI2_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_SPI2_Init+0x64>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_SPI2_Init+0x64>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_SPI2_Init+0x64>)
 800103c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001040:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_SPI2_Init+0x64>)
 8001044:	2210      	movs	r2, #16
 8001046:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <MX_SPI2_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_SPI2_Init+0x64>)
 8001050:	2200      	movs	r2, #0
 8001052:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <MX_SPI2_Init+0x64>)
 8001056:	2200      	movs	r2, #0
 8001058:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_SPI2_Init+0x64>)
 800105c:	220a      	movs	r2, #10
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <MX_SPI2_Init+0x64>)
 8001062:	f001 fca7 	bl	80029b4 <HAL_SPI_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800106c:	f7ff ffca 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000040 	.word	0x20000040
 8001078:	40003800 	.word	0x40003800

0800107c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a17      	ldr	r2, [pc, #92]	; (80010f8 <HAL_SPI_MspInit+0x7c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d128      	bne.n	80010f0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_SPI_MspInit+0x80>)
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	4a16      	ldr	r2, [pc, #88]	; (80010fc <HAL_SPI_MspInit+0x80>)
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a8:	6253      	str	r3, [r2, #36]	; 0x24
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_SPI_MspInit+0x80>)
 80010ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_SPI_MspInit+0x80>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4a10      	ldr	r2, [pc, #64]	; (80010fc <HAL_SPI_MspInit+0x80>)
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	61d3      	str	r3, [r2, #28]
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_SPI_MspInit+0x80>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010ce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010e0:	2305      	movs	r3, #5
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <HAL_SPI_MspInit+0x84>)
 80010ec:	f000 fcc4 	bl	8001a78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80010f0:	bf00      	nop
 80010f2:	3728      	adds	r7, #40	; 0x28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40003800 	.word	0x40003800
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020400 	.word	0x40020400

08001104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_MspInit+0x5c>)
 800110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110e:	4a14      	ldr	r2, [pc, #80]	; (8001160 <HAL_MspInit+0x5c>)
 8001110:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001114:	6253      	str	r3, [r2, #36]	; 0x24
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_MspInit+0x5c>)
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <HAL_MspInit+0x5c>)
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <HAL_MspInit+0x5c>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6213      	str	r3, [r2, #32]
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <HAL_MspInit+0x5c>)
 8001130:	6a1b      	ldr	r3, [r3, #32]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_MspInit+0x5c>)
 800113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113e:	4a08      	ldr	r2, [pc, #32]	; (8001160 <HAL_MspInit+0x5c>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	6253      	str	r3, [r2, #36]	; 0x24
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_MspInit+0x5c>)
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001152:	2007      	movs	r0, #7
 8001154:	f000 fc5c 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <NMI_Handler+0x4>

0800116a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <HardFault_Handler+0x4>

08001170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <MemManage_Handler+0x4>

08001176 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <UsageFault_Handler+0x4>

08001182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011aa:	f000 fb65 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
	...

080011c0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c6:	f107 0318 	add.w	r3, r7, #24
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011de:	463b      	mov	r3, r7
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011ea:	4b38      	ldr	r3, [pc, #224]	; (80012cc <MX_TIM3_Init+0x10c>)
 80011ec:	4a38      	ldr	r2, [pc, #224]	; (80012d0 <MX_TIM3_Init+0x110>)
 80011ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 80011f0:	4b36      	ldr	r3, [pc, #216]	; (80012cc <MX_TIM3_Init+0x10c>)
 80011f2:	220f      	movs	r2, #15
 80011f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f6:	4b35      	ldr	r3, [pc, #212]	; (80012cc <MX_TIM3_Init+0x10c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80011fc:	4b33      	ldr	r3, [pc, #204]	; (80012cc <MX_TIM3_Init+0x10c>)
 80011fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001202:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001204:	4b31      	ldr	r3, [pc, #196]	; (80012cc <MX_TIM3_Init+0x10c>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120a:	4b30      	ldr	r3, [pc, #192]	; (80012cc <MX_TIM3_Init+0x10c>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001210:	482e      	ldr	r0, [pc, #184]	; (80012cc <MX_TIM3_Init+0x10c>)
 8001212:	f001 fc58 	bl	8002ac6 <HAL_TIM_Base_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800121c:	f7ff fef2 	bl	8001004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001224:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001226:	f107 0318 	add.w	r3, r7, #24
 800122a:	4619      	mov	r1, r3
 800122c:	4827      	ldr	r0, [pc, #156]	; (80012cc <MX_TIM3_Init+0x10c>)
 800122e:	f001 fe29 	bl	8002e84 <HAL_TIM_ConfigClockSource>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001238:	f7ff fee4 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800123c:	4823      	ldr	r0, [pc, #140]	; (80012cc <MX_TIM3_Init+0x10c>)
 800123e:	f001 fc81 	bl	8002b44 <HAL_TIM_PWM_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001248:	f7ff fedc 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	4619      	mov	r1, r3
 800125a:	481c      	ldr	r0, [pc, #112]	; (80012cc <MX_TIM3_Init+0x10c>)
 800125c:	f002 f8fa 	bl	8003454 <HAL_TIMEx_MasterConfigSynchronization>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001266:	f7ff fecd 	bl	8001004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800126a:	2360      	movs	r3, #96	; 0x60
 800126c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	2200      	movs	r2, #0
 800127e:	4619      	mov	r1, r3
 8001280:	4812      	ldr	r0, [pc, #72]	; (80012cc <MX_TIM3_Init+0x10c>)
 8001282:	f001 fd3d 	bl	8002d00 <HAL_TIM_PWM_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 800128c:	f7ff feba 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001290:	463b      	mov	r3, r7
 8001292:	2204      	movs	r2, #4
 8001294:	4619      	mov	r1, r3
 8001296:	480d      	ldr	r0, [pc, #52]	; (80012cc <MX_TIM3_Init+0x10c>)
 8001298:	f001 fd32 	bl	8002d00 <HAL_TIM_PWM_ConfigChannel>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80012a2:	f7ff feaf 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012a6:	463b      	mov	r3, r7
 80012a8:	2208      	movs	r2, #8
 80012aa:	4619      	mov	r1, r3
 80012ac:	4807      	ldr	r0, [pc, #28]	; (80012cc <MX_TIM3_Init+0x10c>)
 80012ae:	f001 fd27 	bl	8002d00 <HAL_TIM_PWM_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 80012b8:	f7ff fea4 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <MX_TIM3_Init+0x10c>)
 80012be:	f000 f957 	bl	8001570 <HAL_TIM_MspPostInit>

}
 80012c2:	bf00      	nop
 80012c4:	3728      	adds	r7, #40	; 0x28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000098 	.word	0x20000098
 80012d0:	40000400 	.word	0x40000400

080012d4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0318 	add.w	r3, r7, #24
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f2:	463b      	mov	r3, r7
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012fe:	4b3d      	ldr	r3, [pc, #244]	; (80013f4 <MX_TIM4_Init+0x120>)
 8001300:	4a3d      	ldr	r2, [pc, #244]	; (80013f8 <MX_TIM4_Init+0x124>)
 8001302:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8001304:	4b3b      	ldr	r3, [pc, #236]	; (80013f4 <MX_TIM4_Init+0x120>)
 8001306:	220f      	movs	r2, #15
 8001308:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130a:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <MX_TIM4_Init+0x120>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001310:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <MX_TIM4_Init+0x120>)
 8001312:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001316:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001318:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <MX_TIM4_Init+0x120>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131e:	4b35      	ldr	r3, [pc, #212]	; (80013f4 <MX_TIM4_Init+0x120>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001324:	4833      	ldr	r0, [pc, #204]	; (80013f4 <MX_TIM4_Init+0x120>)
 8001326:	f001 fbce 	bl	8002ac6 <HAL_TIM_Base_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001330:	f7ff fe68 	bl	8001004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001338:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800133a:	f107 0318 	add.w	r3, r7, #24
 800133e:	4619      	mov	r1, r3
 8001340:	482c      	ldr	r0, [pc, #176]	; (80013f4 <MX_TIM4_Init+0x120>)
 8001342:	f001 fd9f 	bl	8002e84 <HAL_TIM_ConfigClockSource>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800134c:	f7ff fe5a 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001350:	4828      	ldr	r0, [pc, #160]	; (80013f4 <MX_TIM4_Init+0x120>)
 8001352:	f001 fbf7 	bl	8002b44 <HAL_TIM_PWM_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800135c:	f7ff fe52 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	4619      	mov	r1, r3
 800136e:	4821      	ldr	r0, [pc, #132]	; (80013f4 <MX_TIM4_Init+0x120>)
 8001370:	f002 f870 	bl	8003454 <HAL_TIMEx_MasterConfigSynchronization>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 800137a:	f7ff fe43 	bl	8001004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137e:	2360      	movs	r3, #96	; 0x60
 8001380:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800138e:	463b      	mov	r3, r7
 8001390:	2200      	movs	r2, #0
 8001392:	4619      	mov	r1, r3
 8001394:	4817      	ldr	r0, [pc, #92]	; (80013f4 <MX_TIM4_Init+0x120>)
 8001396:	f001 fcb3 	bl	8002d00 <HAL_TIM_PWM_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80013a0:	f7ff fe30 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	2204      	movs	r2, #4
 80013a8:	4619      	mov	r1, r3
 80013aa:	4812      	ldr	r0, [pc, #72]	; (80013f4 <MX_TIM4_Init+0x120>)
 80013ac:	f001 fca8 	bl	8002d00 <HAL_TIM_PWM_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 80013b6:	f7ff fe25 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013ba:	463b      	mov	r3, r7
 80013bc:	2208      	movs	r2, #8
 80013be:	4619      	mov	r1, r3
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <MX_TIM4_Init+0x120>)
 80013c2:	f001 fc9d 	bl	8002d00 <HAL_TIM_PWM_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM4_Init+0xfc>
  {
    Error_Handler();
 80013cc:	f7ff fe1a 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013d0:	463b      	mov	r3, r7
 80013d2:	220c      	movs	r2, #12
 80013d4:	4619      	mov	r1, r3
 80013d6:	4807      	ldr	r0, [pc, #28]	; (80013f4 <MX_TIM4_Init+0x120>)
 80013d8:	f001 fc92 	bl	8002d00 <HAL_TIM_PWM_ConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 80013e2:	f7ff fe0f 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013e6:	4803      	ldr	r0, [pc, #12]	; (80013f4 <MX_TIM4_Init+0x120>)
 80013e8:	f000 f8c2 	bl	8001570 <HAL_TIM_MspPostInit>

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	200000d8 	.word	0x200000d8
 80013f8:	40000800 	.word	0x40000800

080013fc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001402:	f107 0318 	add.w	r3, r7, #24
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800141a:	463b      	mov	r3, r7
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001426:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <MX_TIM5_Init+0xe0>)
 8001428:	4a2d      	ldr	r2, [pc, #180]	; (80014e0 <MX_TIM5_Init+0xe4>)
 800142a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 800142c:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <MX_TIM5_Init+0xe0>)
 800142e:	220f      	movs	r2, #15
 8001430:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001432:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <MX_TIM5_Init+0xe0>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001438:	4b28      	ldr	r3, [pc, #160]	; (80014dc <MX_TIM5_Init+0xe0>)
 800143a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800143e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001440:	4b26      	ldr	r3, [pc, #152]	; (80014dc <MX_TIM5_Init+0xe0>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001446:	4b25      	ldr	r3, [pc, #148]	; (80014dc <MX_TIM5_Init+0xe0>)
 8001448:	2200      	movs	r2, #0
 800144a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800144c:	4823      	ldr	r0, [pc, #140]	; (80014dc <MX_TIM5_Init+0xe0>)
 800144e:	f001 fb3a 	bl	8002ac6 <HAL_TIM_Base_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8001458:	f7ff fdd4 	bl	8001004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001460:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001462:	f107 0318 	add.w	r3, r7, #24
 8001466:	4619      	mov	r1, r3
 8001468:	481c      	ldr	r0, [pc, #112]	; (80014dc <MX_TIM5_Init+0xe0>)
 800146a:	f001 fd0b 	bl	8002e84 <HAL_TIM_ConfigClockSource>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001474:	f7ff fdc6 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001478:	4818      	ldr	r0, [pc, #96]	; (80014dc <MX_TIM5_Init+0xe0>)
 800147a:	f001 fb63 	bl	8002b44 <HAL_TIM_PWM_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001484:	f7ff fdbe 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	4619      	mov	r1, r3
 8001496:	4811      	ldr	r0, [pc, #68]	; (80014dc <MX_TIM5_Init+0xe0>)
 8001498:	f001 ffdc 	bl	8003454 <HAL_TIMEx_MasterConfigSynchronization>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 80014a2:	f7ff fdaf 	bl	8001004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a6:	2360      	movs	r3, #96	; 0x60
 80014a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014b6:	463b      	mov	r3, r7
 80014b8:	2204      	movs	r2, #4
 80014ba:	4619      	mov	r1, r3
 80014bc:	4807      	ldr	r0, [pc, #28]	; (80014dc <MX_TIM5_Init+0xe0>)
 80014be:	f001 fc1f 	bl	8002d00 <HAL_TIM_PWM_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 80014c8:	f7ff fd9c 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80014cc:	4803      	ldr	r0, [pc, #12]	; (80014dc <MX_TIM5_Init+0xe0>)
 80014ce:	f000 f84f 	bl	8001570 <HAL_TIM_MspPostInit>

}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000118 	.word	0x20000118
 80014e0:	40000c00 	.word	0x40000c00

080014e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a1b      	ldr	r2, [pc, #108]	; (8001560 <HAL_TIM_Base_MspInit+0x7c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d10c      	bne.n	8001510 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014f6:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <HAL_TIM_Base_MspInit+0x80>)
 80014f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fa:	4a1a      	ldr	r2, [pc, #104]	; (8001564 <HAL_TIM_Base_MspInit+0x80>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6253      	str	r3, [r2, #36]	; 0x24
 8001502:	4b18      	ldr	r3, [pc, #96]	; (8001564 <HAL_TIM_Base_MspInit+0x80>)
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800150e:	e022      	b.n	8001556 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a14      	ldr	r2, [pc, #80]	; (8001568 <HAL_TIM_Base_MspInit+0x84>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d10c      	bne.n	8001534 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800151a:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_TIM_Base_MspInit+0x80>)
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	4a11      	ldr	r2, [pc, #68]	; (8001564 <HAL_TIM_Base_MspInit+0x80>)
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	6253      	str	r3, [r2, #36]	; 0x24
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_TIM_Base_MspInit+0x80>)
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
}
 8001532:	e010      	b.n	8001556 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM5)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0c      	ldr	r2, [pc, #48]	; (800156c <HAL_TIM_Base_MspInit+0x88>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d10b      	bne.n	8001556 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_TIM_Base_MspInit+0x80>)
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	4a08      	ldr	r2, [pc, #32]	; (8001564 <HAL_TIM_Base_MspInit+0x80>)
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	6253      	str	r3, [r2, #36]	; 0x24
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_TIM_Base_MspInit+0x80>)
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
}
 8001556:	bf00      	nop
 8001558:	371c      	adds	r7, #28
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40000400 	.word	0x40000400
 8001564:	40023800 	.word	0x40023800
 8001568:	40000800 	.word	0x40000800
 800156c:	40000c00 	.word	0x40000c00

08001570 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	; 0x30
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a41      	ldr	r2, [pc, #260]	; (8001694 <HAL_TIM_MspPostInit+0x124>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d138      	bne.n	8001604 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	4b41      	ldr	r3, [pc, #260]	; (8001698 <HAL_TIM_MspPostInit+0x128>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	4a40      	ldr	r2, [pc, #256]	; (8001698 <HAL_TIM_MspPostInit+0x128>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	61d3      	str	r3, [r2, #28]
 800159e:	4b3e      	ldr	r3, [pc, #248]	; (8001698 <HAL_TIM_MspPostInit+0x128>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	61bb      	str	r3, [r7, #24]
 80015a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015aa:	4b3b      	ldr	r3, [pc, #236]	; (8001698 <HAL_TIM_MspPostInit+0x128>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	4a3a      	ldr	r2, [pc, #232]	; (8001698 <HAL_TIM_MspPostInit+0x128>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	61d3      	str	r3, [r2, #28]
 80015b6:	4b38      	ldr	r3, [pc, #224]	; (8001698 <HAL_TIM_MspPostInit+0x128>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = Czlon4PWM_Pin|Czlon5PWM_Pin;
 80015c2:	23c0      	movs	r3, #192	; 0xc0
 80015c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015d2:	2302      	movs	r3, #2
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	4619      	mov	r1, r3
 80015dc:	482f      	ldr	r0, [pc, #188]	; (800169c <HAL_TIM_MspPostInit+0x12c>)
 80015de:	f000 fa4b 	bl	8001a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R_PWM_Pin;
 80015e2:	2301      	movs	r3, #1
 80015e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015f2:	2302      	movs	r3, #2
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(R_PWM_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	4828      	ldr	r0, [pc, #160]	; (80016a0 <HAL_TIM_MspPostInit+0x130>)
 80015fe:	f000 fa3b 	bl	8001a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001602:	e043      	b.n	800168c <HAL_TIM_MspPostInit+0x11c>
  else if(timHandle->Instance==TIM4)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a26      	ldr	r2, [pc, #152]	; (80016a4 <HAL_TIM_MspPostInit+0x134>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d11d      	bne.n	800164a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	4b22      	ldr	r3, [pc, #136]	; (8001698 <HAL_TIM_MspPostInit+0x128>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a21      	ldr	r2, [pc, #132]	; (8001698 <HAL_TIM_MspPostInit+0x128>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	61d3      	str	r3, [r2, #28]
 800161a:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <HAL_TIM_MspPostInit+0x128>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PodstawaPWM_Pin|Czlon1PWM_Pin|Czlon2PWM_Pin|Czlon3PWM_Pin;
 8001626:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001638:	2302      	movs	r3, #2
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	4817      	ldr	r0, [pc, #92]	; (80016a0 <HAL_TIM_MspPostInit+0x130>)
 8001644:	f000 fa18 	bl	8001a78 <HAL_GPIO_Init>
}
 8001648:	e020      	b.n	800168c <HAL_TIM_MspPostInit+0x11c>
  else if(timHandle->Instance==TIM5)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a16      	ldr	r2, [pc, #88]	; (80016a8 <HAL_TIM_MspPostInit+0x138>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d11b      	bne.n	800168c <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_TIM_MspPostInit+0x128>)
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <HAL_TIM_MspPostInit+0x128>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	61d3      	str	r3, [r2, #28]
 8001660:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_TIM_MspPostInit+0x128>)
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = L_PWM_Pin;
 800166c:	2302      	movs	r3, #2
 800166e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800167c:	2302      	movs	r3, #2
 800167e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(L_PWM_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4619      	mov	r1, r3
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <HAL_TIM_MspPostInit+0x12c>)
 8001688:	f000 f9f6 	bl	8001a78 <HAL_GPIO_Init>
}
 800168c:	bf00      	nop
 800168e:	3730      	adds	r7, #48	; 0x30
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40000400 	.word	0x40000400
 8001698:	40023800 	.word	0x40023800
 800169c:	40020000 	.word	0x40020000
 80016a0:	40020400 	.word	0x40020400
 80016a4:	40000800 	.word	0x40000800
 80016a8:	40000c00 	.word	0x40000c00

080016ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016b2:	4a12      	ldr	r2, [pc, #72]	; (80016fc <MX_USART2_UART_Init+0x50>)
 80016b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016d2:	220c      	movs	r2, #12
 80016d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016e4:	f001 ff14 	bl	8003510 <HAL_UART_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016ee:	f7ff fc89 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000158 	.word	0x20000158
 80016fc:	40004400 	.word	0x40004400

08001700 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a17      	ldr	r2, [pc, #92]	; (800177c <HAL_UART_MspInit+0x7c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d127      	bne.n	8001772 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <HAL_UART_MspInit+0x80>)
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	4a16      	ldr	r2, [pc, #88]	; (8001780 <HAL_UART_MspInit+0x80>)
 8001728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800172c:	6253      	str	r3, [r2, #36]	; 0x24
 800172e:	4b14      	ldr	r3, [pc, #80]	; (8001780 <HAL_UART_MspInit+0x80>)
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_UART_MspInit+0x80>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	4a10      	ldr	r2, [pc, #64]	; (8001780 <HAL_UART_MspInit+0x80>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	61d3      	str	r3, [r2, #28]
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <HAL_UART_MspInit+0x80>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001752:	230c      	movs	r3, #12
 8001754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001762:	2307      	movs	r3, #7
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <HAL_UART_MspInit+0x84>)
 800176e:	f000 f983 	bl	8001a78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001772:	bf00      	nop
 8001774:	3728      	adds	r7, #40	; 0x28
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40004400 	.word	0x40004400
 8001780:	40023800 	.word	0x40023800
 8001784:	40020000 	.word	0x40020000

08001788 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001788:	f7ff fd13 	bl	80011b2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800178c:	480b      	ldr	r0, [pc, #44]	; (80017bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800178e:	490c      	ldr	r1, [pc, #48]	; (80017c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001790:	4a0c      	ldr	r2, [pc, #48]	; (80017c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a09      	ldr	r2, [pc, #36]	; (80017c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017a4:	4c09      	ldr	r4, [pc, #36]	; (80017cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017b2:	f002 f8e1 	bl	8003978 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017b6:	f7ff f8bf 	bl	8000938 <main>
  bx lr
 80017ba:	4770      	bx	lr
  ldr r0, =_sdata
 80017bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80017c4:	08003a1c 	.word	0x08003a1c
  ldr r2, =_sbss
 80017c8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80017cc:	200001a4 	.word	0x200001a4

080017d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC1_IRQHandler>

080017d2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017dc:	2003      	movs	r0, #3
 80017de:	f000 f917 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017e2:	2000      	movs	r0, #0
 80017e4:	f000 f80e 	bl	8001804 <HAL_InitTick>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	71fb      	strb	r3, [r7, #7]
 80017f2:	e001      	b.n	80017f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017f4:	f7ff fc86 	bl	8001104 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017f8:	79fb      	ldrb	r3, [r7, #7]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001810:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_InitTick+0x68>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d022      	beq.n	800185e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_InitTick+0x6c>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_InitTick+0x68>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001824:	fbb1 f3f3 	udiv	r3, r1, r3
 8001828:	fbb2 f3f3 	udiv	r3, r2, r3
 800182c:	4618      	mov	r0, r3
 800182e:	f000 f916 	bl	8001a5e <HAL_SYSTICK_Config>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10f      	bne.n	8001858 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b0f      	cmp	r3, #15
 800183c:	d809      	bhi.n	8001852 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800183e:	2200      	movs	r2, #0
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	f04f 30ff 	mov.w	r0, #4294967295
 8001846:	f000 f8ee 	bl	8001a26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <HAL_InitTick+0x70>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e007      	b.n	8001862 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
 8001856:	e004      	b.n	8001862 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	e001      	b.n	8001862 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001862:	7bfb      	ldrb	r3, [r7, #15]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	2000000c 	.word	0x2000000c
 8001870:	20000004 	.word	0x20000004
 8001874:	20000008 	.word	0x20000008

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_IncTick+0x1c>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_IncTick+0x20>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4413      	add	r3, r2
 8001886:	4a03      	ldr	r2, [pc, #12]	; (8001894 <HAL_IncTick+0x1c>)
 8001888:	6013      	str	r3, [r2, #0]
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	200001a0 	.word	0x200001a0
 8001898:	2000000c 	.word	0x2000000c

0800189c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b02      	ldr	r3, [pc, #8]	; (80018ac <HAL_GetTick+0x10>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	200001a0 	.word	0x200001a0

080018b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60d3      	str	r3, [r2, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <__NVIC_GetPriorityGrouping+0x18>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0307 	and.w	r3, r3, #7
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0a      	blt.n	800193e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	490c      	ldr	r1, [pc, #48]	; (8001960 <__NVIC_SetPriority+0x4c>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	440b      	add	r3, r1
 8001938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800193c:	e00a      	b.n	8001954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4908      	ldr	r1, [pc, #32]	; (8001964 <__NVIC_SetPriority+0x50>)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3b04      	subs	r3, #4
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	440b      	add	r3, r1
 8001952:	761a      	strb	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f1c3 0307 	rsb	r3, r3, #7
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf28      	it	cs
 8001986:	2304      	movcs	r3, #4
 8001988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3304      	adds	r3, #4
 800198e:	2b06      	cmp	r3, #6
 8001990:	d902      	bls.n	8001998 <NVIC_EncodePriority+0x30>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3b03      	subs	r3, #3
 8001996:	e000      	b.n	800199a <NVIC_EncodePriority+0x32>
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	4313      	orrs	r3, r2
         );
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	; 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019dc:	d301      	bcc.n	80019e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019de:	2301      	movs	r3, #1
 80019e0:	e00f      	b.n	8001a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <SysTick_Config+0x40>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ea:	210f      	movs	r1, #15
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	f7ff ff90 	bl	8001914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <SysTick_Config+0x40>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <SysTick_Config+0x40>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	e000e010 	.word	0xe000e010

08001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff49 	bl	80018b0 <__NVIC_SetPriorityGrouping>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a38:	f7ff ff5e 	bl	80018f8 <__NVIC_GetPriorityGrouping>
 8001a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f7ff ff90 	bl	8001968 <NVIC_EncodePriority>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff5f 	bl	8001914 <__NVIC_SetPriority>
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffb0 	bl	80019cc <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a8e:	e160      	b.n	8001d52 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	2101      	movs	r1, #1
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 8152 	beq.w	8001d4c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d005      	beq.n	8001ac0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d130      	bne.n	8001b22 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	2203      	movs	r2, #3
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001af6:	2201      	movs	r2, #1
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4013      	ands	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	091b      	lsrs	r3, r3, #4
 8001b0c:	f003 0201 	and.w	r2, r3, #1
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d017      	beq.n	8001b5e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	2203      	movs	r2, #3
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d123      	bne.n	8001bb2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	08da      	lsrs	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3208      	adds	r2, #8
 8001b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b76:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	220f      	movs	r2, #15
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	691a      	ldr	r2, [r3, #16]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	08da      	lsrs	r2, r3, #3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3208      	adds	r2, #8
 8001bac:	6939      	ldr	r1, [r7, #16]
 8001bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0203 	and.w	r2, r3, #3
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 80ac 	beq.w	8001d4c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf4:	4b5e      	ldr	r3, [pc, #376]	; (8001d70 <HAL_GPIO_Init+0x2f8>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	4a5d      	ldr	r2, [pc, #372]	; (8001d70 <HAL_GPIO_Init+0x2f8>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6213      	str	r3, [r2, #32]
 8001c00:	4b5b      	ldr	r3, [pc, #364]	; (8001d70 <HAL_GPIO_Init+0x2f8>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c0c:	4a59      	ldr	r2, [pc, #356]	; (8001d74 <HAL_GPIO_Init+0x2fc>)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3302      	adds	r3, #2
 8001c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	220f      	movs	r2, #15
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a51      	ldr	r2, [pc, #324]	; (8001d78 <HAL_GPIO_Init+0x300>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d025      	beq.n	8001c84 <HAL_GPIO_Init+0x20c>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a50      	ldr	r2, [pc, #320]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d01f      	beq.n	8001c80 <HAL_GPIO_Init+0x208>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a4f      	ldr	r2, [pc, #316]	; (8001d80 <HAL_GPIO_Init+0x308>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d019      	beq.n	8001c7c <HAL_GPIO_Init+0x204>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a4e      	ldr	r2, [pc, #312]	; (8001d84 <HAL_GPIO_Init+0x30c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d013      	beq.n	8001c78 <HAL_GPIO_Init+0x200>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a4d      	ldr	r2, [pc, #308]	; (8001d88 <HAL_GPIO_Init+0x310>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d00d      	beq.n	8001c74 <HAL_GPIO_Init+0x1fc>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a4c      	ldr	r2, [pc, #304]	; (8001d8c <HAL_GPIO_Init+0x314>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d007      	beq.n	8001c70 <HAL_GPIO_Init+0x1f8>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a4b      	ldr	r2, [pc, #300]	; (8001d90 <HAL_GPIO_Init+0x318>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d101      	bne.n	8001c6c <HAL_GPIO_Init+0x1f4>
 8001c68:	2306      	movs	r3, #6
 8001c6a:	e00c      	b.n	8001c86 <HAL_GPIO_Init+0x20e>
 8001c6c:	2307      	movs	r3, #7
 8001c6e:	e00a      	b.n	8001c86 <HAL_GPIO_Init+0x20e>
 8001c70:	2305      	movs	r3, #5
 8001c72:	e008      	b.n	8001c86 <HAL_GPIO_Init+0x20e>
 8001c74:	2304      	movs	r3, #4
 8001c76:	e006      	b.n	8001c86 <HAL_GPIO_Init+0x20e>
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e004      	b.n	8001c86 <HAL_GPIO_Init+0x20e>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e002      	b.n	8001c86 <HAL_GPIO_Init+0x20e>
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <HAL_GPIO_Init+0x20e>
 8001c84:	2300      	movs	r3, #0
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	f002 0203 	and.w	r2, r2, #3
 8001c8c:	0092      	lsls	r2, r2, #2
 8001c8e:	4093      	lsls	r3, r2
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c96:	4937      	ldr	r1, [pc, #220]	; (8001d74 <HAL_GPIO_Init+0x2fc>)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	089b      	lsrs	r3, r3, #2
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca4:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <HAL_GPIO_Init+0x31c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cc8:	4a32      	ldr	r2, [pc, #200]	; (8001d94 <HAL_GPIO_Init+0x31c>)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cce:	4b31      	ldr	r3, [pc, #196]	; (8001d94 <HAL_GPIO_Init+0x31c>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cf2:	4a28      	ldr	r2, [pc, #160]	; (8001d94 <HAL_GPIO_Init+0x31c>)
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cf8:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <HAL_GPIO_Init+0x31c>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d1c:	4a1d      	ldr	r2, [pc, #116]	; (8001d94 <HAL_GPIO_Init+0x31c>)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d22:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <HAL_GPIO_Init+0x31c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d46:	4a13      	ldr	r2, [pc, #76]	; (8001d94 <HAL_GPIO_Init+0x31c>)
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f47f ae97 	bne.w	8001a90 <HAL_GPIO_Init+0x18>
  }
}
 8001d62:	bf00      	nop
 8001d64:	bf00      	nop
 8001d66:	371c      	adds	r7, #28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40010000 	.word	0x40010000
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40020400 	.word	0x40020400
 8001d80:	40020800 	.word	0x40020800
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40021400 	.word	0x40021400
 8001d90:	40021800 	.word	0x40021800
 8001d94:	40010400 	.word	0x40010400

08001d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	807b      	strh	r3, [r7, #2]
 8001da4:	4613      	mov	r3, r2
 8001da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001da8:	787b      	ldrb	r3, [r7, #1]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dae:	887a      	ldrh	r2, [r7, #2]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001db4:	e003      	b.n	8001dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001db6:	887b      	ldrh	r3, [r7, #2]
 8001db8:	041a      	lsls	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	619a      	str	r2, [r3, #24]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e31d      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dda:	4b94      	ldr	r3, [pc, #592]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001de4:	4b91      	ldr	r3, [pc, #580]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dec:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d07b      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d006      	beq.n	8001e0e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	2b0c      	cmp	r3, #12
 8001e04:	d10f      	bne.n	8001e26 <HAL_RCC_OscConfig+0x5e>
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e0c:	d10b      	bne.n	8001e26 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0e:	4b87      	ldr	r3, [pc, #540]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d06a      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x128>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d166      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e2f7      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d106      	bne.n	8001e3c <HAL_RCC_OscConfig+0x74>
 8001e2e:	4b7f      	ldr	r3, [pc, #508]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a7e      	ldr	r2, [pc, #504]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e02d      	b.n	8001e98 <HAL_RCC_OscConfig+0xd0>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10c      	bne.n	8001e5e <HAL_RCC_OscConfig+0x96>
 8001e44:	4b79      	ldr	r3, [pc, #484]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a78      	ldr	r2, [pc, #480]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b76      	ldr	r3, [pc, #472]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a75      	ldr	r2, [pc, #468]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	e01c      	b.n	8001e98 <HAL_RCC_OscConfig+0xd0>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b05      	cmp	r3, #5
 8001e64:	d10c      	bne.n	8001e80 <HAL_RCC_OscConfig+0xb8>
 8001e66:	4b71      	ldr	r3, [pc, #452]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a70      	ldr	r2, [pc, #448]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	4b6e      	ldr	r3, [pc, #440]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a6d      	ldr	r2, [pc, #436]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e00b      	b.n	8001e98 <HAL_RCC_OscConfig+0xd0>
 8001e80:	4b6a      	ldr	r3, [pc, #424]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a69      	ldr	r2, [pc, #420]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	4b67      	ldr	r3, [pc, #412]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a66      	ldr	r2, [pc, #408]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d013      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7ff fcfc 	bl	800189c <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea8:	f7ff fcf8 	bl	800189c <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b64      	cmp	r3, #100	; 0x64
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e2ad      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eba:	4b5c      	ldr	r3, [pc, #368]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0xe0>
 8001ec6:	e014      	b.n	8001ef2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fce8 	bl	800189c <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7ff fce4 	bl	800189c <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	; 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e299      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ee2:	4b52      	ldr	r3, [pc, #328]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x108>
 8001eee:	e000      	b.n	8001ef2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d05a      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d005      	beq.n	8001f10 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2b0c      	cmp	r3, #12
 8001f08:	d119      	bne.n	8001f3e <HAL_RCC_OscConfig+0x176>
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d116      	bne.n	8001f3e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f10:	4b46      	ldr	r3, [pc, #280]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_RCC_OscConfig+0x160>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e276      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f28:	4b40      	ldr	r3, [pc, #256]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	493d      	ldr	r1, [pc, #244]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3c:	e03a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d020      	beq.n	8001f88 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f46:	4b3a      	ldr	r3, [pc, #232]	; (8002030 <HAL_RCC_OscConfig+0x268>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7ff fca6 	bl	800189c <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f54:	f7ff fca2 	bl	800189c <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e257      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f66:	4b31      	ldr	r3, [pc, #196]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f72:	4b2e      	ldr	r3, [pc, #184]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	021b      	lsls	r3, r3, #8
 8001f80:	492a      	ldr	r1, [pc, #168]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
 8001f86:	e015      	b.n	8001fb4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f88:	4b29      	ldr	r3, [pc, #164]	; (8002030 <HAL_RCC_OscConfig+0x268>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7ff fc85 	bl	800189c <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f96:	f7ff fc81 	bl	800189c <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e236      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fa8:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f0      	bne.n	8001f96 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80b8 	beq.w	8002132 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d170      	bne.n	80020aa <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fc8:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x218>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e21a      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1a      	ldr	r2, [r3, #32]
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d921      	bls.n	8002034 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 fc7d 	bl	80028f4 <RCC_SetFlashLatencyFromMSIRange>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e208      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	4906      	ldr	r1, [pc, #24]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002016:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	061b      	lsls	r3, r3, #24
 8002024:	4901      	ldr	r1, [pc, #4]	; (800202c <HAL_RCC_OscConfig+0x264>)
 8002026:	4313      	orrs	r3, r2
 8002028:	604b      	str	r3, [r1, #4]
 800202a:	e020      	b.n	800206e <HAL_RCC_OscConfig+0x2a6>
 800202c:	40023800 	.word	0x40023800
 8002030:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002034:	4b99      	ldr	r3, [pc, #612]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4996      	ldr	r1, [pc, #600]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 8002042:	4313      	orrs	r3, r2
 8002044:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002046:	4b95      	ldr	r3, [pc, #596]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	061b      	lsls	r3, r3, #24
 8002054:	4991      	ldr	r1, [pc, #580]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 8002056:	4313      	orrs	r3, r2
 8002058:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4618      	mov	r0, r3
 8002060:	f000 fc48 	bl	80028f4 <RCC_SetFlashLatencyFromMSIRange>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e1d3      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	0b5b      	lsrs	r3, r3, #13
 8002074:	3301      	adds	r3, #1
 8002076:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800207e:	4a87      	ldr	r2, [pc, #540]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 8002080:	6892      	ldr	r2, [r2, #8]
 8002082:	0912      	lsrs	r2, r2, #4
 8002084:	f002 020f 	and.w	r2, r2, #15
 8002088:	4985      	ldr	r1, [pc, #532]	; (80022a0 <HAL_RCC_OscConfig+0x4d8>)
 800208a:	5c8a      	ldrb	r2, [r1, r2]
 800208c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800208e:	4a85      	ldr	r2, [pc, #532]	; (80022a4 <HAL_RCC_OscConfig+0x4dc>)
 8002090:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002092:	4b85      	ldr	r3, [pc, #532]	; (80022a8 <HAL_RCC_OscConfig+0x4e0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fbb4 	bl	8001804 <HAL_InitTick>
 800209c:	4603      	mov	r3, r0
 800209e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d045      	beq.n	8002132 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	e1b5      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d029      	beq.n	8002106 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020b2:	4b7e      	ldr	r3, [pc, #504]	; (80022ac <HAL_RCC_OscConfig+0x4e4>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff fbf0 	bl	800189c <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020c0:	f7ff fbec 	bl	800189c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e1a1      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020d2:	4b72      	ldr	r3, [pc, #456]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020de:	4b6f      	ldr	r3, [pc, #444]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	496c      	ldr	r1, [pc, #432]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020f0:	4b6a      	ldr	r3, [pc, #424]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	061b      	lsls	r3, r3, #24
 80020fe:	4967      	ldr	r1, [pc, #412]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
 8002104:	e015      	b.n	8002132 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002106:	4b69      	ldr	r3, [pc, #420]	; (80022ac <HAL_RCC_OscConfig+0x4e4>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7ff fbc6 	bl	800189c <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002114:	f7ff fbc2 	bl	800189c <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e177      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002126:	4b5d      	ldr	r3, [pc, #372]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d030      	beq.n	80021a0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d016      	beq.n	8002174 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002146:	4b5a      	ldr	r3, [pc, #360]	; (80022b0 <HAL_RCC_OscConfig+0x4e8>)
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214c:	f7ff fba6 	bl	800189c <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002154:	f7ff fba2 	bl	800189c <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e157      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002166:	4b4d      	ldr	r3, [pc, #308]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 8002168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x38c>
 8002172:	e015      	b.n	80021a0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002174:	4b4e      	ldr	r3, [pc, #312]	; (80022b0 <HAL_RCC_OscConfig+0x4e8>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217a:	f7ff fb8f 	bl	800189c <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002182:	f7ff fb8b 	bl	800189c <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e140      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002194:	4b41      	ldr	r3, [pc, #260]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 8002196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f0      	bne.n	8002182 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80b5 	beq.w	8002318 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b2:	4b3a      	ldr	r3, [pc, #232]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10d      	bne.n	80021da <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	4b37      	ldr	r3, [pc, #220]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	4a36      	ldr	r2, [pc, #216]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 80021c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c8:	6253      	str	r3, [r2, #36]	; 0x24
 80021ca:	4b34      	ldr	r3, [pc, #208]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d6:	2301      	movs	r3, #1
 80021d8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021da:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <HAL_RCC_OscConfig+0x4ec>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d118      	bne.n	8002218 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021e6:	4b33      	ldr	r3, [pc, #204]	; (80022b4 <HAL_RCC_OscConfig+0x4ec>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a32      	ldr	r2, [pc, #200]	; (80022b4 <HAL_RCC_OscConfig+0x4ec>)
 80021ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f2:	f7ff fb53 	bl	800189c <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fa:	f7ff fb4f 	bl	800189c <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b64      	cmp	r3, #100	; 0x64
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e104      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220c:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <HAL_RCC_OscConfig+0x4ec>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d106      	bne.n	800222e <HAL_RCC_OscConfig+0x466>
 8002220:	4b1e      	ldr	r3, [pc, #120]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 8002222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002224:	4a1d      	ldr	r2, [pc, #116]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 8002226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222a:	6353      	str	r3, [r2, #52]	; 0x34
 800222c:	e02d      	b.n	800228a <HAL_RCC_OscConfig+0x4c2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10c      	bne.n	8002250 <HAL_RCC_OscConfig+0x488>
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 8002238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223a:	4a18      	ldr	r2, [pc, #96]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 800223c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002240:	6353      	str	r3, [r2, #52]	; 0x34
 8002242:	4b16      	ldr	r3, [pc, #88]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 8002244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002246:	4a15      	ldr	r2, [pc, #84]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 8002248:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800224c:	6353      	str	r3, [r2, #52]	; 0x34
 800224e:	e01c      	b.n	800228a <HAL_RCC_OscConfig+0x4c2>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b05      	cmp	r3, #5
 8002256:	d10c      	bne.n	8002272 <HAL_RCC_OscConfig+0x4aa>
 8002258:	4b10      	ldr	r3, [pc, #64]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 800225a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225c:	4a0f      	ldr	r2, [pc, #60]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 800225e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002262:	6353      	str	r3, [r2, #52]	; 0x34
 8002264:	4b0d      	ldr	r3, [pc, #52]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 8002266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002268:	4a0c      	ldr	r2, [pc, #48]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 800226a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226e:	6353      	str	r3, [r2, #52]	; 0x34
 8002270:	e00b      	b.n	800228a <HAL_RCC_OscConfig+0x4c2>
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 8002274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002276:	4a09      	ldr	r2, [pc, #36]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 8002278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800227c:	6353      	str	r3, [r2, #52]	; 0x34
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 8002280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002282:	4a06      	ldr	r2, [pc, #24]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 8002284:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002288:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d024      	beq.n	80022dc <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002292:	f7ff fb03 	bl	800189c <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002298:	e019      	b.n	80022ce <HAL_RCC_OscConfig+0x506>
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	080039f4 	.word	0x080039f4
 80022a4:	20000004 	.word	0x20000004
 80022a8:	20000008 	.word	0x20000008
 80022ac:	42470020 	.word	0x42470020
 80022b0:	42470680 	.word	0x42470680
 80022b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b8:	f7ff faf0 	bl	800189c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e0a3      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022ce:	4b54      	ldr	r3, [pc, #336]	; (8002420 <HAL_RCC_OscConfig+0x658>)
 80022d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0ee      	beq.n	80022b8 <HAL_RCC_OscConfig+0x4f0>
 80022da:	e014      	b.n	8002306 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022dc:	f7ff fade 	bl	800189c <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e4:	f7ff fada 	bl	800189c <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e08d      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022fa:	4b49      	ldr	r3, [pc, #292]	; (8002420 <HAL_RCC_OscConfig+0x658>)
 80022fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1ee      	bne.n	80022e4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002306:	7ffb      	ldrb	r3, [r7, #31]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d105      	bne.n	8002318 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230c:	4b44      	ldr	r3, [pc, #272]	; (8002420 <HAL_RCC_OscConfig+0x658>)
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	4a43      	ldr	r2, [pc, #268]	; (8002420 <HAL_RCC_OscConfig+0x658>)
 8002312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002316:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	2b00      	cmp	r3, #0
 800231e:	d079      	beq.n	8002414 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2b0c      	cmp	r3, #12
 8002324:	d056      	beq.n	80023d4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	2b02      	cmp	r3, #2
 800232c:	d13b      	bne.n	80023a6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232e:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_RCC_OscConfig+0x65c>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7ff fab2 	bl	800189c <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800233c:	f7ff faae 	bl	800189c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e063      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800234e:	4b34      	ldr	r3, [pc, #208]	; (8002420 <HAL_RCC_OscConfig+0x658>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800235a:	4b31      	ldr	r3, [pc, #196]	; (8002420 <HAL_RCC_OscConfig+0x658>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	4319      	orrs	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	430b      	orrs	r3, r1
 8002372:	492b      	ldr	r1, [pc, #172]	; (8002420 <HAL_RCC_OscConfig+0x658>)
 8002374:	4313      	orrs	r3, r2
 8002376:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002378:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <HAL_RCC_OscConfig+0x65c>)
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237e:	f7ff fa8d 	bl	800189c <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002386:	f7ff fa89 	bl	800189c <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e03e      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002398:	4b21      	ldr	r3, [pc, #132]	; (8002420 <HAL_RCC_OscConfig+0x658>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x5be>
 80023a4:	e036      	b.n	8002414 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a6:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <HAL_RCC_OscConfig+0x65c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7ff fa76 	bl	800189c <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b4:	f7ff fa72 	bl	800189c <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e027      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023c6:	4b16      	ldr	r3, [pc, #88]	; (8002420 <HAL_RCC_OscConfig+0x658>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x5ec>
 80023d2:	e01f      	b.n	8002414 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e01a      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <HAL_RCC_OscConfig+0x658>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d10d      	bne.n	8002410 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fe:	429a      	cmp	r2, r3
 8002400:	d106      	bne.n	8002410 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3720      	adds	r7, #32
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	42470060 	.word	0x42470060

08002428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e11a      	b.n	8002672 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800243c:	4b8f      	ldr	r3, [pc, #572]	; (800267c <HAL_RCC_ClockConfig+0x254>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d919      	bls.n	800247e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d105      	bne.n	800245c <HAL_RCC_ClockConfig+0x34>
 8002450:	4b8a      	ldr	r3, [pc, #552]	; (800267c <HAL_RCC_ClockConfig+0x254>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a89      	ldr	r2, [pc, #548]	; (800267c <HAL_RCC_ClockConfig+0x254>)
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	4b87      	ldr	r3, [pc, #540]	; (800267c <HAL_RCC_ClockConfig+0x254>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f023 0201 	bic.w	r2, r3, #1
 8002464:	4985      	ldr	r1, [pc, #532]	; (800267c <HAL_RCC_ClockConfig+0x254>)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	4313      	orrs	r3, r2
 800246a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800246c:	4b83      	ldr	r3, [pc, #524]	; (800267c <HAL_RCC_ClockConfig+0x254>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d001      	beq.n	800247e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0f9      	b.n	8002672 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800248a:	4b7d      	ldr	r3, [pc, #500]	; (8002680 <HAL_RCC_ClockConfig+0x258>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	497a      	ldr	r1, [pc, #488]	; (8002680 <HAL_RCC_ClockConfig+0x258>)
 8002498:	4313      	orrs	r3, r2
 800249a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 808e 	beq.w	80025c6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d107      	bne.n	80024c2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024b2:	4b73      	ldr	r3, [pc, #460]	; (8002680 <HAL_RCC_ClockConfig+0x258>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d121      	bne.n	8002502 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e0d7      	b.n	8002672 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024ca:	4b6d      	ldr	r3, [pc, #436]	; (8002680 <HAL_RCC_ClockConfig+0x258>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d115      	bne.n	8002502 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e0cb      	b.n	8002672 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024e2:	4b67      	ldr	r3, [pc, #412]	; (8002680 <HAL_RCC_ClockConfig+0x258>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0bf      	b.n	8002672 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024f2:	4b63      	ldr	r3, [pc, #396]	; (8002680 <HAL_RCC_ClockConfig+0x258>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e0b7      	b.n	8002672 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002502:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <HAL_RCC_ClockConfig+0x258>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f023 0203 	bic.w	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	495c      	ldr	r1, [pc, #368]	; (8002680 <HAL_RCC_ClockConfig+0x258>)
 8002510:	4313      	orrs	r3, r2
 8002512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002514:	f7ff f9c2 	bl	800189c <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d112      	bne.n	8002548 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002522:	e00a      	b.n	800253a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002524:	f7ff f9ba 	bl	800189c <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e09b      	b.n	8002672 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800253a:	4b51      	ldr	r3, [pc, #324]	; (8002680 <HAL_RCC_ClockConfig+0x258>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b08      	cmp	r3, #8
 8002544:	d1ee      	bne.n	8002524 <HAL_RCC_ClockConfig+0xfc>
 8002546:	e03e      	b.n	80025c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b03      	cmp	r3, #3
 800254e:	d112      	bne.n	8002576 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002550:	e00a      	b.n	8002568 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002552:	f7ff f9a3 	bl	800189c <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002560:	4293      	cmp	r3, r2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e084      	b.n	8002672 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002568:	4b45      	ldr	r3, [pc, #276]	; (8002680 <HAL_RCC_ClockConfig+0x258>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	2b0c      	cmp	r3, #12
 8002572:	d1ee      	bne.n	8002552 <HAL_RCC_ClockConfig+0x12a>
 8002574:	e027      	b.n	80025c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d11d      	bne.n	80025ba <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800257e:	e00a      	b.n	8002596 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002580:	f7ff f98c 	bl	800189c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	f241 3288 	movw	r2, #5000	; 0x1388
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e06d      	b.n	8002672 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002596:	4b3a      	ldr	r3, [pc, #232]	; (8002680 <HAL_RCC_ClockConfig+0x258>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d1ee      	bne.n	8002580 <HAL_RCC_ClockConfig+0x158>
 80025a2:	e010      	b.n	80025c6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a4:	f7ff f97a 	bl	800189c <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e05b      	b.n	8002672 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80025ba:	4b31      	ldr	r3, [pc, #196]	; (8002680 <HAL_RCC_ClockConfig+0x258>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1ee      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025c6:	4b2d      	ldr	r3, [pc, #180]	; (800267c <HAL_RCC_ClockConfig+0x254>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d219      	bcs.n	8002608 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d105      	bne.n	80025e6 <HAL_RCC_ClockConfig+0x1be>
 80025da:	4b28      	ldr	r3, [pc, #160]	; (800267c <HAL_RCC_ClockConfig+0x254>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a27      	ldr	r2, [pc, #156]	; (800267c <HAL_RCC_ClockConfig+0x254>)
 80025e0:	f043 0304 	orr.w	r3, r3, #4
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	4b25      	ldr	r3, [pc, #148]	; (800267c <HAL_RCC_ClockConfig+0x254>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 0201 	bic.w	r2, r3, #1
 80025ee:	4923      	ldr	r1, [pc, #140]	; (800267c <HAL_RCC_ClockConfig+0x254>)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	4b21      	ldr	r3, [pc, #132]	; (800267c <HAL_RCC_ClockConfig+0x254>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e034      	b.n	8002672 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002614:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <HAL_RCC_ClockConfig+0x258>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4917      	ldr	r1, [pc, #92]	; (8002680 <HAL_RCC_ClockConfig+0x258>)
 8002622:	4313      	orrs	r3, r2
 8002624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d009      	beq.n	8002646 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002632:	4b13      	ldr	r3, [pc, #76]	; (8002680 <HAL_RCC_ClockConfig+0x258>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	490f      	ldr	r1, [pc, #60]	; (8002680 <HAL_RCC_ClockConfig+0x258>)
 8002642:	4313      	orrs	r3, r2
 8002644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002646:	f000 f823 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 800264a:	4602      	mov	r2, r0
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <HAL_RCC_ClockConfig+0x258>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	490b      	ldr	r1, [pc, #44]	; (8002684 <HAL_RCC_ClockConfig+0x25c>)
 8002658:	5ccb      	ldrb	r3, [r1, r3]
 800265a:	fa22 f303 	lsr.w	r3, r2, r3
 800265e:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <HAL_RCC_ClockConfig+0x260>)
 8002660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002662:	4b0a      	ldr	r3, [pc, #40]	; (800268c <HAL_RCC_ClockConfig+0x264>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff f8cc 	bl	8001804 <HAL_InitTick>
 800266c:	4603      	mov	r3, r0
 800266e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002670:	7afb      	ldrb	r3, [r7, #11]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40023c00 	.word	0x40023c00
 8002680:	40023800 	.word	0x40023800
 8002684:	080039f4 	.word	0x080039f4
 8002688:	20000004 	.word	0x20000004
 800268c:	20000008 	.word	0x20000008

08002690 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002694:	b092      	sub	sp, #72	; 0x48
 8002696:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002698:	4b79      	ldr	r3, [pc, #484]	; (8002880 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800269e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b0c      	cmp	r3, #12
 80026a6:	d00d      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0x34>
 80026a8:	2b0c      	cmp	r3, #12
 80026aa:	f200 80d5 	bhi.w	8002858 <HAL_RCC_GetSysClockFreq+0x1c8>
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d002      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x28>
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d003      	beq.n	80026be <HAL_RCC_GetSysClockFreq+0x2e>
 80026b6:	e0cf      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026b8:	4b72      	ldr	r3, [pc, #456]	; (8002884 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80026ba:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80026bc:	e0da      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026be:	4b72      	ldr	r3, [pc, #456]	; (8002888 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80026c0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80026c2:	e0d7      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80026c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c6:	0c9b      	lsrs	r3, r3, #18
 80026c8:	f003 020f 	and.w	r2, r3, #15
 80026cc:	4b6f      	ldr	r3, [pc, #444]	; (800288c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80026ce:	5c9b      	ldrb	r3, [r3, r2]
 80026d0:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80026d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026d4:	0d9b      	lsrs	r3, r3, #22
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	3301      	adds	r3, #1
 80026dc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026de:	4b68      	ldr	r3, [pc, #416]	; (8002880 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d05d      	beq.n	80027a6 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80026ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ec:	2200      	movs	r2, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	4611      	mov	r1, r2
 80026f2:	4604      	mov	r4, r0
 80026f4:	460d      	mov	r5, r1
 80026f6:	4622      	mov	r2, r4
 80026f8:	462b      	mov	r3, r5
 80026fa:	f04f 0000 	mov.w	r0, #0
 80026fe:	f04f 0100 	mov.w	r1, #0
 8002702:	0159      	lsls	r1, r3, #5
 8002704:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002708:	0150      	lsls	r0, r2, #5
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4621      	mov	r1, r4
 8002710:	1a51      	subs	r1, r2, r1
 8002712:	6139      	str	r1, [r7, #16]
 8002714:	4629      	mov	r1, r5
 8002716:	eb63 0301 	sbc.w	r3, r3, r1
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002728:	4659      	mov	r1, fp
 800272a:	018b      	lsls	r3, r1, #6
 800272c:	4651      	mov	r1, sl
 800272e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002732:	4651      	mov	r1, sl
 8002734:	018a      	lsls	r2, r1, #6
 8002736:	46d4      	mov	ip, sl
 8002738:	ebb2 080c 	subs.w	r8, r2, ip
 800273c:	4659      	mov	r1, fp
 800273e:	eb63 0901 	sbc.w	r9, r3, r1
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800274e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002752:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002756:	4690      	mov	r8, r2
 8002758:	4699      	mov	r9, r3
 800275a:	4623      	mov	r3, r4
 800275c:	eb18 0303 	adds.w	r3, r8, r3
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	462b      	mov	r3, r5
 8002764:	eb49 0303 	adc.w	r3, r9, r3
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002776:	4629      	mov	r1, r5
 8002778:	024b      	lsls	r3, r1, #9
 800277a:	4620      	mov	r0, r4
 800277c:	4629      	mov	r1, r5
 800277e:	4604      	mov	r4, r0
 8002780:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002784:	4601      	mov	r1, r0
 8002786:	024a      	lsls	r2, r1, #9
 8002788:	4610      	mov	r0, r2
 800278a:	4619      	mov	r1, r3
 800278c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278e:	2200      	movs	r2, #0
 8002790:	62bb      	str	r3, [r7, #40]	; 0x28
 8002792:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002794:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002798:	f7fd fe94 	bl	80004c4 <__aeabi_uldivmod>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4613      	mov	r3, r2
 80027a2:	647b      	str	r3, [r7, #68]	; 0x44
 80027a4:	e055      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80027a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a8:	2200      	movs	r2, #0
 80027aa:	623b      	str	r3, [r7, #32]
 80027ac:	627a      	str	r2, [r7, #36]	; 0x24
 80027ae:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027b2:	4642      	mov	r2, r8
 80027b4:	464b      	mov	r3, r9
 80027b6:	f04f 0000 	mov.w	r0, #0
 80027ba:	f04f 0100 	mov.w	r1, #0
 80027be:	0159      	lsls	r1, r3, #5
 80027c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027c4:	0150      	lsls	r0, r2, #5
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	46c4      	mov	ip, r8
 80027cc:	ebb2 0a0c 	subs.w	sl, r2, ip
 80027d0:	4640      	mov	r0, r8
 80027d2:	4649      	mov	r1, r9
 80027d4:	468c      	mov	ip, r1
 80027d6:	eb63 0b0c 	sbc.w	fp, r3, ip
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027e6:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027ea:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027ee:	ebb2 040a 	subs.w	r4, r2, sl
 80027f2:	eb63 050b 	sbc.w	r5, r3, fp
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	00eb      	lsls	r3, r5, #3
 8002800:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002804:	00e2      	lsls	r2, r4, #3
 8002806:	4614      	mov	r4, r2
 8002808:	461d      	mov	r5, r3
 800280a:	4603      	mov	r3, r0
 800280c:	18e3      	adds	r3, r4, r3
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	460b      	mov	r3, r1
 8002812:	eb45 0303 	adc.w	r3, r5, r3
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002824:	4629      	mov	r1, r5
 8002826:	028b      	lsls	r3, r1, #10
 8002828:	4620      	mov	r0, r4
 800282a:	4629      	mov	r1, r5
 800282c:	4604      	mov	r4, r0
 800282e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002832:	4601      	mov	r1, r0
 8002834:	028a      	lsls	r2, r1, #10
 8002836:	4610      	mov	r0, r2
 8002838:	4619      	mov	r1, r3
 800283a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800283c:	2200      	movs	r2, #0
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	61fa      	str	r2, [r7, #28]
 8002842:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002846:	f7fd fe3d 	bl	80004c4 <__aeabi_uldivmod>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4613      	mov	r3, r2
 8002850:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8002852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002854:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002856:	e00d      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	0b5b      	lsrs	r3, r3, #13
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002866:	3301      	adds	r3, #1
 8002868:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002872:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8002876:	4618      	mov	r0, r3
 8002878:	3748      	adds	r7, #72	; 0x48
 800287a:	46bd      	mov	sp, r7
 800287c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002880:	40023800 	.word	0x40023800
 8002884:	00f42400 	.word	0x00f42400
 8002888:	007a1200 	.word	0x007a1200
 800288c:	080039e8 	.word	0x080039e8

08002890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002894:	4b02      	ldr	r3, [pc, #8]	; (80028a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002896:	681b      	ldr	r3, [r3, #0]
}
 8002898:	4618      	mov	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	20000004 	.word	0x20000004

080028a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028a8:	f7ff fff2 	bl	8002890 <HAL_RCC_GetHCLKFreq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	4903      	ldr	r1, [pc, #12]	; (80028c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ba:	5ccb      	ldrb	r3, [r1, r3]
 80028bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40023800 	.word	0x40023800
 80028c8:	08003a04 	.word	0x08003a04

080028cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028d0:	f7ff ffde 	bl	8002890 <HAL_RCC_GetHCLKFreq>
 80028d4:	4602      	mov	r2, r0
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	0adb      	lsrs	r3, r3, #11
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	4903      	ldr	r1, [pc, #12]	; (80028f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028e2:	5ccb      	ldrb	r3, [r1, r3]
 80028e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40023800 	.word	0x40023800
 80028f0:	08003a04 	.word	0x08003a04

080028f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028fc:	2300      	movs	r3, #0
 80028fe:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002900:	4b29      	ldr	r3, [pc, #164]	; (80029a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d12c      	bne.n	8002966 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800290c:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002918:	4b24      	ldr	r3, [pc, #144]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	e016      	b.n	8002952 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002924:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	4a1f      	ldr	r2, [pc, #124]	; (80029a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800292a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292e:	6253      	str	r3, [r2, #36]	; 0x24
 8002930:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800293c:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002944:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002946:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	4a17      	ldr	r2, [pc, #92]	; (80029a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800294c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002950:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002958:	d105      	bne.n	8002966 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002960:	d101      	bne.n	8002966 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002962:	2301      	movs	r3, #1
 8002964:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d105      	bne.n	8002978 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800296c:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0f      	ldr	r2, [pc, #60]	; (80029b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002972:	f043 0304 	orr.w	r3, r3, #4
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 0201 	bic.w	r2, r3, #1
 8002980:	490b      	ldr	r1, [pc, #44]	; (80029b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002988:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	429a      	cmp	r2, r3
 8002994:	d001      	beq.n	800299a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40007000 	.word	0x40007000
 80029b0:	40023c00 	.word	0x40023c00

080029b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e07b      	b.n	8002abe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d108      	bne.n	80029e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029d6:	d009      	beq.n	80029ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	61da      	str	r2, [r3, #28]
 80029de:	e005      	b.n	80029ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe fb38 	bl	800107c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a70:	ea42 0103 	orr.w	r1, r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	0c1b      	lsrs	r3, r3, #16
 8002a8a:	f003 0104 	and.w	r1, r3, #4
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	f003 0210 	and.w	r2, r3, #16
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	69da      	ldr	r2, [r3, #28]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e031      	b.n	8002b3c <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d106      	bne.n	8002af2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7fe fcf9 	bl	80014e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2202      	movs	r2, #2
 8002af6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3304      	adds	r3, #4
 8002b02:	4619      	mov	r1, r3
 8002b04:	4610      	mov	r0, r2
 8002b06:	f000 fa85 	bl	8003014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e031      	b.n	8002bba <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f829 	bl	8002bc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3304      	adds	r3, #4
 8002b80:	4619      	mov	r1, r3
 8002b82:	4610      	mov	r0, r2
 8002b84:	f000 fa46 	bl	8003014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d109      	bne.n	8002bf8 <HAL_TIM_PWM_Start+0x24>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	bf14      	ite	ne
 8002bf0:	2301      	movne	r3, #1
 8002bf2:	2300      	moveq	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	e022      	b.n	8002c3e <HAL_TIM_PWM_Start+0x6a>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d109      	bne.n	8002c12 <HAL_TIM_PWM_Start+0x3e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	bf14      	ite	ne
 8002c0a:	2301      	movne	r3, #1
 8002c0c:	2300      	moveq	r3, #0
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	e015      	b.n	8002c3e <HAL_TIM_PWM_Start+0x6a>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d109      	bne.n	8002c2c <HAL_TIM_PWM_Start+0x58>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	e008      	b.n	8002c3e <HAL_TIM_PWM_Start+0x6a>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e051      	b.n	8002cea <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d104      	bne.n	8002c56 <HAL_TIM_PWM_Start+0x82>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002c54:	e013      	b.n	8002c7e <HAL_TIM_PWM_Start+0xaa>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d104      	bne.n	8002c66 <HAL_TIM_PWM_Start+0x92>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002c64:	e00b      	b.n	8002c7e <HAL_TIM_PWM_Start+0xaa>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d104      	bne.n	8002c76 <HAL_TIM_PWM_Start+0xa2>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c74:	e003      	b.n	8002c7e <HAL_TIM_PWM_Start+0xaa>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2201      	movs	r2, #1
 8002c84:	6839      	ldr	r1, [r7, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fbbf 	bl	800340a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c94:	d00e      	beq.n	8002cb4 <HAL_TIM_PWM_Start+0xe0>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a16      	ldr	r2, [pc, #88]	; (8002cf4 <HAL_TIM_PWM_Start+0x120>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d009      	beq.n	8002cb4 <HAL_TIM_PWM_Start+0xe0>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a14      	ldr	r2, [pc, #80]	; (8002cf8 <HAL_TIM_PWM_Start+0x124>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d004      	beq.n	8002cb4 <HAL_TIM_PWM_Start+0xe0>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a13      	ldr	r2, [pc, #76]	; (8002cfc <HAL_TIM_PWM_Start+0x128>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d111      	bne.n	8002cd8 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b06      	cmp	r3, #6
 8002cc4:	d010      	beq.n	8002ce8 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd6:	e007      	b.n	8002ce8 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40000400 	.word	0x40000400
 8002cf8:	40000800 	.word	0x40000800
 8002cfc:	40010800 	.word	0x40010800

08002d00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e0ae      	b.n	8002e7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b0c      	cmp	r3, #12
 8002d2a:	f200 809f 	bhi.w	8002e6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d2e:	a201      	add	r2, pc, #4	; (adr r2, 8002d34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d34:	08002d69 	.word	0x08002d69
 8002d38:	08002e6d 	.word	0x08002e6d
 8002d3c:	08002e6d 	.word	0x08002e6d
 8002d40:	08002e6d 	.word	0x08002e6d
 8002d44:	08002da9 	.word	0x08002da9
 8002d48:	08002e6d 	.word	0x08002e6d
 8002d4c:	08002e6d 	.word	0x08002e6d
 8002d50:	08002e6d 	.word	0x08002e6d
 8002d54:	08002deb 	.word	0x08002deb
 8002d58:	08002e6d 	.word	0x08002e6d
 8002d5c:	08002e6d 	.word	0x08002e6d
 8002d60:	08002e6d 	.word	0x08002e6d
 8002d64:	08002e2b 	.word	0x08002e2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 f9c0 	bl	80030f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0208 	orr.w	r2, r2, #8
 8002d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0204 	bic.w	r2, r2, #4
 8002d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6999      	ldr	r1, [r3, #24]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	619a      	str	r2, [r3, #24]
      break;
 8002da6:	e064      	b.n	8002e72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f9dc 	bl	800316c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6999      	ldr	r1, [r3, #24]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	021a      	lsls	r2, r3, #8
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	619a      	str	r2, [r3, #24]
      break;
 8002de8:	e043      	b.n	8002e72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 f9f9 	bl	80031e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69da      	ldr	r2, [r3, #28]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0208 	orr.w	r2, r2, #8
 8002e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69da      	ldr	r2, [r3, #28]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0204 	bic.w	r2, r2, #4
 8002e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	69d9      	ldr	r1, [r3, #28]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	61da      	str	r2, [r3, #28]
      break;
 8002e28:	e023      	b.n	8002e72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68b9      	ldr	r1, [r7, #8]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fa16 	bl	8003262 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69da      	ldr	r2, [r3, #28]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69da      	ldr	r2, [r3, #28]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	69d9      	ldr	r1, [r3, #28]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	021a      	lsls	r2, r3, #8
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	61da      	str	r2, [r3, #28]
      break;
 8002e6a:	e002      	b.n	8002e72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_TIM_ConfigClockSource+0x1c>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e0b4      	b.n	800300a <HAL_TIM_ConfigClockSource+0x186>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ec6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed8:	d03e      	beq.n	8002f58 <HAL_TIM_ConfigClockSource+0xd4>
 8002eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ede:	f200 8087 	bhi.w	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee6:	f000 8086 	beq.w	8002ff6 <HAL_TIM_ConfigClockSource+0x172>
 8002eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eee:	d87f      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef0:	2b70      	cmp	r3, #112	; 0x70
 8002ef2:	d01a      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0xa6>
 8002ef4:	2b70      	cmp	r3, #112	; 0x70
 8002ef6:	d87b      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef8:	2b60      	cmp	r3, #96	; 0x60
 8002efa:	d050      	beq.n	8002f9e <HAL_TIM_ConfigClockSource+0x11a>
 8002efc:	2b60      	cmp	r3, #96	; 0x60
 8002efe:	d877      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f00:	2b50      	cmp	r3, #80	; 0x50
 8002f02:	d03c      	beq.n	8002f7e <HAL_TIM_ConfigClockSource+0xfa>
 8002f04:	2b50      	cmp	r3, #80	; 0x50
 8002f06:	d873      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f08:	2b40      	cmp	r3, #64	; 0x40
 8002f0a:	d058      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x13a>
 8002f0c:	2b40      	cmp	r3, #64	; 0x40
 8002f0e:	d86f      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f10:	2b30      	cmp	r3, #48	; 0x30
 8002f12:	d064      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x15a>
 8002f14:	2b30      	cmp	r3, #48	; 0x30
 8002f16:	d86b      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	d060      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x15a>
 8002f1c:	2b20      	cmp	r3, #32
 8002f1e:	d867      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d05c      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x15a>
 8002f24:	2b10      	cmp	r3, #16
 8002f26:	d05a      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x15a>
 8002f28:	e062      	b.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6899      	ldr	r1, [r3, #8]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f000 fa47 	bl	80033cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	609a      	str	r2, [r3, #8]
      break;
 8002f56:	e04f      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	6899      	ldr	r1, [r3, #8]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f000 fa30 	bl	80033cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f7a:	609a      	str	r2, [r3, #8]
      break;
 8002f7c:	e03c      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	6859      	ldr	r1, [r3, #4]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	f000 f9a7 	bl	80032de <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2150      	movs	r1, #80	; 0x50
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 f9fe 	bl	8003398 <TIM_ITRx_SetConfig>
      break;
 8002f9c:	e02c      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6859      	ldr	r1, [r3, #4]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f000 f9c5 	bl	800333a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2160      	movs	r1, #96	; 0x60
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 f9ee 	bl	8003398 <TIM_ITRx_SetConfig>
      break;
 8002fbc:	e01c      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6859      	ldr	r1, [r3, #4]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f000 f987 	bl	80032de <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2140      	movs	r1, #64	; 0x40
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 f9de 	bl	8003398 <TIM_ITRx_SetConfig>
      break;
 8002fdc:	e00c      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4610      	mov	r0, r2
 8002fea:	f000 f9d5 	bl	8003398 <TIM_ITRx_SetConfig>
      break;
 8002fee:	e003      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff4:	e000      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ff6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003008:	7bfb      	ldrb	r3, [r7, #15]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302a:	d00f      	beq.n	800304c <TIM_Base_SetConfig+0x38>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a2b      	ldr	r2, [pc, #172]	; (80030dc <TIM_Base_SetConfig+0xc8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00b      	beq.n	800304c <TIM_Base_SetConfig+0x38>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a2a      	ldr	r2, [pc, #168]	; (80030e0 <TIM_Base_SetConfig+0xcc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <TIM_Base_SetConfig+0x38>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a29      	ldr	r2, [pc, #164]	; (80030e4 <TIM_Base_SetConfig+0xd0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d003      	beq.n	800304c <TIM_Base_SetConfig+0x38>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a28      	ldr	r2, [pc, #160]	; (80030e8 <TIM_Base_SetConfig+0xd4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d108      	bne.n	800305e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003064:	d017      	beq.n	8003096 <TIM_Base_SetConfig+0x82>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a1c      	ldr	r2, [pc, #112]	; (80030dc <TIM_Base_SetConfig+0xc8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <TIM_Base_SetConfig+0x82>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a1b      	ldr	r2, [pc, #108]	; (80030e0 <TIM_Base_SetConfig+0xcc>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00f      	beq.n	8003096 <TIM_Base_SetConfig+0x82>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a1a      	ldr	r2, [pc, #104]	; (80030e4 <TIM_Base_SetConfig+0xd0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00b      	beq.n	8003096 <TIM_Base_SetConfig+0x82>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a19      	ldr	r2, [pc, #100]	; (80030e8 <TIM_Base_SetConfig+0xd4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d007      	beq.n	8003096 <TIM_Base_SetConfig+0x82>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a18      	ldr	r2, [pc, #96]	; (80030ec <TIM_Base_SetConfig+0xd8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d003      	beq.n	8003096 <TIM_Base_SetConfig+0x82>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a17      	ldr	r2, [pc, #92]	; (80030f0 <TIM_Base_SetConfig+0xdc>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d108      	bne.n	80030a8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800309c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	615a      	str	r2, [r3, #20]
}
 80030d2:	bf00      	nop
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	40000400 	.word	0x40000400
 80030e0:	40000800 	.word	0x40000800
 80030e4:	40000c00 	.word	0x40000c00
 80030e8:	40010800 	.word	0x40010800
 80030ec:	40010c00 	.word	0x40010c00
 80030f0:	40011000 	.word	0x40011000

080030f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	f023 0201 	bic.w	r2, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0303 	bic.w	r3, r3, #3
 800312a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f023 0302 	bic.w	r3, r3, #2
 800313c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	621a      	str	r2, [r3, #32]
}
 8003162:	bf00      	nop
 8003164:	371c      	adds	r7, #28
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f023 0210 	bic.w	r2, r3, #16
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800319a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f023 0320 	bic.w	r3, r3, #32
 80031b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	621a      	str	r2, [r3, #32]
}
 80031de:	bf00      	nop
 80031e0:	371c      	adds	r7, #28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 0303 	bic.w	r3, r3, #3
 800321e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4313      	orrs	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	4313      	orrs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	621a      	str	r2, [r3, #32]
}
 8003258:	bf00      	nop
 800325a:	371c      	adds	r7, #28
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr

08003262 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003262:	b480      	push	{r7}
 8003264:	b087      	sub	sp, #28
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003290:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003298:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	031b      	lsls	r3, r3, #12
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	621a      	str	r2, [r3, #32]
}
 80032d4:	bf00      	nop
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr

080032de <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032de:	b480      	push	{r7}
 80032e0:	b087      	sub	sp, #28
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	60f8      	str	r0, [r7, #12]
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	f023 0201 	bic.w	r2, r3, #1
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003308:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4313      	orrs	r3, r2
 8003312:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f023 030a 	bic.w	r3, r3, #10
 800331a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	621a      	str	r2, [r3, #32]
}
 8003330:	bf00      	nop
 8003332:	371c      	adds	r7, #28
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr

0800333a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800333a:	b480      	push	{r7}
 800333c:	b087      	sub	sp, #28
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f023 0210 	bic.w	r2, r3, #16
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003364:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	031b      	lsls	r3, r3, #12
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003376:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	4313      	orrs	r3, r2
 8003380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	621a      	str	r2, [r3, #32]
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f043 0307 	orr.w	r3, r3, #7
 80033ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	609a      	str	r2, [r3, #8]
}
 80033c2:	bf00      	nop
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	021a      	lsls	r2, r3, #8
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	609a      	str	r2, [r3, #8]
}
 8003400:	bf00      	nop
 8003402:	371c      	adds	r7, #28
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr

0800340a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800340a:	b480      	push	{r7}
 800340c:	b087      	sub	sp, #28
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	2201      	movs	r2, #1
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a1a      	ldr	r2, [r3, #32]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	43db      	mvns	r3, r3
 800342c:	401a      	ands	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a1a      	ldr	r2, [r3, #32]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	fa01 f303 	lsl.w	r3, r1, r3
 8003442:	431a      	orrs	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	621a      	str	r2, [r3, #32]
}
 8003448:	bf00      	nop
 800344a:	371c      	adds	r7, #28
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr
	...

08003454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003468:	2302      	movs	r3, #2
 800346a:	e046      	b.n	80034fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ae:	d00e      	beq.n	80034ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a13      	ldr	r2, [pc, #76]	; (8003504 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d009      	beq.n	80034ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a12      	ldr	r2, [pc, #72]	; (8003508 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d004      	beq.n	80034ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a10      	ldr	r2, [pc, #64]	; (800350c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d10c      	bne.n	80034e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr
 8003504:	40000400 	.word	0x40000400
 8003508:	40000800 	.word	0x40000800
 800350c:	40010800 	.word	0x40010800

08003510 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e042      	b.n	80035a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fe f8e2 	bl	8001700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2224      	movs	r2, #36	; 0x24
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003552:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f92b 	bl	80037b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003568:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695a      	ldr	r2, [r3, #20]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003578:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003588:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08a      	sub	sp, #40	; 0x28
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	4613      	mov	r3, r2
 80035be:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d17c      	bne.n	80036ca <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_UART_Receive+0x2c>
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e075      	b.n	80036cc <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2222      	movs	r2, #34	; 0x22
 80035ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035f4:	f7fe f952 	bl	800189c <HAL_GetTick>
 80035f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	88fa      	ldrh	r2, [r7, #6]
 80035fe:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	88fa      	ldrh	r2, [r7, #6]
 8003604:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360e:	d108      	bne.n	8003622 <HAL_UART_Receive+0x72>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d104      	bne.n	8003622 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	61bb      	str	r3, [r7, #24]
 8003620:	e003      	b.n	800362a <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003626:	2300      	movs	r3, #0
 8003628:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800362a:	e043      	b.n	80036b4 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2200      	movs	r2, #0
 8003634:	2120      	movs	r1, #32
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f84c 	bl	80036d4 <UART_WaitOnFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e042      	b.n	80036cc <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10c      	bne.n	8003666 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	b29b      	uxth	r3, r3
 8003654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003658:	b29a      	uxth	r2, r3
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	3302      	adds	r3, #2
 8003662:	61bb      	str	r3, [r7, #24]
 8003664:	e01f      	b.n	80036a6 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366e:	d007      	beq.n	8003680 <HAL_UART_Receive+0xd0>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <HAL_UART_Receive+0xde>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d106      	bne.n	800368e <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	701a      	strb	r2, [r3, #0]
 800368c:	e008      	b.n	80036a0 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800369a:	b2da      	uxtb	r2, r3
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	3301      	adds	r3, #1
 80036a4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1b6      	bne.n	800362c <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	e000      	b.n	80036cc <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036ca:	2302      	movs	r3, #2
  }
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3720      	adds	r7, #32
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b090      	sub	sp, #64	; 0x40
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	4613      	mov	r3, r2
 80036e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e4:	e050      	b.n	8003788 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d04c      	beq.n	8003788 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d007      	beq.n	8003704 <UART_WaitOnFlagUntilTimeout+0x30>
 80036f4:	f7fe f8d2 	bl	800189c <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003700:	429a      	cmp	r2, r3
 8003702:	d241      	bcs.n	8003788 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	330c      	adds	r3, #12
 800370a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370e:	e853 3f00 	ldrex	r3, [r3]
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800371a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	330c      	adds	r3, #12
 8003722:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003724:	637a      	str	r2, [r7, #52]	; 0x34
 8003726:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003728:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800372a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800372c:	e841 2300 	strex	r3, r2, [r1]
 8003730:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e5      	bne.n	8003704 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3314      	adds	r3, #20
 800373e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	e853 3f00 	ldrex	r3, [r3]
 8003746:	613b      	str	r3, [r7, #16]
   return(result);
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f023 0301 	bic.w	r3, r3, #1
 800374e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3314      	adds	r3, #20
 8003756:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003758:	623a      	str	r2, [r7, #32]
 800375a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375c:	69f9      	ldr	r1, [r7, #28]
 800375e:	6a3a      	ldr	r2, [r7, #32]
 8003760:	e841 2300 	strex	r3, r2, [r1]
 8003764:	61bb      	str	r3, [r7, #24]
   return(result);
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1e5      	bne.n	8003738 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e00f      	b.n	80037a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	4013      	ands	r3, r2
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	429a      	cmp	r2, r3
 8003796:	bf0c      	ite	eq
 8003798:	2301      	moveq	r3, #1
 800379a:	2300      	movne	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	79fb      	ldrb	r3, [r7, #7]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d09f      	beq.n	80036e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3740      	adds	r7, #64	; 0x40
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80037f0:	f023 030c 	bic.w	r3, r3, #12
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6812      	ldr	r2, [r2, #0]
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	430b      	orrs	r3, r1
 80037fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699a      	ldr	r2, [r3, #24]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a55      	ldr	r2, [pc, #340]	; (8003970 <UART_SetConfig+0x1c0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d103      	bne.n	8003826 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800381e:	f7ff f855 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	e002      	b.n	800382c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003826:	f7ff f83d 	bl	80028a4 <HAL_RCC_GetPCLK1Freq>
 800382a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003834:	d14c      	bne.n	80038d0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	009a      	lsls	r2, r3, #2
 8003840:	441a      	add	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	fbb2 f3f3 	udiv	r3, r2, r3
 800384c:	4a49      	ldr	r2, [pc, #292]	; (8003974 <UART_SetConfig+0x1c4>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	0119      	lsls	r1, r3, #4
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	009a      	lsls	r2, r3, #2
 8003860:	441a      	add	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	fbb2 f2f3 	udiv	r2, r2, r3
 800386c:	4b41      	ldr	r3, [pc, #260]	; (8003974 <UART_SetConfig+0x1c4>)
 800386e:	fba3 0302 	umull	r0, r3, r3, r2
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	2064      	movs	r0, #100	; 0x64
 8003876:	fb00 f303 	mul.w	r3, r0, r3
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	3332      	adds	r3, #50	; 0x32
 8003880:	4a3c      	ldr	r2, [pc, #240]	; (8003974 <UART_SetConfig+0x1c4>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800388e:	4419      	add	r1, r3
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	009a      	lsls	r2, r3, #2
 800389a:	441a      	add	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80038a6:	4b33      	ldr	r3, [pc, #204]	; (8003974 <UART_SetConfig+0x1c4>)
 80038a8:	fba3 0302 	umull	r0, r3, r3, r2
 80038ac:	095b      	lsrs	r3, r3, #5
 80038ae:	2064      	movs	r0, #100	; 0x64
 80038b0:	fb00 f303 	mul.w	r3, r0, r3
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	3332      	adds	r3, #50	; 0x32
 80038ba:	4a2e      	ldr	r2, [pc, #184]	; (8003974 <UART_SetConfig+0x1c4>)
 80038bc:	fba2 2303 	umull	r2, r3, r2, r3
 80038c0:	095b      	lsrs	r3, r3, #5
 80038c2:	f003 0207 	and.w	r2, r3, #7
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	440a      	add	r2, r1
 80038cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038ce:	e04a      	b.n	8003966 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	009a      	lsls	r2, r3, #2
 80038da:	441a      	add	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e6:	4a23      	ldr	r2, [pc, #140]	; (8003974 <UART_SetConfig+0x1c4>)
 80038e8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	0119      	lsls	r1, r3, #4
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	009a      	lsls	r2, r3, #2
 80038fa:	441a      	add	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	fbb2 f2f3 	udiv	r2, r2, r3
 8003906:	4b1b      	ldr	r3, [pc, #108]	; (8003974 <UART_SetConfig+0x1c4>)
 8003908:	fba3 0302 	umull	r0, r3, r3, r2
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	2064      	movs	r0, #100	; 0x64
 8003910:	fb00 f303 	mul.w	r3, r0, r3
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	3332      	adds	r3, #50	; 0x32
 800391a:	4a16      	ldr	r2, [pc, #88]	; (8003974 <UART_SetConfig+0x1c4>)
 800391c:	fba2 2303 	umull	r2, r3, r2, r3
 8003920:	095b      	lsrs	r3, r3, #5
 8003922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003926:	4419      	add	r1, r3
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	009a      	lsls	r2, r3, #2
 8003932:	441a      	add	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	fbb2 f2f3 	udiv	r2, r2, r3
 800393e:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <UART_SetConfig+0x1c4>)
 8003940:	fba3 0302 	umull	r0, r3, r3, r2
 8003944:	095b      	lsrs	r3, r3, #5
 8003946:	2064      	movs	r0, #100	; 0x64
 8003948:	fb00 f303 	mul.w	r3, r0, r3
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	3332      	adds	r3, #50	; 0x32
 8003952:	4a08      	ldr	r2, [pc, #32]	; (8003974 <UART_SetConfig+0x1c4>)
 8003954:	fba2 2303 	umull	r2, r3, r2, r3
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	f003 020f 	and.w	r2, r3, #15
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	440a      	add	r2, r1
 8003964:	609a      	str	r2, [r3, #8]
}
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40013800 	.word	0x40013800
 8003974:	51eb851f 	.word	0x51eb851f

08003978 <__libc_init_array>:
 8003978:	b570      	push	{r4, r5, r6, lr}
 800397a:	2600      	movs	r6, #0
 800397c:	4d0c      	ldr	r5, [pc, #48]	; (80039b0 <__libc_init_array+0x38>)
 800397e:	4c0d      	ldr	r4, [pc, #52]	; (80039b4 <__libc_init_array+0x3c>)
 8003980:	1b64      	subs	r4, r4, r5
 8003982:	10a4      	asrs	r4, r4, #2
 8003984:	42a6      	cmp	r6, r4
 8003986:	d109      	bne.n	800399c <__libc_init_array+0x24>
 8003988:	f000 f822 	bl	80039d0 <_init>
 800398c:	2600      	movs	r6, #0
 800398e:	4d0a      	ldr	r5, [pc, #40]	; (80039b8 <__libc_init_array+0x40>)
 8003990:	4c0a      	ldr	r4, [pc, #40]	; (80039bc <__libc_init_array+0x44>)
 8003992:	1b64      	subs	r4, r4, r5
 8003994:	10a4      	asrs	r4, r4, #2
 8003996:	42a6      	cmp	r6, r4
 8003998:	d105      	bne.n	80039a6 <__libc_init_array+0x2e>
 800399a:	bd70      	pop	{r4, r5, r6, pc}
 800399c:	f855 3b04 	ldr.w	r3, [r5], #4
 80039a0:	4798      	blx	r3
 80039a2:	3601      	adds	r6, #1
 80039a4:	e7ee      	b.n	8003984 <__libc_init_array+0xc>
 80039a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039aa:	4798      	blx	r3
 80039ac:	3601      	adds	r6, #1
 80039ae:	e7f2      	b.n	8003996 <__libc_init_array+0x1e>
 80039b0:	08003a14 	.word	0x08003a14
 80039b4:	08003a14 	.word	0x08003a14
 80039b8:	08003a14 	.word	0x08003a14
 80039bc:	08003a18 	.word	0x08003a18

080039c0 <memset>:
 80039c0:	4603      	mov	r3, r0
 80039c2:	4402      	add	r2, r0
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d100      	bne.n	80039ca <memset+0xa>
 80039c8:	4770      	bx	lr
 80039ca:	f803 1b01 	strb.w	r1, [r3], #1
 80039ce:	e7f9      	b.n	80039c4 <memset+0x4>

080039d0 <_init>:
 80039d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d2:	bf00      	nop
 80039d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d6:	bc08      	pop	{r3}
 80039d8:	469e      	mov	lr, r3
 80039da:	4770      	bx	lr

080039dc <_fini>:
 80039dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039de:	bf00      	nop
 80039e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039e2:	bc08      	pop	{r3}
 80039e4:	469e      	mov	lr, r3
 80039e6:	4770      	bx	lr
