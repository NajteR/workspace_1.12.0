
nrfsalamonduzy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f30  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800406c  0800406c  0001406c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040d4  080040d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080040d4  080040d4  000140d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040dc  080040dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040dc  080040dc  000140dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040e0  080040e0  000140e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080040e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000070  08004154  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08004154  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa00  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d59  00000000  00000000  0002aa99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002c7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002d238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001631a  00000000  00000000  0002dbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b872  00000000  00000000  00043eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087502  00000000  00000000  0004f73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6c3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c9c  00000000  00000000  000d6c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08004054 	.word	0x08004054

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08004054 	.word	0x08004054

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08a      	sub	sp, #40	; 0x28
 8000488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	f107 0314 	add.w	r3, r7, #20
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
 8000498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049a:	4b42      	ldr	r3, [pc, #264]	; (80005a4 <MX_GPIO_Init+0x120>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	4a41      	ldr	r2, [pc, #260]	; (80005a4 <MX_GPIO_Init+0x120>)
 80004a0:	f043 0304 	orr.w	r3, r3, #4
 80004a4:	61d3      	str	r3, [r2, #28]
 80004a6:	4b3f      	ldr	r3, [pc, #252]	; (80005a4 <MX_GPIO_Init+0x120>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f003 0304 	and.w	r3, r3, #4
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004b2:	4b3c      	ldr	r3, [pc, #240]	; (80005a4 <MX_GPIO_Init+0x120>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a3b      	ldr	r2, [pc, #236]	; (80005a4 <MX_GPIO_Init+0x120>)
 80004b8:	f043 0320 	orr.w	r3, r3, #32
 80004bc:	61d3      	str	r3, [r2, #28]
 80004be:	4b39      	ldr	r3, [pc, #228]	; (80005a4 <MX_GPIO_Init+0x120>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f003 0320 	and.w	r3, r3, #32
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b36      	ldr	r3, [pc, #216]	; (80005a4 <MX_GPIO_Init+0x120>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a35      	ldr	r2, [pc, #212]	; (80005a4 <MX_GPIO_Init+0x120>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b33      	ldr	r3, [pc, #204]	; (80005a4 <MX_GPIO_Init+0x120>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e2:	4b30      	ldr	r3, [pc, #192]	; (80005a4 <MX_GPIO_Init+0x120>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4a2f      	ldr	r2, [pc, #188]	; (80005a4 <MX_GPIO_Init+0x120>)
 80004e8:	f043 0302 	orr.w	r3, r3, #2
 80004ec:	61d3      	str	r3, [r2, #28]
 80004ee:	4b2d      	ldr	r3, [pc, #180]	; (80005a4 <MX_GPIO_Init+0x120>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	f003 0302 	and.w	r3, r3, #2
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2120      	movs	r1, #32
 80004fe:	482a      	ldr	r0, [pc, #168]	; (80005a8 <MX_GPIO_Init+0x124>)
 8000500:	f001 fad2 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2106      	movs	r1, #6
 8000508:	4828      	ldr	r0, [pc, #160]	; (80005ac <MX_GPIO_Init+0x128>)
 800050a:	f001 facd 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800050e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000514:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	4619      	mov	r1, r3
 8000524:	4822      	ldr	r0, [pc, #136]	; (80005b0 <MX_GPIO_Init+0x12c>)
 8000526:	f001 f92f 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800052a:	2320      	movs	r3, #32
 800052c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	2301      	movs	r3, #1
 8000530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	2300      	movs	r3, #0
 8000538:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	4619      	mov	r1, r3
 8000540:	4819      	ldr	r0, [pc, #100]	; (80005a8 <MX_GPIO_Init+0x124>)
 8000542:	f001 f921 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8000546:	2306      	movs	r3, #6
 8000548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054a:	2301      	movs	r3, #1
 800054c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2300      	movs	r3, #0
 8000554:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	4619      	mov	r1, r3
 800055c:	4813      	ldr	r0, [pc, #76]	; (80005ac <MX_GPIO_Init+0x128>)
 800055e:	f001 f913 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_INT_Pin;
 8000562:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000568:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800056c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_INT_GPIO_Port, &GPIO_InitStruct);
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	4619      	mov	r1, r3
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <MX_GPIO_Init+0x128>)
 800057a:	f001 f905 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRf_IQR_Pin;
 800057e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000584:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRf_IQR_GPIO_Port, &GPIO_InitStruct);
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4619      	mov	r1, r3
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <MX_GPIO_Init+0x124>)
 8000596:	f001 f8f7 	bl	8001788 <HAL_GPIO_Init>

}
 800059a:	bf00      	nop
 800059c:	3728      	adds	r7, #40	; 0x28
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40020000 	.word	0x40020000
 80005ac:	40020400 	.word	0x40020400
 80005b0:	40020800 	.word	0x40020800

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 ff47 	bl	800144a <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f81e 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f7ff ff60 	bl	8000484 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 feae 	bl	8001324 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80005c8:	f000 fd8a 	bl	80010e0 <MX_SPI2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005cc:	f000 f864 	bl	8000698 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  nRF24_Init(&hspi2);
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <main+0x3c>)
 80005d2:	f000 fd2b 	bl	800102c <nRF24_Init>

  nRF24_SetRXAddress(0, "Odb");
 80005d6:	4907      	ldr	r1, [pc, #28]	; (80005f4 <main+0x40>)
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 fb7c 	bl	8000cd6 <nRF24_SetRXAddress>
  nRF24_SetTXAddress("Nad");
 80005de:	4806      	ldr	r0, [pc, #24]	; (80005f8 <main+0x44>)
 80005e0:	f000 fbb2 	bl	8000d48 <nRF24_SetTXAddress>
  nRF24_RX_Mode();
 80005e4:	f000 f98c 	bl	8000900 <nRF24_RX_Mode>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // nRF24_RX_Mode();
	  nRF24_Event();
 80005e8:	f000 fcf8 	bl	8000fdc <nRF24_Event>
 80005ec:	e7fc      	b.n	80005e8 <main+0x34>
 80005ee:	bf00      	nop
 80005f0:	200000bc 	.word	0x200000bc
 80005f4:	0800406c 	.word	0x0800406c
 80005f8:	08004070 	.word	0x08004070

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b092      	sub	sp, #72	; 0x48
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2234      	movs	r2, #52	; 0x34
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f003 f8a0 	bl	8003750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <SystemClock_Config+0x98>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000626:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <SystemClock_Config+0x98>)
 8000628:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800062c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062e:	2302      	movs	r3, #2
 8000630:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000632:	2301      	movs	r3, #1
 8000634:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000636:	2310      	movs	r3, #16
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063e:	2300      	movs	r3, #0
 8000640:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000642:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000648:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800064c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fa72 	bl	8001b3c <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800065e:	f000 f87b 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2303      	movs	r3, #3
 8000668:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000676:	463b      	mov	r3, r7
 8000678:	2101      	movs	r1, #1
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fd8e 	bl	800219c <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000686:	f000 f867 	bl	8000758 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3748      	adds	r7, #72	; 0x48
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40007000 	.word	0x40007000

08000698 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	2017      	movs	r0, #23
 80006a2:	f001 f83a 	bl	800171a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006a6:	2017      	movs	r0, #23
 80006a8:	f001 f853 	bl	8001752 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2100      	movs	r1, #0
 80006b0:	2028      	movs	r0, #40	; 0x28
 80006b2:	f001 f832 	bl	800171a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006b6:	2028      	movs	r0, #40	; 0x28
 80006b8:	f001 f84b 	bl	8001752 <HAL_NVIC_EnableIRQ>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRf_IQR_Pin)
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006d0:	d105      	bne.n	80006de <HAL_GPIO_EXTI_Callback+0x1e>
	{
		nRF24_IRQ_Handler();
 80006d2:	f000 fc27 	bl	8000f24 <nRF24_IRQ_Handler>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006d6:	2120      	movs	r1, #32
 80006d8:	4807      	ldr	r0, [pc, #28]	; (80006f8 <HAL_GPIO_EXTI_Callback+0x38>)
 80006da:	f001 f9fd 	bl	8001ad8 <HAL_GPIO_TogglePin>

	}
	if(GPIO_Pin == B1_Pin)
 80006de:	88fb      	ldrh	r3, [r7, #6]
 80006e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006e4:	d103      	bne.n	80006ee <HAL_GPIO_EXTI_Callback+0x2e>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006e6:	2120      	movs	r1, #32
 80006e8:	4803      	ldr	r0, [pc, #12]	; (80006f8 <HAL_GPIO_EXTI_Callback+0x38>)
 80006ea:	f001 f9f5 	bl	8001ad8 <HAL_GPIO_TogglePin>
	}
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40020000 	.word	0x40020000

080006fc <nRF24_EventRxCallback>:

void nRF24_EventRxCallback(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	do
	{
		nRF24_ReceivePacket(Message, &MessageLength);
 8000700:	4911      	ldr	r1, [pc, #68]	; (8000748 <nRF24_EventRxCallback+0x4c>)
 8000702:	4812      	ldr	r0, [pc, #72]	; (800074c <nRF24_EventRxCallback+0x50>)
 8000704:	f000 fbff 	bl	8000f06 <nRF24_ReceivePacket>
		Message[MessageLength] = 0; // end of string
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <nRF24_EventRxCallback+0x4c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <nRF24_EventRxCallback+0x50>)
 8000710:	2100      	movs	r1, #0
 8000712:	5499      	strb	r1, [r3, r2]
		MessageLength = sprintf(Message, "%s\n\r", Message);
 8000714:	4a0d      	ldr	r2, [pc, #52]	; (800074c <nRF24_EventRxCallback+0x50>)
 8000716:	490e      	ldr	r1, [pc, #56]	; (8000750 <nRF24_EventRxCallback+0x54>)
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <nRF24_EventRxCallback+0x50>)
 800071a:	f003 f821 	bl	8003760 <siprintf>
 800071e:	4603      	mov	r3, r0
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <nRF24_EventRxCallback+0x4c>)
 8000724:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <nRF24_EventRxCallback+0x4c>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	b29a      	uxth	r2, r3
 800072c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000730:	4906      	ldr	r1, [pc, #24]	; (800074c <nRF24_EventRxCallback+0x50>)
 8000732:	4808      	ldr	r0, [pc, #32]	; (8000754 <nRF24_EventRxCallback+0x58>)
 8000734:	f002 fe0c 	bl	8003350 <HAL_UART_Transmit>
	}while(!nRF24_IsRxEmpty());
 8000738:	f000 f9a4 	bl	8000a84 <nRF24_IsRxEmpty>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0de      	beq.n	8000700 <nRF24_EventRxCallback+0x4>


}
 8000742:	bf00      	nop
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200000ad 	.word	0x200000ad
 800074c:	2000008c 	.word	0x2000008c
 8000750:	08004074 	.word	0x08004074
 8000754:	20000118 	.word	0x20000118

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	e7fe      	b.n	8000760 <Error_Handler+0x8>

08000762 <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b082      	sub	sp, #8
 8000766:	af00      	add	r7, sp, #0
 8000768:	4603      	mov	r3, r0
 800076a:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	4618      	mov	r0, r3
 8000770:	f000 feda 	bl	8001528 <HAL_Delay>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <nRF24_SendSpi+0x28>)
 800078a:	6818      	ldr	r0, [r3, #0]
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	b29a      	uxth	r2, r3
 8000790:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000794:	6879      	ldr	r1, [r7, #4]
 8000796:	f002 f850 	bl	800283a <HAL_SPI_Transmit>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000b0 	.word	0x200000b0

080007a8 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <nRF24_ReadSpi+0x28>)
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	f002 f97d 	bl	8002ac0 <HAL_SPI_Receive>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000b0 	.word	0x200000b0

080007d4 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80007e2:	2200      	movs	r2, #0
 80007e4:	2104      	movs	r1, #4
 80007e6:	480c      	ldr	r0, [pc, #48]	; (8000818 <nRF24_ReadRegister+0x44>)
 80007e8:	f001 f95e 	bl	8001aa8 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	2101      	movs	r1, #1
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ffc3 	bl	800077c <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 80007f6:	f107 030f 	add.w	r3, r7, #15
 80007fa:	2101      	movs	r1, #1
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ffd3 	bl	80007a8 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8000802:	2201      	movs	r2, #1
 8000804:	2104      	movs	r1, #4
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <nRF24_ReadRegister+0x44>)
 8000808:	f001 f94e 	bl	8001aa8 <HAL_GPIO_WritePin>

	return result;
 800080c:	7bfb      	ldrb	r3, [r7, #15]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40020400 	.word	0x40020400

0800081c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	4613      	mov	r3, r2
 800082a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000830:	2200      	movs	r2, #0
 8000832:	2104      	movs	r1, #4
 8000834:	480a      	ldr	r0, [pc, #40]	; (8000860 <nRF24_ReadRegisters+0x44>)
 8000836:	f001 f937 	bl	8001aa8 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	2101      	movs	r1, #1
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff9c 	bl	800077c <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8000844:	79bb      	ldrb	r3, [r7, #6]
 8000846:	4619      	mov	r1, r3
 8000848:	6838      	ldr	r0, [r7, #0]
 800084a:	f7ff ffad 	bl	80007a8 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 800084e:	2201      	movs	r2, #1
 8000850:	2104      	movs	r1, #4
 8000852:	4803      	ldr	r0, [pc, #12]	; (8000860 <nRF24_ReadRegisters+0x44>)
 8000854:	f001 f928 	bl	8001aa8 <HAL_GPIO_WritePin>
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40020400 	.word	0x40020400

08000864 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	460a      	mov	r2, r1
 800086e:	71fb      	strb	r3, [r7, #7]
 8000870:	4613      	mov	r3, r2
 8000872:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	f043 0320 	orr.w	r3, r3, #32
 800087a:	b2db      	uxtb	r3, r3
 800087c:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 800087e:	79bb      	ldrb	r3, [r7, #6]
 8000880:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8000882:	2200      	movs	r2, #0
 8000884:	2104      	movs	r1, #4
 8000886:	4809      	ldr	r0, [pc, #36]	; (80008ac <nRF24_WriteRegister+0x48>)
 8000888:	f001 f90e 	bl	8001aa8 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	2102      	movs	r1, #2
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ff72 	bl	800077c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8000898:	2201      	movs	r2, #1
 800089a:	2104      	movs	r1, #4
 800089c:	4803      	ldr	r0, [pc, #12]	; (80008ac <nRF24_WriteRegister+0x48>)
 800089e:	f001 f903 	bl	8001aa8 <HAL_GPIO_WritePin>
}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40020400 	.word	0x40020400

080008b0 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	4613      	mov	r3, r2
 80008be:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	f043 0320 	orr.w	r3, r3, #32
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80008ca:	2200      	movs	r2, #0
 80008cc:	2104      	movs	r1, #4
 80008ce:	480b      	ldr	r0, [pc, #44]	; (80008fc <nRF24_WriteRegisters+0x4c>)
 80008d0:	f001 f8ea 	bl	8001aa8 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	2101      	movs	r1, #1
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff4f 	bl	800077c <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 80008de:	79bb      	ldrb	r3, [r7, #6]
 80008e0:	4619      	mov	r1, r3
 80008e2:	6838      	ldr	r0, [r7, #0]
 80008e4:	f7ff ff4a 	bl	800077c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80008e8:	2201      	movs	r2, #1
 80008ea:	2104      	movs	r1, #4
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <nRF24_WriteRegisters+0x4c>)
 80008ee:	f001 f8db 	bl	8001aa8 <HAL_GPIO_WritePin>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40020400 	.word	0x40020400

08000900 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8000906:	f000 f829 	bl	800095c <nRF24_ReadConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 800090e:	4911      	ldr	r1, [pc, #68]	; (8000954 <nRF24_RX_Mode+0x54>)
 8000910:	2000      	movs	r0, #0
 8000912:	f000 f9e0 	bl	8000cd6 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	4618      	mov	r0, r3
 800092a:	f000 f81f 	bl	800096c <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 800092e:	2070      	movs	r0, #112	; 0x70
 8000930:	f000 f877 	bl	8000a22 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8000934:	f000 f8ae 	bl	8000a94 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8000938:	f000 f8c6 	bl	8000ac8 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 800093c:	2201      	movs	r2, #1
 800093e:	2102      	movs	r1, #2
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <nRF24_RX_Mode+0x58>)
 8000942:	f001 f8b1 	bl	8001aa8 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 8000946:	2001      	movs	r0, #1
 8000948:	f7ff ff0b 	bl	8000762 <nRF24_Delay_ms>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200000b4 	.word	0x200000b4
 8000958:	40020400 	.word	0x40020400

0800095c <nRF24_ReadConfig>:
}



uint8_t nRF24_ReadConfig(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8000960:	2000      	movs	r0, #0
 8000962:	f7ff ff37 	bl	80007d4 <nRF24_ReadRegister>
 8000966:	4603      	mov	r3, r0
}
 8000968:	4618      	mov	r0, r3
 800096a:	bd80      	pop	{r7, pc}

0800096c <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	4619      	mov	r1, r3
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff ff72 	bl	8000864 <nRF24_WriteRegister>
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8000992:	2006      	movs	r0, #6
 8000994:	f7ff ff1e 	bl	80007d4 <nRF24_ReadRegister>
 8000998:	4603      	mov	r3, r0
 800099a:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	f023 0307 	bic.w	r3, r3, #7
 80009a2:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	b25a      	sxtb	r2, r3
 80009aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	b25b      	sxtb	r3, r3
 80009b2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	4619      	mov	r1, r3
 80009b8:	2006      	movs	r0, #6
 80009ba:	f7ff ff53 	bl	8000864 <nRF24_WriteRegister>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b084      	sub	sp, #16
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4603      	mov	r3, r0
 80009ce:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80009d0:	2006      	movs	r0, #6
 80009d2:	f7ff feff 	bl	80007d4 <nRF24_ReadRegister>
 80009d6:	4603      	mov	r3, r0
 80009d8:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80009e0:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d104      	bne.n	80009f2 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	f043 0320 	orr.w	r3, r3, #32
 80009ee:	73fb      	strb	r3, [r7, #15]
 80009f0:	e006      	b.n	8000a00 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d103      	bne.n	8000a00 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	f043 0308 	orr.w	r3, r3, #8
 80009fe:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	4619      	mov	r1, r3
 8000a04:	2006      	movs	r0, #6
 8000a06:	f7ff ff2d 	bl	8000864 <nRF24_WriteRegister>
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8000a16:	2007      	movs	r0, #7
 8000a18:	f7ff fedc 	bl	80007d4 <nRF24_ReadRegister>
 8000a1c:	4603      	mov	r3, r0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	4603      	mov	r3, r0
 8000a2a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	4619      	mov	r1, r3
 8000a30:	2007      	movs	r0, #7
 8000a32:	f7ff ff17 	bl	8000864 <nRF24_WriteRegister>
	HAL_Delay(1);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f000 fd76 	bl	8001528 <HAL_Delay>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <nRF24_ReadFifoStatus>:
//
// FIFO Status
//

uint8_t nRF24_ReadFifoStatus(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 8000a48:	2017      	movs	r0, #23
 8000a4a:	f7ff fec3 	bl	80007d4 <nRF24_ReadRegister>
 8000a4e:	4603      	mov	r3, r0
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <nRF24_IsBitSetInFifoStatus>:
{
	nRF24_WriteRegister(NRF24_FIFO_STATUS, st);
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8000a5e:	f7ff fff1 	bl	8000a44 <nRF24_ReadFifoStatus>
 8000a62:	4603      	mov	r3, r0
 8000a64:	73fb      	strb	r3, [r7, #15]

	if(FifoStatus & (1<<Bit))
 8000a66:	7bfa      	ldrb	r2, [r7, #15]
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	fa42 f303 	asr.w	r3, r2, r3
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <nRF24_IsBitSetInFifoStatus+0x26>
	{
		return 1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e000      	b.n	8000a7c <nRF24_IsBitSetInFifoStatus+0x28>
	}

	return 0;
 8000a7a:	2300      	movs	r3, #0
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <nRF24_IsRxEmpty>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_FULL);
}

uint8_t nRF24_IsRxEmpty(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff ffe3 	bl	8000a54 <nRF24_IsBitSetInFifoStatus>
 8000a8e:	4603      	mov	r3, r0
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8000a9a:	23e2      	movs	r3, #226	; 0xe2
 8000a9c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	4808      	ldr	r0, [pc, #32]	; (8000ac4 <nRF24_FlushRX+0x30>)
 8000aa4:	f001 f800 	bl	8001aa8 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8000aa8:	1dfb      	adds	r3, r7, #7
 8000aaa:	2101      	movs	r1, #1
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fe65 	bl	800077c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <nRF24_FlushRX+0x30>)
 8000ab8:	f000 fff6 	bl	8001aa8 <HAL_GPIO_WritePin>
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8000ace:	23e1      	movs	r3, #225	; 0xe1
 8000ad0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2104      	movs	r1, #4
 8000ad6:	4808      	ldr	r0, [pc, #32]	; (8000af8 <nRF24_FlushTX+0x30>)
 8000ad8:	f000 ffe6 	bl	8001aa8 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8000adc:	1dfb      	adds	r3, r7, #7
 8000ade:	2101      	movs	r1, #1
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fe4b 	bl	800077c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	2104      	movs	r1, #4
 8000aea:	4803      	ldr	r0, [pc, #12]	; (8000af8 <nRF24_FlushTX+0x30>)
 8000aec:	f000 ffdc 	bl	8001aa8 <HAL_GPIO_WritePin>
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40020400 	.word	0x40020400

08000afc <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000b06:	f7ff ff29 	bl	800095c <nRF24_ReadConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d004      	beq.n	8000b1e <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	f043 0308 	orr.w	r3, r3, #8
 8000b1a:	73fb      	strb	r3, [r7, #15]
 8000b1c:	e003      	b.n	8000b26 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	f023 0308 	bic.w	r3, r3, #8
 8000b24:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff1f 	bl	800096c <nRF24_WriteConfig>
}
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b084      	sub	sp, #16
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000b40:	f7ff ff0c 	bl	800095c <nRF24_ReadConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d104      	bne.n	8000b58 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	73fb      	strb	r3, [r7, #15]
 8000b56:	e003      	b.n	8000b60 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	f023 0304 	bic.w	r3, r3, #4
 8000b5e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff02 	bl	800096c <nRF24_WriteConfig>
}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	460a      	mov	r2, r1
 8000b7a:	71fb      	strb	r3, [r7, #7]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	011b      	lsls	r3, r3, #4
 8000b84:	b25a      	sxtb	r2, r3
 8000b86:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	4313      	orrs	r3, r2
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	4619      	mov	r1, r3
 8000b98:	2004      	movs	r0, #4
 8000b9a:	f7ff fe63 	bl	8000864 <nRF24_WriteRegister>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	4619      	mov	r1, r3
 8000bba:	2005      	movs	r0, #5
 8000bbc:	f7ff fe52 	bl	8000864 <nRF24_WriteRegister>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	460a      	mov	r2, r1
 8000bd2:	71fb      	strb	r3, [r7, #7]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b05      	cmp	r3, #5
 8000bdc:	d901      	bls.n	8000be2 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8000bde:	2305      	movs	r3, #5
 8000be0:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8000be2:	2002      	movs	r0, #2
 8000be4:	f7ff fdf6 	bl	80007d4 <nRF24_ReadRegister>
 8000be8:	4603      	mov	r3, r0
 8000bea:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8000bec:	79bb      	ldrb	r3, [r7, #6]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d10a      	bne.n	8000c08 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	b25a      	sxtb	r2, r3
 8000bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b25b      	sxtb	r3, r3
 8000c04:	73fb      	strb	r3, [r7, #15]
 8000c06:	e00b      	b.n	8000c20 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	b25a      	sxtb	r2, r3
 8000c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	b25b      	sxtb	r3, r3
 8000c1e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	4619      	mov	r1, r3
 8000c24:	2002      	movs	r0, #2
 8000c26:	f7ff fe1d 	bl	8000864 <nRF24_WriteRegister>
}
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b084      	sub	sp, #16
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	460a      	mov	r2, r1
 8000c3c:	71fb      	strb	r3, [r7, #7]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b05      	cmp	r3, #5
 8000c46:	d901      	bls.n	8000c4c <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8000c48:	2305      	movs	r3, #5
 8000c4a:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f7ff fdc1 	bl	80007d4 <nRF24_ReadRegister>
 8000c52:	4603      	mov	r3, r0
 8000c54:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8000c56:	79bb      	ldrb	r3, [r7, #6]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d10a      	bne.n	8000c72 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	b25a      	sxtb	r2, r3
 8000c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	b25b      	sxtb	r3, r3
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	e00b      	b.n	8000c8a <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2201      	movs	r2, #1
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	b25b      	sxtb	r3, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	b25a      	sxtb	r2, r3
 8000c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c84:	4013      	ands	r3, r2
 8000c86:	b25b      	sxtb	r3, r3
 8000c88:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f7ff fde8 	bl	8000864 <nRF24_WriteRegister>
}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2b05      	cmp	r3, #5
 8000caa:	d901      	bls.n	8000cb0 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8000cac:	2305      	movs	r3, #5
 8000cae:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d801      	bhi.n	8000cba <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	3b02      	subs	r3, #2
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f7ff fdcb 	bl	8000864 <nRF24_WriteRegister>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	6039      	str	r1, [r7, #0]
 8000ce0:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <nRF24_SetRXAddress+0x18>
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d11d      	bne.n	8000d2a <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	73fb      	strb	r3, [r7, #15]
 8000cf2:	e00d      	b.n	8000d10 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	683a      	ldr	r2, [r7, #0]
 8000cf8:	441a      	add	r2, r3
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	f1c3 0302 	rsb	r3, r3, #2
 8000d00:	7812      	ldrb	r2, [r2, #0]
 8000d02:	3310      	adds	r3, #16
 8000d04:	443b      	add	r3, r7
 8000d06:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	73fb      	strb	r3, [r7, #15]
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d9ee      	bls.n	8000cf4 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	330a      	adds	r3, #10
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	f107 010c 	add.w	r1, r7, #12
 8000d20:	2203      	movs	r2, #3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fdc4 	bl	80008b0 <nRF24_WriteRegisters>
	{
 8000d28:	e00a      	b.n	8000d40 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	330a      	adds	r3, #10
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	3302      	adds	r3, #2
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	4619      	mov	r1, r3
 8000d38:	4610      	mov	r0, r2
 8000d3a:	f7ff fd93 	bl	8000864 <nRF24_WriteRegister>
}
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2203      	movs	r2, #3
 8000d56:	4619      	mov	r1, r3
 8000d58:	200a      	movs	r0, #10
 8000d5a:	f7ff fd5f 	bl	800081c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	73fb      	strb	r3, [r7, #15]
 8000d62:	e00c      	b.n	8000d7e <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8000d64:	7bfa      	ldrb	r2, [r7, #15]
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	f1c3 0302 	rsb	r3, r3, #2
 8000d6c:	3210      	adds	r2, #16
 8000d6e:	443a      	add	r2, r7
 8000d70:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8000d74:	4a16      	ldr	r2, [pc, #88]	; (8000dd0 <nRF24_SetTXAddress+0x88>)
 8000d76:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d9ef      	bls.n	8000d64 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000d84:	2300      	movs	r3, #0
 8000d86:	73fb      	strb	r3, [r7, #15]
 8000d88:	e00d      	b.n	8000da6 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	441a      	add	r2, r3
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	f1c3 0302 	rsb	r3, r3, #2
 8000d96:	7812      	ldrb	r2, [r2, #0]
 8000d98:	3310      	adds	r3, #16
 8000d9a:	443b      	add	r3, r7
 8000d9c:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	3301      	adds	r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d9ee      	bls.n	8000d8a <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	2203      	movs	r2, #3
 8000db2:	4619      	mov	r1, r3
 8000db4:	200a      	movs	r0, #10
 8000db6:	f7ff fd7b 	bl	80008b0 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8000dba:	f107 030c 	add.w	r3, r7, #12
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	2010      	movs	r0, #16
 8000dc4:	f7ff fd74 	bl	80008b0 <nRF24_WriteRegisters>

}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200000b4 	.word	0x200000b4

08000dd4 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8000dda:	f7ff fe1a 	bl	8000a12 <nRF24_ReadStatus>
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000de8:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fe18 	bl	8000a22 <nRF24_WriteStatus>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	71fb      	strb	r3, [r7, #7]

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 8000e04:	2060      	movs	r0, #96	; 0x60
 8000e06:	f7ff fce5 	bl	80007d4 <nRF24_ReadRegister>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]

    if (result > 32) // Something went wrong :)
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	2b20      	cmp	r3, #32
 8000e12:	d906      	bls.n	8000e22 <nRF24_GetDynamicPayloadSize+0x28>
    {
        nRF24_FlushRX();
 8000e14:	f7ff fe3e 	bl	8000a94 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 8000e18:	2002      	movs	r0, #2
 8000e1a:	f7ff fca2 	bl	8000762 <nRF24_Delay_ms>
        return 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e000      	b.n	8000e24 <nRF24_GetDynamicPayloadSize+0x2a>
    }
    return result;
 8000e22:	79fb      	ldrb	r3, [r7, #7]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000e36:	f7ff fd91 	bl	800095c <nRF24_ReadConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d104      	bne.n	8000e4e <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	e003      	b.n	8000e56 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e54:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fd87 	bl	800096c <nRF24_WriteConfig>
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b084      	sub	sp, #16
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000e70:	f7ff fd74 	bl	800095c <nRF24_ReadConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d104      	bne.n	8000e88 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
 8000e80:	f043 0320 	orr.w	r3, r3, #32
 8000e84:	73fb      	strb	r3, [r7, #15]
 8000e86:	e003      	b.n	8000e90 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	f023 0320 	bic.w	r3, r3, #32
 8000e8e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fd6a 	bl	800096c <nRF24_WriteConfig>
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000eaa:	f7ff fd57 	bl	800095c <nRF24_ReadConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d104      	bne.n	8000ec2 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	f043 0310 	orr.w	r3, r3, #16
 8000ebe:	73fb      	strb	r3, [r7, #15]
 8000ec0:	e003      	b.n	8000eca <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	f023 0310 	bic.w	r3, r3, #16
 8000ec8:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fd4d 	bl	800096c <nRF24_WriteConfig>
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <nRF24_ReadRXPaylaod>:
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));

}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	6039      	str	r1, [r7, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 8000ee4:	f7ff ff89 	bl	8000dfa <nRF24_GetDynamicPayloadSize>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	701a      	strb	r2, [r3, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	2061      	movs	r0, #97	; 0x61
 8000efa:	f7ff fc8f 	bl	800081c <nRF24_ReadRegisters>
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <nRF24_ReceivePacket>:

	return NRF24_TRANSMITTED_PACKET;
}

nRF24_RX_Status nRF24_ReceivePacket(uint8_t* Data, uint8_t *Size)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
#if (NRF24_INTERRUPT_MODE == 0)
	if(nRF24_RXAvailible())
	{
#endif
		nRF24_ReadRXPaylaod(Data, Size);
 8000f10:	6839      	ldr	r1, [r7, #0]
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ffe1 	bl	8000eda <nRF24_ReadRXPaylaod>
#if (NRF24_INTERRUPT_MODE == 0)
		return NRF24_RECEIVED_PACKET;
	}
	return NRF24_NO_RECEIVED_PACKET;
#endif
}
 8000f18:	bf00      	nop
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <nRF24_IRQ_Handler>:
	}
	return 0;
}

void nRF24_IRQ_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

	Nrf24InterruptFlag = 1;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <nRF24_IRQ_Handler+0x14>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	200000ba 	.word	0x200000ba

08000f3c <nRF24_IRQ_Read>:

void nRF24_IRQ_Read(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
	if(Nrf24InterruptFlag == 1)
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <nRF24_IRQ_Read+0x78>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d12e      	bne.n	8000faa <nRF24_IRQ_Read+0x6e>
	{
		Nrf24InterruptFlag = 0;
 8000f4c:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <nRF24_IRQ_Read+0x78>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]

		uint8_t status = nRF24_ReadStatus();
 8000f52:	f7ff fd5e 	bl	8000a12 <nRF24_ReadStatus>
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
		// RX FIFO Interrupt
		if ((status & (1 << 6)))
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d006      	beq.n	8000f72 <nRF24_IRQ_Read+0x36>
		{
			nrf24_rx_flag = 1;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <nRF24_IRQ_Read+0x7c>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
			status |= (1 << 6); // Interrupt flag clear
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f70:	71fb      	strb	r3, [r7, #7]
		}
		// TX Data Sent interrupt
		if ((status & (1 << NRF24_TX_DS)))
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f003 0320 	and.w	r3, r3, #32
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d006      	beq.n	8000f8a <nRF24_IRQ_Read+0x4e>
		{
			nrf24_tx_flag = 1;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <nRF24_IRQ_Read+0x80>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
			status |= (1 << NRF24_TX_DS); // Interrupt flag clear
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f043 0320 	orr.w	r3, r3, #32
 8000f88:	71fb      	strb	r3, [r7, #7]
		}
		// Max Retransmits interrupt
		if ((status & (1 << NRF24_MAX_RT)))
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 0310 	and.w	r3, r3, #16
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d006      	beq.n	8000fa2 <nRF24_IRQ_Read+0x66>
		{
			nrf24_mr_flag = 1;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <nRF24_IRQ_Read+0x84>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
			status |= (1 << NRF24_MAX_RT); // Interrupt flag clear
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f043 0310 	orr.w	r3, r3, #16
 8000fa0:	71fb      	strb	r3, [r7, #7]
		}

		nRF24_WriteStatus(status);
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fd3c 	bl	8000a22 <nRF24_WriteStatus>
	}
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200000ba 	.word	0x200000ba
 8000fb8:	200000b7 	.word	0x200000b7
 8000fbc:	200000b8 	.word	0x200000b8
 8000fc0:	200000b9 	.word	0x200000b9

08000fc4 <nRF24_EventTxCallback>:
{

}

__weak void nRF24_EventTxCallback(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <nRF24_EventMrCallback>:

__weak void nRF24_EventMrCallback(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <nRF24_Event>:

void nRF24_Event(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0

	nRF24_IRQ_Read(); // Check if there was any interrupt
 8000fe0:	f7ff ffac 	bl	8000f3c <nRF24_IRQ_Read>

	if(nrf24_rx_flag)
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <nRF24_Event+0x44>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d004      	beq.n	8000ff6 <nRF24_Event+0x1a>
	{
		nRF24_EventRxCallback();
 8000fec:	f7ff fb86 	bl	80006fc <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <nRF24_Event+0x44>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]

	}

	if(nrf24_tx_flag)
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <nRF24_Event+0x48>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d004      	beq.n	8001008 <nRF24_Event+0x2c>
	{
		nRF24_EventTxCallback();
 8000ffe:	f7ff ffe1 	bl	8000fc4 <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <nRF24_Event+0x48>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]

	}

	if(nrf24_mr_flag)
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <nRF24_Event+0x4c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d004      	beq.n	800101a <nRF24_Event+0x3e>
	{
		nRF24_EventMrCallback();
 8001010:	f7ff ffde 	bl	8000fd0 <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <nRF24_Event+0x4c>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]

	}
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200000b7 	.word	0x200000b7
 8001024:	200000b8 	.word	0x200000b8
 8001028:	200000b9 	.word	0x200000b9

0800102c <nRF24_Init>:

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8001034:	4a28      	ldr	r2, [pc, #160]	; (80010d8 <nRF24_Init+0xac>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 800103a:	2200      	movs	r2, #0
 800103c:	2102      	movs	r1, #2
 800103e:	4827      	ldr	r0, [pc, #156]	; (80010dc <nRF24_Init+0xb0>)
 8001040:	f000 fd32 	bl	8001aa8 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8001044:	2201      	movs	r2, #1
 8001046:	2104      	movs	r1, #4
 8001048:	4824      	ldr	r0, [pc, #144]	; (80010dc <nRF24_Init+0xb0>)
 800104a:	f000 fd2d 	bl	8001aa8 <HAL_GPIO_WritePin>

	nRF24_Delay_ms(5); // Wait for radio power up
 800104e:	2005      	movs	r0, #5
 8001050:	f7ff fb87 	bl	8000762 <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8001054:	2003      	movs	r0, #3
 8001056:	f7ff fc97 	bl	8000988 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 800105a:	2002      	movs	r0, #2
 800105c:	f7ff fcb3 	bl	80009c6 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8001060:	2001      	movs	r0, #1
 8001062:	f7ff fd4b 	bl	8000afc <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8001066:	2000      	movs	r0, #0
 8001068:	f7ff fd65 	bl	8000b36 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 800106c:	2107      	movs	r1, #7
 800106e:	2004      	movs	r0, #4
 8001070:	f7ff fd7e 	bl	8000b70 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 8001074:	201d      	movs	r0, #29
 8001076:	f7ff fbad 	bl	80007d4 <nRF24_ReadRegister>
 800107a:	4603      	mov	r3, r0
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4619      	mov	r1, r3
 8001084:	201d      	movs	r0, #29
 8001086:	f7ff fbed 	bl	8000864 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 800108a:	213f      	movs	r1, #63	; 0x3f
 800108c:	201c      	movs	r0, #28
 800108e:	f7ff fbe9 	bl	8000864 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8001092:	200a      	movs	r0, #10
 8001094:	f7ff fd87 	bl	8000ba6 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8001098:	2101      	movs	r1, #1
 800109a:	2000      	movs	r0, #0
 800109c:	f7ff fd94 	bl	8000bc8 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80010a0:	2101      	movs	r1, #1
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff fdc5 	bl	8000c32 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80010a8:	2003      	movs	r0, #3
 80010aa:	f7ff fdf7 	bl	8000c9c <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 80010ae:	2001      	movs	r0, #1
 80010b0:	f7ff fb57 	bl	8000762 <nRF24_Delay_ms>

	nRF24_EnableRXDataReadyIRQ(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f7ff feb9 	bl	8000e2c <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff fed3 	bl	8000e66 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff feed 	bl	8000ea0 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 80010c6:	2001      	movs	r0, #1
 80010c8:	f7ff fb4b 	bl	8000762 <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 80010cc:	f7ff fe82 	bl	8000dd4 <nRF24_ClearInterrupts>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200000b0 	.word	0x200000b0
 80010dc:	40020400 	.word	0x40020400

080010e0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <MX_SPI2_Init+0x64>)
 80010e6:	4a18      	ldr	r2, [pc, #96]	; (8001148 <MX_SPI2_Init+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <MX_SPI2_Init+0x64>)
 80010ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_SPI2_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_SPI2_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_SPI2_Init+0x64>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_SPI2_Init+0x64>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_SPI2_Init+0x64>)
 800110c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001110:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_SPI2_Init+0x64>)
 8001114:	2218      	movs	r2, #24
 8001116:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <MX_SPI2_Init+0x64>)
 800111a:	2200      	movs	r2, #0
 800111c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_SPI2_Init+0x64>)
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <MX_SPI2_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_SPI2_Init+0x64>)
 800112c:	220a      	movs	r2, #10
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_SPI2_Init+0x64>)
 8001132:	f001 faf9 	bl	8002728 <HAL_SPI_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800113c:	f7ff fb0c 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200000bc 	.word	0x200000bc
 8001148:	40003800 	.word	0x40003800

0800114c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <HAL_SPI_MspInit+0x7c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d128      	bne.n	80011c0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_SPI_MspInit+0x80>)
 8001170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001172:	4a16      	ldr	r2, [pc, #88]	; (80011cc <HAL_SPI_MspInit+0x80>)
 8001174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001178:	6253      	str	r3, [r2, #36]	; 0x24
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_SPI_MspInit+0x80>)
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_SPI_MspInit+0x80>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	4a10      	ldr	r2, [pc, #64]	; (80011cc <HAL_SPI_MspInit+0x80>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	61d3      	str	r3, [r2, #28]
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_SPI_MspInit+0x80>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800119e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011b0:	2305      	movs	r3, #5
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <HAL_SPI_MspInit+0x84>)
 80011bc:	f000 fae4 	bl	8001788 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80011c0:	bf00      	nop
 80011c2:	3728      	adds	r7, #40	; 0x28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40003800 	.word	0x40003800
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020400 	.word	0x40020400

080011d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_MspInit+0x5c>)
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	4a14      	ldr	r2, [pc, #80]	; (8001230 <HAL_MspInit+0x5c>)
 80011e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011e4:	6253      	str	r3, [r2, #36]	; 0x24
 80011e6:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_MspInit+0x5c>)
 80011e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <HAL_MspInit+0x5c>)
 80011f4:	6a1b      	ldr	r3, [r3, #32]
 80011f6:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <HAL_MspInit+0x5c>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6213      	str	r3, [r2, #32]
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <HAL_MspInit+0x5c>)
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <HAL_MspInit+0x5c>)
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	4a08      	ldr	r2, [pc, #32]	; (8001230 <HAL_MspInit+0x5c>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001214:	6253      	str	r3, [r2, #36]	; 0x24
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_MspInit+0x5c>)
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001222:	2007      	movs	r0, #7
 8001224:	f000 fa6e 	bl	8001704 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <NMI_Handler+0x4>

0800123a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <HardFault_Handler+0x4>

08001240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <MemManage_Handler+0x4>

08001246 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <UsageFault_Handler+0x4>

08001252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr

0800125e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr

0800126a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127a:	f000 f939 	bl	80014f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}

08001282 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRf_IQR_Pin);
 8001286:	f44f 7000 	mov.w	r0, #512	; 0x200
 800128a:	f000 fc3f 	bl	8001b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}

08001292 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF_INT_Pin);
 8001296:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800129a:	f000 fc37 	bl	8001b0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800129e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012a2:	f000 fc33 	bl	8001b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b4:	4a14      	ldr	r2, [pc, #80]	; (8001308 <_sbrk+0x5c>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <_sbrk+0x60>)
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <_sbrk+0x64>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <_sbrk+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012dc:	f002 fa0e 	bl	80036fc <__errno>
 80012e0:	4603      	mov	r3, r0
 80012e2:	220c      	movs	r2, #12
 80012e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	e009      	b.n	8001300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <_sbrk+0x64>)
 80012fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20014000 	.word	0x20014000
 800130c:	00000400 	.word	0x00000400
 8001310:	20000114 	.word	0x20000114
 8001314:	20000178 	.word	0x20000178

08001318 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800132a:	4a12      	ldr	r2, [pc, #72]	; (8001374 <MX_USART2_UART_Init+0x50>)
 800132c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001334:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800135c:	f001 ffa8 	bl	80032b0 <HAL_UART_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001366:	f7ff f9f7 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000118 	.word	0x20000118
 8001374:	40004400 	.word	0x40004400

08001378 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <HAL_UART_MspInit+0x7c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d127      	bne.n	80013ea <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_UART_MspInit+0x80>)
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <HAL_UART_MspInit+0x80>)
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	6253      	str	r3, [r2, #36]	; 0x24
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_UART_MspInit+0x80>)
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_UART_MspInit+0x80>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <HAL_UART_MspInit+0x80>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	61d3      	str	r3, [r2, #28]
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_UART_MspInit+0x80>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013ca:	230c      	movs	r3, #12
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013da:	2307      	movs	r3, #7
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <HAL_UART_MspInit+0x84>)
 80013e6:	f000 f9cf 	bl	8001788 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	; 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40004400 	.word	0x40004400
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020000 	.word	0x40020000

08001400 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001400:	f7ff ff8a 	bl	8001318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001406:	490c      	ldr	r1, [pc, #48]	; (8001438 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001408:	4a0c      	ldr	r2, [pc, #48]	; (800143c <LoopFillZerobss+0x16>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800140c:	e002      	b.n	8001414 <LoopCopyDataInit>

0800140e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001412:	3304      	adds	r3, #4

08001414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001418:	d3f9      	bcc.n	800140e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141a:	4a09      	ldr	r2, [pc, #36]	; (8001440 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800141c:	4c09      	ldr	r4, [pc, #36]	; (8001444 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001420:	e001      	b.n	8001426 <LoopFillZerobss>

08001422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001424:	3204      	adds	r2, #4

08001426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001428:	d3fb      	bcc.n	8001422 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800142a:	f002 f96d 	bl	8003708 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800142e:	f7ff f8c1 	bl	80005b4 <main>
  bx lr
 8001432:	4770      	bx	lr
  ldr r0, =_sdata
 8001434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001438:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800143c:	080040e4 	.word	0x080040e4
  ldr r2, =_sbss
 8001440:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001444:	20000174 	.word	0x20000174

08001448 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001448:	e7fe      	b.n	8001448 <ADC1_IRQHandler>

0800144a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001454:	2003      	movs	r0, #3
 8001456:	f000 f955 	bl	8001704 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800145a:	2000      	movs	r0, #0
 800145c:	f000 f80e 	bl	800147c <HAL_InitTick>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d002      	beq.n	800146c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	71fb      	strb	r3, [r7, #7]
 800146a:	e001      	b.n	8001470 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800146c:	f7ff feb2 	bl	80011d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001470:	79fb      	ldrb	r3, [r7, #7]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <HAL_InitTick+0x68>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d022      	beq.n	80014d6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_InitTick+0x6c>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <HAL_InitTick+0x68>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800149c:	fbb1 f3f3 	udiv	r3, r1, r3
 80014a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 f962 	bl	800176e <HAL_SYSTICK_Config>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10f      	bne.n	80014d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b0f      	cmp	r3, #15
 80014b4:	d809      	bhi.n	80014ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b6:	2200      	movs	r2, #0
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	f04f 30ff 	mov.w	r0, #4294967295
 80014be:	f000 f92c 	bl	800171a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_InitTick+0x70>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	e007      	b.n	80014da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	e004      	b.n	80014da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	e001      	b.n	80014da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014da:	7bfb      	ldrb	r3, [r7, #15]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000008 	.word	0x20000008
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000004 	.word	0x20000004

080014f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_IncTick+0x1c>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <HAL_IncTick+0x20>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4413      	add	r3, r2
 80014fe:	4a03      	ldr	r2, [pc, #12]	; (800150c <HAL_IncTick+0x1c>)
 8001500:	6013      	str	r3, [r2, #0]
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000160 	.word	0x20000160
 8001510:	20000008 	.word	0x20000008

08001514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return uwTick;
 8001518:	4b02      	ldr	r3, [pc, #8]	; (8001524 <HAL_GetTick+0x10>)
 800151a:	681b      	ldr	r3, [r3, #0]
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	20000160 	.word	0x20000160

08001528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001530:	f7ff fff0 	bl	8001514 <HAL_GetTick>
 8001534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001540:	d004      	beq.n	800154c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_Delay+0x40>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	4413      	add	r3, r2
 800154a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800154c:	bf00      	nop
 800154e:	f7ff ffe1 	bl	8001514 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	429a      	cmp	r2, r3
 800155c:	d8f7      	bhi.n	800154e <HAL_Delay+0x26>
  {
  }
}
 800155e:	bf00      	nop
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000008 	.word	0x20000008

0800156c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159e:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	60d3      	str	r3, [r2, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <__NVIC_GetPriorityGrouping+0x18>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	f003 0307 	and.w	r3, r3, #7
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db0b      	blt.n	80015fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	4906      	ldr	r1, [pc, #24]	; (8001604 <__NVIC_EnableIRQ+0x34>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	2001      	movs	r0, #1
 80015f2:	fa00 f202 	lsl.w	r2, r0, r2
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	e000e100 	.word	0xe000e100

08001608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db0a      	blt.n	8001632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	490c      	ldr	r1, [pc, #48]	; (8001654 <__NVIC_SetPriority+0x4c>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	0112      	lsls	r2, r2, #4
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	440b      	add	r3, r1
 800162c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001630:	e00a      	b.n	8001648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4908      	ldr	r1, [pc, #32]	; (8001658 <__NVIC_SetPriority+0x50>)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	3b04      	subs	r3, #4
 8001640:	0112      	lsls	r2, r2, #4
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	440b      	add	r3, r1
 8001646:	761a      	strb	r2, [r3, #24]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000e100 	.word	0xe000e100
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	; 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f1c3 0307 	rsb	r3, r3, #7
 8001676:	2b04      	cmp	r3, #4
 8001678:	bf28      	it	cs
 800167a:	2304      	movcs	r3, #4
 800167c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3304      	adds	r3, #4
 8001682:	2b06      	cmp	r3, #6
 8001684:	d902      	bls.n	800168c <NVIC_EncodePriority+0x30>
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3b03      	subs	r3, #3
 800168a:	e000      	b.n	800168e <NVIC_EncodePriority+0x32>
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	f04f 32ff 	mov.w	r2, #4294967295
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43da      	mvns	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	401a      	ands	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	43d9      	mvns	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	4313      	orrs	r3, r2
         );
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3724      	adds	r7, #36	; 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d0:	d301      	bcc.n	80016d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00f      	b.n	80016f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d6:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <SysTick_Config+0x40>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016de:	210f      	movs	r1, #15
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f7ff ff90 	bl	8001608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <SysTick_Config+0x40>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <SysTick_Config+0x40>)
 80016f0:	2207      	movs	r2, #7
 80016f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	e000e010 	.word	0xe000e010

08001704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ff2d 	bl	800156c <__NVIC_SetPriorityGrouping>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800172c:	f7ff ff42 	bl	80015b4 <__NVIC_GetPriorityGrouping>
 8001730:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	6978      	ldr	r0, [r7, #20]
 8001738:	f7ff ff90 	bl	800165c <NVIC_EncodePriority>
 800173c:	4602      	mov	r2, r0
 800173e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff5f 	bl	8001608 <__NVIC_SetPriority>
}
 800174a:	bf00      	nop
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800175c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff35 	bl	80015d0 <__NVIC_EnableIRQ>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ffa2 	bl	80016c0 <SysTick_Config>
 800177c:	4603      	mov	r3, r0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001788:	b480      	push	{r7}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800179e:	e160      	b.n	8001a62 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2101      	movs	r1, #1
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	4013      	ands	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 8152 	beq.w	8001a5c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d005      	beq.n	80017d0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d130      	bne.n	8001832 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	2203      	movs	r2, #3
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001806:	2201      	movs	r2, #1
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	091b      	lsrs	r3, r3, #4
 800181c:	f003 0201 	and.w	r2, r3, #1
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b03      	cmp	r3, #3
 800183c:	d017      	beq.n	800186e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	2203      	movs	r2, #3
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d123      	bne.n	80018c2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	08da      	lsrs	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3208      	adds	r2, #8
 8001882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001886:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	220f      	movs	r2, #15
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	08da      	lsrs	r2, r3, #3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3208      	adds	r2, #8
 80018bc:	6939      	ldr	r1, [r7, #16]
 80018be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0203 	and.w	r2, r3, #3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 80ac 	beq.w	8001a5c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001904:	4b5e      	ldr	r3, [pc, #376]	; (8001a80 <HAL_GPIO_Init+0x2f8>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4a5d      	ldr	r2, [pc, #372]	; (8001a80 <HAL_GPIO_Init+0x2f8>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6213      	str	r3, [r2, #32]
 8001910:	4b5b      	ldr	r3, [pc, #364]	; (8001a80 <HAL_GPIO_Init+0x2f8>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800191c:	4a59      	ldr	r2, [pc, #356]	; (8001a84 <HAL_GPIO_Init+0x2fc>)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001928:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	220f      	movs	r2, #15
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a51      	ldr	r2, [pc, #324]	; (8001a88 <HAL_GPIO_Init+0x300>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d025      	beq.n	8001994 <HAL_GPIO_Init+0x20c>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a50      	ldr	r2, [pc, #320]	; (8001a8c <HAL_GPIO_Init+0x304>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d01f      	beq.n	8001990 <HAL_GPIO_Init+0x208>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a4f      	ldr	r2, [pc, #316]	; (8001a90 <HAL_GPIO_Init+0x308>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d019      	beq.n	800198c <HAL_GPIO_Init+0x204>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a4e      	ldr	r2, [pc, #312]	; (8001a94 <HAL_GPIO_Init+0x30c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d013      	beq.n	8001988 <HAL_GPIO_Init+0x200>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a4d      	ldr	r2, [pc, #308]	; (8001a98 <HAL_GPIO_Init+0x310>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d00d      	beq.n	8001984 <HAL_GPIO_Init+0x1fc>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a4c      	ldr	r2, [pc, #304]	; (8001a9c <HAL_GPIO_Init+0x314>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d007      	beq.n	8001980 <HAL_GPIO_Init+0x1f8>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a4b      	ldr	r2, [pc, #300]	; (8001aa0 <HAL_GPIO_Init+0x318>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d101      	bne.n	800197c <HAL_GPIO_Init+0x1f4>
 8001978:	2306      	movs	r3, #6
 800197a:	e00c      	b.n	8001996 <HAL_GPIO_Init+0x20e>
 800197c:	2307      	movs	r3, #7
 800197e:	e00a      	b.n	8001996 <HAL_GPIO_Init+0x20e>
 8001980:	2305      	movs	r3, #5
 8001982:	e008      	b.n	8001996 <HAL_GPIO_Init+0x20e>
 8001984:	2304      	movs	r3, #4
 8001986:	e006      	b.n	8001996 <HAL_GPIO_Init+0x20e>
 8001988:	2303      	movs	r3, #3
 800198a:	e004      	b.n	8001996 <HAL_GPIO_Init+0x20e>
 800198c:	2302      	movs	r3, #2
 800198e:	e002      	b.n	8001996 <HAL_GPIO_Init+0x20e>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_GPIO_Init+0x20e>
 8001994:	2300      	movs	r3, #0
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	f002 0203 	and.w	r2, r2, #3
 800199c:	0092      	lsls	r2, r2, #2
 800199e:	4093      	lsls	r3, r2
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019a6:	4937      	ldr	r1, [pc, #220]	; (8001a84 <HAL_GPIO_Init+0x2fc>)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b4:	4b3b      	ldr	r3, [pc, #236]	; (8001aa4 <HAL_GPIO_Init+0x31c>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019d8:	4a32      	ldr	r2, [pc, #200]	; (8001aa4 <HAL_GPIO_Init+0x31c>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019de:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <HAL_GPIO_Init+0x31c>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a02:	4a28      	ldr	r2, [pc, #160]	; (8001aa4 <HAL_GPIO_Init+0x31c>)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a08:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <HAL_GPIO_Init+0x31c>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a2c:	4a1d      	ldr	r2, [pc, #116]	; (8001aa4 <HAL_GPIO_Init+0x31c>)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a32:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <HAL_GPIO_Init+0x31c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a56:	4a13      	ldr	r2, [pc, #76]	; (8001aa4 <HAL_GPIO_Init+0x31c>)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f47f ae97 	bne.w	80017a0 <HAL_GPIO_Init+0x18>
  }
}
 8001a72:	bf00      	nop
 8001a74:	bf00      	nop
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40010000 	.word	0x40010000
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	40020400 	.word	0x40020400
 8001a90:	40020800 	.word	0x40020800
 8001a94:	40020c00 	.word	0x40020c00
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40021400 	.word	0x40021400
 8001aa0:	40021800 	.word	0x40021800
 8001aa4:	40010400 	.word	0x40010400

08001aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab8:	787b      	ldrb	r3, [r7, #1]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001ac4:	e003      	b.n	8001ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001ac6:	887b      	ldrh	r3, [r7, #2]
 8001ac8:	041a      	lsls	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	619a      	str	r2, [r3, #24]
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aea:	887a      	ldrh	r2, [r7, #2]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4013      	ands	r3, r2
 8001af0:	041a      	lsls	r2, r3, #16
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43d9      	mvns	r1, r3
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	400b      	ands	r3, r1
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	619a      	str	r2, [r3, #24]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
	...

08001b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b22:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fdc8 	bl	80006c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40010400 	.word	0x40010400

08001b3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e31d      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b4e:	4b94      	ldr	r3, [pc, #592]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b58:	4b91      	ldr	r3, [pc, #580]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b60:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d07b      	beq.n	8001c66 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d006      	beq.n	8001b82 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d10f      	bne.n	8001b9a <HAL_RCC_OscConfig+0x5e>
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b80:	d10b      	bne.n	8001b9a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b82:	4b87      	ldr	r3, [pc, #540]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d06a      	beq.n	8001c64 <HAL_RCC_OscConfig+0x128>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d166      	bne.n	8001c64 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e2f7      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d106      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x74>
 8001ba2:	4b7f      	ldr	r3, [pc, #508]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a7e      	ldr	r2, [pc, #504]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e02d      	b.n	8001c0c <HAL_RCC_OscConfig+0xd0>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10c      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x96>
 8001bb8:	4b79      	ldr	r3, [pc, #484]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a78      	ldr	r2, [pc, #480]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b76      	ldr	r3, [pc, #472]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a75      	ldr	r2, [pc, #468]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	e01c      	b.n	8001c0c <HAL_RCC_OscConfig+0xd0>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b05      	cmp	r3, #5
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0xb8>
 8001bda:	4b71      	ldr	r3, [pc, #452]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a70      	ldr	r2, [pc, #448]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b6e      	ldr	r3, [pc, #440]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a6d      	ldr	r2, [pc, #436]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e00b      	b.n	8001c0c <HAL_RCC_OscConfig+0xd0>
 8001bf4:	4b6a      	ldr	r3, [pc, #424]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a69      	ldr	r2, [pc, #420]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b67      	ldr	r3, [pc, #412]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a66      	ldr	r2, [pc, #408]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d013      	beq.n	8001c3c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff fc7e 	bl	8001514 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7ff fc7a 	bl	8001514 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	; 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e2ad      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c2e:	4b5c      	ldr	r3, [pc, #368]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0xe0>
 8001c3a:	e014      	b.n	8001c66 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fc6a 	bl	8001514 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff fc66 	bl	8001514 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	; 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e299      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c56:	4b52      	ldr	r3, [pc, #328]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x108>
 8001c62:	e000      	b.n	8001c66 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d05a      	beq.n	8001d28 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2b0c      	cmp	r3, #12
 8001c7c:	d119      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x176>
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d116      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c84:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_OscConfig+0x160>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e276      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9c:	4b40      	ldr	r3, [pc, #256]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	021b      	lsls	r3, r3, #8
 8001caa:	493d      	ldr	r1, [pc, #244]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb0:	e03a      	b.n	8001d28 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d020      	beq.n	8001cfc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cba:	4b3a      	ldr	r3, [pc, #232]	; (8001da4 <HAL_RCC_OscConfig+0x268>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fc28 	bl	8001514 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc8:	f7ff fc24 	bl	8001514 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e257      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cda:	4b31      	ldr	r3, [pc, #196]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce6:	4b2e      	ldr	r3, [pc, #184]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	492a      	ldr	r1, [pc, #168]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
 8001cfa:	e015      	b.n	8001d28 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfc:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <HAL_RCC_OscConfig+0x268>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d02:	f7ff fc07 	bl	8001514 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0a:	f7ff fc03 	bl	8001514 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e236      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d1c:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80b8 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d170      	bne.n	8001e1e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d3c:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_RCC_OscConfig+0x218>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e21a      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1a      	ldr	r2, [r3, #32]
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d921      	bls.n	8001da8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 fc7d 	bl	8002668 <RCC_SetFlashLatencyFromMSIRange>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e208      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4906      	ldr	r1, [pc, #24]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	061b      	lsls	r3, r3, #24
 8001d98:	4901      	ldr	r1, [pc, #4]	; (8001da0 <HAL_RCC_OscConfig+0x264>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	604b      	str	r3, [r1, #4]
 8001d9e:	e020      	b.n	8001de2 <HAL_RCC_OscConfig+0x2a6>
 8001da0:	40023800 	.word	0x40023800
 8001da4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001da8:	4b99      	ldr	r3, [pc, #612]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4996      	ldr	r1, [pc, #600]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dba:	4b95      	ldr	r3, [pc, #596]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	061b      	lsls	r3, r3, #24
 8001dc8:	4991      	ldr	r1, [pc, #580]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 fc48 	bl	8002668 <RCC_SetFlashLatencyFromMSIRange>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e1d3      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	0b5b      	lsrs	r3, r3, #13
 8001de8:	3301      	adds	r3, #1
 8001dea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001df2:	4a87      	ldr	r2, [pc, #540]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001df4:	6892      	ldr	r2, [r2, #8]
 8001df6:	0912      	lsrs	r2, r2, #4
 8001df8:	f002 020f 	and.w	r2, r2, #15
 8001dfc:	4985      	ldr	r1, [pc, #532]	; (8002014 <HAL_RCC_OscConfig+0x4d8>)
 8001dfe:	5c8a      	ldrb	r2, [r1, r2]
 8001e00:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e02:	4a85      	ldr	r2, [pc, #532]	; (8002018 <HAL_RCC_OscConfig+0x4dc>)
 8001e04:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e06:	4b85      	ldr	r3, [pc, #532]	; (800201c <HAL_RCC_OscConfig+0x4e0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fb36 	bl	800147c <HAL_InitTick>
 8001e10:	4603      	mov	r3, r0
 8001e12:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d045      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	e1b5      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d029      	beq.n	8001e7a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e26:	4b7e      	ldr	r3, [pc, #504]	; (8002020 <HAL_RCC_OscConfig+0x4e4>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fb72 	bl	8001514 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e34:	f7ff fb6e 	bl	8001514 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e1a1      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e46:	4b72      	ldr	r3, [pc, #456]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e52:	4b6f      	ldr	r3, [pc, #444]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	496c      	ldr	r1, [pc, #432]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e64:	4b6a      	ldr	r3, [pc, #424]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	061b      	lsls	r3, r3, #24
 8001e72:	4967      	ldr	r1, [pc, #412]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
 8001e78:	e015      	b.n	8001ea6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e7a:	4b69      	ldr	r3, [pc, #420]	; (8002020 <HAL_RCC_OscConfig+0x4e4>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff fb48 	bl	8001514 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e88:	f7ff fb44 	bl	8001514 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e177      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e9a:	4b5d      	ldr	r3, [pc, #372]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d030      	beq.n	8001f14 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d016      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eba:	4b5a      	ldr	r3, [pc, #360]	; (8002024 <HAL_RCC_OscConfig+0x4e8>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec0:	f7ff fb28 	bl	8001514 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec8:	f7ff fb24 	bl	8001514 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e157      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001eda:	4b4d      	ldr	r3, [pc, #308]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x38c>
 8001ee6:	e015      	b.n	8001f14 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee8:	4b4e      	ldr	r3, [pc, #312]	; (8002024 <HAL_RCC_OscConfig+0x4e8>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eee:	f7ff fb11 	bl	8001514 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef6:	f7ff fb0d 	bl	8001514 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e140      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f08:	4b41      	ldr	r3, [pc, #260]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f0      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80b5 	beq.w	800208c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f26:	4b3a      	ldr	r3, [pc, #232]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10d      	bne.n	8001f4e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	4b37      	ldr	r3, [pc, #220]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	4a36      	ldr	r2, [pc, #216]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	6253      	str	r3, [r2, #36]	; 0x24
 8001f3e:	4b34      	ldr	r3, [pc, #208]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4e:	4b36      	ldr	r3, [pc, #216]	; (8002028 <HAL_RCC_OscConfig+0x4ec>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d118      	bne.n	8001f8c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f5a:	4b33      	ldr	r3, [pc, #204]	; (8002028 <HAL_RCC_OscConfig+0x4ec>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a32      	ldr	r2, [pc, #200]	; (8002028 <HAL_RCC_OscConfig+0x4ec>)
 8001f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f66:	f7ff fad5 	bl	8001514 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6e:	f7ff fad1 	bl	8001514 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b64      	cmp	r3, #100	; 0x64
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e104      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f80:	4b29      	ldr	r3, [pc, #164]	; (8002028 <HAL_RCC_OscConfig+0x4ec>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d106      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x466>
 8001f94:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f98:	4a1d      	ldr	r2, [pc, #116]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9e:	6353      	str	r3, [r2, #52]	; 0x34
 8001fa0:	e02d      	b.n	8001ffe <HAL_RCC_OscConfig+0x4c2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x488>
 8001faa:	4b19      	ldr	r3, [pc, #100]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fae:	4a18      	ldr	r2, [pc, #96]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fb4:	6353      	str	r3, [r2, #52]	; 0x34
 8001fb6:	4b16      	ldr	r3, [pc, #88]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fba:	4a15      	ldr	r2, [pc, #84]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001fbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fc0:	6353      	str	r3, [r2, #52]	; 0x34
 8001fc2:	e01c      	b.n	8001ffe <HAL_RCC_OscConfig+0x4c2>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	d10c      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x4aa>
 8001fcc:	4b10      	ldr	r3, [pc, #64]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd0:	4a0f      	ldr	r2, [pc, #60]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fd6:	6353      	str	r3, [r2, #52]	; 0x34
 8001fd8:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fdc:	4a0c      	ldr	r2, [pc, #48]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe2:	6353      	str	r3, [r2, #52]	; 0x34
 8001fe4:	e00b      	b.n	8001ffe <HAL_RCC_OscConfig+0x4c2>
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fea:	4a09      	ldr	r2, [pc, #36]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ff0:	6353      	str	r3, [r2, #52]	; 0x34
 8001ff2:	4b07      	ldr	r3, [pc, #28]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff6:	4a06      	ldr	r2, [pc, #24]	; (8002010 <HAL_RCC_OscConfig+0x4d4>)
 8001ff8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ffc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d024      	beq.n	8002050 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002006:	f7ff fa85 	bl	8001514 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800200c:	e019      	b.n	8002042 <HAL_RCC_OscConfig+0x506>
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	08004088 	.word	0x08004088
 8002018:	20000000 	.word	0x20000000
 800201c:	20000004 	.word	0x20000004
 8002020:	42470020 	.word	0x42470020
 8002024:	42470680 	.word	0x42470680
 8002028:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202c:	f7ff fa72 	bl	8001514 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e0a3      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002042:	4b54      	ldr	r3, [pc, #336]	; (8002194 <HAL_RCC_OscConfig+0x658>)
 8002044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002046:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0ee      	beq.n	800202c <HAL_RCC_OscConfig+0x4f0>
 800204e:	e014      	b.n	800207a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7ff fa60 	bl	8001514 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002056:	e00a      	b.n	800206e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002058:	f7ff fa5c 	bl	8001514 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	; 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e08d      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800206e:	4b49      	ldr	r3, [pc, #292]	; (8002194 <HAL_RCC_OscConfig+0x658>)
 8002070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1ee      	bne.n	8002058 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800207a:	7ffb      	ldrb	r3, [r7, #31]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d105      	bne.n	800208c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002080:	4b44      	ldr	r3, [pc, #272]	; (8002194 <HAL_RCC_OscConfig+0x658>)
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	4a43      	ldr	r2, [pc, #268]	; (8002194 <HAL_RCC_OscConfig+0x658>)
 8002086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	2b00      	cmp	r3, #0
 8002092:	d079      	beq.n	8002188 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2b0c      	cmp	r3, #12
 8002098:	d056      	beq.n	8002148 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d13b      	bne.n	800211a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a2:	4b3d      	ldr	r3, [pc, #244]	; (8002198 <HAL_RCC_OscConfig+0x65c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7ff fa34 	bl	8001514 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b0:	f7ff fa30 	bl	8001514 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e063      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020c2:	4b34      	ldr	r3, [pc, #208]	; (8002194 <HAL_RCC_OscConfig+0x658>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ce:	4b31      	ldr	r3, [pc, #196]	; (8002194 <HAL_RCC_OscConfig+0x658>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	4319      	orrs	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	430b      	orrs	r3, r1
 80020e6:	492b      	ldr	r1, [pc, #172]	; (8002194 <HAL_RCC_OscConfig+0x658>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ec:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <HAL_RCC_OscConfig+0x65c>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7ff fa0f 	bl	8001514 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020fa:	f7ff fa0b 	bl	8001514 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e03e      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800210c:	4b21      	ldr	r3, [pc, #132]	; (8002194 <HAL_RCC_OscConfig+0x658>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x5be>
 8002118:	e036      	b.n	8002188 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211a:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <HAL_RCC_OscConfig+0x65c>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002120:	f7ff f9f8 	bl	8001514 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002128:	f7ff f9f4 	bl	8001514 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e027      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800213a:	4b16      	ldr	r3, [pc, #88]	; (8002194 <HAL_RCC_OscConfig+0x658>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x5ec>
 8002146:	e01f      	b.n	8002188 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e01a      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002154:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <HAL_RCC_OscConfig+0x658>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002164:	429a      	cmp	r2, r3
 8002166:	d10d      	bne.n	8002184 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002172:	429a      	cmp	r2, r3
 8002174:	d106      	bne.n	8002184 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3720      	adds	r7, #32
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800
 8002198:	42470060 	.word	0x42470060

0800219c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e11a      	b.n	80023e6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021b0:	4b8f      	ldr	r3, [pc, #572]	; (80023f0 <HAL_RCC_ClockConfig+0x254>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d919      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d105      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x34>
 80021c4:	4b8a      	ldr	r3, [pc, #552]	; (80023f0 <HAL_RCC_ClockConfig+0x254>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a89      	ldr	r2, [pc, #548]	; (80023f0 <HAL_RCC_ClockConfig+0x254>)
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	4b87      	ldr	r3, [pc, #540]	; (80023f0 <HAL_RCC_ClockConfig+0x254>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 0201 	bic.w	r2, r3, #1
 80021d8:	4985      	ldr	r1, [pc, #532]	; (80023f0 <HAL_RCC_ClockConfig+0x254>)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	4313      	orrs	r3, r2
 80021de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e0:	4b83      	ldr	r3, [pc, #524]	; (80023f0 <HAL_RCC_ClockConfig+0x254>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e0f9      	b.n	80023e6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d008      	beq.n	8002210 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021fe:	4b7d      	ldr	r3, [pc, #500]	; (80023f4 <HAL_RCC_ClockConfig+0x258>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	497a      	ldr	r1, [pc, #488]	; (80023f4 <HAL_RCC_ClockConfig+0x258>)
 800220c:	4313      	orrs	r3, r2
 800220e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 808e 	beq.w	800233a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d107      	bne.n	8002236 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002226:	4b73      	ldr	r3, [pc, #460]	; (80023f4 <HAL_RCC_ClockConfig+0x258>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d121      	bne.n	8002276 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e0d7      	b.n	80023e6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b03      	cmp	r3, #3
 800223c:	d107      	bne.n	800224e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800223e:	4b6d      	ldr	r3, [pc, #436]	; (80023f4 <HAL_RCC_ClockConfig+0x258>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d115      	bne.n	8002276 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e0cb      	b.n	80023e6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d107      	bne.n	8002266 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002256:	4b67      	ldr	r3, [pc, #412]	; (80023f4 <HAL_RCC_ClockConfig+0x258>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d109      	bne.n	8002276 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e0bf      	b.n	80023e6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002266:	4b63      	ldr	r3, [pc, #396]	; (80023f4 <HAL_RCC_ClockConfig+0x258>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e0b7      	b.n	80023e6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002276:	4b5f      	ldr	r3, [pc, #380]	; (80023f4 <HAL_RCC_ClockConfig+0x258>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f023 0203 	bic.w	r2, r3, #3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	495c      	ldr	r1, [pc, #368]	; (80023f4 <HAL_RCC_ClockConfig+0x258>)
 8002284:	4313      	orrs	r3, r2
 8002286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002288:	f7ff f944 	bl	8001514 <HAL_GetTick>
 800228c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d112      	bne.n	80022bc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002296:	e00a      	b.n	80022ae <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002298:	f7ff f93c 	bl	8001514 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e09b      	b.n	80023e6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022ae:	4b51      	ldr	r3, [pc, #324]	; (80023f4 <HAL_RCC_ClockConfig+0x258>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d1ee      	bne.n	8002298 <HAL_RCC_ClockConfig+0xfc>
 80022ba:	e03e      	b.n	800233a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d112      	bne.n	80022ea <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c4:	e00a      	b.n	80022dc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c6:	f7ff f925 	bl	8001514 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e084      	b.n	80023e6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022dc:	4b45      	ldr	r3, [pc, #276]	; (80023f4 <HAL_RCC_ClockConfig+0x258>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b0c      	cmp	r3, #12
 80022e6:	d1ee      	bne.n	80022c6 <HAL_RCC_ClockConfig+0x12a>
 80022e8:	e027      	b.n	800233a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d11d      	bne.n	800232e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f2:	e00a      	b.n	800230a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f4:	f7ff f90e 	bl	8001514 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002302:	4293      	cmp	r3, r2
 8002304:	d901      	bls.n	800230a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e06d      	b.n	80023e6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800230a:	4b3a      	ldr	r3, [pc, #232]	; (80023f4 <HAL_RCC_ClockConfig+0x258>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b04      	cmp	r3, #4
 8002314:	d1ee      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x158>
 8002316:	e010      	b.n	800233a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002318:	f7ff f8fc 	bl	8001514 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e05b      	b.n	80023e6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800232e:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <HAL_RCC_ClockConfig+0x258>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 030c 	and.w	r3, r3, #12
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1ee      	bne.n	8002318 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800233a:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <HAL_RCC_ClockConfig+0x254>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d219      	bcs.n	800237c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d105      	bne.n	800235a <HAL_RCC_ClockConfig+0x1be>
 800234e:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <HAL_RCC_ClockConfig+0x254>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a27      	ldr	r2, [pc, #156]	; (80023f0 <HAL_RCC_ClockConfig+0x254>)
 8002354:	f043 0304 	orr.w	r3, r3, #4
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <HAL_RCC_ClockConfig+0x254>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 0201 	bic.w	r2, r3, #1
 8002362:	4923      	ldr	r1, [pc, #140]	; (80023f0 <HAL_RCC_ClockConfig+0x254>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <HAL_RCC_ClockConfig+0x254>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e034      	b.n	80023e6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002388:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <HAL_RCC_ClockConfig+0x258>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	4917      	ldr	r1, [pc, #92]	; (80023f4 <HAL_RCC_ClockConfig+0x258>)
 8002396:	4313      	orrs	r3, r2
 8002398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d009      	beq.n	80023ba <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023a6:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <HAL_RCC_ClockConfig+0x258>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	490f      	ldr	r1, [pc, #60]	; (80023f4 <HAL_RCC_ClockConfig+0x258>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023ba:	f000 f823 	bl	8002404 <HAL_RCC_GetSysClockFreq>
 80023be:	4602      	mov	r2, r0
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <HAL_RCC_ClockConfig+0x258>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	091b      	lsrs	r3, r3, #4
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	490b      	ldr	r1, [pc, #44]	; (80023f8 <HAL_RCC_ClockConfig+0x25c>)
 80023cc:	5ccb      	ldrb	r3, [r1, r3]
 80023ce:	fa22 f303 	lsr.w	r3, r2, r3
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <HAL_RCC_ClockConfig+0x260>)
 80023d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023d6:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <HAL_RCC_ClockConfig+0x264>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff f84e 	bl	800147c <HAL_InitTick>
 80023e0:	4603      	mov	r3, r0
 80023e2:	72fb      	strb	r3, [r7, #11]

  return status;
 80023e4:	7afb      	ldrb	r3, [r7, #11]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023c00 	.word	0x40023c00
 80023f4:	40023800 	.word	0x40023800
 80023f8:	08004088 	.word	0x08004088
 80023fc:	20000000 	.word	0x20000000
 8002400:	20000004 	.word	0x20000004

08002404 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002408:	b092      	sub	sp, #72	; 0x48
 800240a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800240c:	4b79      	ldr	r3, [pc, #484]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b0c      	cmp	r3, #12
 800241a:	d00d      	beq.n	8002438 <HAL_RCC_GetSysClockFreq+0x34>
 800241c:	2b0c      	cmp	r3, #12
 800241e:	f200 80d5 	bhi.w	80025cc <HAL_RCC_GetSysClockFreq+0x1c8>
 8002422:	2b04      	cmp	r3, #4
 8002424:	d002      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0x28>
 8002426:	2b08      	cmp	r3, #8
 8002428:	d003      	beq.n	8002432 <HAL_RCC_GetSysClockFreq+0x2e>
 800242a:	e0cf      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800242c:	4b72      	ldr	r3, [pc, #456]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800242e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002430:	e0da      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002432:	4b72      	ldr	r3, [pc, #456]	; (80025fc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002434:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002436:	e0d7      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800243a:	0c9b      	lsrs	r3, r3, #18
 800243c:	f003 020f 	and.w	r2, r3, #15
 8002440:	4b6f      	ldr	r3, [pc, #444]	; (8002600 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002442:	5c9b      	ldrb	r3, [r3, r2]
 8002444:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002448:	0d9b      	lsrs	r3, r3, #22
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	3301      	adds	r3, #1
 8002450:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002452:	4b68      	ldr	r3, [pc, #416]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d05d      	beq.n	800251a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800245e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002460:	2200      	movs	r2, #0
 8002462:	4618      	mov	r0, r3
 8002464:	4611      	mov	r1, r2
 8002466:	4604      	mov	r4, r0
 8002468:	460d      	mov	r5, r1
 800246a:	4622      	mov	r2, r4
 800246c:	462b      	mov	r3, r5
 800246e:	f04f 0000 	mov.w	r0, #0
 8002472:	f04f 0100 	mov.w	r1, #0
 8002476:	0159      	lsls	r1, r3, #5
 8002478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800247c:	0150      	lsls	r0, r2, #5
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4621      	mov	r1, r4
 8002484:	1a51      	subs	r1, r2, r1
 8002486:	6139      	str	r1, [r7, #16]
 8002488:	4629      	mov	r1, r5
 800248a:	eb63 0301 	sbc.w	r3, r3, r1
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800249c:	4659      	mov	r1, fp
 800249e:	018b      	lsls	r3, r1, #6
 80024a0:	4651      	mov	r1, sl
 80024a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024a6:	4651      	mov	r1, sl
 80024a8:	018a      	lsls	r2, r1, #6
 80024aa:	46d4      	mov	ip, sl
 80024ac:	ebb2 080c 	subs.w	r8, r2, ip
 80024b0:	4659      	mov	r1, fp
 80024b2:	eb63 0901 	sbc.w	r9, r3, r1
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024ca:	4690      	mov	r8, r2
 80024cc:	4699      	mov	r9, r3
 80024ce:	4623      	mov	r3, r4
 80024d0:	eb18 0303 	adds.w	r3, r8, r3
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	462b      	mov	r3, r5
 80024d8:	eb49 0303 	adc.w	r3, r9, r3
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024ea:	4629      	mov	r1, r5
 80024ec:	024b      	lsls	r3, r1, #9
 80024ee:	4620      	mov	r0, r4
 80024f0:	4629      	mov	r1, r5
 80024f2:	4604      	mov	r4, r0
 80024f4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80024f8:	4601      	mov	r1, r0
 80024fa:	024a      	lsls	r2, r1, #9
 80024fc:	4610      	mov	r0, r2
 80024fe:	4619      	mov	r1, r3
 8002500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002502:	2200      	movs	r2, #0
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
 8002506:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002508:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800250c:	f7fd fe36 	bl	800017c <__aeabi_uldivmod>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4613      	mov	r3, r2
 8002516:	647b      	str	r3, [r7, #68]	; 0x44
 8002518:	e055      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800251a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251c:	2200      	movs	r2, #0
 800251e:	623b      	str	r3, [r7, #32]
 8002520:	627a      	str	r2, [r7, #36]	; 0x24
 8002522:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002526:	4642      	mov	r2, r8
 8002528:	464b      	mov	r3, r9
 800252a:	f04f 0000 	mov.w	r0, #0
 800252e:	f04f 0100 	mov.w	r1, #0
 8002532:	0159      	lsls	r1, r3, #5
 8002534:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002538:	0150      	lsls	r0, r2, #5
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	46c4      	mov	ip, r8
 8002540:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002544:	4640      	mov	r0, r8
 8002546:	4649      	mov	r1, r9
 8002548:	468c      	mov	ip, r1
 800254a:	eb63 0b0c 	sbc.w	fp, r3, ip
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800255a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800255e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002562:	ebb2 040a 	subs.w	r4, r2, sl
 8002566:	eb63 050b 	sbc.w	r5, r3, fp
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	f04f 0300 	mov.w	r3, #0
 8002572:	00eb      	lsls	r3, r5, #3
 8002574:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002578:	00e2      	lsls	r2, r4, #3
 800257a:	4614      	mov	r4, r2
 800257c:	461d      	mov	r5, r3
 800257e:	4603      	mov	r3, r0
 8002580:	18e3      	adds	r3, r4, r3
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	460b      	mov	r3, r1
 8002586:	eb45 0303 	adc.w	r3, r5, r3
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002598:	4629      	mov	r1, r5
 800259a:	028b      	lsls	r3, r1, #10
 800259c:	4620      	mov	r0, r4
 800259e:	4629      	mov	r1, r5
 80025a0:	4604      	mov	r4, r0
 80025a2:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80025a6:	4601      	mov	r1, r0
 80025a8:	028a      	lsls	r2, r1, #10
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b0:	2200      	movs	r2, #0
 80025b2:	61bb      	str	r3, [r7, #24]
 80025b4:	61fa      	str	r2, [r7, #28]
 80025b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025ba:	f7fd fddf 	bl	800017c <__aeabi_uldivmod>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4613      	mov	r3, r2
 80025c4:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80025c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80025ca:	e00d      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	0b5b      	lsrs	r3, r3, #13
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80025d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025da:	3301      	adds	r3, #1
 80025dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80025e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3748      	adds	r7, #72	; 0x48
 80025ee:	46bd      	mov	sp, r7
 80025f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025f4:	40023800 	.word	0x40023800
 80025f8:	00f42400 	.word	0x00f42400
 80025fc:	007a1200 	.word	0x007a1200
 8002600:	0800407c 	.word	0x0800407c

08002604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002608:	4b02      	ldr	r3, [pc, #8]	; (8002614 <HAL_RCC_GetHCLKFreq+0x10>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr
 8002614:	20000000 	.word	0x20000000

08002618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800261c:	f7ff fff2 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 8002620:	4602      	mov	r2, r0
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	4903      	ldr	r1, [pc, #12]	; (800263c <HAL_RCC_GetPCLK1Freq+0x24>)
 800262e:	5ccb      	ldrb	r3, [r1, r3]
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002634:	4618      	mov	r0, r3
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40023800 	.word	0x40023800
 800263c:	08004098 	.word	0x08004098

08002640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002644:	f7ff ffde 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 8002648:	4602      	mov	r2, r0
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	0adb      	lsrs	r3, r3, #11
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	4903      	ldr	r1, [pc, #12]	; (8002664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002656:	5ccb      	ldrb	r3, [r1, r3]
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40023800 	.word	0x40023800
 8002664:	08004098 	.word	0x08004098

08002668 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002668:	b480      	push	{r7}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002670:	2300      	movs	r3, #0
 8002672:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002674:	4b29      	ldr	r3, [pc, #164]	; (800271c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d12c      	bne.n	80026da <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002680:	4b26      	ldr	r3, [pc, #152]	; (800271c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800268c:	4b24      	ldr	r3, [pc, #144]	; (8002720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	e016      	b.n	80026c6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002698:	4b20      	ldr	r3, [pc, #128]	; (800271c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	4a1f      	ldr	r2, [pc, #124]	; (800271c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800269e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a2:	6253      	str	r3, [r2, #36]	; 0x24
 80026a4:	4b1d      	ldr	r3, [pc, #116]	; (800271c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80026b0:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80026b8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ba:	4b18      	ldr	r3, [pc, #96]	; (800271c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	4a17      	ldr	r2, [pc, #92]	; (800271c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80026c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80026cc:	d105      	bne.n	80026da <RCC_SetFlashLatencyFromMSIRange+0x72>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80026d4:	d101      	bne.n	80026da <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80026d6:	2301      	movs	r3, #1
 80026d8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d105      	bne.n	80026ec <RCC_SetFlashLatencyFromMSIRange+0x84>
 80026e0:	4b10      	ldr	r3, [pc, #64]	; (8002724 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a0f      	ldr	r2, [pc, #60]	; (8002724 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026e6:	f043 0304 	orr.w	r3, r3, #4
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f023 0201 	bic.w	r2, r3, #1
 80026f4:	490b      	ldr	r1, [pc, #44]	; (8002724 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026fc:	4b09      	ldr	r3, [pc, #36]	; (8002724 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	429a      	cmp	r2, r3
 8002708:	d001      	beq.n	800270e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800
 8002720:	40007000 	.word	0x40007000
 8002724:	40023c00 	.word	0x40023c00

08002728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e07b      	b.n	8002832 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	2b00      	cmp	r3, #0
 8002740:	d108      	bne.n	8002754 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800274a:	d009      	beq.n	8002760 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	61da      	str	r2, [r3, #28]
 8002752:	e005      	b.n	8002760 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fe fce6 	bl	800114c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002796:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e4:	ea42 0103 	orr.w	r1, r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	0c1b      	lsrs	r3, r3, #16
 80027fe:	f003 0104 	and.w	r1, r3, #4
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	f003 0210 	and.w	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69da      	ldr	r2, [r3, #28]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002820:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b088      	sub	sp, #32
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	603b      	str	r3, [r7, #0]
 8002846:	4613      	mov	r3, r2
 8002848:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_SPI_Transmit+0x22>
 8002858:	2302      	movs	r3, #2
 800285a:	e12d      	b.n	8002ab8 <HAL_SPI_Transmit+0x27e>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002864:	f7fe fe56 	bl	8001514 <HAL_GetTick>
 8002868:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b01      	cmp	r3, #1
 8002878:	d002      	beq.n	8002880 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800287a:	2302      	movs	r3, #2
 800287c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800287e:	e116      	b.n	8002aae <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <HAL_SPI_Transmit+0x52>
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002890:	e10d      	b.n	8002aae <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2203      	movs	r2, #3
 8002896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	88fa      	ldrh	r2, [r7, #6]
 80028aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	88fa      	ldrh	r2, [r7, #6]
 80028b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d8:	d10f      	bne.n	80028fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002904:	2b40      	cmp	r3, #64	; 0x40
 8002906:	d007      	beq.n	8002918 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002916:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002920:	d14f      	bne.n	80029c2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <HAL_SPI_Transmit+0xf6>
 800292a:	8afb      	ldrh	r3, [r7, #22]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d142      	bne.n	80029b6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	881a      	ldrh	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	1c9a      	adds	r2, r3, #2
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800294a:	b29b      	uxth	r3, r3
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002954:	e02f      	b.n	80029b6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b02      	cmp	r3, #2
 8002962:	d112      	bne.n	800298a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	881a      	ldrh	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	1c9a      	adds	r2, r3, #2
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800297e:	b29b      	uxth	r3, r3
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	86da      	strh	r2, [r3, #54]	; 0x36
 8002988:	e015      	b.n	80029b6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800298a:	f7fe fdc3 	bl	8001514 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d803      	bhi.n	80029a2 <HAL_SPI_Transmit+0x168>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a0:	d102      	bne.n	80029a8 <HAL_SPI_Transmit+0x16e>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d106      	bne.n	80029b6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80029b4:	e07b      	b.n	8002aae <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1ca      	bne.n	8002956 <HAL_SPI_Transmit+0x11c>
 80029c0:	e050      	b.n	8002a64 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_SPI_Transmit+0x196>
 80029ca:	8afb      	ldrh	r3, [r7, #22]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d144      	bne.n	8002a5a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	330c      	adds	r3, #12
 80029da:	7812      	ldrb	r2, [r2, #0]
 80029dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80029f6:	e030      	b.n	8002a5a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d113      	bne.n	8002a2e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	330c      	adds	r3, #12
 8002a10:	7812      	ldrb	r2, [r2, #0]
 8002a12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a2c:	e015      	b.n	8002a5a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a2e:	f7fe fd71 	bl	8001514 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d803      	bhi.n	8002a46 <HAL_SPI_Transmit+0x20c>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d102      	bne.n	8002a4c <HAL_SPI_Transmit+0x212>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d106      	bne.n	8002a5a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002a58:	e029      	b.n	8002aae <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1c9      	bne.n	80029f8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	6839      	ldr	r1, [r7, #0]
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 fbdf 	bl	800322c <SPI_EndRxTxTransaction>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10a      	bne.n	8002a98 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	77fb      	strb	r3, [r7, #31]
 8002aa4:	e003      	b.n	8002aae <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ab6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3720      	adds	r7, #32
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	4613      	mov	r3, r2
 8002ace:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d002      	beq.n	8002ae6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ae4:	e0fb      	b.n	8002cde <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aee:	d112      	bne.n	8002b16 <HAL_SPI_Receive+0x56>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10e      	bne.n	8002b16 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2204      	movs	r2, #4
 8002afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b00:	88fa      	ldrh	r2, [r7, #6]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	4613      	mov	r3, r2
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	68b9      	ldr	r1, [r7, #8]
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f8ef 	bl	8002cf0 <HAL_SPI_TransmitReceive>
 8002b12:	4603      	mov	r3, r0
 8002b14:	e0e8      	b.n	8002ce8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_SPI_Receive+0x64>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e0e1      	b.n	8002ce8 <HAL_SPI_Receive+0x228>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b2c:	f7fe fcf2 	bl	8001514 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <HAL_SPI_Receive+0x7e>
 8002b38:	88fb      	ldrh	r3, [r7, #6]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d102      	bne.n	8002b44 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b42:	e0cc      	b.n	8002cde <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2204      	movs	r2, #4
 8002b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	88fa      	ldrh	r2, [r7, #6]
 8002b5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	88fa      	ldrh	r2, [r7, #6]
 8002b62:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b8a:	d10f      	bne.n	8002bac <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002baa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb6:	2b40      	cmp	r3, #64	; 0x40
 8002bb8:	d007      	beq.n	8002bca <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bc8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d16a      	bne.n	8002ca8 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002bd2:	e032      	b.n	8002c3a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d115      	bne.n	8002c0e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f103 020c 	add.w	r2, r3, #12
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bee:	7812      	ldrb	r2, [r2, #0]
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c0c:	e015      	b.n	8002c3a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c0e:	f7fe fc81 	bl	8001514 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d803      	bhi.n	8002c26 <HAL_SPI_Receive+0x166>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c24:	d102      	bne.n	8002c2c <HAL_SPI_Receive+0x16c>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d106      	bne.n	8002c3a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002c38:	e051      	b.n	8002cde <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1c7      	bne.n	8002bd4 <HAL_SPI_Receive+0x114>
 8002c44:	e035      	b.n	8002cb2 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d113      	bne.n	8002c7c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	b292      	uxth	r2, r2
 8002c60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c66:	1c9a      	adds	r2, r3, #2
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c7a:	e015      	b.n	8002ca8 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c7c:	f7fe fc4a 	bl	8001514 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d803      	bhi.n	8002c94 <HAL_SPI_Receive+0x1d4>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c92:	d102      	bne.n	8002c9a <HAL_SPI_Receive+0x1da>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002ca6:	e01a      	b.n	8002cde <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1c9      	bne.n	8002c46 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	6839      	ldr	r1, [r7, #0]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fa52 	bl	8003160 <SPI_EndRxTransaction>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	75fb      	strb	r3, [r7, #23]
 8002cd4:	e003      	b.n	8002cde <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08c      	sub	sp, #48	; 0x30
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_SPI_TransmitReceive+0x26>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e198      	b.n	8003048 <HAL_SPI_TransmitReceive+0x358>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d1e:	f7fe fbf9 	bl	8001514 <HAL_GetTick>
 8002d22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d34:	887b      	ldrh	r3, [r7, #2]
 8002d36:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d00f      	beq.n	8002d60 <HAL_SPI_TransmitReceive+0x70>
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d46:	d107      	bne.n	8002d58 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d103      	bne.n	8002d58 <HAL_SPI_TransmitReceive+0x68>
 8002d50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d003      	beq.n	8002d60 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d5e:	e16d      	b.n	800303c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d005      	beq.n	8002d72 <HAL_SPI_TransmitReceive+0x82>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_SPI_TransmitReceive+0x82>
 8002d6c:	887b      	ldrh	r3, [r7, #2]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d103      	bne.n	8002d7a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d78:	e160      	b.n	800303c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d003      	beq.n	8002d8e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2205      	movs	r2, #5
 8002d8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	887a      	ldrh	r2, [r7, #2]
 8002d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	887a      	ldrh	r2, [r7, #2]
 8002da4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	887a      	ldrh	r2, [r7, #2]
 8002db0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	887a      	ldrh	r2, [r7, #2]
 8002db6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dce:	2b40      	cmp	r3, #64	; 0x40
 8002dd0:	d007      	beq.n	8002de2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002de0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dea:	d17c      	bne.n	8002ee6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <HAL_SPI_TransmitReceive+0x10a>
 8002df4:	8b7b      	ldrh	r3, [r7, #26]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d16a      	bne.n	8002ed0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	881a      	ldrh	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	1c9a      	adds	r2, r3, #2
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e1e:	e057      	b.n	8002ed0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d11b      	bne.n	8002e66 <HAL_SPI_TransmitReceive+0x176>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d016      	beq.n	8002e66 <HAL_SPI_TransmitReceive+0x176>
 8002e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d113      	bne.n	8002e66 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	881a      	ldrh	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	1c9a      	adds	r2, r3, #2
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d119      	bne.n	8002ea8 <HAL_SPI_TransmitReceive+0x1b8>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d014      	beq.n	8002ea8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	b292      	uxth	r2, r2
 8002e8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	1c9a      	adds	r2, r3, #2
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ea8:	f7fe fb34 	bl	8001514 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d80b      	bhi.n	8002ed0 <HAL_SPI_TransmitReceive+0x1e0>
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebe:	d007      	beq.n	8002ed0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002ece:	e0b5      	b.n	800303c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1a2      	bne.n	8002e20 <HAL_SPI_TransmitReceive+0x130>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d19d      	bne.n	8002e20 <HAL_SPI_TransmitReceive+0x130>
 8002ee4:	e080      	b.n	8002fe8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_SPI_TransmitReceive+0x204>
 8002eee:	8b7b      	ldrh	r3, [r7, #26]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d16f      	bne.n	8002fd4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	330c      	adds	r3, #12
 8002efe:	7812      	ldrb	r2, [r2, #0]
 8002f00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f1a:	e05b      	b.n	8002fd4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d11c      	bne.n	8002f64 <HAL_SPI_TransmitReceive+0x274>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d017      	beq.n	8002f64 <HAL_SPI_TransmitReceive+0x274>
 8002f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d114      	bne.n	8002f64 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	330c      	adds	r3, #12
 8002f44:	7812      	ldrb	r2, [r2, #0]
 8002f46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d119      	bne.n	8002fa6 <HAL_SPI_TransmitReceive+0x2b6>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d014      	beq.n	8002fa6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002fa6:	f7fe fab5 	bl	8001514 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d803      	bhi.n	8002fbe <HAL_SPI_TransmitReceive+0x2ce>
 8002fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbc:	d102      	bne.n	8002fc4 <HAL_SPI_TransmitReceive+0x2d4>
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d107      	bne.n	8002fd4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002fd2:	e033      	b.n	800303c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d19e      	bne.n	8002f1c <HAL_SPI_TransmitReceive+0x22c>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d199      	bne.n	8002f1c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 f91d 	bl	800322c <SPI_EndRxTxTransaction>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d006      	beq.n	8003006 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003004:	e01a      	b.n	800303c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003032:	e003      	b.n	800303c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003044:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003048:	4618      	mov	r0, r3
 800304a:	3730      	adds	r7, #48	; 0x30
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	4613      	mov	r3, r2
 800305e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003060:	f7fe fa58 	bl	8001514 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	4413      	add	r3, r2
 800306e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003070:	f7fe fa50 	bl	8001514 <HAL_GetTick>
 8003074:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003076:	4b39      	ldr	r3, [pc, #228]	; (800315c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	015b      	lsls	r3, r3, #5
 800307c:	0d1b      	lsrs	r3, r3, #20
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	fb02 f303 	mul.w	r3, r2, r3
 8003084:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003086:	e054      	b.n	8003132 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308e:	d050      	beq.n	8003132 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003090:	f7fe fa40 	bl	8001514 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	429a      	cmp	r2, r3
 800309e:	d902      	bls.n	80030a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d13d      	bne.n	8003122 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030be:	d111      	bne.n	80030e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c8:	d004      	beq.n	80030d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d2:	d107      	bne.n	80030e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ec:	d10f      	bne.n	800310e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800310c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e017      	b.n	8003152 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	3b01      	subs	r3, #1
 8003130:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4013      	ands	r3, r2
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	429a      	cmp	r2, r3
 8003140:	bf0c      	ite	eq
 8003142:	2301      	moveq	r3, #1
 8003144:	2300      	movne	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	461a      	mov	r2, r3
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	429a      	cmp	r2, r3
 800314e:	d19b      	bne.n	8003088 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3720      	adds	r7, #32
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000000 	.word	0x20000000

08003160 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af02      	add	r7, sp, #8
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003174:	d111      	bne.n	800319a <SPI_EndRxTransaction+0x3a>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800317e:	d004      	beq.n	800318a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003188:	d107      	bne.n	800319a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003198:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031a2:	d12a      	bne.n	80031fa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ac:	d012      	beq.n	80031d4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2200      	movs	r2, #0
 80031b6:	2180      	movs	r1, #128	; 0x80
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f7ff ff49 	bl	8003050 <SPI_WaitFlagStateUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d02d      	beq.n	8003220 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c8:	f043 0220 	orr.w	r2, r3, #32
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e026      	b.n	8003222 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2200      	movs	r2, #0
 80031dc:	2101      	movs	r1, #1
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f7ff ff36 	bl	8003050 <SPI_WaitFlagStateUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d01a      	beq.n	8003220 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ee:	f043 0220 	orr.w	r2, r3, #32
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e013      	b.n	8003222 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2200      	movs	r2, #0
 8003202:	2101      	movs	r1, #1
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f7ff ff23 	bl	8003050 <SPI_WaitFlagStateUntilTimeout>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d007      	beq.n	8003220 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003214:	f043 0220 	orr.w	r2, r3, #32
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e000      	b.n	8003222 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003238:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <SPI_EndRxTxTransaction+0x7c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1b      	ldr	r2, [pc, #108]	; (80032ac <SPI_EndRxTxTransaction+0x80>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	0d5b      	lsrs	r3, r3, #21
 8003244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003248:	fb02 f303 	mul.w	r3, r2, r3
 800324c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003256:	d112      	bne.n	800327e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2200      	movs	r2, #0
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f7ff fef4 	bl	8003050 <SPI_WaitFlagStateUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d016      	beq.n	800329c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003272:	f043 0220 	orr.w	r2, r3, #32
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e00f      	b.n	800329e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	3b01      	subs	r3, #1
 8003288:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003294:	2b80      	cmp	r3, #128	; 0x80
 8003296:	d0f2      	beq.n	800327e <SPI_EndRxTxTransaction+0x52>
 8003298:	e000      	b.n	800329c <SPI_EndRxTxTransaction+0x70>
        break;
 800329a:	bf00      	nop
  }

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000000 	.word	0x20000000
 80032ac:	165e9f81 	.word	0x165e9f81

080032b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e042      	b.n	8003348 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fe f84e 	bl	8001378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2224      	movs	r2, #36	; 0x24
 80032e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f91d 	bl	8003534 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003308:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003318:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003328:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	; 0x28
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	4613      	mov	r3, r2
 800335e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b20      	cmp	r3, #32
 800336e:	d16d      	bne.n	800344c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <HAL_UART_Transmit+0x2c>
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e066      	b.n	800344e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2221      	movs	r2, #33	; 0x21
 800338a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800338e:	f7fe f8c1 	bl	8001514 <HAL_GetTick>
 8003392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	88fa      	ldrh	r2, [r7, #6]
 8003398:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	88fa      	ldrh	r2, [r7, #6]
 800339e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a8:	d108      	bne.n	80033bc <HAL_UART_Transmit+0x6c>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d104      	bne.n	80033bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	e003      	b.n	80033c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033c4:	e02a      	b.n	800341c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2200      	movs	r2, #0
 80033ce:	2180      	movs	r1, #128	; 0x80
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f840 	bl	8003456 <UART_WaitOnFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e036      	b.n	800344e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10b      	bne.n	80033fe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	3302      	adds	r3, #2
 80033fa:	61bb      	str	r3, [r7, #24]
 80033fc:	e007      	b.n	800340e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	3301      	adds	r3, #1
 800340c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1cf      	bne.n	80033c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2200      	movs	r2, #0
 800342e:	2140      	movs	r1, #64	; 0x40
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 f810 	bl	8003456 <UART_WaitOnFlagUntilTimeout>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e006      	b.n	800344e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003448:	2300      	movs	r3, #0
 800344a:	e000      	b.n	800344e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800344c:	2302      	movs	r3, #2
  }
}
 800344e:	4618      	mov	r0, r3
 8003450:	3720      	adds	r7, #32
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b090      	sub	sp, #64	; 0x40
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	4613      	mov	r3, r2
 8003464:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003466:	e050      	b.n	800350a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346e:	d04c      	beq.n	800350a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003472:	2b00      	cmp	r3, #0
 8003474:	d007      	beq.n	8003486 <UART_WaitOnFlagUntilTimeout+0x30>
 8003476:	f7fe f84d 	bl	8001514 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003482:	429a      	cmp	r2, r3
 8003484:	d241      	bcs.n	800350a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	330c      	adds	r3, #12
 800348c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	e853 3f00 	ldrex	r3, [r3]
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800349c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	330c      	adds	r3, #12
 80034a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034a6:	637a      	str	r2, [r7, #52]	; 0x34
 80034a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034ae:	e841 2300 	strex	r3, r2, [r1]
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1e5      	bne.n	8003486 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3314      	adds	r3, #20
 80034c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	613b      	str	r3, [r7, #16]
   return(result);
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3314      	adds	r3, #20
 80034d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034da:	623a      	str	r2, [r7, #32]
 80034dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034de:	69f9      	ldr	r1, [r7, #28]
 80034e0:	6a3a      	ldr	r2, [r7, #32]
 80034e2:	e841 2300 	strex	r3, r2, [r1]
 80034e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e5      	bne.n	80034ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e00f      	b.n	800352a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4013      	ands	r3, r2
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	429a      	cmp	r2, r3
 8003518:	bf0c      	ite	eq
 800351a:	2301      	moveq	r3, #1
 800351c:	2300      	movne	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	461a      	mov	r2, r3
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	429a      	cmp	r2, r3
 8003526:	d09f      	beq.n	8003468 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3740      	adds	r7, #64	; 0x40
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	4313      	orrs	r3, r2
 8003568:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003574:	f023 030c 	bic.w	r3, r3, #12
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	430b      	orrs	r3, r1
 8003580:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699a      	ldr	r2, [r3, #24]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a55      	ldr	r2, [pc, #340]	; (80036f4 <UART_SetConfig+0x1c0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d103      	bne.n	80035aa <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035a2:	f7ff f84d 	bl	8002640 <HAL_RCC_GetPCLK2Freq>
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	e002      	b.n	80035b0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035aa:	f7ff f835 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 80035ae:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b8:	d14c      	bne.n	8003654 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	009a      	lsls	r2, r3, #2
 80035c4:	441a      	add	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	4a49      	ldr	r2, [pc, #292]	; (80036f8 <UART_SetConfig+0x1c4>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	0119      	lsls	r1, r3, #4
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	009a      	lsls	r2, r3, #2
 80035e4:	441a      	add	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80035f0:	4b41      	ldr	r3, [pc, #260]	; (80036f8 <UART_SetConfig+0x1c4>)
 80035f2:	fba3 0302 	umull	r0, r3, r3, r2
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2064      	movs	r0, #100	; 0x64
 80035fa:	fb00 f303 	mul.w	r3, r0, r3
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	3332      	adds	r3, #50	; 0x32
 8003604:	4a3c      	ldr	r2, [pc, #240]	; (80036f8 <UART_SetConfig+0x1c4>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003612:	4419      	add	r1, r3
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	009a      	lsls	r2, r3, #2
 800361e:	441a      	add	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	fbb2 f2f3 	udiv	r2, r2, r3
 800362a:	4b33      	ldr	r3, [pc, #204]	; (80036f8 <UART_SetConfig+0x1c4>)
 800362c:	fba3 0302 	umull	r0, r3, r3, r2
 8003630:	095b      	lsrs	r3, r3, #5
 8003632:	2064      	movs	r0, #100	; 0x64
 8003634:	fb00 f303 	mul.w	r3, r0, r3
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	3332      	adds	r3, #50	; 0x32
 800363e:	4a2e      	ldr	r2, [pc, #184]	; (80036f8 <UART_SetConfig+0x1c4>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	095b      	lsrs	r3, r3, #5
 8003646:	f003 0207 	and.w	r2, r3, #7
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	440a      	add	r2, r1
 8003650:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003652:	e04a      	b.n	80036ea <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	009a      	lsls	r2, r3, #2
 800365e:	441a      	add	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	fbb2 f3f3 	udiv	r3, r2, r3
 800366a:	4a23      	ldr	r2, [pc, #140]	; (80036f8 <UART_SetConfig+0x1c4>)
 800366c:	fba2 2303 	umull	r2, r3, r2, r3
 8003670:	095b      	lsrs	r3, r3, #5
 8003672:	0119      	lsls	r1, r3, #4
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	009a      	lsls	r2, r3, #2
 800367e:	441a      	add	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	fbb2 f2f3 	udiv	r2, r2, r3
 800368a:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <UART_SetConfig+0x1c4>)
 800368c:	fba3 0302 	umull	r0, r3, r3, r2
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	2064      	movs	r0, #100	; 0x64
 8003694:	fb00 f303 	mul.w	r3, r0, r3
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	3332      	adds	r3, #50	; 0x32
 800369e:	4a16      	ldr	r2, [pc, #88]	; (80036f8 <UART_SetConfig+0x1c4>)
 80036a0:	fba2 2303 	umull	r2, r3, r2, r3
 80036a4:	095b      	lsrs	r3, r3, #5
 80036a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036aa:	4419      	add	r1, r3
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	009a      	lsls	r2, r3, #2
 80036b6:	441a      	add	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c2:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <UART_SetConfig+0x1c4>)
 80036c4:	fba3 0302 	umull	r0, r3, r3, r2
 80036c8:	095b      	lsrs	r3, r3, #5
 80036ca:	2064      	movs	r0, #100	; 0x64
 80036cc:	fb00 f303 	mul.w	r3, r0, r3
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	3332      	adds	r3, #50	; 0x32
 80036d6:	4a08      	ldr	r2, [pc, #32]	; (80036f8 <UART_SetConfig+0x1c4>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	f003 020f 	and.w	r2, r3, #15
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	440a      	add	r2, r1
 80036e8:	609a      	str	r2, [r3, #8]
}
 80036ea:	bf00      	nop
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40013800 	.word	0x40013800
 80036f8:	51eb851f 	.word	0x51eb851f

080036fc <__errno>:
 80036fc:	4b01      	ldr	r3, [pc, #4]	; (8003704 <__errno+0x8>)
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	2000000c 	.word	0x2000000c

08003708 <__libc_init_array>:
 8003708:	b570      	push	{r4, r5, r6, lr}
 800370a:	2600      	movs	r6, #0
 800370c:	4d0c      	ldr	r5, [pc, #48]	; (8003740 <__libc_init_array+0x38>)
 800370e:	4c0d      	ldr	r4, [pc, #52]	; (8003744 <__libc_init_array+0x3c>)
 8003710:	1b64      	subs	r4, r4, r5
 8003712:	10a4      	asrs	r4, r4, #2
 8003714:	42a6      	cmp	r6, r4
 8003716:	d109      	bne.n	800372c <__libc_init_array+0x24>
 8003718:	f000 fc9c 	bl	8004054 <_init>
 800371c:	2600      	movs	r6, #0
 800371e:	4d0a      	ldr	r5, [pc, #40]	; (8003748 <__libc_init_array+0x40>)
 8003720:	4c0a      	ldr	r4, [pc, #40]	; (800374c <__libc_init_array+0x44>)
 8003722:	1b64      	subs	r4, r4, r5
 8003724:	10a4      	asrs	r4, r4, #2
 8003726:	42a6      	cmp	r6, r4
 8003728:	d105      	bne.n	8003736 <__libc_init_array+0x2e>
 800372a:	bd70      	pop	{r4, r5, r6, pc}
 800372c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003730:	4798      	blx	r3
 8003732:	3601      	adds	r6, #1
 8003734:	e7ee      	b.n	8003714 <__libc_init_array+0xc>
 8003736:	f855 3b04 	ldr.w	r3, [r5], #4
 800373a:	4798      	blx	r3
 800373c:	3601      	adds	r6, #1
 800373e:	e7f2      	b.n	8003726 <__libc_init_array+0x1e>
 8003740:	080040dc 	.word	0x080040dc
 8003744:	080040dc 	.word	0x080040dc
 8003748:	080040dc 	.word	0x080040dc
 800374c:	080040e0 	.word	0x080040e0

08003750 <memset>:
 8003750:	4603      	mov	r3, r0
 8003752:	4402      	add	r2, r0
 8003754:	4293      	cmp	r3, r2
 8003756:	d100      	bne.n	800375a <memset+0xa>
 8003758:	4770      	bx	lr
 800375a:	f803 1b01 	strb.w	r1, [r3], #1
 800375e:	e7f9      	b.n	8003754 <memset+0x4>

08003760 <siprintf>:
 8003760:	b40e      	push	{r1, r2, r3}
 8003762:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003766:	b500      	push	{lr}
 8003768:	b09c      	sub	sp, #112	; 0x70
 800376a:	ab1d      	add	r3, sp, #116	; 0x74
 800376c:	9002      	str	r0, [sp, #8]
 800376e:	9006      	str	r0, [sp, #24]
 8003770:	9107      	str	r1, [sp, #28]
 8003772:	9104      	str	r1, [sp, #16]
 8003774:	4808      	ldr	r0, [pc, #32]	; (8003798 <siprintf+0x38>)
 8003776:	4909      	ldr	r1, [pc, #36]	; (800379c <siprintf+0x3c>)
 8003778:	f853 2b04 	ldr.w	r2, [r3], #4
 800377c:	9105      	str	r1, [sp, #20]
 800377e:	6800      	ldr	r0, [r0, #0]
 8003780:	a902      	add	r1, sp, #8
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	f000 f868 	bl	8003858 <_svfiprintf_r>
 8003788:	2200      	movs	r2, #0
 800378a:	9b02      	ldr	r3, [sp, #8]
 800378c:	701a      	strb	r2, [r3, #0]
 800378e:	b01c      	add	sp, #112	; 0x70
 8003790:	f85d eb04 	ldr.w	lr, [sp], #4
 8003794:	b003      	add	sp, #12
 8003796:	4770      	bx	lr
 8003798:	2000000c 	.word	0x2000000c
 800379c:	ffff0208 	.word	0xffff0208

080037a0 <__ssputs_r>:
 80037a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037a4:	688e      	ldr	r6, [r1, #8]
 80037a6:	4682      	mov	sl, r0
 80037a8:	429e      	cmp	r6, r3
 80037aa:	460c      	mov	r4, r1
 80037ac:	4690      	mov	r8, r2
 80037ae:	461f      	mov	r7, r3
 80037b0:	d838      	bhi.n	8003824 <__ssputs_r+0x84>
 80037b2:	898a      	ldrh	r2, [r1, #12]
 80037b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037b8:	d032      	beq.n	8003820 <__ssputs_r+0x80>
 80037ba:	6825      	ldr	r5, [r4, #0]
 80037bc:	6909      	ldr	r1, [r1, #16]
 80037be:	3301      	adds	r3, #1
 80037c0:	eba5 0901 	sub.w	r9, r5, r1
 80037c4:	6965      	ldr	r5, [r4, #20]
 80037c6:	444b      	add	r3, r9
 80037c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037d0:	106d      	asrs	r5, r5, #1
 80037d2:	429d      	cmp	r5, r3
 80037d4:	bf38      	it	cc
 80037d6:	461d      	movcc	r5, r3
 80037d8:	0553      	lsls	r3, r2, #21
 80037da:	d531      	bpl.n	8003840 <__ssputs_r+0xa0>
 80037dc:	4629      	mov	r1, r5
 80037de:	f000 fb6f 	bl	8003ec0 <_malloc_r>
 80037e2:	4606      	mov	r6, r0
 80037e4:	b950      	cbnz	r0, 80037fc <__ssputs_r+0x5c>
 80037e6:	230c      	movs	r3, #12
 80037e8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ec:	f8ca 3000 	str.w	r3, [sl]
 80037f0:	89a3      	ldrh	r3, [r4, #12]
 80037f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037f6:	81a3      	strh	r3, [r4, #12]
 80037f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037fc:	464a      	mov	r2, r9
 80037fe:	6921      	ldr	r1, [r4, #16]
 8003800:	f000 face 	bl	8003da0 <memcpy>
 8003804:	89a3      	ldrh	r3, [r4, #12]
 8003806:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800380a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800380e:	81a3      	strh	r3, [r4, #12]
 8003810:	6126      	str	r6, [r4, #16]
 8003812:	444e      	add	r6, r9
 8003814:	6026      	str	r6, [r4, #0]
 8003816:	463e      	mov	r6, r7
 8003818:	6165      	str	r5, [r4, #20]
 800381a:	eba5 0509 	sub.w	r5, r5, r9
 800381e:	60a5      	str	r5, [r4, #8]
 8003820:	42be      	cmp	r6, r7
 8003822:	d900      	bls.n	8003826 <__ssputs_r+0x86>
 8003824:	463e      	mov	r6, r7
 8003826:	4632      	mov	r2, r6
 8003828:	4641      	mov	r1, r8
 800382a:	6820      	ldr	r0, [r4, #0]
 800382c:	f000 fac6 	bl	8003dbc <memmove>
 8003830:	68a3      	ldr	r3, [r4, #8]
 8003832:	2000      	movs	r0, #0
 8003834:	1b9b      	subs	r3, r3, r6
 8003836:	60a3      	str	r3, [r4, #8]
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	4433      	add	r3, r6
 800383c:	6023      	str	r3, [r4, #0]
 800383e:	e7db      	b.n	80037f8 <__ssputs_r+0x58>
 8003840:	462a      	mov	r2, r5
 8003842:	f000 fbb1 	bl	8003fa8 <_realloc_r>
 8003846:	4606      	mov	r6, r0
 8003848:	2800      	cmp	r0, #0
 800384a:	d1e1      	bne.n	8003810 <__ssputs_r+0x70>
 800384c:	4650      	mov	r0, sl
 800384e:	6921      	ldr	r1, [r4, #16]
 8003850:	f000 face 	bl	8003df0 <_free_r>
 8003854:	e7c7      	b.n	80037e6 <__ssputs_r+0x46>
	...

08003858 <_svfiprintf_r>:
 8003858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800385c:	4698      	mov	r8, r3
 800385e:	898b      	ldrh	r3, [r1, #12]
 8003860:	4607      	mov	r7, r0
 8003862:	061b      	lsls	r3, r3, #24
 8003864:	460d      	mov	r5, r1
 8003866:	4614      	mov	r4, r2
 8003868:	b09d      	sub	sp, #116	; 0x74
 800386a:	d50e      	bpl.n	800388a <_svfiprintf_r+0x32>
 800386c:	690b      	ldr	r3, [r1, #16]
 800386e:	b963      	cbnz	r3, 800388a <_svfiprintf_r+0x32>
 8003870:	2140      	movs	r1, #64	; 0x40
 8003872:	f000 fb25 	bl	8003ec0 <_malloc_r>
 8003876:	6028      	str	r0, [r5, #0]
 8003878:	6128      	str	r0, [r5, #16]
 800387a:	b920      	cbnz	r0, 8003886 <_svfiprintf_r+0x2e>
 800387c:	230c      	movs	r3, #12
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	f04f 30ff 	mov.w	r0, #4294967295
 8003884:	e0d1      	b.n	8003a2a <_svfiprintf_r+0x1d2>
 8003886:	2340      	movs	r3, #64	; 0x40
 8003888:	616b      	str	r3, [r5, #20]
 800388a:	2300      	movs	r3, #0
 800388c:	9309      	str	r3, [sp, #36]	; 0x24
 800388e:	2320      	movs	r3, #32
 8003890:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003894:	2330      	movs	r3, #48	; 0x30
 8003896:	f04f 0901 	mov.w	r9, #1
 800389a:	f8cd 800c 	str.w	r8, [sp, #12]
 800389e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003a44 <_svfiprintf_r+0x1ec>
 80038a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038a6:	4623      	mov	r3, r4
 80038a8:	469a      	mov	sl, r3
 80038aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038ae:	b10a      	cbz	r2, 80038b4 <_svfiprintf_r+0x5c>
 80038b0:	2a25      	cmp	r2, #37	; 0x25
 80038b2:	d1f9      	bne.n	80038a8 <_svfiprintf_r+0x50>
 80038b4:	ebba 0b04 	subs.w	fp, sl, r4
 80038b8:	d00b      	beq.n	80038d2 <_svfiprintf_r+0x7a>
 80038ba:	465b      	mov	r3, fp
 80038bc:	4622      	mov	r2, r4
 80038be:	4629      	mov	r1, r5
 80038c0:	4638      	mov	r0, r7
 80038c2:	f7ff ff6d 	bl	80037a0 <__ssputs_r>
 80038c6:	3001      	adds	r0, #1
 80038c8:	f000 80aa 	beq.w	8003a20 <_svfiprintf_r+0x1c8>
 80038cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038ce:	445a      	add	r2, fp
 80038d0:	9209      	str	r2, [sp, #36]	; 0x24
 80038d2:	f89a 3000 	ldrb.w	r3, [sl]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 80a2 	beq.w	8003a20 <_svfiprintf_r+0x1c8>
 80038dc:	2300      	movs	r3, #0
 80038de:	f04f 32ff 	mov.w	r2, #4294967295
 80038e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038e6:	f10a 0a01 	add.w	sl, sl, #1
 80038ea:	9304      	str	r3, [sp, #16]
 80038ec:	9307      	str	r3, [sp, #28]
 80038ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038f2:	931a      	str	r3, [sp, #104]	; 0x68
 80038f4:	4654      	mov	r4, sl
 80038f6:	2205      	movs	r2, #5
 80038f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038fc:	4851      	ldr	r0, [pc, #324]	; (8003a44 <_svfiprintf_r+0x1ec>)
 80038fe:	f000 fa41 	bl	8003d84 <memchr>
 8003902:	9a04      	ldr	r2, [sp, #16]
 8003904:	b9d8      	cbnz	r0, 800393e <_svfiprintf_r+0xe6>
 8003906:	06d0      	lsls	r0, r2, #27
 8003908:	bf44      	itt	mi
 800390a:	2320      	movmi	r3, #32
 800390c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003910:	0711      	lsls	r1, r2, #28
 8003912:	bf44      	itt	mi
 8003914:	232b      	movmi	r3, #43	; 0x2b
 8003916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800391a:	f89a 3000 	ldrb.w	r3, [sl]
 800391e:	2b2a      	cmp	r3, #42	; 0x2a
 8003920:	d015      	beq.n	800394e <_svfiprintf_r+0xf6>
 8003922:	4654      	mov	r4, sl
 8003924:	2000      	movs	r0, #0
 8003926:	f04f 0c0a 	mov.w	ip, #10
 800392a:	9a07      	ldr	r2, [sp, #28]
 800392c:	4621      	mov	r1, r4
 800392e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003932:	3b30      	subs	r3, #48	; 0x30
 8003934:	2b09      	cmp	r3, #9
 8003936:	d94e      	bls.n	80039d6 <_svfiprintf_r+0x17e>
 8003938:	b1b0      	cbz	r0, 8003968 <_svfiprintf_r+0x110>
 800393a:	9207      	str	r2, [sp, #28]
 800393c:	e014      	b.n	8003968 <_svfiprintf_r+0x110>
 800393e:	eba0 0308 	sub.w	r3, r0, r8
 8003942:	fa09 f303 	lsl.w	r3, r9, r3
 8003946:	4313      	orrs	r3, r2
 8003948:	46a2      	mov	sl, r4
 800394a:	9304      	str	r3, [sp, #16]
 800394c:	e7d2      	b.n	80038f4 <_svfiprintf_r+0x9c>
 800394e:	9b03      	ldr	r3, [sp, #12]
 8003950:	1d19      	adds	r1, r3, #4
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	9103      	str	r1, [sp, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	bfbb      	ittet	lt
 800395a:	425b      	neglt	r3, r3
 800395c:	f042 0202 	orrlt.w	r2, r2, #2
 8003960:	9307      	strge	r3, [sp, #28]
 8003962:	9307      	strlt	r3, [sp, #28]
 8003964:	bfb8      	it	lt
 8003966:	9204      	strlt	r2, [sp, #16]
 8003968:	7823      	ldrb	r3, [r4, #0]
 800396a:	2b2e      	cmp	r3, #46	; 0x2e
 800396c:	d10c      	bne.n	8003988 <_svfiprintf_r+0x130>
 800396e:	7863      	ldrb	r3, [r4, #1]
 8003970:	2b2a      	cmp	r3, #42	; 0x2a
 8003972:	d135      	bne.n	80039e0 <_svfiprintf_r+0x188>
 8003974:	9b03      	ldr	r3, [sp, #12]
 8003976:	3402      	adds	r4, #2
 8003978:	1d1a      	adds	r2, r3, #4
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	9203      	str	r2, [sp, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	bfb8      	it	lt
 8003982:	f04f 33ff 	movlt.w	r3, #4294967295
 8003986:	9305      	str	r3, [sp, #20]
 8003988:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003a48 <_svfiprintf_r+0x1f0>
 800398c:	2203      	movs	r2, #3
 800398e:	4650      	mov	r0, sl
 8003990:	7821      	ldrb	r1, [r4, #0]
 8003992:	f000 f9f7 	bl	8003d84 <memchr>
 8003996:	b140      	cbz	r0, 80039aa <_svfiprintf_r+0x152>
 8003998:	2340      	movs	r3, #64	; 0x40
 800399a:	eba0 000a 	sub.w	r0, r0, sl
 800399e:	fa03 f000 	lsl.w	r0, r3, r0
 80039a2:	9b04      	ldr	r3, [sp, #16]
 80039a4:	3401      	adds	r4, #1
 80039a6:	4303      	orrs	r3, r0
 80039a8:	9304      	str	r3, [sp, #16]
 80039aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039ae:	2206      	movs	r2, #6
 80039b0:	4826      	ldr	r0, [pc, #152]	; (8003a4c <_svfiprintf_r+0x1f4>)
 80039b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039b6:	f000 f9e5 	bl	8003d84 <memchr>
 80039ba:	2800      	cmp	r0, #0
 80039bc:	d038      	beq.n	8003a30 <_svfiprintf_r+0x1d8>
 80039be:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <_svfiprintf_r+0x1f8>)
 80039c0:	bb1b      	cbnz	r3, 8003a0a <_svfiprintf_r+0x1b2>
 80039c2:	9b03      	ldr	r3, [sp, #12]
 80039c4:	3307      	adds	r3, #7
 80039c6:	f023 0307 	bic.w	r3, r3, #7
 80039ca:	3308      	adds	r3, #8
 80039cc:	9303      	str	r3, [sp, #12]
 80039ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039d0:	4433      	add	r3, r6
 80039d2:	9309      	str	r3, [sp, #36]	; 0x24
 80039d4:	e767      	b.n	80038a6 <_svfiprintf_r+0x4e>
 80039d6:	460c      	mov	r4, r1
 80039d8:	2001      	movs	r0, #1
 80039da:	fb0c 3202 	mla	r2, ip, r2, r3
 80039de:	e7a5      	b.n	800392c <_svfiprintf_r+0xd4>
 80039e0:	2300      	movs	r3, #0
 80039e2:	f04f 0c0a 	mov.w	ip, #10
 80039e6:	4619      	mov	r1, r3
 80039e8:	3401      	adds	r4, #1
 80039ea:	9305      	str	r3, [sp, #20]
 80039ec:	4620      	mov	r0, r4
 80039ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039f2:	3a30      	subs	r2, #48	; 0x30
 80039f4:	2a09      	cmp	r2, #9
 80039f6:	d903      	bls.n	8003a00 <_svfiprintf_r+0x1a8>
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0c5      	beq.n	8003988 <_svfiprintf_r+0x130>
 80039fc:	9105      	str	r1, [sp, #20]
 80039fe:	e7c3      	b.n	8003988 <_svfiprintf_r+0x130>
 8003a00:	4604      	mov	r4, r0
 8003a02:	2301      	movs	r3, #1
 8003a04:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a08:	e7f0      	b.n	80039ec <_svfiprintf_r+0x194>
 8003a0a:	ab03      	add	r3, sp, #12
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	462a      	mov	r2, r5
 8003a10:	4638      	mov	r0, r7
 8003a12:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <_svfiprintf_r+0x1fc>)
 8003a14:	a904      	add	r1, sp, #16
 8003a16:	f3af 8000 	nop.w
 8003a1a:	1c42      	adds	r2, r0, #1
 8003a1c:	4606      	mov	r6, r0
 8003a1e:	d1d6      	bne.n	80039ce <_svfiprintf_r+0x176>
 8003a20:	89ab      	ldrh	r3, [r5, #12]
 8003a22:	065b      	lsls	r3, r3, #25
 8003a24:	f53f af2c 	bmi.w	8003880 <_svfiprintf_r+0x28>
 8003a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a2a:	b01d      	add	sp, #116	; 0x74
 8003a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a30:	ab03      	add	r3, sp, #12
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	462a      	mov	r2, r5
 8003a36:	4638      	mov	r0, r7
 8003a38:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <_svfiprintf_r+0x1fc>)
 8003a3a:	a904      	add	r1, sp, #16
 8003a3c:	f000 f87c 	bl	8003b38 <_printf_i>
 8003a40:	e7eb      	b.n	8003a1a <_svfiprintf_r+0x1c2>
 8003a42:	bf00      	nop
 8003a44:	080040a0 	.word	0x080040a0
 8003a48:	080040a6 	.word	0x080040a6
 8003a4c:	080040aa 	.word	0x080040aa
 8003a50:	00000000 	.word	0x00000000
 8003a54:	080037a1 	.word	0x080037a1

08003a58 <_printf_common>:
 8003a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a5c:	4616      	mov	r6, r2
 8003a5e:	4699      	mov	r9, r3
 8003a60:	688a      	ldr	r2, [r1, #8]
 8003a62:	690b      	ldr	r3, [r1, #16]
 8003a64:	4607      	mov	r7, r0
 8003a66:	4293      	cmp	r3, r2
 8003a68:	bfb8      	it	lt
 8003a6a:	4613      	movlt	r3, r2
 8003a6c:	6033      	str	r3, [r6, #0]
 8003a6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a72:	460c      	mov	r4, r1
 8003a74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a78:	b10a      	cbz	r2, 8003a7e <_printf_common+0x26>
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	6033      	str	r3, [r6, #0]
 8003a7e:	6823      	ldr	r3, [r4, #0]
 8003a80:	0699      	lsls	r1, r3, #26
 8003a82:	bf42      	ittt	mi
 8003a84:	6833      	ldrmi	r3, [r6, #0]
 8003a86:	3302      	addmi	r3, #2
 8003a88:	6033      	strmi	r3, [r6, #0]
 8003a8a:	6825      	ldr	r5, [r4, #0]
 8003a8c:	f015 0506 	ands.w	r5, r5, #6
 8003a90:	d106      	bne.n	8003aa0 <_printf_common+0x48>
 8003a92:	f104 0a19 	add.w	sl, r4, #25
 8003a96:	68e3      	ldr	r3, [r4, #12]
 8003a98:	6832      	ldr	r2, [r6, #0]
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	42ab      	cmp	r3, r5
 8003a9e:	dc28      	bgt.n	8003af2 <_printf_common+0x9a>
 8003aa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003aa4:	1e13      	subs	r3, r2, #0
 8003aa6:	6822      	ldr	r2, [r4, #0]
 8003aa8:	bf18      	it	ne
 8003aaa:	2301      	movne	r3, #1
 8003aac:	0692      	lsls	r2, r2, #26
 8003aae:	d42d      	bmi.n	8003b0c <_printf_common+0xb4>
 8003ab0:	4649      	mov	r1, r9
 8003ab2:	4638      	mov	r0, r7
 8003ab4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ab8:	47c0      	blx	r8
 8003aba:	3001      	adds	r0, #1
 8003abc:	d020      	beq.n	8003b00 <_printf_common+0xa8>
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	68e5      	ldr	r5, [r4, #12]
 8003ac2:	f003 0306 	and.w	r3, r3, #6
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	bf18      	it	ne
 8003aca:	2500      	movne	r5, #0
 8003acc:	6832      	ldr	r2, [r6, #0]
 8003ace:	f04f 0600 	mov.w	r6, #0
 8003ad2:	68a3      	ldr	r3, [r4, #8]
 8003ad4:	bf08      	it	eq
 8003ad6:	1aad      	subeq	r5, r5, r2
 8003ad8:	6922      	ldr	r2, [r4, #16]
 8003ada:	bf08      	it	eq
 8003adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	bfc4      	itt	gt
 8003ae4:	1a9b      	subgt	r3, r3, r2
 8003ae6:	18ed      	addgt	r5, r5, r3
 8003ae8:	341a      	adds	r4, #26
 8003aea:	42b5      	cmp	r5, r6
 8003aec:	d11a      	bne.n	8003b24 <_printf_common+0xcc>
 8003aee:	2000      	movs	r0, #0
 8003af0:	e008      	b.n	8003b04 <_printf_common+0xac>
 8003af2:	2301      	movs	r3, #1
 8003af4:	4652      	mov	r2, sl
 8003af6:	4649      	mov	r1, r9
 8003af8:	4638      	mov	r0, r7
 8003afa:	47c0      	blx	r8
 8003afc:	3001      	adds	r0, #1
 8003afe:	d103      	bne.n	8003b08 <_printf_common+0xb0>
 8003b00:	f04f 30ff 	mov.w	r0, #4294967295
 8003b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b08:	3501      	adds	r5, #1
 8003b0a:	e7c4      	b.n	8003a96 <_printf_common+0x3e>
 8003b0c:	2030      	movs	r0, #48	; 0x30
 8003b0e:	18e1      	adds	r1, r4, r3
 8003b10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b1a:	4422      	add	r2, r4
 8003b1c:	3302      	adds	r3, #2
 8003b1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b22:	e7c5      	b.n	8003ab0 <_printf_common+0x58>
 8003b24:	2301      	movs	r3, #1
 8003b26:	4622      	mov	r2, r4
 8003b28:	4649      	mov	r1, r9
 8003b2a:	4638      	mov	r0, r7
 8003b2c:	47c0      	blx	r8
 8003b2e:	3001      	adds	r0, #1
 8003b30:	d0e6      	beq.n	8003b00 <_printf_common+0xa8>
 8003b32:	3601      	adds	r6, #1
 8003b34:	e7d9      	b.n	8003aea <_printf_common+0x92>
	...

08003b38 <_printf_i>:
 8003b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b3c:	7e0f      	ldrb	r7, [r1, #24]
 8003b3e:	4691      	mov	r9, r2
 8003b40:	2f78      	cmp	r7, #120	; 0x78
 8003b42:	4680      	mov	r8, r0
 8003b44:	460c      	mov	r4, r1
 8003b46:	469a      	mov	sl, r3
 8003b48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b4e:	d807      	bhi.n	8003b60 <_printf_i+0x28>
 8003b50:	2f62      	cmp	r7, #98	; 0x62
 8003b52:	d80a      	bhi.n	8003b6a <_printf_i+0x32>
 8003b54:	2f00      	cmp	r7, #0
 8003b56:	f000 80d9 	beq.w	8003d0c <_printf_i+0x1d4>
 8003b5a:	2f58      	cmp	r7, #88	; 0x58
 8003b5c:	f000 80a4 	beq.w	8003ca8 <_printf_i+0x170>
 8003b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b68:	e03a      	b.n	8003be0 <_printf_i+0xa8>
 8003b6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b6e:	2b15      	cmp	r3, #21
 8003b70:	d8f6      	bhi.n	8003b60 <_printf_i+0x28>
 8003b72:	a101      	add	r1, pc, #4	; (adr r1, 8003b78 <_printf_i+0x40>)
 8003b74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b78:	08003bd1 	.word	0x08003bd1
 8003b7c:	08003be5 	.word	0x08003be5
 8003b80:	08003b61 	.word	0x08003b61
 8003b84:	08003b61 	.word	0x08003b61
 8003b88:	08003b61 	.word	0x08003b61
 8003b8c:	08003b61 	.word	0x08003b61
 8003b90:	08003be5 	.word	0x08003be5
 8003b94:	08003b61 	.word	0x08003b61
 8003b98:	08003b61 	.word	0x08003b61
 8003b9c:	08003b61 	.word	0x08003b61
 8003ba0:	08003b61 	.word	0x08003b61
 8003ba4:	08003cf3 	.word	0x08003cf3
 8003ba8:	08003c15 	.word	0x08003c15
 8003bac:	08003cd5 	.word	0x08003cd5
 8003bb0:	08003b61 	.word	0x08003b61
 8003bb4:	08003b61 	.word	0x08003b61
 8003bb8:	08003d15 	.word	0x08003d15
 8003bbc:	08003b61 	.word	0x08003b61
 8003bc0:	08003c15 	.word	0x08003c15
 8003bc4:	08003b61 	.word	0x08003b61
 8003bc8:	08003b61 	.word	0x08003b61
 8003bcc:	08003cdd 	.word	0x08003cdd
 8003bd0:	682b      	ldr	r3, [r5, #0]
 8003bd2:	1d1a      	adds	r2, r3, #4
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	602a      	str	r2, [r5, #0]
 8003bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0a4      	b.n	8003d2e <_printf_i+0x1f6>
 8003be4:	6820      	ldr	r0, [r4, #0]
 8003be6:	6829      	ldr	r1, [r5, #0]
 8003be8:	0606      	lsls	r6, r0, #24
 8003bea:	f101 0304 	add.w	r3, r1, #4
 8003bee:	d50a      	bpl.n	8003c06 <_printf_i+0xce>
 8003bf0:	680e      	ldr	r6, [r1, #0]
 8003bf2:	602b      	str	r3, [r5, #0]
 8003bf4:	2e00      	cmp	r6, #0
 8003bf6:	da03      	bge.n	8003c00 <_printf_i+0xc8>
 8003bf8:	232d      	movs	r3, #45	; 0x2d
 8003bfa:	4276      	negs	r6, r6
 8003bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c00:	230a      	movs	r3, #10
 8003c02:	485e      	ldr	r0, [pc, #376]	; (8003d7c <_printf_i+0x244>)
 8003c04:	e019      	b.n	8003c3a <_printf_i+0x102>
 8003c06:	680e      	ldr	r6, [r1, #0]
 8003c08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c0c:	602b      	str	r3, [r5, #0]
 8003c0e:	bf18      	it	ne
 8003c10:	b236      	sxthne	r6, r6
 8003c12:	e7ef      	b.n	8003bf4 <_printf_i+0xbc>
 8003c14:	682b      	ldr	r3, [r5, #0]
 8003c16:	6820      	ldr	r0, [r4, #0]
 8003c18:	1d19      	adds	r1, r3, #4
 8003c1a:	6029      	str	r1, [r5, #0]
 8003c1c:	0601      	lsls	r1, r0, #24
 8003c1e:	d501      	bpl.n	8003c24 <_printf_i+0xec>
 8003c20:	681e      	ldr	r6, [r3, #0]
 8003c22:	e002      	b.n	8003c2a <_printf_i+0xf2>
 8003c24:	0646      	lsls	r6, r0, #25
 8003c26:	d5fb      	bpl.n	8003c20 <_printf_i+0xe8>
 8003c28:	881e      	ldrh	r6, [r3, #0]
 8003c2a:	2f6f      	cmp	r7, #111	; 0x6f
 8003c2c:	bf0c      	ite	eq
 8003c2e:	2308      	moveq	r3, #8
 8003c30:	230a      	movne	r3, #10
 8003c32:	4852      	ldr	r0, [pc, #328]	; (8003d7c <_printf_i+0x244>)
 8003c34:	2100      	movs	r1, #0
 8003c36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c3a:	6865      	ldr	r5, [r4, #4]
 8003c3c:	2d00      	cmp	r5, #0
 8003c3e:	bfa8      	it	ge
 8003c40:	6821      	ldrge	r1, [r4, #0]
 8003c42:	60a5      	str	r5, [r4, #8]
 8003c44:	bfa4      	itt	ge
 8003c46:	f021 0104 	bicge.w	r1, r1, #4
 8003c4a:	6021      	strge	r1, [r4, #0]
 8003c4c:	b90e      	cbnz	r6, 8003c52 <_printf_i+0x11a>
 8003c4e:	2d00      	cmp	r5, #0
 8003c50:	d04d      	beq.n	8003cee <_printf_i+0x1b6>
 8003c52:	4615      	mov	r5, r2
 8003c54:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c58:	fb03 6711 	mls	r7, r3, r1, r6
 8003c5c:	5dc7      	ldrb	r7, [r0, r7]
 8003c5e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c62:	4637      	mov	r7, r6
 8003c64:	42bb      	cmp	r3, r7
 8003c66:	460e      	mov	r6, r1
 8003c68:	d9f4      	bls.n	8003c54 <_printf_i+0x11c>
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d10b      	bne.n	8003c86 <_printf_i+0x14e>
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	07de      	lsls	r6, r3, #31
 8003c72:	d508      	bpl.n	8003c86 <_printf_i+0x14e>
 8003c74:	6923      	ldr	r3, [r4, #16]
 8003c76:	6861      	ldr	r1, [r4, #4]
 8003c78:	4299      	cmp	r1, r3
 8003c7a:	bfde      	ittt	le
 8003c7c:	2330      	movle	r3, #48	; 0x30
 8003c7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c82:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c86:	1b52      	subs	r2, r2, r5
 8003c88:	6122      	str	r2, [r4, #16]
 8003c8a:	464b      	mov	r3, r9
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	4640      	mov	r0, r8
 8003c90:	f8cd a000 	str.w	sl, [sp]
 8003c94:	aa03      	add	r2, sp, #12
 8003c96:	f7ff fedf 	bl	8003a58 <_printf_common>
 8003c9a:	3001      	adds	r0, #1
 8003c9c:	d14c      	bne.n	8003d38 <_printf_i+0x200>
 8003c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca2:	b004      	add	sp, #16
 8003ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ca8:	4834      	ldr	r0, [pc, #208]	; (8003d7c <_printf_i+0x244>)
 8003caa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003cae:	6829      	ldr	r1, [r5, #0]
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	f851 6b04 	ldr.w	r6, [r1], #4
 8003cb6:	6029      	str	r1, [r5, #0]
 8003cb8:	061d      	lsls	r5, r3, #24
 8003cba:	d514      	bpl.n	8003ce6 <_printf_i+0x1ae>
 8003cbc:	07df      	lsls	r7, r3, #31
 8003cbe:	bf44      	itt	mi
 8003cc0:	f043 0320 	orrmi.w	r3, r3, #32
 8003cc4:	6023      	strmi	r3, [r4, #0]
 8003cc6:	b91e      	cbnz	r6, 8003cd0 <_printf_i+0x198>
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	f023 0320 	bic.w	r3, r3, #32
 8003cce:	6023      	str	r3, [r4, #0]
 8003cd0:	2310      	movs	r3, #16
 8003cd2:	e7af      	b.n	8003c34 <_printf_i+0xfc>
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	f043 0320 	orr.w	r3, r3, #32
 8003cda:	6023      	str	r3, [r4, #0]
 8003cdc:	2378      	movs	r3, #120	; 0x78
 8003cde:	4828      	ldr	r0, [pc, #160]	; (8003d80 <_printf_i+0x248>)
 8003ce0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ce4:	e7e3      	b.n	8003cae <_printf_i+0x176>
 8003ce6:	0659      	lsls	r1, r3, #25
 8003ce8:	bf48      	it	mi
 8003cea:	b2b6      	uxthmi	r6, r6
 8003cec:	e7e6      	b.n	8003cbc <_printf_i+0x184>
 8003cee:	4615      	mov	r5, r2
 8003cf0:	e7bb      	b.n	8003c6a <_printf_i+0x132>
 8003cf2:	682b      	ldr	r3, [r5, #0]
 8003cf4:	6826      	ldr	r6, [r4, #0]
 8003cf6:	1d18      	adds	r0, r3, #4
 8003cf8:	6961      	ldr	r1, [r4, #20]
 8003cfa:	6028      	str	r0, [r5, #0]
 8003cfc:	0635      	lsls	r5, r6, #24
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	d501      	bpl.n	8003d06 <_printf_i+0x1ce>
 8003d02:	6019      	str	r1, [r3, #0]
 8003d04:	e002      	b.n	8003d0c <_printf_i+0x1d4>
 8003d06:	0670      	lsls	r0, r6, #25
 8003d08:	d5fb      	bpl.n	8003d02 <_printf_i+0x1ca>
 8003d0a:	8019      	strh	r1, [r3, #0]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	4615      	mov	r5, r2
 8003d10:	6123      	str	r3, [r4, #16]
 8003d12:	e7ba      	b.n	8003c8a <_printf_i+0x152>
 8003d14:	682b      	ldr	r3, [r5, #0]
 8003d16:	2100      	movs	r1, #0
 8003d18:	1d1a      	adds	r2, r3, #4
 8003d1a:	602a      	str	r2, [r5, #0]
 8003d1c:	681d      	ldr	r5, [r3, #0]
 8003d1e:	6862      	ldr	r2, [r4, #4]
 8003d20:	4628      	mov	r0, r5
 8003d22:	f000 f82f 	bl	8003d84 <memchr>
 8003d26:	b108      	cbz	r0, 8003d2c <_printf_i+0x1f4>
 8003d28:	1b40      	subs	r0, r0, r5
 8003d2a:	6060      	str	r0, [r4, #4]
 8003d2c:	6863      	ldr	r3, [r4, #4]
 8003d2e:	6123      	str	r3, [r4, #16]
 8003d30:	2300      	movs	r3, #0
 8003d32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d36:	e7a8      	b.n	8003c8a <_printf_i+0x152>
 8003d38:	462a      	mov	r2, r5
 8003d3a:	4649      	mov	r1, r9
 8003d3c:	4640      	mov	r0, r8
 8003d3e:	6923      	ldr	r3, [r4, #16]
 8003d40:	47d0      	blx	sl
 8003d42:	3001      	adds	r0, #1
 8003d44:	d0ab      	beq.n	8003c9e <_printf_i+0x166>
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	079b      	lsls	r3, r3, #30
 8003d4a:	d413      	bmi.n	8003d74 <_printf_i+0x23c>
 8003d4c:	68e0      	ldr	r0, [r4, #12]
 8003d4e:	9b03      	ldr	r3, [sp, #12]
 8003d50:	4298      	cmp	r0, r3
 8003d52:	bfb8      	it	lt
 8003d54:	4618      	movlt	r0, r3
 8003d56:	e7a4      	b.n	8003ca2 <_printf_i+0x16a>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	4632      	mov	r2, r6
 8003d5c:	4649      	mov	r1, r9
 8003d5e:	4640      	mov	r0, r8
 8003d60:	47d0      	blx	sl
 8003d62:	3001      	adds	r0, #1
 8003d64:	d09b      	beq.n	8003c9e <_printf_i+0x166>
 8003d66:	3501      	adds	r5, #1
 8003d68:	68e3      	ldr	r3, [r4, #12]
 8003d6a:	9903      	ldr	r1, [sp, #12]
 8003d6c:	1a5b      	subs	r3, r3, r1
 8003d6e:	42ab      	cmp	r3, r5
 8003d70:	dcf2      	bgt.n	8003d58 <_printf_i+0x220>
 8003d72:	e7eb      	b.n	8003d4c <_printf_i+0x214>
 8003d74:	2500      	movs	r5, #0
 8003d76:	f104 0619 	add.w	r6, r4, #25
 8003d7a:	e7f5      	b.n	8003d68 <_printf_i+0x230>
 8003d7c:	080040b1 	.word	0x080040b1
 8003d80:	080040c2 	.word	0x080040c2

08003d84 <memchr>:
 8003d84:	4603      	mov	r3, r0
 8003d86:	b510      	push	{r4, lr}
 8003d88:	b2c9      	uxtb	r1, r1
 8003d8a:	4402      	add	r2, r0
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	d101      	bne.n	8003d96 <memchr+0x12>
 8003d92:	2000      	movs	r0, #0
 8003d94:	e003      	b.n	8003d9e <memchr+0x1a>
 8003d96:	7804      	ldrb	r4, [r0, #0]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	428c      	cmp	r4, r1
 8003d9c:	d1f6      	bne.n	8003d8c <memchr+0x8>
 8003d9e:	bd10      	pop	{r4, pc}

08003da0 <memcpy>:
 8003da0:	440a      	add	r2, r1
 8003da2:	4291      	cmp	r1, r2
 8003da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003da8:	d100      	bne.n	8003dac <memcpy+0xc>
 8003daa:	4770      	bx	lr
 8003dac:	b510      	push	{r4, lr}
 8003dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003db2:	4291      	cmp	r1, r2
 8003db4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003db8:	d1f9      	bne.n	8003dae <memcpy+0xe>
 8003dba:	bd10      	pop	{r4, pc}

08003dbc <memmove>:
 8003dbc:	4288      	cmp	r0, r1
 8003dbe:	b510      	push	{r4, lr}
 8003dc0:	eb01 0402 	add.w	r4, r1, r2
 8003dc4:	d902      	bls.n	8003dcc <memmove+0x10>
 8003dc6:	4284      	cmp	r4, r0
 8003dc8:	4623      	mov	r3, r4
 8003dca:	d807      	bhi.n	8003ddc <memmove+0x20>
 8003dcc:	1e43      	subs	r3, r0, #1
 8003dce:	42a1      	cmp	r1, r4
 8003dd0:	d008      	beq.n	8003de4 <memmove+0x28>
 8003dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003dda:	e7f8      	b.n	8003dce <memmove+0x12>
 8003ddc:	4601      	mov	r1, r0
 8003dde:	4402      	add	r2, r0
 8003de0:	428a      	cmp	r2, r1
 8003de2:	d100      	bne.n	8003de6 <memmove+0x2a>
 8003de4:	bd10      	pop	{r4, pc}
 8003de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003dee:	e7f7      	b.n	8003de0 <memmove+0x24>

08003df0 <_free_r>:
 8003df0:	b538      	push	{r3, r4, r5, lr}
 8003df2:	4605      	mov	r5, r0
 8003df4:	2900      	cmp	r1, #0
 8003df6:	d040      	beq.n	8003e7a <_free_r+0x8a>
 8003df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dfc:	1f0c      	subs	r4, r1, #4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	bfb8      	it	lt
 8003e02:	18e4      	addlt	r4, r4, r3
 8003e04:	f000 f910 	bl	8004028 <__malloc_lock>
 8003e08:	4a1c      	ldr	r2, [pc, #112]	; (8003e7c <_free_r+0x8c>)
 8003e0a:	6813      	ldr	r3, [r2, #0]
 8003e0c:	b933      	cbnz	r3, 8003e1c <_free_r+0x2c>
 8003e0e:	6063      	str	r3, [r4, #4]
 8003e10:	6014      	str	r4, [r2, #0]
 8003e12:	4628      	mov	r0, r5
 8003e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e18:	f000 b90c 	b.w	8004034 <__malloc_unlock>
 8003e1c:	42a3      	cmp	r3, r4
 8003e1e:	d908      	bls.n	8003e32 <_free_r+0x42>
 8003e20:	6820      	ldr	r0, [r4, #0]
 8003e22:	1821      	adds	r1, r4, r0
 8003e24:	428b      	cmp	r3, r1
 8003e26:	bf01      	itttt	eq
 8003e28:	6819      	ldreq	r1, [r3, #0]
 8003e2a:	685b      	ldreq	r3, [r3, #4]
 8003e2c:	1809      	addeq	r1, r1, r0
 8003e2e:	6021      	streq	r1, [r4, #0]
 8003e30:	e7ed      	b.n	8003e0e <_free_r+0x1e>
 8003e32:	461a      	mov	r2, r3
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	b10b      	cbz	r3, 8003e3c <_free_r+0x4c>
 8003e38:	42a3      	cmp	r3, r4
 8003e3a:	d9fa      	bls.n	8003e32 <_free_r+0x42>
 8003e3c:	6811      	ldr	r1, [r2, #0]
 8003e3e:	1850      	adds	r0, r2, r1
 8003e40:	42a0      	cmp	r0, r4
 8003e42:	d10b      	bne.n	8003e5c <_free_r+0x6c>
 8003e44:	6820      	ldr	r0, [r4, #0]
 8003e46:	4401      	add	r1, r0
 8003e48:	1850      	adds	r0, r2, r1
 8003e4a:	4283      	cmp	r3, r0
 8003e4c:	6011      	str	r1, [r2, #0]
 8003e4e:	d1e0      	bne.n	8003e12 <_free_r+0x22>
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	4401      	add	r1, r0
 8003e56:	6011      	str	r1, [r2, #0]
 8003e58:	6053      	str	r3, [r2, #4]
 8003e5a:	e7da      	b.n	8003e12 <_free_r+0x22>
 8003e5c:	d902      	bls.n	8003e64 <_free_r+0x74>
 8003e5e:	230c      	movs	r3, #12
 8003e60:	602b      	str	r3, [r5, #0]
 8003e62:	e7d6      	b.n	8003e12 <_free_r+0x22>
 8003e64:	6820      	ldr	r0, [r4, #0]
 8003e66:	1821      	adds	r1, r4, r0
 8003e68:	428b      	cmp	r3, r1
 8003e6a:	bf01      	itttt	eq
 8003e6c:	6819      	ldreq	r1, [r3, #0]
 8003e6e:	685b      	ldreq	r3, [r3, #4]
 8003e70:	1809      	addeq	r1, r1, r0
 8003e72:	6021      	streq	r1, [r4, #0]
 8003e74:	6063      	str	r3, [r4, #4]
 8003e76:	6054      	str	r4, [r2, #4]
 8003e78:	e7cb      	b.n	8003e12 <_free_r+0x22>
 8003e7a:	bd38      	pop	{r3, r4, r5, pc}
 8003e7c:	20000164 	.word	0x20000164

08003e80 <sbrk_aligned>:
 8003e80:	b570      	push	{r4, r5, r6, lr}
 8003e82:	4e0e      	ldr	r6, [pc, #56]	; (8003ebc <sbrk_aligned+0x3c>)
 8003e84:	460c      	mov	r4, r1
 8003e86:	6831      	ldr	r1, [r6, #0]
 8003e88:	4605      	mov	r5, r0
 8003e8a:	b911      	cbnz	r1, 8003e92 <sbrk_aligned+0x12>
 8003e8c:	f000 f8bc 	bl	8004008 <_sbrk_r>
 8003e90:	6030      	str	r0, [r6, #0]
 8003e92:	4621      	mov	r1, r4
 8003e94:	4628      	mov	r0, r5
 8003e96:	f000 f8b7 	bl	8004008 <_sbrk_r>
 8003e9a:	1c43      	adds	r3, r0, #1
 8003e9c:	d00a      	beq.n	8003eb4 <sbrk_aligned+0x34>
 8003e9e:	1cc4      	adds	r4, r0, #3
 8003ea0:	f024 0403 	bic.w	r4, r4, #3
 8003ea4:	42a0      	cmp	r0, r4
 8003ea6:	d007      	beq.n	8003eb8 <sbrk_aligned+0x38>
 8003ea8:	1a21      	subs	r1, r4, r0
 8003eaa:	4628      	mov	r0, r5
 8003eac:	f000 f8ac 	bl	8004008 <_sbrk_r>
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	d101      	bne.n	8003eb8 <sbrk_aligned+0x38>
 8003eb4:	f04f 34ff 	mov.w	r4, #4294967295
 8003eb8:	4620      	mov	r0, r4
 8003eba:	bd70      	pop	{r4, r5, r6, pc}
 8003ebc:	20000168 	.word	0x20000168

08003ec0 <_malloc_r>:
 8003ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ec4:	1ccd      	adds	r5, r1, #3
 8003ec6:	f025 0503 	bic.w	r5, r5, #3
 8003eca:	3508      	adds	r5, #8
 8003ecc:	2d0c      	cmp	r5, #12
 8003ece:	bf38      	it	cc
 8003ed0:	250c      	movcc	r5, #12
 8003ed2:	2d00      	cmp	r5, #0
 8003ed4:	4607      	mov	r7, r0
 8003ed6:	db01      	blt.n	8003edc <_malloc_r+0x1c>
 8003ed8:	42a9      	cmp	r1, r5
 8003eda:	d905      	bls.n	8003ee8 <_malloc_r+0x28>
 8003edc:	230c      	movs	r3, #12
 8003ede:	2600      	movs	r6, #0
 8003ee0:	603b      	str	r3, [r7, #0]
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ee8:	4e2e      	ldr	r6, [pc, #184]	; (8003fa4 <_malloc_r+0xe4>)
 8003eea:	f000 f89d 	bl	8004028 <__malloc_lock>
 8003eee:	6833      	ldr	r3, [r6, #0]
 8003ef0:	461c      	mov	r4, r3
 8003ef2:	bb34      	cbnz	r4, 8003f42 <_malloc_r+0x82>
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	4638      	mov	r0, r7
 8003ef8:	f7ff ffc2 	bl	8003e80 <sbrk_aligned>
 8003efc:	1c43      	adds	r3, r0, #1
 8003efe:	4604      	mov	r4, r0
 8003f00:	d14d      	bne.n	8003f9e <_malloc_r+0xde>
 8003f02:	6834      	ldr	r4, [r6, #0]
 8003f04:	4626      	mov	r6, r4
 8003f06:	2e00      	cmp	r6, #0
 8003f08:	d140      	bne.n	8003f8c <_malloc_r+0xcc>
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	4631      	mov	r1, r6
 8003f0e:	4638      	mov	r0, r7
 8003f10:	eb04 0803 	add.w	r8, r4, r3
 8003f14:	f000 f878 	bl	8004008 <_sbrk_r>
 8003f18:	4580      	cmp	r8, r0
 8003f1a:	d13a      	bne.n	8003f92 <_malloc_r+0xd2>
 8003f1c:	6821      	ldr	r1, [r4, #0]
 8003f1e:	3503      	adds	r5, #3
 8003f20:	1a6d      	subs	r5, r5, r1
 8003f22:	f025 0503 	bic.w	r5, r5, #3
 8003f26:	3508      	adds	r5, #8
 8003f28:	2d0c      	cmp	r5, #12
 8003f2a:	bf38      	it	cc
 8003f2c:	250c      	movcc	r5, #12
 8003f2e:	4638      	mov	r0, r7
 8003f30:	4629      	mov	r1, r5
 8003f32:	f7ff ffa5 	bl	8003e80 <sbrk_aligned>
 8003f36:	3001      	adds	r0, #1
 8003f38:	d02b      	beq.n	8003f92 <_malloc_r+0xd2>
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	442b      	add	r3, r5
 8003f3e:	6023      	str	r3, [r4, #0]
 8003f40:	e00e      	b.n	8003f60 <_malloc_r+0xa0>
 8003f42:	6822      	ldr	r2, [r4, #0]
 8003f44:	1b52      	subs	r2, r2, r5
 8003f46:	d41e      	bmi.n	8003f86 <_malloc_r+0xc6>
 8003f48:	2a0b      	cmp	r2, #11
 8003f4a:	d916      	bls.n	8003f7a <_malloc_r+0xba>
 8003f4c:	1961      	adds	r1, r4, r5
 8003f4e:	42a3      	cmp	r3, r4
 8003f50:	6025      	str	r5, [r4, #0]
 8003f52:	bf18      	it	ne
 8003f54:	6059      	strne	r1, [r3, #4]
 8003f56:	6863      	ldr	r3, [r4, #4]
 8003f58:	bf08      	it	eq
 8003f5a:	6031      	streq	r1, [r6, #0]
 8003f5c:	5162      	str	r2, [r4, r5]
 8003f5e:	604b      	str	r3, [r1, #4]
 8003f60:	4638      	mov	r0, r7
 8003f62:	f104 060b 	add.w	r6, r4, #11
 8003f66:	f000 f865 	bl	8004034 <__malloc_unlock>
 8003f6a:	f026 0607 	bic.w	r6, r6, #7
 8003f6e:	1d23      	adds	r3, r4, #4
 8003f70:	1af2      	subs	r2, r6, r3
 8003f72:	d0b6      	beq.n	8003ee2 <_malloc_r+0x22>
 8003f74:	1b9b      	subs	r3, r3, r6
 8003f76:	50a3      	str	r3, [r4, r2]
 8003f78:	e7b3      	b.n	8003ee2 <_malloc_r+0x22>
 8003f7a:	6862      	ldr	r2, [r4, #4]
 8003f7c:	42a3      	cmp	r3, r4
 8003f7e:	bf0c      	ite	eq
 8003f80:	6032      	streq	r2, [r6, #0]
 8003f82:	605a      	strne	r2, [r3, #4]
 8003f84:	e7ec      	b.n	8003f60 <_malloc_r+0xa0>
 8003f86:	4623      	mov	r3, r4
 8003f88:	6864      	ldr	r4, [r4, #4]
 8003f8a:	e7b2      	b.n	8003ef2 <_malloc_r+0x32>
 8003f8c:	4634      	mov	r4, r6
 8003f8e:	6876      	ldr	r6, [r6, #4]
 8003f90:	e7b9      	b.n	8003f06 <_malloc_r+0x46>
 8003f92:	230c      	movs	r3, #12
 8003f94:	4638      	mov	r0, r7
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	f000 f84c 	bl	8004034 <__malloc_unlock>
 8003f9c:	e7a1      	b.n	8003ee2 <_malloc_r+0x22>
 8003f9e:	6025      	str	r5, [r4, #0]
 8003fa0:	e7de      	b.n	8003f60 <_malloc_r+0xa0>
 8003fa2:	bf00      	nop
 8003fa4:	20000164 	.word	0x20000164

08003fa8 <_realloc_r>:
 8003fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fac:	4680      	mov	r8, r0
 8003fae:	4614      	mov	r4, r2
 8003fb0:	460e      	mov	r6, r1
 8003fb2:	b921      	cbnz	r1, 8003fbe <_realloc_r+0x16>
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fba:	f7ff bf81 	b.w	8003ec0 <_malloc_r>
 8003fbe:	b92a      	cbnz	r2, 8003fcc <_realloc_r+0x24>
 8003fc0:	f7ff ff16 	bl	8003df0 <_free_r>
 8003fc4:	4625      	mov	r5, r4
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fcc:	f000 f838 	bl	8004040 <_malloc_usable_size_r>
 8003fd0:	4284      	cmp	r4, r0
 8003fd2:	4607      	mov	r7, r0
 8003fd4:	d802      	bhi.n	8003fdc <_realloc_r+0x34>
 8003fd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003fda:	d812      	bhi.n	8004002 <_realloc_r+0x5a>
 8003fdc:	4621      	mov	r1, r4
 8003fde:	4640      	mov	r0, r8
 8003fe0:	f7ff ff6e 	bl	8003ec0 <_malloc_r>
 8003fe4:	4605      	mov	r5, r0
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	d0ed      	beq.n	8003fc6 <_realloc_r+0x1e>
 8003fea:	42bc      	cmp	r4, r7
 8003fec:	4622      	mov	r2, r4
 8003fee:	4631      	mov	r1, r6
 8003ff0:	bf28      	it	cs
 8003ff2:	463a      	movcs	r2, r7
 8003ff4:	f7ff fed4 	bl	8003da0 <memcpy>
 8003ff8:	4631      	mov	r1, r6
 8003ffa:	4640      	mov	r0, r8
 8003ffc:	f7ff fef8 	bl	8003df0 <_free_r>
 8004000:	e7e1      	b.n	8003fc6 <_realloc_r+0x1e>
 8004002:	4635      	mov	r5, r6
 8004004:	e7df      	b.n	8003fc6 <_realloc_r+0x1e>
	...

08004008 <_sbrk_r>:
 8004008:	b538      	push	{r3, r4, r5, lr}
 800400a:	2300      	movs	r3, #0
 800400c:	4d05      	ldr	r5, [pc, #20]	; (8004024 <_sbrk_r+0x1c>)
 800400e:	4604      	mov	r4, r0
 8004010:	4608      	mov	r0, r1
 8004012:	602b      	str	r3, [r5, #0]
 8004014:	f7fd f94a 	bl	80012ac <_sbrk>
 8004018:	1c43      	adds	r3, r0, #1
 800401a:	d102      	bne.n	8004022 <_sbrk_r+0x1a>
 800401c:	682b      	ldr	r3, [r5, #0]
 800401e:	b103      	cbz	r3, 8004022 <_sbrk_r+0x1a>
 8004020:	6023      	str	r3, [r4, #0]
 8004022:	bd38      	pop	{r3, r4, r5, pc}
 8004024:	2000016c 	.word	0x2000016c

08004028 <__malloc_lock>:
 8004028:	4801      	ldr	r0, [pc, #4]	; (8004030 <__malloc_lock+0x8>)
 800402a:	f000 b811 	b.w	8004050 <__retarget_lock_acquire_recursive>
 800402e:	bf00      	nop
 8004030:	20000170 	.word	0x20000170

08004034 <__malloc_unlock>:
 8004034:	4801      	ldr	r0, [pc, #4]	; (800403c <__malloc_unlock+0x8>)
 8004036:	f000 b80c 	b.w	8004052 <__retarget_lock_release_recursive>
 800403a:	bf00      	nop
 800403c:	20000170 	.word	0x20000170

08004040 <_malloc_usable_size_r>:
 8004040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004044:	1f18      	subs	r0, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	bfbc      	itt	lt
 800404a:	580b      	ldrlt	r3, [r1, r0]
 800404c:	18c0      	addlt	r0, r0, r3
 800404e:	4770      	bx	lr

08004050 <__retarget_lock_acquire_recursive>:
 8004050:	4770      	bx	lr

08004052 <__retarget_lock_release_recursive>:
 8004052:	4770      	bx	lr

08004054 <_init>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	bf00      	nop
 8004058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405a:	bc08      	pop	{r3}
 800405c:	469e      	mov	lr, r3
 800405e:	4770      	bx	lr

08004060 <_fini>:
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004062:	bf00      	nop
 8004064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004066:	bc08      	pop	{r3}
 8004068:	469e      	mov	lr, r3
 800406a:	4770      	bx	lr
