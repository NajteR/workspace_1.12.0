
nowyNadajnik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003354  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003490  08003490  00013490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034bc  080034bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080034bc  080034bc  000134bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034c4  080034c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034c4  080034c4  000134c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034c8  080034c8  000134c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  2000000c  080034d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080034d8  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2cb  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd5  00000000  00000000  0002a300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  0002bed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  0002c820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015fc6  00000000  00000000  0002d0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0a0  00000000  00000000  00043076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086d9c  00000000  00000000  0004e116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4eb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024c8  00000000  00000000  000d4f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08003478 	.word	0x08003478

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08003478 	.word	0x08003478

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08a      	sub	sp, #40	; 0x28
 8000488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	f107 0314 	add.w	r3, r7, #20
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
 8000498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049a:	4b3e      	ldr	r3, [pc, #248]	; (8000594 <MX_GPIO_Init+0x110>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	4a3d      	ldr	r2, [pc, #244]	; (8000594 <MX_GPIO_Init+0x110>)
 80004a0:	f043 0304 	orr.w	r3, r3, #4
 80004a4:	61d3      	str	r3, [r2, #28]
 80004a6:	4b3b      	ldr	r3, [pc, #236]	; (8000594 <MX_GPIO_Init+0x110>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f003 0304 	and.w	r3, r3, #4
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004b2:	4b38      	ldr	r3, [pc, #224]	; (8000594 <MX_GPIO_Init+0x110>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a37      	ldr	r2, [pc, #220]	; (8000594 <MX_GPIO_Init+0x110>)
 80004b8:	f043 0320 	orr.w	r3, r3, #32
 80004bc:	61d3      	str	r3, [r2, #28]
 80004be:	4b35      	ldr	r3, [pc, #212]	; (8000594 <MX_GPIO_Init+0x110>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f003 0320 	and.w	r3, r3, #32
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b32      	ldr	r3, [pc, #200]	; (8000594 <MX_GPIO_Init+0x110>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a31      	ldr	r2, [pc, #196]	; (8000594 <MX_GPIO_Init+0x110>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b2f      	ldr	r3, [pc, #188]	; (8000594 <MX_GPIO_Init+0x110>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e2:	4b2c      	ldr	r3, [pc, #176]	; (8000594 <MX_GPIO_Init+0x110>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4a2b      	ldr	r2, [pc, #172]	; (8000594 <MX_GPIO_Init+0x110>)
 80004e8:	f043 0302 	orr.w	r3, r3, #2
 80004ec:	61d3      	str	r3, [r2, #28]
 80004ee:	4b29      	ldr	r3, [pc, #164]	; (8000594 <MX_GPIO_Init+0x110>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	f003 0302 	and.w	r3, r3, #2
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR_MR2_Pin|DIR_MR1_Pin, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000500:	4825      	ldr	r0, [pc, #148]	; (8000598 <MX_GPIO_Init+0x114>)
 8000502:	f001 f96d 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|CSN_Pin|DIR_ML1_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2146      	movs	r1, #70	; 0x46
 800050a:	4824      	ldr	r0, [pc, #144]	; (800059c <MX_GPIO_Init+0x118>)
 800050c:	f001 f968 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_ML2_GPIO_Port, DIR_ML2_Pin, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2180      	movs	r1, #128	; 0x80
 8000514:	4822      	ldr	r0, [pc, #136]	; (80005a0 <MX_GPIO_Init+0x11c>)
 8000516:	f001 f963 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800051a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800051e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000520:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	2300      	movs	r3, #0
 8000528:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	4619      	mov	r1, r3
 8000530:	481b      	ldr	r0, [pc, #108]	; (80005a0 <MX_GPIO_Init+0x11c>)
 8000532:	f000 ffc5 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DIR_MR2_Pin|DIR_MR1_Pin;
 8000536:	f44f 7348 	mov.w	r3, #800	; 0x320
 800053a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053c:	2301      	movs	r3, #1
 800053e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	2300      	movs	r3, #0
 8000546:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	4619      	mov	r1, r3
 800054e:	4812      	ldr	r0, [pc, #72]	; (8000598 <MX_GPIO_Init+0x114>)
 8000550:	f000 ffb6 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin|DIR_ML1_Pin;
 8000554:	2346      	movs	r3, #70	; 0x46
 8000556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000558:	2301      	movs	r3, #1
 800055a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	2300      	movs	r3, #0
 8000562:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	4619      	mov	r1, r3
 800056a:	480c      	ldr	r0, [pc, #48]	; (800059c <MX_GPIO_Init+0x118>)
 800056c:	f000 ffa8 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_ML2_Pin;
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000574:	2301      	movs	r3, #1
 8000576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	2300      	movs	r3, #0
 800057a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057c:	2300      	movs	r3, #0
 800057e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_ML2_GPIO_Port, &GPIO_InitStruct);
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	4619      	mov	r1, r3
 8000586:	4806      	ldr	r0, [pc, #24]	; (80005a0 <MX_GPIO_Init+0x11c>)
 8000588:	f000 ff9a 	bl	80014c0 <HAL_GPIO_Init>

}
 800058c:	bf00      	nop
 800058e:	3728      	adds	r7, #40	; 0x28
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40023800 	.word	0x40023800
 8000598:	40020000 	.word	0x40020000
 800059c:	40020400 	.word	0x40020400
 80005a0:	40020800 	.word	0x40020800

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fdfb 	bl	80011a2 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f89a 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f7ff ff68 	bl	8000484 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b4:	f000 fd62 	bl	800107c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80005b8:	f000 fc88 	bl	8000ecc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  //nRF initialize and settings

  nRF24_Init(&hspi2);
 80005bc:	483f      	ldr	r0, [pc, #252]	; (80006bc <main+0x118>)
 80005be:	f000 fc3f 	bl	8000e40 <nRF24_Init>
  nRF24_SetRXAddress(0,"Nad");
 80005c2:	493f      	ldr	r1, [pc, #252]	; (80006c0 <main+0x11c>)
 80005c4:	2000      	movs	r0, #0
 80005c6:	f000 fb7a 	bl	8000cbe <nRF24_SetRXAddress>
  nRF24_SetTXAddress("Odb");
 80005ca:	483e      	ldr	r0, [pc, #248]	; (80006c4 <main+0x120>)
 80005cc:	f000 fbb0 	bl	8000d30 <nRF24_SetTXAddress>
  nRF24_TX_Mode();
 80005d0:	f000 f9ca 	bl	8000968 <nRF24_TX_Mode>

  //start paramaters
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2120      	movs	r1, #32
 80005d8:	483b      	ldr	r0, [pc, #236]	; (80006c8 <main+0x124>)
 80005da:	f001 f901 	bl	80017e0 <HAL_GPIO_WritePin>
  time = HAL_GetTick();
 80005de:	f000 fe45 	bl	800126c <HAL_GetTick>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a39      	ldr	r2, [pc, #228]	; (80006cc <main+0x128>)
 80005e6:	6013      	str	r3, [r2, #0]
  timechk = HAL_GetTick();
 80005e8:	f000 fe40 	bl	800126c <HAL_GetTick>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <main+0x12c>)
 80005f0:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //receive first character
	 if(HAL_UART_Receive(&huart2, datachck, 1, 1000) == 3)
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	2201      	movs	r2, #1
 80005f8:	4936      	ldr	r1, [pc, #216]	; (80006d4 <main+0x130>)
 80005fa:	4837      	ldr	r0, [pc, #220]	; (80006d8 <main+0x134>)
 80005fc:	f002 fd2c 	bl	8003058 <HAL_UART_Receive>
 8000600:	4603      	mov	r3, r0
 8000602:	2b03      	cmp	r3, #3
 8000604:	d101      	bne.n	800060a <main+0x66>
	 {
		 HAL_NVIC_SystemReset();
 8000606:	f000 ff4a 	bl	800149e <HAL_NVIC_SystemReset>
	 }
	 if (datachck[0] == 34)
 800060a:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <main+0x130>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b22      	cmp	r3, #34	; 0x22
 8000610:	d1ef      	bne.n	80005f2 <main+0x4e>
	 {
	  if(HAL_UART_Receive(&huart2, datain, 9, 1000) == 3)
 8000612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000616:	2209      	movs	r2, #9
 8000618:	4930      	ldr	r1, [pc, #192]	; (80006dc <main+0x138>)
 800061a:	482f      	ldr	r0, [pc, #188]	; (80006d8 <main+0x134>)
 800061c:	f002 fd1c 	bl	8003058 <HAL_UART_Receive>
 8000620:	4603      	mov	r3, r0
 8000622:	2b03      	cmp	r3, #3
 8000624:	d101      	bne.n	800062a <main+0x86>
	  {
		  HAL_NVIC_SystemReset();
 8000626:	f000 ff3a 	bl	800149e <HAL_NVIC_SystemReset>
	  }
	  chsm = (datain[0] + datain[1] + datain[2] + datain[3] + datain[4] + datain[5] + datain[6] + datain[7]) & 0xFF;
 800062a:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <main+0x138>)
 800062c:	781a      	ldrb	r2, [r3, #0]
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <main+0x138>)
 8000630:	785b      	ldrb	r3, [r3, #1]
 8000632:	4413      	add	r3, r2
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <main+0x138>)
 8000638:	789b      	ldrb	r3, [r3, #2]
 800063a:	4413      	add	r3, r2
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4b27      	ldr	r3, [pc, #156]	; (80006dc <main+0x138>)
 8000640:	78db      	ldrb	r3, [r3, #3]
 8000642:	4413      	add	r3, r2
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <main+0x138>)
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	4413      	add	r3, r2
 800064c:	b2da      	uxtb	r2, r3
 800064e:	4b23      	ldr	r3, [pc, #140]	; (80006dc <main+0x138>)
 8000650:	795b      	ldrb	r3, [r3, #5]
 8000652:	4413      	add	r3, r2
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4b21      	ldr	r3, [pc, #132]	; (80006dc <main+0x138>)
 8000658:	799b      	ldrb	r3, [r3, #6]
 800065a:	4413      	add	r3, r2
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <main+0x138>)
 8000660:	79db      	ldrb	r3, [r3, #7]
 8000662:	4413      	add	r3, r2
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <main+0x13c>)
 8000668:	701a      	strb	r2, [r3, #0]
	  if (datain[8] == chsm)
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <main+0x138>)
 800066c:	7a1a      	ldrb	r2, [r3, #8]
 800066e:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <main+0x13c>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	429a      	cmp	r2, r3
 8000674:	d1bd      	bne.n	80005f2 <main+0x4e>
		{

		  //send data through nRF24
	  	  nRF24_WriteTXPayload(datain);
 8000676:	4819      	ldr	r0, [pc, #100]	; (80006dc <main+0x138>)
 8000678:	f000 fba0 	bl	8000dbc <nRF24_WriteTXPayload>
	  	  HAL_Delay(1);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 fdff 	bl	8001280 <HAL_Delay>
	  	  nRF24_WaitTX();
 8000682:	f000 fba9 	bl	8000dd8 <nRF24_WaitTX>
	  	  nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8000686:	2070      	movs	r0, #112	; 0x70
 8000688:	f000 f960 	bl	800094c <nRF24_WriteStatus>

	  	  //if its working blink once per second
	  	  if (HAL_GetTick()- time > 1000)
 800068c:	f000 fdee 	bl	800126c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <main+0x128>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	1ad3      	subs	r3, r2, r3
 8000698:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800069c:	d908      	bls.n	80006b0 <main+0x10c>
	  	  {
	  		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800069e:	2120      	movs	r1, #32
 80006a0:	4809      	ldr	r0, [pc, #36]	; (80006c8 <main+0x124>)
 80006a2:	f001 f8b5 	bl	8001810 <HAL_GPIO_TogglePin>
	  		  time = HAL_GetTick();
 80006a6:	f000 fde1 	bl	800126c <HAL_GetTick>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <main+0x128>)
 80006ae:	6013      	str	r3, [r2, #0]
	  	  }
	  	  timechk = HAL_GetTick();
 80006b0:	f000 fddc 	bl	800126c <HAL_GetTick>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <main+0x12c>)
 80006b8:	6013      	str	r3, [r2, #0]
	 if(HAL_UART_Receive(&huart2, datachck, 1, 1000) == 3)
 80006ba:	e79a      	b.n	80005f2 <main+0x4e>
 80006bc:	2000004c 	.word	0x2000004c
 80006c0:	08003490 	.word	0x08003490
 80006c4:	08003494 	.word	0x08003494
 80006c8:	40020000 	.word	0x40020000
 80006cc:	20000038 	.word	0x20000038
 80006d0:	2000003c 	.word	0x2000003c
 80006d4:	20000034 	.word	0x20000034
 80006d8:	200000a4 	.word	0x200000a4
 80006dc:	20000028 	.word	0x20000028
 80006e0:	20000040 	.word	0x20000040

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b092      	sub	sp, #72	; 0x48
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	2234      	movs	r2, #52	; 0x34
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 feb8 	bl	8003468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	463b      	mov	r3, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <SystemClock_Config+0x98>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800070e:	4a1b      	ldr	r2, [pc, #108]	; (800077c <SystemClock_Config+0x98>)
 8000710:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000714:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000716:	2302      	movs	r3, #2
 8000718:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071a:	2301      	movs	r3, #1
 800071c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071e:	2310      	movs	r3, #16
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000726:	2300      	movs	r3, #0
 8000728:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800072a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000730:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000734:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4618      	mov	r0, r3
 800073c:	f001 f882 	bl	8001844 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000746:	f000 f81b 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2303      	movs	r3, #3
 8000750:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	2101      	movs	r1, #1
 8000762:	4618      	mov	r0, r3
 8000764:	f001 fb9e 	bl	8001ea4 <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800076e:	f000 f807 	bl	8000780 <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3748      	adds	r7, #72	; 0x48
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40007000 	.word	0x40007000

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	e7fe      	b.n	8000788 <Error_Handler+0x8>
	...

0800078c <nRF24_SendSpi>:
#define NRF24_CE_LOW		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET)

// Spi send and read

static void nRF24_SendSpi(uint8_t *Data, uint8_t length)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, length, 1000);
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <nRF24_SendSpi+0x28>)
 800079a:	6818      	ldr	r0, [r3, #0]
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	b29a      	uxth	r2, r3
 80007a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	f001 fecc 	bl	8002542 <HAL_SPI_Transmit>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000044 	.word	0x20000044

080007b8 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t length)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, length, 1000);
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <nRF24_ReadSpi+0x28>)
 80007c6:	6818      	ldr	r0, [r3, #0]
 80007c8:	78fb      	ldrb	r3, [r7, #3]
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	f001 fff9 	bl	80027c8 <HAL_SPI_Receive>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000044 	.word	0x20000044

080007e4 <nRF24_ReadRegister>:

//Reading register

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80007f2:	2200      	movs	r2, #0
 80007f4:	2104      	movs	r1, #4
 80007f6:	480c      	ldr	r0, [pc, #48]	; (8000828 <nRF24_ReadRegister+0x44>)
 80007f8:	f000 fff2 	bl	80017e0 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 80007fc:	1dfb      	adds	r3, r7, #7
 80007fe:	2101      	movs	r1, #1
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ffc3 	bl	800078c <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8000806:	f107 030f 	add.w	r3, r7, #15
 800080a:	2101      	movs	r1, #1
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ffd3 	bl	80007b8 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8000812:	2201      	movs	r2, #1
 8000814:	2104      	movs	r1, #4
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <nRF24_ReadRegister+0x44>)
 8000818:	f000 ffe2 	bl	80017e0 <HAL_GPIO_WritePin>

	return result;
 800081c:	7bfb      	ldrb	r3, [r7, #15]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40020400 	.word	0x40020400

0800082c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* result, uint8_t lenght)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	71fb      	strb	r3, [r7, #7]
 8000838:	4613      	mov	r3, r2
 800083a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000840:	2200      	movs	r2, #0
 8000842:	2104      	movs	r1, #4
 8000844:	480a      	ldr	r0, [pc, #40]	; (8000870 <nRF24_ReadRegisters+0x44>)
 8000846:	f000 ffcb 	bl	80017e0 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 800084a:	1dfb      	adds	r3, r7, #7
 800084c:	2101      	movs	r1, #1
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ff9c 	bl	800078c <nRF24_SendSpi>
	nRF24_ReadSpi(result, lenght);
 8000854:	79bb      	ldrb	r3, [r7, #6]
 8000856:	4619      	mov	r1, r3
 8000858:	6838      	ldr	r0, [r7, #0]
 800085a:	f7ff ffad 	bl	80007b8 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 800085e:	2201      	movs	r2, #1
 8000860:	2104      	movs	r1, #4
 8000862:	4803      	ldr	r0, [pc, #12]	; (8000870 <nRF24_ReadRegisters+0x44>)
 8000864:	f000 ffbc 	bl	80017e0 <HAL_GPIO_WritePin>
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40020400 	.word	0x40020400

08000874 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t value)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	460a      	mov	r2, r1
 800087e:	71fb      	strb	r3, [r7, #7]
 8000880:	4613      	mov	r3, r2
 8000882:	71bb      	strb	r3, [r7, #6]
	uint8_t list[2];

	list[0] = NRF24_CMD_W_REGISTER | reg;
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	f043 0320 	orr.w	r3, r3, #32
 800088a:	b2db      	uxtb	r3, r3
 800088c:	733b      	strb	r3, [r7, #12]
	list[1] = value;
 800088e:	79bb      	ldrb	r3, [r7, #6]
 8000890:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8000892:	2200      	movs	r2, #0
 8000894:	2104      	movs	r1, #4
 8000896:	4809      	ldr	r0, [pc, #36]	; (80008bc <nRF24_WriteRegister+0x48>)
 8000898:	f000 ffa2 	bl	80017e0 <HAL_GPIO_WritePin>

	nRF24_SendSpi(list, 2);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2102      	movs	r1, #2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ff72 	bl	800078c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80008a8:	2201      	movs	r2, #1
 80008aa:	2104      	movs	r1, #4
 80008ac:	4803      	ldr	r0, [pc, #12]	; (80008bc <nRF24_WriteRegister+0x48>)
 80008ae:	f000 ff97 	bl	80017e0 <HAL_GPIO_WritePin>
}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40020400 	.word	0x40020400

080008c0 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* result, uint8_t lenght)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	f043 0320 	orr.w	r3, r3, #32
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80008da:	2200      	movs	r2, #0
 80008dc:	2104      	movs	r1, #4
 80008de:	480b      	ldr	r0, [pc, #44]	; (800090c <nRF24_WriteRegisters+0x4c>)
 80008e0:	f000 ff7e 	bl	80017e0 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80008e4:	1dfb      	adds	r3, r7, #7
 80008e6:	2101      	movs	r1, #1
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff4f 	bl	800078c <nRF24_SendSpi>
	nRF24_SendSpi(result, lenght);
 80008ee:	79bb      	ldrb	r3, [r7, #6]
 80008f0:	4619      	mov	r1, r3
 80008f2:	6838      	ldr	r0, [r7, #0]
 80008f4:	f7ff ff4a 	bl	800078c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80008f8:	2201      	movs	r2, #1
 80008fa:	2104      	movs	r1, #4
 80008fc:	4803      	ldr	r0, [pc, #12]	; (800090c <nRF24_WriteRegisters+0x4c>)
 80008fe:	f000 ff6f 	bl	80017e0 <HAL_GPIO_WritePin>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40020400 	.word	0x40020400

08000910 <nRF24_ReadConfig>:

uint8_t nRF24_ReadConfig(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8000914:	2000      	movs	r0, #0
 8000916:	f7ff ff65 	bl	80007e4 <nRF24_ReadRegister>
 800091a:	4603      	mov	r3, r0
}
 800091c:	4618      	mov	r0, r3
 800091e:	bd80      	pop	{r7, pc}

08000920 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t config)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, config);
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	4619      	mov	r1, r3
 800092e:	2000      	movs	r0, #0
 8000930:	f7ff ffa0 	bl	8000874 <nRF24_WriteRegister>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8000940:	2007      	movs	r0, #7
 8000942:	f7ff ff4f 	bl	80007e4 <nRF24_ReadRegister>
 8000946:	4603      	mov	r3, r0
}
 8000948:	4618      	mov	r0, r3
 800094a:	bd80      	pop	{r7, pc}

0800094c <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	4619      	mov	r1, r3
 800095a:	2007      	movs	r0, #7
 800095c:	f7ff ff8a 	bl	8000874 <nRF24_WriteRegister>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <nRF24_TX_Mode>:
	NRF24_CE_HIGH;
	HAL_Delay(1);
}

void nRF24_TX_Mode(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 800096e:	2200      	movs	r2, #0
 8000970:	2102      	movs	r1, #2
 8000972:	4810      	ldr	r0, [pc, #64]	; (80009b4 <nRF24_TX_Mode+0x4c>)
 8000974:	f000 ff34 	bl	80017e0 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8000978:	f7ff ffca 	bl	8000910 <nRF24_ReadConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	f043 0302 	orr.w	r3, r3, #2
 8000986:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	f023 0301 	bic.w	r3, r3, #1
 800098e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ffc4 	bl	8000920 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8000998:	2070      	movs	r0, #112	; 0x70
 800099a:	f7ff ffd7 	bl	800094c <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 800099e:	f000 f851 	bl	8000a44 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 80009a2:	f000 f869 	bl	8000a78 <nRF24_FlushTX>

	HAL_Delay(1);
 80009a6:	2001      	movs	r0, #1
 80009a8:	f000 fc6a 	bl	8001280 <HAL_Delay>
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40020400 	.word	0x40020400

080009b8 <nRF24_SetPALevel>:




void nRF24_SetPALevel(uint8_t lev)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80009c2:	2006      	movs	r0, #6
 80009c4:	f7ff ff0e 	bl	80007e4 <nRF24_ReadRegister>
 80009c8:	4603      	mov	r3, r0
 80009ca:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	f023 0307 	bic.w	r3, r3, #7
 80009d2:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	b25a      	sxtb	r2, r3
 80009da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009de:	4313      	orrs	r3, r2
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	4619      	mov	r1, r3
 80009e8:	2006      	movs	r0, #6
 80009ea:	f7ff ff43 	bl	8000874 <nRF24_WriteRegister>
}
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b084      	sub	sp, #16
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	4603      	mov	r3, r0
 80009fe:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8000a00:	2006      	movs	r0, #6
 8000a02:	f7ff feef 	bl	80007e4 <nRF24_ReadRegister>
 8000a06:	4603      	mov	r3, r0
 8000a08:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
 8000a0c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000a10:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d104      	bne.n	8000a22 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	f043 0320 	orr.w	r3, r3, #32
 8000a1e:	73fb      	strb	r3, [r7, #15]
 8000a20:	e006      	b.n	8000a30 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d103      	bne.n	8000a30 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	4619      	mov	r1, r3
 8000a34:	2006      	movs	r0, #6
 8000a36:	f7ff ff1d 	bl	8000874 <nRF24_WriteRegister>
}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <nRF24_FlushRX>:



void nRF24_FlushRX(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8000a4a:	23e2      	movs	r3, #226	; 0xe2
 8000a4c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2104      	movs	r1, #4
 8000a52:	4808      	ldr	r0, [pc, #32]	; (8000a74 <nRF24_FlushRX+0x30>)
 8000a54:	f000 fec4 	bl	80017e0 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fe95 	bl	800078c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8000a62:	2201      	movs	r2, #1
 8000a64:	2104      	movs	r1, #4
 8000a66:	4803      	ldr	r0, [pc, #12]	; (8000a74 <nRF24_FlushRX+0x30>)
 8000a68:	f000 feba 	bl	80017e0 <HAL_GPIO_WritePin>
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40020400 	.word	0x40020400

08000a78 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8000a7e:	23e1      	movs	r3, #225	; 0xe1
 8000a80:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000a82:	2200      	movs	r2, #0
 8000a84:	2104      	movs	r1, #4
 8000a86:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <nRF24_FlushTX+0x30>)
 8000a88:	f000 feaa 	bl	80017e0 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	2101      	movs	r1, #1
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fe7b 	bl	800078c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8000a96:	2201      	movs	r2, #1
 8000a98:	2104      	movs	r1, #4
 8000a9a:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <nRF24_FlushTX+0x30>)
 8000a9c:	f000 fea0 	bl	80017e0 <HAL_GPIO_WritePin>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40020400 	.word	0x40020400

08000aac <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000ab6:	f7ff ff2b 	bl	8000910 <nRF24_ReadConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d004      	beq.n	8000ace <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	f043 0308 	orr.w	r3, r3, #8
 8000aca:	73fb      	strb	r3, [r7, #15]
 8000acc:	e003      	b.n	8000ad6 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	f023 0308 	bic.w	r3, r3, #8
 8000ad4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff21 	bl	8000920 <nRF24_WriteConfig>
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b084      	sub	sp, #16
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	4603      	mov	r3, r0
 8000aee:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000af0:	f7ff ff0e 	bl	8000910 <nRF24_ReadConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d104      	bne.n	8000b08 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	73fb      	strb	r3, [r7, #15]
 8000b06:	e003      	b.n	8000b10 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	f023 0304 	bic.w	r3, r3, #4
 8000b0e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff04 	bl	8000920 <nRF24_WriteConfig>
}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	460a      	mov	r2, r1
 8000b2a:	71fb      	strb	r3, [r7, #7]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	011b      	lsls	r3, r3, #4
 8000b34:	b25a      	sxtb	r2, r3
 8000b36:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b3a:	f003 030f 	and.w	r3, r3, #15
 8000b3e:	b25b      	sxtb	r3, r3
 8000b40:	4313      	orrs	r3, r2
 8000b42:	b25b      	sxtb	r3, r3
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	4619      	mov	r1, r3
 8000b48:	2004      	movs	r0, #4
 8000b4a:	f7ff fe93 	bl	8000874 <nRF24_WriteRegister>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	4619      	mov	r1, r3
 8000b6a:	2005      	movs	r0, #5
 8000b6c:	f7ff fe82 	bl	8000874 <nRF24_WriteRegister>
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	460a      	mov	r2, r1
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	4613      	mov	r3, r2
 8000b86:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2b05      	cmp	r3, #5
 8000b8c:	d901      	bls.n	8000b92 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 8000b8e:	2305      	movs	r3, #5
 8000b90:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	3311      	adds	r3, #17
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	79bb      	ldrb	r3, [r7, #6]
 8000b9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4610      	mov	r0, r2
 8000ba4:	f7ff fe66 	bl	8000874 <nRF24_WriteRegister>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	460a      	mov	r2, r1
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b05      	cmp	r3, #5
 8000bc4:	d901      	bls.n	8000bca <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8000bc6:	2305      	movs	r3, #5
 8000bc8:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8000bca:	2002      	movs	r0, #2
 8000bcc:	f7ff fe0a 	bl	80007e4 <nRF24_ReadRegister>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d10a      	bne.n	8000bf0 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	b25a      	sxtb	r2, r3
 8000be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	b25b      	sxtb	r3, r3
 8000bec:	73fb      	strb	r3, [r7, #15]
 8000bee:	e00b      	b.n	8000c08 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	b25a      	sxtb	r2, r3
 8000bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c02:	4013      	ands	r3, r2
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	2002      	movs	r0, #2
 8000c0e:	f7ff fe31 	bl	8000874 <nRF24_WriteRegister>
}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b084      	sub	sp, #16
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	460a      	mov	r2, r1
 8000c24:	71fb      	strb	r3, [r7, #7]
 8000c26:	4613      	mov	r3, r2
 8000c28:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	2b05      	cmp	r3, #5
 8000c2e:	d901      	bls.n	8000c34 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8000c30:	2305      	movs	r3, #5
 8000c32:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f7ff fdd5 	bl	80007e4 <nRF24_ReadRegister>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8000c3e:	79bb      	ldrb	r3, [r7, #6]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d10a      	bne.n	8000c5a <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	2201      	movs	r2, #1
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	b25a      	sxtb	r2, r3
 8000c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	e00b      	b.n	8000c72 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	b25b      	sxtb	r3, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	b25a      	sxtb	r2, r3
 8000c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	b25b      	sxtb	r3, r3
 8000c70:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	4619      	mov	r1, r3
 8000c76:	2001      	movs	r0, #1
 8000c78:	f7ff fdfc 	bl	8000874 <nRF24_WriteRegister>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	2b05      	cmp	r3, #5
 8000c92:	d901      	bls.n	8000c98 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8000c94:	2305      	movs	r3, #5
 8000c96:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d801      	bhi.n	8000ca2 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	3b02      	subs	r3, #2
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	f003 0303 	and.w	r3, r3, #3
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	4619      	mov	r1, r3
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f7ff fddf 	bl	8000874 <nRF24_WriteRegister>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b084      	sub	sp, #16
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	6039      	str	r1, [r7, #0]
 8000cc8:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <nRF24_SetRXAddress+0x18>
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d11d      	bne.n	8000d12 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73fb      	strb	r3, [r7, #15]
 8000cda:	e00d      	b.n	8000cf8 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	683a      	ldr	r2, [r7, #0]
 8000ce0:	441a      	add	r2, r3
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	f1c3 0302 	rsb	r3, r3, #2
 8000ce8:	7812      	ldrb	r2, [r2, #0]
 8000cea:	3310      	adds	r3, #16
 8000cec:	443b      	add	r3, r7
 8000cee:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d9ee      	bls.n	8000cdc <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	330a      	adds	r3, #10
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	f107 010c 	add.w	r1, r7, #12
 8000d08:	2203      	movs	r2, #3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fdd8 	bl	80008c0 <nRF24_WriteRegisters>
	{
 8000d10:	e00a      	b.n	8000d28 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	330a      	adds	r3, #10
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4610      	mov	r0, r2
 8000d22:	f7ff fda7 	bl	8000874 <nRF24_WriteRegister>
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	4619      	mov	r1, r3
 8000d40:	200a      	movs	r0, #10
 8000d42:	f7ff fd73 	bl	800082c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	73fb      	strb	r3, [r7, #15]
 8000d4a:	e00c      	b.n	8000d66 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8000d4c:	7bfa      	ldrb	r2, [r7, #15]
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	f1c3 0302 	rsb	r3, r3, #2
 8000d54:	3210      	adds	r2, #16
 8000d56:	443a      	add	r2, r7
 8000d58:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8000d5c:	4a16      	ldr	r2, [pc, #88]	; (8000db8 <nRF24_SetTXAddress+0x88>)
 8000d5e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	3301      	adds	r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d9ef      	bls.n	8000d4c <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	e00d      	b.n	8000d8e <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	441a      	add	r2, r3
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	f1c3 0302 	rsb	r3, r3, #2
 8000d7e:	7812      	ldrb	r2, [r2, #0]
 8000d80:	3310      	adds	r3, #16
 8000d82:	443b      	add	r3, r7
 8000d84:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	73fb      	strb	r3, [r7, #15]
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d9ee      	bls.n	8000d72 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	2203      	movs	r2, #3
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	200a      	movs	r0, #10
 8000d9e:	f7ff fd8f 	bl	80008c0 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	2203      	movs	r2, #3
 8000da8:	4619      	mov	r1, r3
 8000daa:	2010      	movs	r0, #16
 8000dac:	f7ff fd88 	bl	80008c0 <nRF24_WriteRegisters>

}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000048 	.word	0x20000048

08000dbc <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8000dc4:	2209      	movs	r2, #9
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	20a0      	movs	r0, #160	; 0xa0
 8000dca:	f7ff fd79 	bl	80008c0 <nRF24_WriteRegisters>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
	uint8_t status;
	uint32_t timetx;
	timetx = HAL_GetTick();
 8000dde:	f000 fa45 	bl	800126c <HAL_GetTick>
 8000de2:	6078      	str	r0, [r7, #4]
	NRF24_CE_HIGH;
 8000de4:	2201      	movs	r2, #1
 8000de6:	2102      	movs	r1, #2
 8000de8:	4814      	ldr	r0, [pc, #80]	; (8000e3c <nRF24_WaitTX+0x64>)
 8000dea:	f000 fcf9 	bl	80017e0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000dee:	2001      	movs	r0, #1
 8000df0:	f000 fa46 	bl	8001280 <HAL_Delay>
	NRF24_CE_LOW;
 8000df4:	2200      	movs	r2, #0
 8000df6:	2102      	movs	r1, #2
 8000df8:	4810      	ldr	r0, [pc, #64]	; (8000e3c <nRF24_WaitTX+0x64>)
 8000dfa:	f000 fcf1 	bl	80017e0 <HAL_GPIO_WritePin>
	do
	{
		if (HAL_GetTick() - timetx > 200) HAL_NVIC_SystemReset();
 8000dfe:	f000 fa35 	bl	800126c <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	2bc8      	cmp	r3, #200	; 0xc8
 8000e0a:	d901      	bls.n	8000e10 <nRF24_WaitTX+0x38>
 8000e0c:	f000 fb47 	bl	800149e <HAL_NVIC_SystemReset>
		HAL_Delay(1);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f000 fa35 	bl	8001280 <HAL_Delay>
		status = nRF24_ReadStatus();
 8000e16:	f7ff fd91 	bl	800093c <nRF24_ReadStatus>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	70fb      	strb	r3, [r7, #3]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 8000e1e:	78fb      	ldrb	r3, [r7, #3]
 8000e20:	f003 0310 	and.w	r3, r3, #16
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d104      	bne.n	8000e32 <nRF24_WaitTX+0x5a>
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	f003 0320 	and.w	r3, r3, #32
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d0e5      	beq.n	8000dfe <nRF24_WaitTX+0x26>

}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40020400 	.word	0x40020400

08000e40 <nRF24_Init>:
	}
	return 0;
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8000e48:	4a1e      	ldr	r2, [pc, #120]	; (8000ec4 <nRF24_Init+0x84>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2102      	movs	r1, #2
 8000e52:	481d      	ldr	r0, [pc, #116]	; (8000ec8 <nRF24_Init+0x88>)
 8000e54:	f000 fcc4 	bl	80017e0 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	481a      	ldr	r0, [pc, #104]	; (8000ec8 <nRF24_Init+0x88>)
 8000e5e:	f000 fcbf 	bl	80017e0 <HAL_GPIO_WritePin>

	HAL_Delay(5);
 8000e62:	2005      	movs	r0, #5
 8000e64:	f000 fa0c 	bl	8001280 <HAL_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f7ff fda5 	bl	80009b8 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8000e6e:	2002      	movs	r0, #2
 8000e70:	f7ff fdc1 	bl	80009f6 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8000e74:	2001      	movs	r0, #1
 8000e76:	f7ff fe19 	bl	8000aac <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff fe33 	bl	8000ae6 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8000e80:	2107      	movs	r1, #7
 8000e82:	2004      	movs	r0, #4
 8000e84:	f7ff fe4c 	bl	8000b20 <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8000e88:	2100      	movs	r1, #0
 8000e8a:	201c      	movs	r0, #28
 8000e8c:	f7ff fcf2 	bl	8000874 <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8000e90:	200a      	movs	r0, #10
 8000e92:	f7ff fe60 	bl	8000b56 <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8000e96:	2109      	movs	r1, #9
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff fe6d 	bl	8000b78 <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f7ff fe85 	bl	8000bb0 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff feb6 	bl	8000c1a <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8000eae:	2003      	movs	r0, #3
 8000eb0:	f7ff fee8 	bl	8000c84 <nRF24_SetAddressWidth>

	HAL_Delay(20);
 8000eb4:	2014      	movs	r0, #20
 8000eb6:	f000 f9e3 	bl	8001280 <HAL_Delay>

}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000044 	.word	0x20000044
 8000ec8:	40020400 	.word	0x40020400

08000ecc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <MX_SPI2_Init+0x64>)
 8000ed2:	4a18      	ldr	r2, [pc, #96]	; (8000f34 <MX_SPI2_Init+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <MX_SPI2_Init+0x64>)
 8000ed8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000edc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_SPI2_Init+0x64>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_SPI2_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_SPI2_Init+0x64>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_SPI2_Init+0x64>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_SPI2_Init+0x64>)
 8000ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000efc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_SPI2_Init+0x64>)
 8000f00:	2210      	movs	r2, #16
 8000f02:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <MX_SPI2_Init+0x64>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_SPI2_Init+0x64>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <MX_SPI2_Init+0x64>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_SPI2_Init+0x64>)
 8000f18:	220a      	movs	r2, #10
 8000f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f1c:	4804      	ldr	r0, [pc, #16]	; (8000f30 <MX_SPI2_Init+0x64>)
 8000f1e:	f001 fa87 	bl	8002430 <HAL_SPI_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f28:	f7ff fc2a 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	2000004c 	.word	0x2000004c
 8000f34:	40003800 	.word	0x40003800

08000f38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <HAL_SPI_MspInit+0x7c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d128      	bne.n	8000fac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5e:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f64:	6253      	str	r3, [r2, #36]	; 0x24
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	61d3      	str	r3, [r2, #28]
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f8a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f9c:	2305      	movs	r3, #5
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_SPI_MspInit+0x84>)
 8000fa8:	f000 fa8a 	bl	80014c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40003800 	.word	0x40003800
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020400 	.word	0x40020400

08000fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <HAL_MspInit+0x5c>)
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	4a14      	ldr	r2, [pc, #80]	; (800101c <HAL_MspInit+0x5c>)
 8000fcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd0:	6253      	str	r3, [r2, #36]	; 0x24
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_MspInit+0x5c>)
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_MspInit+0x5c>)
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_MspInit+0x5c>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6213      	str	r3, [r2, #32]
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_MspInit+0x5c>)
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_MspInit+0x5c>)
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffa:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_MspInit+0x5c>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	6253      	str	r3, [r2, #36]	; 0x24
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_MspInit+0x5c>)
 8001004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800100e:	2007      	movs	r0, #7
 8001010:	f000 fa1e 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40023800 	.word	0x40023800

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <NMI_Handler+0x4>

08001026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <HardFault_Handler+0x4>

0800102c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <MemManage_Handler+0x4>

08001032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <UsageFault_Handler+0x4>

0800103e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr

0800104a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr

08001062 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001066:	f000 f8ef 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}

0800106e <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
	...

0800107c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <MX_USART2_UART_Init+0x50>)
 8001084:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 8001088:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800108c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 80010a2:	220c      	movs	r2, #12
 80010a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 80010b4:	f001 ff80 	bl	8002fb8 <HAL_UART_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010be:	f7ff fb5f 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200000a4 	.word	0x200000a4
 80010cc:	40004400 	.word	0x40004400

080010d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a17      	ldr	r2, [pc, #92]	; (800114c <HAL_UART_MspInit+0x7c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d127      	bne.n	8001142 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <HAL_UART_MspInit+0x80>)
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	4a16      	ldr	r2, [pc, #88]	; (8001150 <HAL_UART_MspInit+0x80>)
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fc:	6253      	str	r3, [r2, #36]	; 0x24
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <HAL_UART_MspInit+0x80>)
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_UART_MspInit+0x80>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	4a10      	ldr	r2, [pc, #64]	; (8001150 <HAL_UART_MspInit+0x80>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	61d3      	str	r3, [r2, #28]
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <HAL_UART_MspInit+0x80>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001122:	230c      	movs	r3, #12
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001132:	2307      	movs	r3, #7
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <HAL_UART_MspInit+0x84>)
 800113e:	f000 f9bf 	bl	80014c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	; 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40004400 	.word	0x40004400
 8001150:	40023800 	.word	0x40023800
 8001154:	40020000 	.word	0x40020000

08001158 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001158:	f7ff ff89 	bl	800106e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800115c:	480b      	ldr	r0, [pc, #44]	; (800118c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800115e:	490c      	ldr	r1, [pc, #48]	; (8001190 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001160:	4a0c      	ldr	r2, [pc, #48]	; (8001194 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a09      	ldr	r2, [pc, #36]	; (8001198 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001174:	4c09      	ldr	r4, [pc, #36]	; (800119c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001182:	f002 f94d 	bl	8003420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001186:	f7ff fa0d 	bl	80005a4 <main>
  bx lr
 800118a:	4770      	bx	lr
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001194:	080034cc 	.word	0x080034cc
  ldr r2, =_sbss
 8001198:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800119c:	200000f0 	.word	0x200000f0

080011a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC1_IRQHandler>

080011a2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 f94f 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 f80e 	bl	80011d4 <HAL_InitTick>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d002      	beq.n	80011c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	e001      	b.n	80011c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011c4:	f7ff fefc 	bl	8000fc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_InitTick+0x68>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d022      	beq.n	800122e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_InitTick+0x6c>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <HAL_InitTick+0x68>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80011f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 f952 	bl	80014a6 <HAL_SYSTICK_Config>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10f      	bne.n	8001228 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	d809      	bhi.n	8001222 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120e:	2200      	movs	r2, #0
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	f04f 30ff 	mov.w	r0, #4294967295
 8001216:	f000 f926 	bl	8001466 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <HAL_InitTick+0x70>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	e007      	b.n	8001232 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	73fb      	strb	r3, [r7, #15]
 8001226:	e004      	b.n	8001232 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	e001      	b.n	8001232 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000008 	.word	0x20000008
 8001240:	20000000 	.word	0x20000000
 8001244:	20000004 	.word	0x20000004

08001248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_IncTick+0x1c>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_IncTick+0x20>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4413      	add	r3, r2
 8001256:	4a03      	ldr	r2, [pc, #12]	; (8001264 <HAL_IncTick+0x1c>)
 8001258:	6013      	str	r3, [r2, #0]
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	200000ec 	.word	0x200000ec
 8001268:	20000008 	.word	0x20000008

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b02      	ldr	r3, [pc, #8]	; (800127c <HAL_GetTick+0x10>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	200000ec 	.word	0x200000ec

08001280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001288:	f7ff fff0 	bl	800126c <HAL_GetTick>
 800128c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001298:	d004      	beq.n	80012a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_Delay+0x40>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	4413      	add	r3, r2
 80012a2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012a4:	bf00      	nop
 80012a6:	f7ff ffe1 	bl	800126c <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d8f7      	bhi.n	80012a6 <HAL_Delay+0x26>
  {
  }
}
 80012b6:	bf00      	nop
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000008 	.word	0x20000008

080012c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	60d3      	str	r3, [r2, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <__NVIC_GetPriorityGrouping+0x18>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	f003 0307 	and.w	r3, r3, #7
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	; (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	; (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013e4:	f3bf 8f4f 	dsb	sy
}
 80013e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <__NVIC_SystemReset+0x24>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80013f2:	4904      	ldr	r1, [pc, #16]	; (8001404 <__NVIC_SystemReset+0x24>)
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <__NVIC_SystemReset+0x28>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80013fa:	f3bf 8f4f 	dsb	sy
}
 80013fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <__NVIC_SystemReset+0x20>
 8001404:	e000ed00 	.word	0xe000ed00
 8001408:	05fa0004 	.word	0x05fa0004

0800140c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800141c:	d301      	bcc.n	8001422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141e:	2301      	movs	r3, #1
 8001420:	e00f      	b.n	8001442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <SysTick_Config+0x40>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142a:	210f      	movs	r1, #15
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f7ff ff7a 	bl	8001328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <SysTick_Config+0x40>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <SysTick_Config+0x40>)
 800143c:	2207      	movs	r2, #7
 800143e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	e000e010 	.word	0xe000e010

08001450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff33 	bl	80012c4 <__NVIC_SetPriorityGrouping>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001478:	f7ff ff48 	bl	800130c <__NVIC_GetPriorityGrouping>
 800147c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f7ff ff7a 	bl	800137c <NVIC_EncodePriority>
 8001488:	4602      	mov	r2, r0
 800148a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff49 	bl	8001328 <__NVIC_SetPriority>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80014a2:	f7ff ff9d 	bl	80013e0 <__NVIC_SystemReset>

080014a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ffac 	bl	800140c <SysTick_Config>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80014d6:	e160      	b.n	800179a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	2101      	movs	r1, #1
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	fa01 f303 	lsl.w	r3, r1, r3
 80014e4:	4013      	ands	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 8152 	beq.w	8001794 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d005      	beq.n	8001508 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001504:	2b02      	cmp	r3, #2
 8001506:	d130      	bne.n	800156a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2203      	movs	r2, #3
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68da      	ldr	r2, [r3, #12]
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800153e:	2201      	movs	r2, #1
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	091b      	lsrs	r3, r3, #4
 8001554:	f003 0201 	and.w	r2, r3, #1
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	2b03      	cmp	r3, #3
 8001574:	d017      	beq.n	80015a6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d123      	bne.n	80015fa <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	08da      	lsrs	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3208      	adds	r2, #8
 80015ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015be:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	220f      	movs	r2, #15
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	691a      	ldr	r2, [r3, #16]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	08da      	lsrs	r2, r3, #3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3208      	adds	r2, #8
 80015f4:	6939      	ldr	r1, [r7, #16]
 80015f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0203 	and.w	r2, r3, #3
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 80ac 	beq.w	8001794 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163c:	4b5e      	ldr	r3, [pc, #376]	; (80017b8 <HAL_GPIO_Init+0x2f8>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4a5d      	ldr	r2, [pc, #372]	; (80017b8 <HAL_GPIO_Init+0x2f8>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6213      	str	r3, [r2, #32]
 8001648:	4b5b      	ldr	r3, [pc, #364]	; (80017b8 <HAL_GPIO_Init+0x2f8>)
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001654:	4a59      	ldr	r2, [pc, #356]	; (80017bc <HAL_GPIO_Init+0x2fc>)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	089b      	lsrs	r3, r3, #2
 800165a:	3302      	adds	r3, #2
 800165c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001660:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	220f      	movs	r2, #15
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a51      	ldr	r2, [pc, #324]	; (80017c0 <HAL_GPIO_Init+0x300>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d025      	beq.n	80016cc <HAL_GPIO_Init+0x20c>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a50      	ldr	r2, [pc, #320]	; (80017c4 <HAL_GPIO_Init+0x304>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d01f      	beq.n	80016c8 <HAL_GPIO_Init+0x208>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a4f      	ldr	r2, [pc, #316]	; (80017c8 <HAL_GPIO_Init+0x308>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d019      	beq.n	80016c4 <HAL_GPIO_Init+0x204>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a4e      	ldr	r2, [pc, #312]	; (80017cc <HAL_GPIO_Init+0x30c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d013      	beq.n	80016c0 <HAL_GPIO_Init+0x200>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a4d      	ldr	r2, [pc, #308]	; (80017d0 <HAL_GPIO_Init+0x310>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d00d      	beq.n	80016bc <HAL_GPIO_Init+0x1fc>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a4c      	ldr	r2, [pc, #304]	; (80017d4 <HAL_GPIO_Init+0x314>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d007      	beq.n	80016b8 <HAL_GPIO_Init+0x1f8>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a4b      	ldr	r2, [pc, #300]	; (80017d8 <HAL_GPIO_Init+0x318>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d101      	bne.n	80016b4 <HAL_GPIO_Init+0x1f4>
 80016b0:	2306      	movs	r3, #6
 80016b2:	e00c      	b.n	80016ce <HAL_GPIO_Init+0x20e>
 80016b4:	2307      	movs	r3, #7
 80016b6:	e00a      	b.n	80016ce <HAL_GPIO_Init+0x20e>
 80016b8:	2305      	movs	r3, #5
 80016ba:	e008      	b.n	80016ce <HAL_GPIO_Init+0x20e>
 80016bc:	2304      	movs	r3, #4
 80016be:	e006      	b.n	80016ce <HAL_GPIO_Init+0x20e>
 80016c0:	2303      	movs	r3, #3
 80016c2:	e004      	b.n	80016ce <HAL_GPIO_Init+0x20e>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e002      	b.n	80016ce <HAL_GPIO_Init+0x20e>
 80016c8:	2301      	movs	r3, #1
 80016ca:	e000      	b.n	80016ce <HAL_GPIO_Init+0x20e>
 80016cc:	2300      	movs	r3, #0
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	f002 0203 	and.w	r2, r2, #3
 80016d4:	0092      	lsls	r2, r2, #2
 80016d6:	4093      	lsls	r3, r2
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016de:	4937      	ldr	r1, [pc, #220]	; (80017bc <HAL_GPIO_Init+0x2fc>)
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	089b      	lsrs	r3, r3, #2
 80016e4:	3302      	adds	r3, #2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ec:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <HAL_GPIO_Init+0x31c>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001710:	4a32      	ldr	r2, [pc, #200]	; (80017dc <HAL_GPIO_Init+0x31c>)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001716:	4b31      	ldr	r3, [pc, #196]	; (80017dc <HAL_GPIO_Init+0x31c>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800173a:	4a28      	ldr	r2, [pc, #160]	; (80017dc <HAL_GPIO_Init+0x31c>)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001740:	4b26      	ldr	r3, [pc, #152]	; (80017dc <HAL_GPIO_Init+0x31c>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	43db      	mvns	r3, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001764:	4a1d      	ldr	r2, [pc, #116]	; (80017dc <HAL_GPIO_Init+0x31c>)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <HAL_GPIO_Init+0x31c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800178e:	4a13      	ldr	r2, [pc, #76]	; (80017dc <HAL_GPIO_Init+0x31c>)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3301      	adds	r3, #1
 8001798:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	fa22 f303 	lsr.w	r3, r2, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f47f ae97 	bne.w	80014d8 <HAL_GPIO_Init+0x18>
  }
}
 80017aa:	bf00      	nop
 80017ac:	bf00      	nop
 80017ae:	371c      	adds	r7, #28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40010000 	.word	0x40010000
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40020400 	.word	0x40020400
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020c00 	.word	0x40020c00
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40021400 	.word	0x40021400
 80017d8:	40021800 	.word	0x40021800
 80017dc:	40010400 	.word	0x40010400

080017e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
 80017ec:	4613      	mov	r3, r2
 80017ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017f0:	787b      	ldrb	r3, [r7, #1]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017f6:	887a      	ldrh	r2, [r7, #2]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80017fc:	e003      	b.n	8001806 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80017fe:	887b      	ldrh	r3, [r7, #2]
 8001800:	041a      	lsls	r2, r3, #16
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	619a      	str	r2, [r3, #24]
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001822:	887a      	ldrh	r2, [r7, #2]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4013      	ands	r3, r2
 8001828:	041a      	lsls	r2, r3, #16
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	43d9      	mvns	r1, r3
 800182e:	887b      	ldrh	r3, [r7, #2]
 8001830:	400b      	ands	r3, r1
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	619a      	str	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
	...

08001844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e31d      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001856:	4b94      	ldr	r3, [pc, #592]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001860:	4b91      	ldr	r3, [pc, #580]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001868:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d07b      	beq.n	800196e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	2b08      	cmp	r3, #8
 800187a:	d006      	beq.n	800188a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	2b0c      	cmp	r3, #12
 8001880:	d10f      	bne.n	80018a2 <HAL_RCC_OscConfig+0x5e>
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001888:	d10b      	bne.n	80018a2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188a:	4b87      	ldr	r3, [pc, #540]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d06a      	beq.n	800196c <HAL_RCC_OscConfig+0x128>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d166      	bne.n	800196c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e2f7      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d106      	bne.n	80018b8 <HAL_RCC_OscConfig+0x74>
 80018aa:	4b7f      	ldr	r3, [pc, #508]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a7e      	ldr	r2, [pc, #504]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e02d      	b.n	8001914 <HAL_RCC_OscConfig+0xd0>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10c      	bne.n	80018da <HAL_RCC_OscConfig+0x96>
 80018c0:	4b79      	ldr	r3, [pc, #484]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a78      	ldr	r2, [pc, #480]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 80018c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b76      	ldr	r3, [pc, #472]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a75      	ldr	r2, [pc, #468]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 80018d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	e01c      	b.n	8001914 <HAL_RCC_OscConfig+0xd0>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b05      	cmp	r3, #5
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0xb8>
 80018e2:	4b71      	ldr	r3, [pc, #452]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a70      	ldr	r2, [pc, #448]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b6e      	ldr	r3, [pc, #440]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a6d      	ldr	r2, [pc, #436]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0xd0>
 80018fc:	4b6a      	ldr	r3, [pc, #424]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a69      	ldr	r2, [pc, #420]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 8001902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b67      	ldr	r3, [pc, #412]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a66      	ldr	r2, [pc, #408]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 800190e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fca6 	bl	800126c <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff fca2 	bl	800126c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e2ad      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001936:	4b5c      	ldr	r3, [pc, #368]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0xe0>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fc92 	bl	800126c <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800194c:	f7ff fc8e 	bl	800126c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	; 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e299      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800195e:	4b52      	ldr	r3, [pc, #328]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x108>
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d05a      	beq.n	8001a30 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	2b04      	cmp	r3, #4
 800197e:	d005      	beq.n	800198c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2b0c      	cmp	r3, #12
 8001984:	d119      	bne.n	80019ba <HAL_RCC_OscConfig+0x176>
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d116      	bne.n	80019ba <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198c:	4b46      	ldr	r3, [pc, #280]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_OscConfig+0x160>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e276      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a4:	4b40      	ldr	r3, [pc, #256]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	493d      	ldr	r1, [pc, #244]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b8:	e03a      	b.n	8001a30 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d020      	beq.n	8001a04 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c2:	4b3a      	ldr	r3, [pc, #232]	; (8001aac <HAL_RCC_OscConfig+0x268>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff fc50 	bl	800126c <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d0:	f7ff fc4c 	bl	800126c <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e257      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019e2:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ee:	4b2e      	ldr	r3, [pc, #184]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	492a      	ldr	r1, [pc, #168]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	604b      	str	r3, [r1, #4]
 8001a02:	e015      	b.n	8001a30 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a04:	4b29      	ldr	r3, [pc, #164]	; (8001aac <HAL_RCC_OscConfig+0x268>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7ff fc2f 	bl	800126c <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a12:	f7ff fc2b 	bl	800126c <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e236      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a24:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f0      	bne.n	8001a12 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0310 	and.w	r3, r3, #16
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 80b8 	beq.w	8001bae <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d170      	bne.n	8001b26 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_OscConfig+0x218>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e21a      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1a      	ldr	r2, [r3, #32]
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d921      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 fc7d 	bl	8002370 <RCC_SetFlashLatencyFromMSIRange>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e208      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	4906      	ldr	r1, [pc, #24]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	061b      	lsls	r3, r3, #24
 8001aa0:	4901      	ldr	r1, [pc, #4]	; (8001aa8 <HAL_RCC_OscConfig+0x264>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	604b      	str	r3, [r1, #4]
 8001aa6:	e020      	b.n	8001aea <HAL_RCC_OscConfig+0x2a6>
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab0:	4b99      	ldr	r3, [pc, #612]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	4996      	ldr	r1, [pc, #600]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ac2:	4b95      	ldr	r3, [pc, #596]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	061b      	lsls	r3, r3, #24
 8001ad0:	4991      	ldr	r1, [pc, #580]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 fc48 	bl	8002370 <RCC_SetFlashLatencyFromMSIRange>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e1d3      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	0b5b      	lsrs	r3, r3, #13
 8001af0:	3301      	adds	r3, #1
 8001af2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001afa:	4a87      	ldr	r2, [pc, #540]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001afc:	6892      	ldr	r2, [r2, #8]
 8001afe:	0912      	lsrs	r2, r2, #4
 8001b00:	f002 020f 	and.w	r2, r2, #15
 8001b04:	4985      	ldr	r1, [pc, #532]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b06:	5c8a      	ldrb	r2, [r1, r2]
 8001b08:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b0a:	4a85      	ldr	r2, [pc, #532]	; (8001d20 <HAL_RCC_OscConfig+0x4dc>)
 8001b0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b0e:	4b85      	ldr	r3, [pc, #532]	; (8001d24 <HAL_RCC_OscConfig+0x4e0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fb5e 	bl	80011d4 <HAL_InitTick>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d045      	beq.n	8001bae <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	e1b5      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d029      	beq.n	8001b82 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b2e:	4b7e      	ldr	r3, [pc, #504]	; (8001d28 <HAL_RCC_OscConfig+0x4e4>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff fb9a 	bl	800126c <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b3c:	f7ff fb96 	bl	800126c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e1a1      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b4e:	4b72      	ldr	r3, [pc, #456]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b5a:	4b6f      	ldr	r3, [pc, #444]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	496c      	ldr	r1, [pc, #432]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b6c:	4b6a      	ldr	r3, [pc, #424]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	061b      	lsls	r3, r3, #24
 8001b7a:	4967      	ldr	r1, [pc, #412]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
 8001b80:	e015      	b.n	8001bae <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b82:	4b69      	ldr	r3, [pc, #420]	; (8001d28 <HAL_RCC_OscConfig+0x4e4>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff fb70 	bl	800126c <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b90:	f7ff fb6c 	bl	800126c <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e177      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ba2:	4b5d      	ldr	r3, [pc, #372]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d030      	beq.n	8001c1c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d016      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc2:	4b5a      	ldr	r3, [pc, #360]	; (8001d2c <HAL_RCC_OscConfig+0x4e8>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc8:	f7ff fb50 	bl	800126c <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd0:	f7ff fb4c 	bl	800126c <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e157      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001be2:	4b4d      	ldr	r3, [pc, #308]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x38c>
 8001bee:	e015      	b.n	8001c1c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf0:	4b4e      	ldr	r3, [pc, #312]	; (8001d2c <HAL_RCC_OscConfig+0x4e8>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf6:	f7ff fb39 	bl	800126c <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bfe:	f7ff fb35 	bl	800126c <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e140      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c10:	4b41      	ldr	r3, [pc, #260]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f0      	bne.n	8001bfe <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80b5 	beq.w	8001d94 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2e:	4b3a      	ldr	r3, [pc, #232]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10d      	bne.n	8001c56 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	4b37      	ldr	r3, [pc, #220]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	4a36      	ldr	r2, [pc, #216]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c44:	6253      	str	r3, [r2, #36]	; 0x24
 8001c46:	4b34      	ldr	r3, [pc, #208]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c52:	2301      	movs	r3, #1
 8001c54:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c56:	4b36      	ldr	r3, [pc, #216]	; (8001d30 <HAL_RCC_OscConfig+0x4ec>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d118      	bne.n	8001c94 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c62:	4b33      	ldr	r3, [pc, #204]	; (8001d30 <HAL_RCC_OscConfig+0x4ec>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a32      	ldr	r2, [pc, #200]	; (8001d30 <HAL_RCC_OscConfig+0x4ec>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6e:	f7ff fafd 	bl	800126c <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c76:	f7ff faf9 	bl	800126c <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b64      	cmp	r3, #100	; 0x64
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e104      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c88:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <HAL_RCC_OscConfig+0x4ec>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x466>
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca0:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca6:	6353      	str	r3, [r2, #52]	; 0x34
 8001ca8:	e02d      	b.n	8001d06 <HAL_RCC_OscConfig+0x4c2>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x488>
 8001cb2:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb6:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cbc:	6353      	str	r3, [r2, #52]	; 0x34
 8001cbe:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc2:	4a15      	ldr	r2, [pc, #84]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001cc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cc8:	6353      	str	r3, [r2, #52]	; 0x34
 8001cca:	e01c      	b.n	8001d06 <HAL_RCC_OscConfig+0x4c2>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2b05      	cmp	r3, #5
 8001cd2:	d10c      	bne.n	8001cee <HAL_RCC_OscConfig+0x4aa>
 8001cd4:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd8:	4a0f      	ldr	r2, [pc, #60]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cde:	6353      	str	r3, [r2, #52]	; 0x34
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce4:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cea:	6353      	str	r3, [r2, #52]	; 0x34
 8001cec:	e00b      	b.n	8001d06 <HAL_RCC_OscConfig+0x4c2>
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf2:	4a09      	ldr	r2, [pc, #36]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cf8:	6353      	str	r3, [r2, #52]	; 0x34
 8001cfa:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfe:	4a06      	ldr	r2, [pc, #24]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001d00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d04:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d024      	beq.n	8001d58 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0e:	f7ff faad 	bl	800126c <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d14:	e019      	b.n	8001d4a <HAL_RCC_OscConfig+0x506>
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	080034a4 	.word	0x080034a4
 8001d20:	20000000 	.word	0x20000000
 8001d24:	20000004 	.word	0x20000004
 8001d28:	42470020 	.word	0x42470020
 8001d2c:	42470680 	.word	0x42470680
 8001d30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d34:	f7ff fa9a 	bl	800126c <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e0a3      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d4a:	4b54      	ldr	r3, [pc, #336]	; (8001e9c <HAL_RCC_OscConfig+0x658>)
 8001d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0ee      	beq.n	8001d34 <HAL_RCC_OscConfig+0x4f0>
 8001d56:	e014      	b.n	8001d82 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d58:	f7ff fa88 	bl	800126c <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d60:	f7ff fa84 	bl	800126c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e08d      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d76:	4b49      	ldr	r3, [pc, #292]	; (8001e9c <HAL_RCC_OscConfig+0x658>)
 8001d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1ee      	bne.n	8001d60 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d82:	7ffb      	ldrb	r3, [r7, #31]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d105      	bne.n	8001d94 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d88:	4b44      	ldr	r3, [pc, #272]	; (8001e9c <HAL_RCC_OscConfig+0x658>)
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	4a43      	ldr	r2, [pc, #268]	; (8001e9c <HAL_RCC_OscConfig+0x658>)
 8001d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d92:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d079      	beq.n	8001e90 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	2b0c      	cmp	r3, #12
 8001da0:	d056      	beq.n	8001e50 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d13b      	bne.n	8001e22 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001daa:	4b3d      	ldr	r3, [pc, #244]	; (8001ea0 <HAL_RCC_OscConfig+0x65c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7ff fa5c 	bl	800126c <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db8:	f7ff fa58 	bl	800126c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e063      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dca:	4b34      	ldr	r3, [pc, #208]	; (8001e9c <HAL_RCC_OscConfig+0x658>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dd6:	4b31      	ldr	r3, [pc, #196]	; (8001e9c <HAL_RCC_OscConfig+0x658>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de6:	4319      	orrs	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	430b      	orrs	r3, r1
 8001dee:	492b      	ldr	r1, [pc, #172]	; (8001e9c <HAL_RCC_OscConfig+0x658>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df4:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <HAL_RCC_OscConfig+0x65c>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfa:	f7ff fa37 	bl	800126c <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e02:	f7ff fa33 	bl	800126c <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e03e      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e14:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <HAL_RCC_OscConfig+0x658>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x5be>
 8001e20:	e036      	b.n	8001e90 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e22:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <HAL_RCC_OscConfig+0x65c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7ff fa20 	bl	800126c <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e30:	f7ff fa1c 	bl	800126c <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e027      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e42:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <HAL_RCC_OscConfig+0x658>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x5ec>
 8001e4e:	e01f      	b.n	8001e90 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e01a      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <HAL_RCC_OscConfig+0x658>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d10d      	bne.n	8001e8c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d106      	bne.n	8001e8c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3720      	adds	r7, #32
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	42470060 	.word	0x42470060

08001ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e11a      	b.n	80020ee <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b8f      	ldr	r3, [pc, #572]	; (80020f8 <HAL_RCC_ClockConfig+0x254>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d919      	bls.n	8001efa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d105      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x34>
 8001ecc:	4b8a      	ldr	r3, [pc, #552]	; (80020f8 <HAL_RCC_ClockConfig+0x254>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a89      	ldr	r2, [pc, #548]	; (80020f8 <HAL_RCC_ClockConfig+0x254>)
 8001ed2:	f043 0304 	orr.w	r3, r3, #4
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	4b87      	ldr	r3, [pc, #540]	; (80020f8 <HAL_RCC_ClockConfig+0x254>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 0201 	bic.w	r2, r3, #1
 8001ee0:	4985      	ldr	r1, [pc, #532]	; (80020f8 <HAL_RCC_ClockConfig+0x254>)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee8:	4b83      	ldr	r3, [pc, #524]	; (80020f8 <HAL_RCC_ClockConfig+0x254>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d001      	beq.n	8001efa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e0f9      	b.n	80020ee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d008      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f06:	4b7d      	ldr	r3, [pc, #500]	; (80020fc <HAL_RCC_ClockConfig+0x258>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	497a      	ldr	r1, [pc, #488]	; (80020fc <HAL_RCC_ClockConfig+0x258>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 808e 	beq.w	8002042 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f2e:	4b73      	ldr	r3, [pc, #460]	; (80020fc <HAL_RCC_ClockConfig+0x258>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d121      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e0d7      	b.n	80020ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f46:	4b6d      	ldr	r3, [pc, #436]	; (80020fc <HAL_RCC_ClockConfig+0x258>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d115      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0cb      	b.n	80020ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d107      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f5e:	4b67      	ldr	r3, [pc, #412]	; (80020fc <HAL_RCC_ClockConfig+0x258>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d109      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e0bf      	b.n	80020ee <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f6e:	4b63      	ldr	r3, [pc, #396]	; (80020fc <HAL_RCC_ClockConfig+0x258>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e0b7      	b.n	80020ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f7e:	4b5f      	ldr	r3, [pc, #380]	; (80020fc <HAL_RCC_ClockConfig+0x258>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f023 0203 	bic.w	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	495c      	ldr	r1, [pc, #368]	; (80020fc <HAL_RCC_ClockConfig+0x258>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f90:	f7ff f96c 	bl	800126c <HAL_GetTick>
 8001f94:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d112      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa0:	f7ff f964 	bl	800126c <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e09b      	b.n	80020ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fb6:	4b51      	ldr	r3, [pc, #324]	; (80020fc <HAL_RCC_ClockConfig+0x258>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d1ee      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0xfc>
 8001fc2:	e03e      	b.n	8002042 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d112      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fcc:	e00a      	b.n	8001fe4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fce:	f7ff f94d 	bl	800126c <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e084      	b.n	80020ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fe4:	4b45      	ldr	r3, [pc, #276]	; (80020fc <HAL_RCC_ClockConfig+0x258>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b0c      	cmp	r3, #12
 8001fee:	d1ee      	bne.n	8001fce <HAL_RCC_ClockConfig+0x12a>
 8001ff0:	e027      	b.n	8002042 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d11d      	bne.n	8002036 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffc:	f7ff f936 	bl	800126c <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	; 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e06d      	b.n	80020ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002012:	4b3a      	ldr	r3, [pc, #232]	; (80020fc <HAL_RCC_ClockConfig+0x258>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b04      	cmp	r3, #4
 800201c:	d1ee      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x158>
 800201e:	e010      	b.n	8002042 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002020:	f7ff f924 	bl	800126c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	; 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e05b      	b.n	80020ee <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002036:	4b31      	ldr	r3, [pc, #196]	; (80020fc <HAL_RCC_ClockConfig+0x258>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1ee      	bne.n	8002020 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002042:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <HAL_RCC_ClockConfig+0x254>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d219      	bcs.n	8002084 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d105      	bne.n	8002062 <HAL_RCC_ClockConfig+0x1be>
 8002056:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <HAL_RCC_ClockConfig+0x254>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a27      	ldr	r2, [pc, #156]	; (80020f8 <HAL_RCC_ClockConfig+0x254>)
 800205c:	f043 0304 	orr.w	r3, r3, #4
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <HAL_RCC_ClockConfig+0x254>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 0201 	bic.w	r2, r3, #1
 800206a:	4923      	ldr	r1, [pc, #140]	; (80020f8 <HAL_RCC_ClockConfig+0x254>)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <HAL_RCC_ClockConfig+0x254>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e034      	b.n	80020ee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002090:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <HAL_RCC_ClockConfig+0x258>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4917      	ldr	r1, [pc, #92]	; (80020fc <HAL_RCC_ClockConfig+0x258>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d009      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <HAL_RCC_ClockConfig+0x258>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	490f      	ldr	r1, [pc, #60]	; (80020fc <HAL_RCC_ClockConfig+0x258>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020c2:	f000 f823 	bl	800210c <HAL_RCC_GetSysClockFreq>
 80020c6:	4602      	mov	r2, r0
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <HAL_RCC_ClockConfig+0x258>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	490b      	ldr	r1, [pc, #44]	; (8002100 <HAL_RCC_ClockConfig+0x25c>)
 80020d4:	5ccb      	ldrb	r3, [r1, r3]
 80020d6:	fa22 f303 	lsr.w	r3, r2, r3
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <HAL_RCC_ClockConfig+0x260>)
 80020dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <HAL_RCC_ClockConfig+0x264>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff f876 	bl	80011d4 <HAL_InitTick>
 80020e8:	4603      	mov	r3, r0
 80020ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80020ec:	7afb      	ldrb	r3, [r7, #11]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40023c00 	.word	0x40023c00
 80020fc:	40023800 	.word	0x40023800
 8002100:	080034a4 	.word	0x080034a4
 8002104:	20000000 	.word	0x20000000
 8002108:	20000004 	.word	0x20000004

0800210c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800210c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002110:	b092      	sub	sp, #72	; 0x48
 8002112:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002114:	4b79      	ldr	r3, [pc, #484]	; (80022fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800211a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b0c      	cmp	r3, #12
 8002122:	d00d      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0x34>
 8002124:	2b0c      	cmp	r3, #12
 8002126:	f200 80d5 	bhi.w	80022d4 <HAL_RCC_GetSysClockFreq+0x1c8>
 800212a:	2b04      	cmp	r3, #4
 800212c:	d002      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x28>
 800212e:	2b08      	cmp	r3, #8
 8002130:	d003      	beq.n	800213a <HAL_RCC_GetSysClockFreq+0x2e>
 8002132:	e0cf      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002134:	4b72      	ldr	r3, [pc, #456]	; (8002300 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002136:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002138:	e0da      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800213a:	4b72      	ldr	r3, [pc, #456]	; (8002304 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800213c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800213e:	e0d7      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002142:	0c9b      	lsrs	r3, r3, #18
 8002144:	f003 020f 	and.w	r2, r3, #15
 8002148:	4b6f      	ldr	r3, [pc, #444]	; (8002308 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800214a:	5c9b      	ldrb	r3, [r3, r2]
 800214c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800214e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002150:	0d9b      	lsrs	r3, r3, #22
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	3301      	adds	r3, #1
 8002158:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800215a:	4b68      	ldr	r3, [pc, #416]	; (80022fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d05d      	beq.n	8002222 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002168:	2200      	movs	r2, #0
 800216a:	4618      	mov	r0, r3
 800216c:	4611      	mov	r1, r2
 800216e:	4604      	mov	r4, r0
 8002170:	460d      	mov	r5, r1
 8002172:	4622      	mov	r2, r4
 8002174:	462b      	mov	r3, r5
 8002176:	f04f 0000 	mov.w	r0, #0
 800217a:	f04f 0100 	mov.w	r1, #0
 800217e:	0159      	lsls	r1, r3, #5
 8002180:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002184:	0150      	lsls	r0, r2, #5
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4621      	mov	r1, r4
 800218c:	1a51      	subs	r1, r2, r1
 800218e:	6139      	str	r1, [r7, #16]
 8002190:	4629      	mov	r1, r5
 8002192:	eb63 0301 	sbc.w	r3, r3, r1
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021a4:	4659      	mov	r1, fp
 80021a6:	018b      	lsls	r3, r1, #6
 80021a8:	4651      	mov	r1, sl
 80021aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021ae:	4651      	mov	r1, sl
 80021b0:	018a      	lsls	r2, r1, #6
 80021b2:	46d4      	mov	ip, sl
 80021b4:	ebb2 080c 	subs.w	r8, r2, ip
 80021b8:	4659      	mov	r1, fp
 80021ba:	eb63 0901 	sbc.w	r9, r3, r1
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021d2:	4690      	mov	r8, r2
 80021d4:	4699      	mov	r9, r3
 80021d6:	4623      	mov	r3, r4
 80021d8:	eb18 0303 	adds.w	r3, r8, r3
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	462b      	mov	r3, r5
 80021e0:	eb49 0303 	adc.w	r3, r9, r3
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021f2:	4629      	mov	r1, r5
 80021f4:	024b      	lsls	r3, r1, #9
 80021f6:	4620      	mov	r0, r4
 80021f8:	4629      	mov	r1, r5
 80021fa:	4604      	mov	r4, r0
 80021fc:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002200:	4601      	mov	r1, r0
 8002202:	024a      	lsls	r2, r1, #9
 8002204:	4610      	mov	r0, r2
 8002206:	4619      	mov	r1, r3
 8002208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220a:	2200      	movs	r2, #0
 800220c:	62bb      	str	r3, [r7, #40]	; 0x28
 800220e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002210:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002214:	f7fd ffb2 	bl	800017c <__aeabi_uldivmod>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4613      	mov	r3, r2
 800221e:	647b      	str	r3, [r7, #68]	; 0x44
 8002220:	e055      	b.n	80022ce <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002224:	2200      	movs	r2, #0
 8002226:	623b      	str	r3, [r7, #32]
 8002228:	627a      	str	r2, [r7, #36]	; 0x24
 800222a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800222e:	4642      	mov	r2, r8
 8002230:	464b      	mov	r3, r9
 8002232:	f04f 0000 	mov.w	r0, #0
 8002236:	f04f 0100 	mov.w	r1, #0
 800223a:	0159      	lsls	r1, r3, #5
 800223c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002240:	0150      	lsls	r0, r2, #5
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	46c4      	mov	ip, r8
 8002248:	ebb2 0a0c 	subs.w	sl, r2, ip
 800224c:	4640      	mov	r0, r8
 800224e:	4649      	mov	r1, r9
 8002250:	468c      	mov	ip, r1
 8002252:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	f04f 0300 	mov.w	r3, #0
 800225e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002262:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002266:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800226a:	ebb2 040a 	subs.w	r4, r2, sl
 800226e:	eb63 050b 	sbc.w	r5, r3, fp
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	00eb      	lsls	r3, r5, #3
 800227c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002280:	00e2      	lsls	r2, r4, #3
 8002282:	4614      	mov	r4, r2
 8002284:	461d      	mov	r5, r3
 8002286:	4603      	mov	r3, r0
 8002288:	18e3      	adds	r3, r4, r3
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	460b      	mov	r3, r1
 800228e:	eb45 0303 	adc.w	r3, r5, r3
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022a0:	4629      	mov	r1, r5
 80022a2:	028b      	lsls	r3, r1, #10
 80022a4:	4620      	mov	r0, r4
 80022a6:	4629      	mov	r1, r5
 80022a8:	4604      	mov	r4, r0
 80022aa:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80022ae:	4601      	mov	r1, r0
 80022b0:	028a      	lsls	r2, r1, #10
 80022b2:	4610      	mov	r0, r2
 80022b4:	4619      	mov	r1, r3
 80022b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b8:	2200      	movs	r2, #0
 80022ba:	61bb      	str	r3, [r7, #24]
 80022bc:	61fa      	str	r2, [r7, #28]
 80022be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022c2:	f7fd ff5b 	bl	800017c <__aeabi_uldivmod>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4613      	mov	r3, r2
 80022cc:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80022ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80022d2:	e00d      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80022d4:	4b09      	ldr	r3, [pc, #36]	; (80022fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	0b5b      	lsrs	r3, r3, #13
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80022e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e2:	3301      	adds	r3, #1
 80022e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80022ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3748      	adds	r7, #72	; 0x48
 80022f6:	46bd      	mov	sp, r7
 80022f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	00f42400 	.word	0x00f42400
 8002304:	007a1200 	.word	0x007a1200
 8002308:	08003498 	.word	0x08003498

0800230c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002310:	4b02      	ldr	r3, [pc, #8]	; (800231c <HAL_RCC_GetHCLKFreq+0x10>)
 8002312:	681b      	ldr	r3, [r3, #0]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	20000000 	.word	0x20000000

08002320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002324:	f7ff fff2 	bl	800230c <HAL_RCC_GetHCLKFreq>
 8002328:	4602      	mov	r2, r0
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	4903      	ldr	r1, [pc, #12]	; (8002344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800233c:	4618      	mov	r0, r3
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40023800 	.word	0x40023800
 8002344:	080034b4 	.word	0x080034b4

08002348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800234c:	f7ff ffde 	bl	800230c <HAL_RCC_GetHCLKFreq>
 8002350:	4602      	mov	r2, r0
 8002352:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	0adb      	lsrs	r3, r3, #11
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	4903      	ldr	r1, [pc, #12]	; (800236c <HAL_RCC_GetPCLK2Freq+0x24>)
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40023800 	.word	0x40023800
 800236c:	080034b4 	.word	0x080034b4

08002370 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002370:	b480      	push	{r7}
 8002372:	b087      	sub	sp, #28
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002378:	2300      	movs	r3, #0
 800237a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800237c:	4b29      	ldr	r3, [pc, #164]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d12c      	bne.n	80023e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002394:	4b24      	ldr	r3, [pc, #144]	; (8002428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	e016      	b.n	80023ce <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a0:	4b20      	ldr	r3, [pc, #128]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	4a1f      	ldr	r2, [pc, #124]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80023a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023aa:	6253      	str	r3, [r2, #36]	; 0x24
 80023ac:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80023b8:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80023c0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c2:	4b18      	ldr	r3, [pc, #96]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	4a17      	ldr	r2, [pc, #92]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80023c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023cc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80023d4:	d105      	bne.n	80023e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80023dc:	d101      	bne.n	80023e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80023de:	2301      	movs	r3, #1
 80023e0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d105      	bne.n	80023f4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80023e8:	4b10      	ldr	r3, [pc, #64]	; (800242c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0f      	ldr	r2, [pc, #60]	; (800242c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ee:	f043 0304 	orr.w	r3, r3, #4
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	4b0d      	ldr	r3, [pc, #52]	; (800242c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 0201 	bic.w	r2, r3, #1
 80023fc:	490b      	ldr	r1, [pc, #44]	; (800242c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	429a      	cmp	r2, r3
 8002410:	d001      	beq.n	8002416 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	371c      	adds	r7, #28
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	40007000 	.word	0x40007000
 800242c:	40023c00 	.word	0x40023c00

08002430 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e07b      	b.n	800253a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	2b00      	cmp	r3, #0
 8002448:	d108      	bne.n	800245c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002452:	d009      	beq.n	8002468 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	61da      	str	r2, [r3, #28]
 800245a:	e005      	b.n	8002468 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7fe fd58 	bl	8000f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800249e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ec:	ea42 0103 	orr.w	r1, r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	0c1b      	lsrs	r3, r3, #16
 8002506:	f003 0104 	and.w	r1, r3, #4
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	f003 0210 	and.w	r2, r3, #16
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	69da      	ldr	r2, [r3, #28]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002528:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b088      	sub	sp, #32
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	603b      	str	r3, [r7, #0]
 800254e:	4613      	mov	r3, r2
 8002550:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_SPI_Transmit+0x22>
 8002560:	2302      	movs	r3, #2
 8002562:	e12d      	b.n	80027c0 <HAL_SPI_Transmit+0x27e>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800256c:	f7fe fe7e 	bl	800126c <HAL_GetTick>
 8002570:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002572:	88fb      	ldrh	r3, [r7, #6]
 8002574:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d002      	beq.n	8002588 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002582:	2302      	movs	r3, #2
 8002584:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002586:	e116      	b.n	80027b6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_SPI_Transmit+0x52>
 800258e:	88fb      	ldrh	r3, [r7, #6]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002598:	e10d      	b.n	80027b6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2203      	movs	r2, #3
 800259e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	88fa      	ldrh	r2, [r7, #6]
 80025b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	88fa      	ldrh	r2, [r7, #6]
 80025b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025e0:	d10f      	bne.n	8002602 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002600:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260c:	2b40      	cmp	r3, #64	; 0x40
 800260e:	d007      	beq.n	8002620 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800261e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002628:	d14f      	bne.n	80026ca <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <HAL_SPI_Transmit+0xf6>
 8002632:	8afb      	ldrh	r3, [r7, #22]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d142      	bne.n	80026be <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	881a      	ldrh	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	1c9a      	adds	r2, r3, #2
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002652:	b29b      	uxth	r3, r3
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800265c:	e02f      	b.n	80026be <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b02      	cmp	r3, #2
 800266a:	d112      	bne.n	8002692 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	881a      	ldrh	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	1c9a      	adds	r2, r3, #2
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002690:	e015      	b.n	80026be <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002692:	f7fe fdeb 	bl	800126c <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d803      	bhi.n	80026aa <HAL_SPI_Transmit+0x168>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a8:	d102      	bne.n	80026b0 <HAL_SPI_Transmit+0x16e>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d106      	bne.n	80026be <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80026bc:	e07b      	b.n	80027b6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1ca      	bne.n	800265e <HAL_SPI_Transmit+0x11c>
 80026c8:	e050      	b.n	800276c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <HAL_SPI_Transmit+0x196>
 80026d2:	8afb      	ldrh	r3, [r7, #22]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d144      	bne.n	8002762 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	330c      	adds	r3, #12
 80026e2:	7812      	ldrb	r2, [r2, #0]
 80026e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026fe:	e030      	b.n	8002762 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b02      	cmp	r3, #2
 800270c:	d113      	bne.n	8002736 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	330c      	adds	r3, #12
 8002718:	7812      	ldrb	r2, [r2, #0]
 800271a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	86da      	strh	r2, [r3, #54]	; 0x36
 8002734:	e015      	b.n	8002762 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002736:	f7fe fd99 	bl	800126c <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d803      	bhi.n	800274e <HAL_SPI_Transmit+0x20c>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274c:	d102      	bne.n	8002754 <HAL_SPI_Transmit+0x212>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d106      	bne.n	8002762 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002760:	e029      	b.n	80027b6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002766:	b29b      	uxth	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1c9      	bne.n	8002700 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	6839      	ldr	r1, [r7, #0]
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 fbdf 	bl	8002f34 <SPI_EndRxTxTransaction>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	77fb      	strb	r3, [r7, #31]
 80027ac:	e003      	b.n	80027b6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027be:	7ffb      	ldrb	r3, [r7, #31]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3720      	adds	r7, #32
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d002      	beq.n	80027ee <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80027e8:	2302      	movs	r3, #2
 80027ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027ec:	e0fb      	b.n	80029e6 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027f6:	d112      	bne.n	800281e <HAL_SPI_Receive+0x56>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10e      	bne.n	800281e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2204      	movs	r2, #4
 8002804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002808:	88fa      	ldrh	r2, [r7, #6]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	4613      	mov	r3, r2
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	68b9      	ldr	r1, [r7, #8]
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 f8ef 	bl	80029f8 <HAL_SPI_TransmitReceive>
 800281a:	4603      	mov	r3, r0
 800281c:	e0e8      	b.n	80029f0 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_SPI_Receive+0x64>
 8002828:	2302      	movs	r3, #2
 800282a:	e0e1      	b.n	80029f0 <HAL_SPI_Receive+0x228>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002834:	f7fe fd1a 	bl	800126c <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <HAL_SPI_Receive+0x7e>
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	75fb      	strb	r3, [r7, #23]
    goto error;
 800284a:	e0cc      	b.n	80029e6 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2204      	movs	r2, #4
 8002850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	88fa      	ldrh	r2, [r7, #6]
 8002864:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	88fa      	ldrh	r2, [r7, #6]
 800286a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002892:	d10f      	bne.n	80028b4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028b2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028be:	2b40      	cmp	r3, #64	; 0x40
 80028c0:	d007      	beq.n	80028d2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d16a      	bne.n	80029b0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80028da:	e032      	b.n	8002942 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d115      	bne.n	8002916 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f103 020c 	add.w	r2, r3, #12
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f6:	7812      	ldrb	r2, [r2, #0]
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002914:	e015      	b.n	8002942 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002916:	f7fe fca9 	bl	800126c <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d803      	bhi.n	800292e <HAL_SPI_Receive+0x166>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292c:	d102      	bne.n	8002934 <HAL_SPI_Receive+0x16c>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d106      	bne.n	8002942 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002940:	e051      	b.n	80029e6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1c7      	bne.n	80028dc <HAL_SPI_Receive+0x114>
 800294c:	e035      	b.n	80029ba <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b01      	cmp	r3, #1
 800295a:	d113      	bne.n	8002984 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002966:	b292      	uxth	r2, r2
 8002968:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296e:	1c9a      	adds	r2, r3, #2
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002982:	e015      	b.n	80029b0 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002984:	f7fe fc72 	bl	800126c <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d803      	bhi.n	800299c <HAL_SPI_Receive+0x1d4>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299a:	d102      	bne.n	80029a2 <HAL_SPI_Receive+0x1da>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80029ae:	e01a      	b.n	80029e6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1c9      	bne.n	800294e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	6839      	ldr	r1, [r7, #0]
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 fa52 	bl	8002e68 <SPI_EndRxTransaction>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2220      	movs	r2, #32
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	75fb      	strb	r3, [r7, #23]
 80029dc:	e003      	b.n	80029e6 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08c      	sub	sp, #48	; 0x30
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a06:	2301      	movs	r3, #1
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_SPI_TransmitReceive+0x26>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e198      	b.n	8002d50 <HAL_SPI_TransmitReceive+0x358>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a26:	f7fe fc21 	bl	800126c <HAL_GetTick>
 8002a2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a3c:	887b      	ldrh	r3, [r7, #2]
 8002a3e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d00f      	beq.n	8002a68 <HAL_SPI_TransmitReceive+0x70>
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a4e:	d107      	bne.n	8002a60 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d103      	bne.n	8002a60 <HAL_SPI_TransmitReceive+0x68>
 8002a58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d003      	beq.n	8002a68 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a60:	2302      	movs	r3, #2
 8002a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a66:	e16d      	b.n	8002d44 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_SPI_TransmitReceive+0x82>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <HAL_SPI_TransmitReceive+0x82>
 8002a74:	887b      	ldrh	r3, [r7, #2]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d103      	bne.n	8002a82 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a80:	e160      	b.n	8002d44 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d003      	beq.n	8002a96 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2205      	movs	r2, #5
 8002a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	887a      	ldrh	r2, [r7, #2]
 8002aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	887a      	ldrh	r2, [r7, #2]
 8002aac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	887a      	ldrh	r2, [r7, #2]
 8002ab8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	887a      	ldrh	r2, [r7, #2]
 8002abe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad6:	2b40      	cmp	r3, #64	; 0x40
 8002ad8:	d007      	beq.n	8002aea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ae8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002af2:	d17c      	bne.n	8002bee <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <HAL_SPI_TransmitReceive+0x10a>
 8002afc:	8b7b      	ldrh	r3, [r7, #26]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d16a      	bne.n	8002bd8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	881a      	ldrh	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	1c9a      	adds	r2, r3, #2
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b26:	e057      	b.n	8002bd8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d11b      	bne.n	8002b6e <HAL_SPI_TransmitReceive+0x176>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d016      	beq.n	8002b6e <HAL_SPI_TransmitReceive+0x176>
 8002b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d113      	bne.n	8002b6e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	881a      	ldrh	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	1c9a      	adds	r2, r3, #2
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d119      	bne.n	8002bb0 <HAL_SPI_TransmitReceive+0x1b8>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d014      	beq.n	8002bb0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b90:	b292      	uxth	r2, r2
 8002b92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b98:	1c9a      	adds	r2, r3, #2
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bac:	2301      	movs	r3, #1
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bb0:	f7fe fb5c 	bl	800126c <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d80b      	bhi.n	8002bd8 <HAL_SPI_TransmitReceive+0x1e0>
 8002bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc6:	d007      	beq.n	8002bd8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002bd6:	e0b5      	b.n	8002d44 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1a2      	bne.n	8002b28 <HAL_SPI_TransmitReceive+0x130>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d19d      	bne.n	8002b28 <HAL_SPI_TransmitReceive+0x130>
 8002bec:	e080      	b.n	8002cf0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <HAL_SPI_TransmitReceive+0x204>
 8002bf6:	8b7b      	ldrh	r3, [r7, #26]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d16f      	bne.n	8002cdc <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	330c      	adds	r3, #12
 8002c06:	7812      	ldrb	r2, [r2, #0]
 8002c08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c22:	e05b      	b.n	8002cdc <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d11c      	bne.n	8002c6c <HAL_SPI_TransmitReceive+0x274>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d017      	beq.n	8002c6c <HAL_SPI_TransmitReceive+0x274>
 8002c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d114      	bne.n	8002c6c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	330c      	adds	r3, #12
 8002c4c:	7812      	ldrb	r2, [r2, #0]
 8002c4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d119      	bne.n	8002cae <HAL_SPI_TransmitReceive+0x2b6>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d014      	beq.n	8002cae <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002caa:	2301      	movs	r3, #1
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cae:	f7fe fadd 	bl	800126c <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d803      	bhi.n	8002cc6 <HAL_SPI_TransmitReceive+0x2ce>
 8002cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d102      	bne.n	8002ccc <HAL_SPI_TransmitReceive+0x2d4>
 8002cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d107      	bne.n	8002cdc <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002cda:	e033      	b.n	8002d44 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d19e      	bne.n	8002c24 <HAL_SPI_TransmitReceive+0x22c>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d199      	bne.n	8002c24 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 f91d 	bl	8002f34 <SPI_EndRxTxTransaction>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d006      	beq.n	8002d0e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d0c:	e01a      	b.n	8002d44 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10a      	bne.n	8002d2c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	617b      	str	r3, [r7, #20]
 8002d2a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d3a:	e003      	b.n	8002d44 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3730      	adds	r7, #48	; 0x30
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d68:	f7fe fa80 	bl	800126c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	4413      	add	r3, r2
 8002d76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d78:	f7fe fa78 	bl	800126c <HAL_GetTick>
 8002d7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d7e:	4b39      	ldr	r3, [pc, #228]	; (8002e64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	015b      	lsls	r3, r3, #5
 8002d84:	0d1b      	lsrs	r3, r3, #20
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	fb02 f303 	mul.w	r3, r2, r3
 8002d8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d8e:	e054      	b.n	8002e3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d96:	d050      	beq.n	8002e3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d98:	f7fe fa68 	bl	800126c <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d902      	bls.n	8002dae <SPI_WaitFlagStateUntilTimeout+0x56>
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d13d      	bne.n	8002e2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dc6:	d111      	bne.n	8002dec <SPI_WaitFlagStateUntilTimeout+0x94>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd0:	d004      	beq.n	8002ddc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dda:	d107      	bne.n	8002dec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df4:	d10f      	bne.n	8002e16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e017      	b.n	8002e5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4013      	ands	r3, r2
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	bf0c      	ite	eq
 8002e4a:	2301      	moveq	r3, #1
 8002e4c:	2300      	movne	r3, #0
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	461a      	mov	r2, r3
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d19b      	bne.n	8002d90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3720      	adds	r7, #32
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000000 	.word	0x20000000

08002e68 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e7c:	d111      	bne.n	8002ea2 <SPI_EndRxTransaction+0x3a>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e86:	d004      	beq.n	8002e92 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e90:	d107      	bne.n	8002ea2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ea0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eaa:	d12a      	bne.n	8002f02 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb4:	d012      	beq.n	8002edc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2180      	movs	r1, #128	; 0x80
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f7ff ff49 	bl	8002d58 <SPI_WaitFlagStateUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d02d      	beq.n	8002f28 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	f043 0220 	orr.w	r2, r3, #32
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e026      	b.n	8002f2a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f7ff ff36 	bl	8002d58 <SPI_WaitFlagStateUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d01a      	beq.n	8002f28 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef6:	f043 0220 	orr.w	r2, r3, #32
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e013      	b.n	8002f2a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7ff ff23 	bl	8002d58 <SPI_WaitFlagStateUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1c:	f043 0220 	orr.w	r2, r3, #32
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e000      	b.n	8002f2a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af02      	add	r7, sp, #8
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f40:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <SPI_EndRxTxTransaction+0x7c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1b      	ldr	r2, [pc, #108]	; (8002fb4 <SPI_EndRxTxTransaction+0x80>)
 8002f46:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4a:	0d5b      	lsrs	r3, r3, #21
 8002f4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f50:	fb02 f303 	mul.w	r3, r2, r3
 8002f54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f5e:	d112      	bne.n	8002f86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2200      	movs	r2, #0
 8002f68:	2180      	movs	r1, #128	; 0x80
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f7ff fef4 	bl	8002d58 <SPI_WaitFlagStateUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d016      	beq.n	8002fa4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7a:	f043 0220 	orr.w	r2, r3, #32
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e00f      	b.n	8002fa6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9c:	2b80      	cmp	r3, #128	; 0x80
 8002f9e:	d0f2      	beq.n	8002f86 <SPI_EndRxTxTransaction+0x52>
 8002fa0:	e000      	b.n	8002fa4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002fa2:	bf00      	nop
  }

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000000 	.word	0x20000000
 8002fb4:	165e9f81 	.word	0x165e9f81

08002fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e042      	b.n	8003050 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fe f876 	bl	80010d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2224      	movs	r2, #36	; 0x24
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f92b 	bl	8003258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695a      	ldr	r2, [r3, #20]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	; 0x28
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	4613      	mov	r3, r2
 8003066:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b20      	cmp	r3, #32
 8003076:	d17c      	bne.n	8003172 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_UART_Receive+0x2c>
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e075      	b.n	8003174 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2222      	movs	r2, #34	; 0x22
 8003092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800309c:	f7fe f8e6 	bl	800126c <HAL_GetTick>
 80030a0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	88fa      	ldrh	r2, [r7, #6]
 80030a6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	88fa      	ldrh	r2, [r7, #6]
 80030ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b6:	d108      	bne.n	80030ca <HAL_UART_Receive+0x72>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d104      	bne.n	80030ca <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	e003      	b.n	80030d2 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80030d2:	e043      	b.n	800315c <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2200      	movs	r2, #0
 80030dc:	2120      	movs	r1, #32
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f84c 	bl	800317c <UART_WaitOnFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e042      	b.n	8003174 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10c      	bne.n	800310e <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003100:	b29a      	uxth	r2, r3
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	3302      	adds	r3, #2
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	e01f      	b.n	800314e <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003116:	d007      	beq.n	8003128 <HAL_UART_Receive+0xd0>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10a      	bne.n	8003136 <HAL_UART_Receive+0xde>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d106      	bne.n	8003136 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	b2da      	uxtb	r2, r3
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	701a      	strb	r2, [r3, #0]
 8003134:	e008      	b.n	8003148 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003142:	b2da      	uxtb	r2, r3
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	3301      	adds	r3, #1
 800314c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1b6      	bne.n	80030d4 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	e000      	b.n	8003174 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003172:	2302      	movs	r3, #2
  }
}
 8003174:	4618      	mov	r0, r3
 8003176:	3720      	adds	r7, #32
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b090      	sub	sp, #64	; 0x40
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	4613      	mov	r3, r2
 800318a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800318c:	e050      	b.n	8003230 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003194:	d04c      	beq.n	8003230 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003198:	2b00      	cmp	r3, #0
 800319a:	d007      	beq.n	80031ac <UART_WaitOnFlagUntilTimeout+0x30>
 800319c:	f7fe f866 	bl	800126c <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d241      	bcs.n	8003230 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	330c      	adds	r3, #12
 80031b2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b6:	e853 3f00 	ldrex	r3, [r3]
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	330c      	adds	r3, #12
 80031ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031cc:	637a      	str	r2, [r7, #52]	; 0x34
 80031ce:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031d4:	e841 2300 	strex	r3, r2, [r1]
 80031d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e5      	bne.n	80031ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3314      	adds	r3, #20
 80031e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	e853 3f00 	ldrex	r3, [r3]
 80031ee:	613b      	str	r3, [r7, #16]
   return(result);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f023 0301 	bic.w	r3, r3, #1
 80031f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3314      	adds	r3, #20
 80031fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003200:	623a      	str	r2, [r7, #32]
 8003202:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003204:	69f9      	ldr	r1, [r7, #28]
 8003206:	6a3a      	ldr	r2, [r7, #32]
 8003208:	e841 2300 	strex	r3, r2, [r1]
 800320c:	61bb      	str	r3, [r7, #24]
   return(result);
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1e5      	bne.n	80031e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e00f      	b.n	8003250 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	4013      	ands	r3, r2
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	429a      	cmp	r2, r3
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	429a      	cmp	r2, r3
 800324c:	d09f      	beq.n	800318e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3740      	adds	r7, #64	; 0x40
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	4313      	orrs	r3, r2
 800328c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003298:	f023 030c 	bic.w	r3, r3, #12
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	430b      	orrs	r3, r1
 80032a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699a      	ldr	r2, [r3, #24]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a55      	ldr	r2, [pc, #340]	; (8003418 <UART_SetConfig+0x1c0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d103      	bne.n	80032ce <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032c6:	f7ff f83f 	bl	8002348 <HAL_RCC_GetPCLK2Freq>
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	e002      	b.n	80032d4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032ce:	f7ff f827 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 80032d2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032dc:	d14c      	bne.n	8003378 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	009a      	lsls	r2, r3, #2
 80032e8:	441a      	add	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f4:	4a49      	ldr	r2, [pc, #292]	; (800341c <UART_SetConfig+0x1c4>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	0119      	lsls	r1, r3, #4
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	009a      	lsls	r2, r3, #2
 8003308:	441a      	add	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	fbb2 f2f3 	udiv	r2, r2, r3
 8003314:	4b41      	ldr	r3, [pc, #260]	; (800341c <UART_SetConfig+0x1c4>)
 8003316:	fba3 0302 	umull	r0, r3, r3, r2
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	2064      	movs	r0, #100	; 0x64
 800331e:	fb00 f303 	mul.w	r3, r0, r3
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	3332      	adds	r3, #50	; 0x32
 8003328:	4a3c      	ldr	r2, [pc, #240]	; (800341c <UART_SetConfig+0x1c4>)
 800332a:	fba2 2303 	umull	r2, r3, r2, r3
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003336:	4419      	add	r1, r3
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	009a      	lsls	r2, r3, #2
 8003342:	441a      	add	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	fbb2 f2f3 	udiv	r2, r2, r3
 800334e:	4b33      	ldr	r3, [pc, #204]	; (800341c <UART_SetConfig+0x1c4>)
 8003350:	fba3 0302 	umull	r0, r3, r3, r2
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	2064      	movs	r0, #100	; 0x64
 8003358:	fb00 f303 	mul.w	r3, r0, r3
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	3332      	adds	r3, #50	; 0x32
 8003362:	4a2e      	ldr	r2, [pc, #184]	; (800341c <UART_SetConfig+0x1c4>)
 8003364:	fba2 2303 	umull	r2, r3, r2, r3
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	f003 0207 	and.w	r2, r3, #7
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	440a      	add	r2, r1
 8003374:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003376:	e04a      	b.n	800340e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	009a      	lsls	r2, r3, #2
 8003382:	441a      	add	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	fbb2 f3f3 	udiv	r3, r2, r3
 800338e:	4a23      	ldr	r2, [pc, #140]	; (800341c <UART_SetConfig+0x1c4>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	0119      	lsls	r1, r3, #4
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	009a      	lsls	r2, r3, #2
 80033a2:	441a      	add	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ae:	4b1b      	ldr	r3, [pc, #108]	; (800341c <UART_SetConfig+0x1c4>)
 80033b0:	fba3 0302 	umull	r0, r3, r3, r2
 80033b4:	095b      	lsrs	r3, r3, #5
 80033b6:	2064      	movs	r0, #100	; 0x64
 80033b8:	fb00 f303 	mul.w	r3, r0, r3
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	3332      	adds	r3, #50	; 0x32
 80033c2:	4a16      	ldr	r2, [pc, #88]	; (800341c <UART_SetConfig+0x1c4>)
 80033c4:	fba2 2303 	umull	r2, r3, r2, r3
 80033c8:	095b      	lsrs	r3, r3, #5
 80033ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ce:	4419      	add	r1, r3
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4613      	mov	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	009a      	lsls	r2, r3, #2
 80033da:	441a      	add	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80033e6:	4b0d      	ldr	r3, [pc, #52]	; (800341c <UART_SetConfig+0x1c4>)
 80033e8:	fba3 0302 	umull	r0, r3, r3, r2
 80033ec:	095b      	lsrs	r3, r3, #5
 80033ee:	2064      	movs	r0, #100	; 0x64
 80033f0:	fb00 f303 	mul.w	r3, r0, r3
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	3332      	adds	r3, #50	; 0x32
 80033fa:	4a08      	ldr	r2, [pc, #32]	; (800341c <UART_SetConfig+0x1c4>)
 80033fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003400:	095b      	lsrs	r3, r3, #5
 8003402:	f003 020f 	and.w	r2, r3, #15
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	440a      	add	r2, r1
 800340c:	609a      	str	r2, [r3, #8]
}
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40013800 	.word	0x40013800
 800341c:	51eb851f 	.word	0x51eb851f

08003420 <__libc_init_array>:
 8003420:	b570      	push	{r4, r5, r6, lr}
 8003422:	2600      	movs	r6, #0
 8003424:	4d0c      	ldr	r5, [pc, #48]	; (8003458 <__libc_init_array+0x38>)
 8003426:	4c0d      	ldr	r4, [pc, #52]	; (800345c <__libc_init_array+0x3c>)
 8003428:	1b64      	subs	r4, r4, r5
 800342a:	10a4      	asrs	r4, r4, #2
 800342c:	42a6      	cmp	r6, r4
 800342e:	d109      	bne.n	8003444 <__libc_init_array+0x24>
 8003430:	f000 f822 	bl	8003478 <_init>
 8003434:	2600      	movs	r6, #0
 8003436:	4d0a      	ldr	r5, [pc, #40]	; (8003460 <__libc_init_array+0x40>)
 8003438:	4c0a      	ldr	r4, [pc, #40]	; (8003464 <__libc_init_array+0x44>)
 800343a:	1b64      	subs	r4, r4, r5
 800343c:	10a4      	asrs	r4, r4, #2
 800343e:	42a6      	cmp	r6, r4
 8003440:	d105      	bne.n	800344e <__libc_init_array+0x2e>
 8003442:	bd70      	pop	{r4, r5, r6, pc}
 8003444:	f855 3b04 	ldr.w	r3, [r5], #4
 8003448:	4798      	blx	r3
 800344a:	3601      	adds	r6, #1
 800344c:	e7ee      	b.n	800342c <__libc_init_array+0xc>
 800344e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003452:	4798      	blx	r3
 8003454:	3601      	adds	r6, #1
 8003456:	e7f2      	b.n	800343e <__libc_init_array+0x1e>
 8003458:	080034c4 	.word	0x080034c4
 800345c:	080034c4 	.word	0x080034c4
 8003460:	080034c4 	.word	0x080034c4
 8003464:	080034c8 	.word	0x080034c8

08003468 <memset>:
 8003468:	4603      	mov	r3, r0
 800346a:	4402      	add	r2, r0
 800346c:	4293      	cmp	r3, r2
 800346e:	d100      	bne.n	8003472 <memset+0xa>
 8003470:	4770      	bx	lr
 8003472:	f803 1b01 	strb.w	r1, [r3], #1
 8003476:	e7f9      	b.n	800346c <memset+0x4>

08003478 <_init>:
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	bf00      	nop
 800347c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347e:	bc08      	pop	{r3}
 8003480:	469e      	mov	lr, r3
 8003482:	4770      	bx	lr

08003484 <_fini>:
 8003484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003486:	bf00      	nop
 8003488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348a:	bc08      	pop	{r3}
 800348c:	469e      	mov	lr, r3
 800348e:	4770      	bx	lr
