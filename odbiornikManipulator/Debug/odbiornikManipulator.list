
odbiornikManipulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fa0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080050dc  080050dc  000150dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005108  08005108  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005108  08005108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005110  08005110  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005110  08005110  00015110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005114  08005114  00015114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000010  08005128  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08005128  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e679  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002251  00000000  00000000  0002e6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00030908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db0  00000000  00000000  000317a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cf3  00000000  00000000  00032550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a49  00000000  00000000  00049243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e2b9  00000000  00000000  00059c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7f45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ce4  00000000  00000000  000e7f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	080050c4 	.word	0x080050c4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	080050c4 	.word	0x080050c4

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__gesf2>:
 8000398:	f04f 3cff 	mov.w	ip, #4294967295
 800039c:	e006      	b.n	80003ac <__cmpsf2+0x4>
 800039e:	bf00      	nop

080003a0 <__lesf2>:
 80003a0:	f04f 0c01 	mov.w	ip, #1
 80003a4:	e002      	b.n	80003ac <__cmpsf2+0x4>
 80003a6:	bf00      	nop

080003a8 <__cmpsf2>:
 80003a8:	f04f 0c01 	mov.w	ip, #1
 80003ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80003b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80003b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003bc:	bf18      	it	ne
 80003be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003c2:	d011      	beq.n	80003e8 <__cmpsf2+0x40>
 80003c4:	b001      	add	sp, #4
 80003c6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80003ca:	bf18      	it	ne
 80003cc:	ea90 0f01 	teqne	r0, r1
 80003d0:	bf58      	it	pl
 80003d2:	ebb2 0003 	subspl.w	r0, r2, r3
 80003d6:	bf88      	it	hi
 80003d8:	17c8      	asrhi	r0, r1, #31
 80003da:	bf38      	it	cc
 80003dc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80003e0:	bf18      	it	ne
 80003e2:	f040 0001 	orrne.w	r0, r0, #1
 80003e6:	4770      	bx	lr
 80003e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003ec:	d102      	bne.n	80003f4 <__cmpsf2+0x4c>
 80003ee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80003f2:	d105      	bne.n	8000400 <__cmpsf2+0x58>
 80003f4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80003f8:	d1e4      	bne.n	80003c4 <__cmpsf2+0x1c>
 80003fa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80003fe:	d0e1      	beq.n	80003c4 <__cmpsf2+0x1c>
 8000400:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop

08000408 <__aeabi_cfrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	4608      	mov	r0, r1
 800040c:	4661      	mov	r1, ip
 800040e:	e7ff      	b.n	8000410 <__aeabi_cfcmpeq>

08000410 <__aeabi_cfcmpeq>:
 8000410:	b50f      	push	{r0, r1, r2, r3, lr}
 8000412:	f7ff ffc9 	bl	80003a8 <__cmpsf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	bf48      	it	mi
 800041a:	f110 0f00 	cmnmi.w	r0, #0
 800041e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000420 <__aeabi_fcmpeq>:
 8000420:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000424:	f7ff fff4 	bl	8000410 <__aeabi_cfcmpeq>
 8000428:	bf0c      	ite	eq
 800042a:	2001      	moveq	r0, #1
 800042c:	2000      	movne	r0, #0
 800042e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000432:	bf00      	nop

08000434 <__aeabi_fcmplt>:
 8000434:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000438:	f7ff ffea 	bl	8000410 <__aeabi_cfcmpeq>
 800043c:	bf34      	ite	cc
 800043e:	2001      	movcc	r0, #1
 8000440:	2000      	movcs	r0, #0
 8000442:	f85d fb08 	ldr.w	pc, [sp], #8
 8000446:	bf00      	nop

08000448 <__aeabi_fcmple>:
 8000448:	f84d ed08 	str.w	lr, [sp, #-8]!
 800044c:	f7ff ffe0 	bl	8000410 <__aeabi_cfcmpeq>
 8000450:	bf94      	ite	ls
 8000452:	2001      	movls	r0, #1
 8000454:	2000      	movhi	r0, #0
 8000456:	f85d fb08 	ldr.w	pc, [sp], #8
 800045a:	bf00      	nop

0800045c <__aeabi_fcmpge>:
 800045c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000460:	f7ff ffd2 	bl	8000408 <__aeabi_cfrcmple>
 8000464:	bf94      	ite	ls
 8000466:	2001      	movls	r0, #1
 8000468:	2000      	movhi	r0, #0
 800046a:	f85d fb08 	ldr.w	pc, [sp], #8
 800046e:	bf00      	nop

08000470 <__aeabi_fcmpgt>:
 8000470:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000474:	f7ff ffc8 	bl	8000408 <__aeabi_cfrcmple>
 8000478:	bf34      	ite	cc
 800047a:	2001      	movcc	r0, #1
 800047c:	2000      	movcs	r0, #0
 800047e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000482:	bf00      	nop

08000484 <__aeabi_f2iz>:
 8000484:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000488:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800048c:	d30f      	bcc.n	80004ae <__aeabi_f2iz+0x2a>
 800048e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000492:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000496:	d90d      	bls.n	80004b4 <__aeabi_f2iz+0x30>
 8000498:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800049c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004a0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80004a4:	fa23 f002 	lsr.w	r0, r3, r2
 80004a8:	bf18      	it	ne
 80004aa:	4240      	negne	r0, r0
 80004ac:	4770      	bx	lr
 80004ae:	f04f 0000 	mov.w	r0, #0
 80004b2:	4770      	bx	lr
 80004b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004b8:	d101      	bne.n	80004be <__aeabi_f2iz+0x3a>
 80004ba:	0242      	lsls	r2, r0, #9
 80004bc:	d105      	bne.n	80004ca <__aeabi_f2iz+0x46>
 80004be:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80004c2:	bf08      	it	eq
 80004c4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80004c8:	4770      	bx	lr
 80004ca:	f04f 0000 	mov.w	r0, #0
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_uldivmod>:
 80004d0:	b953      	cbnz	r3, 80004e8 <__aeabi_uldivmod+0x18>
 80004d2:	b94a      	cbnz	r2, 80004e8 <__aeabi_uldivmod+0x18>
 80004d4:	2900      	cmp	r1, #0
 80004d6:	bf08      	it	eq
 80004d8:	2800      	cmpeq	r0, #0
 80004da:	bf1c      	itt	ne
 80004dc:	f04f 31ff 	movne.w	r1, #4294967295
 80004e0:	f04f 30ff 	movne.w	r0, #4294967295
 80004e4:	f000 b976 	b.w	80007d4 <__aeabi_idiv0>
 80004e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004f0:	f000 f806 	bl	8000500 <__udivmoddi4>
 80004f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004fc:	b004      	add	sp, #16
 80004fe:	4770      	bx	lr

08000500 <__udivmoddi4>:
 8000500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000504:	9e08      	ldr	r6, [sp, #32]
 8000506:	460d      	mov	r5, r1
 8000508:	4604      	mov	r4, r0
 800050a:	4688      	mov	r8, r1
 800050c:	2b00      	cmp	r3, #0
 800050e:	d14d      	bne.n	80005ac <__udivmoddi4+0xac>
 8000510:	428a      	cmp	r2, r1
 8000512:	4694      	mov	ip, r2
 8000514:	d968      	bls.n	80005e8 <__udivmoddi4+0xe8>
 8000516:	fab2 f282 	clz	r2, r2
 800051a:	b152      	cbz	r2, 8000532 <__udivmoddi4+0x32>
 800051c:	fa01 f302 	lsl.w	r3, r1, r2
 8000520:	f1c2 0120 	rsb	r1, r2, #32
 8000524:	fa20 f101 	lsr.w	r1, r0, r1
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	ea41 0803 	orr.w	r8, r1, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000536:	fbb8 f7f1 	udiv	r7, r8, r1
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb01 8817 	mls	r8, r1, r7, r8
 8000542:	fb07 f00e 	mul.w	r0, r7, lr
 8000546:	0c23      	lsrs	r3, r4, #16
 8000548:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800054c:	4298      	cmp	r0, r3
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x66>
 8000550:	eb1c 0303 	adds.w	r3, ip, r3
 8000554:	f107 35ff 	add.w	r5, r7, #4294967295
 8000558:	f080 811e 	bcs.w	8000798 <__udivmoddi4+0x298>
 800055c:	4298      	cmp	r0, r3
 800055e:	f240 811b 	bls.w	8000798 <__udivmoddi4+0x298>
 8000562:	3f02      	subs	r7, #2
 8000564:	4463      	add	r3, ip
 8000566:	1a1b      	subs	r3, r3, r0
 8000568:	fbb3 f0f1 	udiv	r0, r3, r1
 800056c:	fb01 3310 	mls	r3, r1, r0, r3
 8000570:	fb00 fe0e 	mul.w	lr, r0, lr
 8000574:	b2a4      	uxth	r4, r4
 8000576:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057a:	45a6      	cmp	lr, r4
 800057c:	d90a      	bls.n	8000594 <__udivmoddi4+0x94>
 800057e:	eb1c 0404 	adds.w	r4, ip, r4
 8000582:	f100 33ff 	add.w	r3, r0, #4294967295
 8000586:	f080 8109 	bcs.w	800079c <__udivmoddi4+0x29c>
 800058a:	45a6      	cmp	lr, r4
 800058c:	f240 8106 	bls.w	800079c <__udivmoddi4+0x29c>
 8000590:	4464      	add	r4, ip
 8000592:	3802      	subs	r0, #2
 8000594:	2100      	movs	r1, #0
 8000596:	eba4 040e 	sub.w	r4, r4, lr
 800059a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800059e:	b11e      	cbz	r6, 80005a8 <__udivmoddi4+0xa8>
 80005a0:	2300      	movs	r3, #0
 80005a2:	40d4      	lsrs	r4, r2
 80005a4:	e9c6 4300 	strd	r4, r3, [r6]
 80005a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0xc2>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	f000 80ee 	beq.w	8000792 <__udivmoddi4+0x292>
 80005b6:	2100      	movs	r1, #0
 80005b8:	e9c6 0500 	strd	r0, r5, [r6]
 80005bc:	4608      	mov	r0, r1
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	fab3 f183 	clz	r1, r3
 80005c6:	2900      	cmp	r1, #0
 80005c8:	d14a      	bne.n	8000660 <__udivmoddi4+0x160>
 80005ca:	42ab      	cmp	r3, r5
 80005cc:	d302      	bcc.n	80005d4 <__udivmoddi4+0xd4>
 80005ce:	4282      	cmp	r2, r0
 80005d0:	f200 80fc 	bhi.w	80007cc <__udivmoddi4+0x2cc>
 80005d4:	1a84      	subs	r4, r0, r2
 80005d6:	eb65 0303 	sbc.w	r3, r5, r3
 80005da:	2001      	movs	r0, #1
 80005dc:	4698      	mov	r8, r3
 80005de:	2e00      	cmp	r6, #0
 80005e0:	d0e2      	beq.n	80005a8 <__udivmoddi4+0xa8>
 80005e2:	e9c6 4800 	strd	r4, r8, [r6]
 80005e6:	e7df      	b.n	80005a8 <__udivmoddi4+0xa8>
 80005e8:	b902      	cbnz	r2, 80005ec <__udivmoddi4+0xec>
 80005ea:	deff      	udf	#255	; 0xff
 80005ec:	fab2 f282 	clz	r2, r2
 80005f0:	2a00      	cmp	r2, #0
 80005f2:	f040 8091 	bne.w	8000718 <__udivmoddi4+0x218>
 80005f6:	eba1 000c 	sub.w	r0, r1, ip
 80005fa:	2101      	movs	r1, #1
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb0 f3f7 	udiv	r3, r0, r7
 8000608:	fb07 0013 	mls	r0, r7, r3, r0
 800060c:	0c25      	lsrs	r5, r4, #16
 800060e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000612:	fb0e f003 	mul.w	r0, lr, r3
 8000616:	42a8      	cmp	r0, r5
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x12c>
 800061a:	eb1c 0505 	adds.w	r5, ip, r5
 800061e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000622:	d202      	bcs.n	800062a <__udivmoddi4+0x12a>
 8000624:	42a8      	cmp	r0, r5
 8000626:	f200 80ce 	bhi.w	80007c6 <__udivmoddi4+0x2c6>
 800062a:	4643      	mov	r3, r8
 800062c:	1a2d      	subs	r5, r5, r0
 800062e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000632:	fb07 5510 	mls	r5, r7, r0, r5
 8000636:	fb0e fe00 	mul.w	lr, lr, r0
 800063a:	b2a4      	uxth	r4, r4
 800063c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000640:	45a6      	cmp	lr, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x156>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f100 35ff 	add.w	r5, r0, #4294967295
 800064c:	d202      	bcs.n	8000654 <__udivmoddi4+0x154>
 800064e:	45a6      	cmp	lr, r4
 8000650:	f200 80b6 	bhi.w	80007c0 <__udivmoddi4+0x2c0>
 8000654:	4628      	mov	r0, r5
 8000656:	eba4 040e 	sub.w	r4, r4, lr
 800065a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800065e:	e79e      	b.n	800059e <__udivmoddi4+0x9e>
 8000660:	f1c1 0720 	rsb	r7, r1, #32
 8000664:	408b      	lsls	r3, r1
 8000666:	fa22 fc07 	lsr.w	ip, r2, r7
 800066a:	ea4c 0c03 	orr.w	ip, ip, r3
 800066e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000672:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000676:	fbba f8f9 	udiv	r8, sl, r9
 800067a:	fa20 f307 	lsr.w	r3, r0, r7
 800067e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000682:	408d      	lsls	r5, r1
 8000684:	fa1f fe8c 	uxth.w	lr, ip
 8000688:	431d      	orrs	r5, r3
 800068a:	fa00 f301 	lsl.w	r3, r0, r1
 800068e:	fb08 f00e 	mul.w	r0, r8, lr
 8000692:	0c2c      	lsrs	r4, r5, #16
 8000694:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000698:	42a0      	cmp	r0, r4
 800069a:	fa02 f201 	lsl.w	r2, r2, r1
 800069e:	d90b      	bls.n	80006b8 <__udivmoddi4+0x1b8>
 80006a0:	eb1c 0404 	adds.w	r4, ip, r4
 80006a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80006a8:	f080 8088 	bcs.w	80007bc <__udivmoddi4+0x2bc>
 80006ac:	42a0      	cmp	r0, r4
 80006ae:	f240 8085 	bls.w	80007bc <__udivmoddi4+0x2bc>
 80006b2:	f1a8 0802 	sub.w	r8, r8, #2
 80006b6:	4464      	add	r4, ip
 80006b8:	1a24      	subs	r4, r4, r0
 80006ba:	fbb4 f0f9 	udiv	r0, r4, r9
 80006be:	fb09 4410 	mls	r4, r9, r0, r4
 80006c2:	fb00 fe0e 	mul.w	lr, r0, lr
 80006c6:	b2ad      	uxth	r5, r5
 80006c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80006cc:	45a6      	cmp	lr, r4
 80006ce:	d908      	bls.n	80006e2 <__udivmoddi4+0x1e2>
 80006d0:	eb1c 0404 	adds.w	r4, ip, r4
 80006d4:	f100 35ff 	add.w	r5, r0, #4294967295
 80006d8:	d26c      	bcs.n	80007b4 <__udivmoddi4+0x2b4>
 80006da:	45a6      	cmp	lr, r4
 80006dc:	d96a      	bls.n	80007b4 <__udivmoddi4+0x2b4>
 80006de:	3802      	subs	r0, #2
 80006e0:	4464      	add	r4, ip
 80006e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006e6:	fba0 9502 	umull	r9, r5, r0, r2
 80006ea:	eba4 040e 	sub.w	r4, r4, lr
 80006ee:	42ac      	cmp	r4, r5
 80006f0:	46c8      	mov	r8, r9
 80006f2:	46ae      	mov	lr, r5
 80006f4:	d356      	bcc.n	80007a4 <__udivmoddi4+0x2a4>
 80006f6:	d053      	beq.n	80007a0 <__udivmoddi4+0x2a0>
 80006f8:	2e00      	cmp	r6, #0
 80006fa:	d069      	beq.n	80007d0 <__udivmoddi4+0x2d0>
 80006fc:	ebb3 0208 	subs.w	r2, r3, r8
 8000700:	eb64 040e 	sbc.w	r4, r4, lr
 8000704:	fa22 f301 	lsr.w	r3, r2, r1
 8000708:	fa04 f707 	lsl.w	r7, r4, r7
 800070c:	431f      	orrs	r7, r3
 800070e:	40cc      	lsrs	r4, r1
 8000710:	e9c6 7400 	strd	r7, r4, [r6]
 8000714:	2100      	movs	r1, #0
 8000716:	e747      	b.n	80005a8 <__udivmoddi4+0xa8>
 8000718:	fa0c fc02 	lsl.w	ip, ip, r2
 800071c:	f1c2 0120 	rsb	r1, r2, #32
 8000720:	fa25 f301 	lsr.w	r3, r5, r1
 8000724:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000728:	fa20 f101 	lsr.w	r1, r0, r1
 800072c:	4095      	lsls	r5, r2
 800072e:	430d      	orrs	r5, r1
 8000730:	fbb3 f1f7 	udiv	r1, r3, r7
 8000734:	fb07 3311 	mls	r3, r7, r1, r3
 8000738:	fa1f fe8c 	uxth.w	lr, ip
 800073c:	0c28      	lsrs	r0, r5, #16
 800073e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000742:	fb01 f30e 	mul.w	r3, r1, lr
 8000746:	4283      	cmp	r3, r0
 8000748:	fa04 f402 	lsl.w	r4, r4, r2
 800074c:	d908      	bls.n	8000760 <__udivmoddi4+0x260>
 800074e:	eb1c 0000 	adds.w	r0, ip, r0
 8000752:	f101 38ff 	add.w	r8, r1, #4294967295
 8000756:	d22f      	bcs.n	80007b8 <__udivmoddi4+0x2b8>
 8000758:	4283      	cmp	r3, r0
 800075a:	d92d      	bls.n	80007b8 <__udivmoddi4+0x2b8>
 800075c:	3902      	subs	r1, #2
 800075e:	4460      	add	r0, ip
 8000760:	1ac0      	subs	r0, r0, r3
 8000762:	fbb0 f3f7 	udiv	r3, r0, r7
 8000766:	fb07 0013 	mls	r0, r7, r3, r0
 800076a:	b2ad      	uxth	r5, r5
 800076c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000770:	fb03 f00e 	mul.w	r0, r3, lr
 8000774:	42a8      	cmp	r0, r5
 8000776:	d908      	bls.n	800078a <__udivmoddi4+0x28a>
 8000778:	eb1c 0505 	adds.w	r5, ip, r5
 800077c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000780:	d216      	bcs.n	80007b0 <__udivmoddi4+0x2b0>
 8000782:	42a8      	cmp	r0, r5
 8000784:	d914      	bls.n	80007b0 <__udivmoddi4+0x2b0>
 8000786:	3b02      	subs	r3, #2
 8000788:	4465      	add	r5, ip
 800078a:	1a28      	subs	r0, r5, r0
 800078c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000790:	e738      	b.n	8000604 <__udivmoddi4+0x104>
 8000792:	4631      	mov	r1, r6
 8000794:	4630      	mov	r0, r6
 8000796:	e707      	b.n	80005a8 <__udivmoddi4+0xa8>
 8000798:	462f      	mov	r7, r5
 800079a:	e6e4      	b.n	8000566 <__udivmoddi4+0x66>
 800079c:	4618      	mov	r0, r3
 800079e:	e6f9      	b.n	8000594 <__udivmoddi4+0x94>
 80007a0:	454b      	cmp	r3, r9
 80007a2:	d2a9      	bcs.n	80006f8 <__udivmoddi4+0x1f8>
 80007a4:	ebb9 0802 	subs.w	r8, r9, r2
 80007a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80007ac:	3801      	subs	r0, #1
 80007ae:	e7a3      	b.n	80006f8 <__udivmoddi4+0x1f8>
 80007b0:	4643      	mov	r3, r8
 80007b2:	e7ea      	b.n	800078a <__udivmoddi4+0x28a>
 80007b4:	4628      	mov	r0, r5
 80007b6:	e794      	b.n	80006e2 <__udivmoddi4+0x1e2>
 80007b8:	4641      	mov	r1, r8
 80007ba:	e7d1      	b.n	8000760 <__udivmoddi4+0x260>
 80007bc:	46d0      	mov	r8, sl
 80007be:	e77b      	b.n	80006b8 <__udivmoddi4+0x1b8>
 80007c0:	4464      	add	r4, ip
 80007c2:	3802      	subs	r0, #2
 80007c4:	e747      	b.n	8000656 <__udivmoddi4+0x156>
 80007c6:	3b02      	subs	r3, #2
 80007c8:	4465      	add	r5, ip
 80007ca:	e72f      	b.n	800062c <__udivmoddi4+0x12c>
 80007cc:	4608      	mov	r0, r1
 80007ce:	e706      	b.n	80005de <__udivmoddi4+0xde>
 80007d0:	4631      	mov	r1, r6
 80007d2:	e6e9      	b.n	80005a8 <__udivmoddi4+0xa8>

080007d4 <__aeabi_idiv0>:
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	4b50      	ldr	r3, [pc, #320]	; (8000930 <MX_GPIO_Init+0x158>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	4a4f      	ldr	r2, [pc, #316]	; (8000930 <MX_GPIO_Init+0x158>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	61d3      	str	r3, [r2, #28]
 80007fa:	4b4d      	ldr	r3, [pc, #308]	; (8000930 <MX_GPIO_Init+0x158>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	4b4a      	ldr	r3, [pc, #296]	; (8000930 <MX_GPIO_Init+0x158>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	4a49      	ldr	r2, [pc, #292]	; (8000930 <MX_GPIO_Init+0x158>)
 800080c:	f043 0320 	orr.w	r3, r3, #32
 8000810:	61d3      	str	r3, [r2, #28]
 8000812:	4b47      	ldr	r3, [pc, #284]	; (8000930 <MX_GPIO_Init+0x158>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	f003 0320 	and.w	r3, r3, #32
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b44      	ldr	r3, [pc, #272]	; (8000930 <MX_GPIO_Init+0x158>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a43      	ldr	r2, [pc, #268]	; (8000930 <MX_GPIO_Init+0x158>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b41      	ldr	r3, [pc, #260]	; (8000930 <MX_GPIO_Init+0x158>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b3e      	ldr	r3, [pc, #248]	; (8000930 <MX_GPIO_Init+0x158>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	4a3d      	ldr	r2, [pc, #244]	; (8000930 <MX_GPIO_Init+0x158>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	61d3      	str	r3, [r2, #28]
 8000842:	4b3b      	ldr	r3, [pc, #236]	; (8000930 <MX_GPIO_Init+0x158>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084e:	4b38      	ldr	r3, [pc, #224]	; (8000930 <MX_GPIO_Init+0x158>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	4a37      	ldr	r2, [pc, #220]	; (8000930 <MX_GPIO_Init+0x158>)
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	61d3      	str	r3, [r2, #28]
 800085a:	4b35      	ldr	r3, [pc, #212]	; (8000930 <MX_GPIO_Init+0x158>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f003 0308 	and.w	r3, r3, #8
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L_D1_Pin|Czlon4_D1_Pin|Czlon3_D2_Pin|Czlon2_D2_Pin
 8000866:	2200      	movs	r2, #0
 8000868:	f241 51e4 	movw	r1, #5604	; 0x15e4
 800086c:	4831      	ldr	r0, [pc, #196]	; (8000934 <MX_GPIO_Init+0x15c>)
 800086e:	f002 f9b7 	bl	8002be0 <HAL_GPIO_WritePin>
                          |Czlon3_D1_Pin|L_D2_Pin|R_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Czlon1_D2_Pin|Czlon2_D1_Pin|Czlon5_D1_Pin
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 8000878:	482f      	ldr	r0, [pc, #188]	; (8000938 <MX_GPIO_Init+0x160>)
 800087a:	f002 f9b1 	bl	8002be0 <HAL_GPIO_WritePin>
                          |Czlon4_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|CSN_Pin|Czlon1_D1_Pin|Czlon5_D2_Pin
 800087e:	2200      	movs	r2, #0
 8000880:	f241 4136 	movw	r1, #5174	; 0x1436
 8000884:	482d      	ldr	r0, [pc, #180]	; (800093c <MX_GPIO_Init+0x164>)
 8000886:	f002 f9ab 	bl	8002be0 <HAL_GPIO_WritePin>
                          |Podstawa_D2_Pin|Podstawa_D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R_D1_GPIO_Port, R_D1_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2104      	movs	r1, #4
 800088e:	482c      	ldr	r0, [pc, #176]	; (8000940 <MX_GPIO_Init+0x168>)
 8000890:	f002 f9a6 	bl	8002be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4822      	ldr	r0, [pc, #136]	; (8000934 <MX_GPIO_Init+0x15c>)
 80008ac:	f002 f808 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = L_D1_Pin|Czlon4_D1_Pin|Czlon3_D2_Pin|Czlon2_D2_Pin
 80008b0:	f241 53e4 	movw	r3, #5604	; 0x15e4
 80008b4:	617b      	str	r3, [r7, #20]
                          |Czlon3_D1_Pin|L_D2_Pin|R_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	481a      	ldr	r0, [pc, #104]	; (8000934 <MX_GPIO_Init+0x15c>)
 80008ca:	f001 fff9 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Czlon1_D2_Pin|Czlon2_D1_Pin|Czlon5_D1_Pin
 80008ce:	f44f 53d9 	mov.w	r3, #6944	; 0x1b20
 80008d2:	617b      	str	r3, [r7, #20]
                          |Czlon4_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_GPIO_Init+0x160>)
 80008e8:	f001 ffea 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin|Czlon1_D1_Pin|Czlon5_D2_Pin
 80008ec:	f241 4336 	movw	r3, #5174	; 0x1436
 80008f0:	617b      	str	r3, [r7, #20]
                          |Podstawa_D2_Pin|Podstawa_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_GPIO_Init+0x164>)
 8000906:	f001 ffdb 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = R_D1_Pin;
 800090a:	2304      	movs	r3, #4
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R_D1_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4807      	ldr	r0, [pc, #28]	; (8000940 <MX_GPIO_Init+0x168>)
 8000922:	f001 ffcd 	bl	80028c0 <HAL_GPIO_Init>

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40020800 	.word	0x40020800
 8000938:	40020000 	.word	0x40020000
 800093c:	40020400 	.word	0x40020400
 8000940:	40020c00 	.word	0x40020c00

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000948:	f001 fe45 	bl	80025d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094c:	f000 f9fa 	bl	8000d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000950:	f7ff ff42 	bl	80007d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000954:	f001 fdac 	bl	80024b0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000958:	f001 fa5c 	bl	8001e14 <MX_SPI2_Init>
  MX_TIM3_Init();
 800095c:	f001 fb32 	bl	8001fc4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000960:	f001 fbba 	bl	80020d8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000964:	f001 fc4c 	bl	8002200 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //nRF initialize and settings

  nRF24_Init(&hspi2);
 8000968:	48a2      	ldr	r0, [pc, #648]	; (8000bf4 <main+0x2b0>)
 800096a:	f001 fa0d 	bl	8001d88 <nRF24_Init>
  nRF24_SetRXAddress(0, "Odb");
 800096e:	49a2      	ldr	r1, [pc, #648]	; (8000bf8 <main+0x2b4>)
 8000970:	2000      	movs	r0, #0
 8000972:	f001 f94e 	bl	8001c12 <nRF24_SetRXAddress>
  nRF24_SetTXAddress("Nad");
 8000976:	48a1      	ldr	r0, [pc, #644]	; (8000bfc <main+0x2b8>)
 8000978:	f001 f984 	bl	8001c84 <nRF24_SetTXAddress>
  nRF24_RX_Mode();
 800097c:	f000 ff98 	bl	80018b0 <nRF24_RX_Mode>

  //Set timer 2 to PWM function

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000980:	2100      	movs	r1, #0
 8000982:	489f      	ldr	r0, [pc, #636]	; (8000c00 <main+0x2bc>)
 8000984:	f003 fda0 	bl	80044c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000988:	2104      	movs	r1, #4
 800098a:	489d      	ldr	r0, [pc, #628]	; (8000c00 <main+0x2bc>)
 800098c:	f003 fd9c 	bl	80044c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000990:	2108      	movs	r1, #8
 8000992:	489b      	ldr	r0, [pc, #620]	; (8000c00 <main+0x2bc>)
 8000994:	f003 fd98 	bl	80044c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000998:	210c      	movs	r1, #12
 800099a:	4899      	ldr	r0, [pc, #612]	; (8000c00 <main+0x2bc>)
 800099c:	f003 fd94 	bl	80044c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80009a0:	2100      	movs	r1, #0
 80009a2:	4898      	ldr	r0, [pc, #608]	; (8000c04 <main+0x2c0>)
 80009a4:	f003 fd90 	bl	80044c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80009a8:	2104      	movs	r1, #4
 80009aa:	4896      	ldr	r0, [pc, #600]	; (8000c04 <main+0x2c0>)
 80009ac:	f003 fd8c 	bl	80044c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80009b0:	2108      	movs	r1, #8
 80009b2:	4894      	ldr	r0, [pc, #592]	; (8000c04 <main+0x2c0>)
 80009b4:	f003 fd88 	bl	80044c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80009b8:	2104      	movs	r1, #4
 80009ba:	4893      	ldr	r0, [pc, #588]	; (8000c08 <main+0x2c4>)
 80009bc:	f003 fd84 	bl	80044c8 <HAL_TIM_PWM_Start>
  time = HAL_GetTick();
 80009c0:	f001 fe6e 	bl	80026a0 <HAL_GetTick>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4a91      	ldr	r2, [pc, #580]	; (8000c0c <main+0x2c8>)
 80009c8:	6013      	str	r3, [r2, #0]
  timereset = HAL_GetTick();
 80009ca:	f001 fe69 	bl	80026a0 <HAL_GetTick>
 80009ce:	4603      	mov	r3, r0
 80009d0:	4a8f      	ldr	r2, [pc, #572]	; (8000c10 <main+0x2cc>)
 80009d2:	6013      	str	r3, [r2, #0]
  stoppodst();
 80009d4:	f000 fa9c 	bl	8000f10 <stoppodst>
  stopczlon5();
 80009d8:	f000 fbd0 	bl	800117c <stopczlon5>
  stopczlon1();
 80009dc:	f000 fad4 	bl	8000f88 <stopczlon1>
  stopczlon2();
 80009e0:	f000 fb12 	bl	8001008 <stopczlon2>
  stopczlon3();
 80009e4:	f000 fb4c 	bl	8001080 <stopczlon3>
  stopczlon4();
 80009e8:	f000 fb88 	bl	80010fc <stopczlon4>
  stopLmotorF();
 80009ec:	f000 fc02 	bl	80011f4 <stopLmotorF>
  stopRmotorF();
 80009f0:	f000 fc3e 	bl	8001270 <stopRmotorF>
  {


	  //Check if there is receive message

	  if(nRF24_RXAvailible())
 80009f4:	f001 f9a8 	bl	8001d48 <nRF24_RXAvailible>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d019      	beq.n	8000a32 <main+0xee>
	  	  	  {
		  	  //if working blink diode once per second
		  	  	 if (HAL_GetTick()-time >1000)
 80009fe:	f001 fe4f 	bl	80026a0 <HAL_GetTick>
 8000a02:	4602      	mov	r2, r0
 8000a04:	4b81      	ldr	r3, [pc, #516]	; (8000c0c <main+0x2c8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a0e:	d908      	bls.n	8000a22 <main+0xde>
		  	  	 {
		  	  		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a10:	2120      	movs	r1, #32
 8000a12:	4880      	ldr	r0, [pc, #512]	; (8000c14 <main+0x2d0>)
 8000a14:	f002 f8fc 	bl	8002c10 <HAL_GPIO_TogglePin>
		  	  		time = HAL_GetTick();
 8000a18:	f001 fe42 	bl	80026a0 <HAL_GetTick>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4a7b      	ldr	r2, [pc, #492]	; (8000c0c <main+0x2c8>)
 8000a20:	6013      	str	r3, [r2, #0]
		  	  	 }
		  	  	 //read received data and save to nrfdata variable
	  	  		 nRF24_ReadRXPaylaod(nrfdata);
 8000a22:	487d      	ldr	r0, [pc, #500]	; (8000c18 <main+0x2d4>)
 8000a24:	f001 f974 	bl	8001d10 <nRF24_ReadRXPaylaod>
	  	  		 timereset = HAL_GetTick();
 8000a28:	f001 fe3a 	bl	80026a0 <HAL_GetTick>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4a78      	ldr	r2, [pc, #480]	; (8000c10 <main+0x2cc>)
 8000a30:	6013      	str	r3, [r2, #0]

	  	  	  }
	  //if there is no signal restart nRF24 and stop motor
	  if(HAL_GetTick()-timereset > 500)
 8000a32:	f001 fe35 	bl	80026a0 <HAL_GetTick>
 8000a36:	4602      	mov	r2, r0
 8000a38:	4b75      	ldr	r3, [pc, #468]	; (8000c10 <main+0x2cc>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a42:	f240 80f1 	bls.w	8000c28 <main+0x2e4>
	  {
		  nRF24_Init(&hspi2);
 8000a46:	486b      	ldr	r0, [pc, #428]	; (8000bf4 <main+0x2b0>)
 8000a48:	f001 f99e 	bl	8001d88 <nRF24_Init>
		  nRF24_SetRXAddress(0, "Odb");
 8000a4c:	496a      	ldr	r1, [pc, #424]	; (8000bf8 <main+0x2b4>)
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f001 f8df 	bl	8001c12 <nRF24_SetRXAddress>
		  nRF24_SetTXAddress("Nad");
 8000a54:	4869      	ldr	r0, [pc, #420]	; (8000bfc <main+0x2b8>)
 8000a56:	f001 f915 	bl	8001c84 <nRF24_SetTXAddress>
		  nRF24_RX_Mode();
 8000a5a:	f000 ff29 	bl	80018b0 <nRF24_RX_Mode>
		  stoppodst();
 8000a5e:	f000 fa57 	bl	8000f10 <stoppodst>
		  stopczlon5();
 8000a62:	f000 fb8b 	bl	800117c <stopczlon5>
		  stopczlon1();
 8000a66:	f000 fa8f 	bl	8000f88 <stopczlon1>
		  stopczlon2();
 8000a6a:	f000 facd 	bl	8001008 <stopczlon2>
		  stopczlon3();
 8000a6e:	f000 fb07 	bl	8001080 <stopczlon3>
		  stopczlon4();
 8000a72:	f000 fb43 	bl	80010fc <stopczlon4>
//		  stopLmotorF();
//		  stopRmotorF();

		  	 			if (0 > pwmRight)
 8000a76:	4b69      	ldr	r3, [pc, #420]	; (8000c1c <main+0x2d8>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f04f 0100 	mov.w	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fcd8 	bl	8000434 <__aeabi_fcmplt>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d00c      	beq.n	8000aa4 <main+0x160>
		  	 			{
		  	 				pwmRight = pwmRight + step;
 8000a8a:	4b64      	ldr	r3, [pc, #400]	; (8000c1c <main+0x2d8>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a64      	ldr	r2, [pc, #400]	; (8000c20 <main+0x2dc>)
 8000a90:	6812      	ldr	r2, [r2, #0]
 8000a92:	4611      	mov	r1, r2
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fb77 	bl	8000188 <__addsf3>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b5f      	ldr	r3, [pc, #380]	; (8000c1c <main+0x2d8>)
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	e015      	b.n	8000ad0 <main+0x18c>
		  	 			}
		  	 			else if (0 < pwmRight)
 8000aa4:	4b5d      	ldr	r3, [pc, #372]	; (8000c1c <main+0x2d8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f04f 0100 	mov.w	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fcdf 	bl	8000470 <__aeabi_fcmpgt>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d00b      	beq.n	8000ad0 <main+0x18c>
		  	 			{
		  	 				pwmRight = pwmRight - step;
 8000ab8:	4b58      	ldr	r3, [pc, #352]	; (8000c1c <main+0x2d8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a58      	ldr	r2, [pc, #352]	; (8000c20 <main+0x2dc>)
 8000abe:	6812      	ldr	r2, [r2, #0]
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fb5e 	bl	8000184 <__aeabi_fsub>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	461a      	mov	r2, r3
 8000acc:	4b53      	ldr	r3, [pc, #332]	; (8000c1c <main+0x2d8>)
 8000ace:	601a      	str	r2, [r3, #0]
		  	 			}
		  	 			if (pwmRight > 0)
 8000ad0:	4b52      	ldr	r3, [pc, #328]	; (8000c1c <main+0x2d8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f04f 0100 	mov.w	r1, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fcc9 	bl	8000470 <__aeabi_fcmpgt>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d00d      	beq.n	8000b00 <main+0x1bc>
		  	 				{
		  	 					RmotorF();
 8000ae4:	f000 fb9c 	bl	8001220 <RmotorF>
		  	 					PWMval(6, (int)pwmRight);
 8000ae8:	4b4c      	ldr	r3, [pc, #304]	; (8000c1c <main+0x2d8>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fcc9 	bl	8000484 <__aeabi_f2iz>
 8000af2:	4603      	mov	r3, r0
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	4619      	mov	r1, r3
 8000af8:	2006      	movs	r0, #6
 8000afa:	f000 f997 	bl	8000e2c <PWMval>
 8000afe:	e018      	b.n	8000b32 <main+0x1ee>
		  	 				}
		  	 			else if (pwmRight < 0)
 8000b00:	4b46      	ldr	r3, [pc, #280]	; (8000c1c <main+0x2d8>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f04f 0100 	mov.w	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fc93 	bl	8000434 <__aeabi_fcmplt>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d00e      	beq.n	8000b32 <main+0x1ee>
		  	 			{
		  	 				RmotorB();
 8000b14:	f000 fb98 	bl	8001248 <RmotorB>
		  	 				PWMval(6, ((int)pwmRight)*-1);
 8000b18:	4b40      	ldr	r3, [pc, #256]	; (8000c1c <main+0x2d8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fcb1 	bl	8000484 <__aeabi_f2iz>
 8000b22:	4603      	mov	r3, r0
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	425b      	negs	r3, r3
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	2006      	movs	r0, #6
 8000b2e:	f000 f97d 	bl	8000e2c <PWMval>
		  	 			}

		  	 					if (0 > pwmLeft)
 8000b32:	4b3c      	ldr	r3, [pc, #240]	; (8000c24 <main+0x2e0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f04f 0100 	mov.w	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fc7a 	bl	8000434 <__aeabi_fcmplt>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d00c      	beq.n	8000b60 <main+0x21c>
		  	 						{
		  	 							pwmLeft = pwmLeft+step;
 8000b46:	4b37      	ldr	r3, [pc, #220]	; (8000c24 <main+0x2e0>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a35      	ldr	r2, [pc, #212]	; (8000c20 <main+0x2dc>)
 8000b4c:	6812      	ldr	r2, [r2, #0]
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fb19 	bl	8000188 <__addsf3>
 8000b56:	4603      	mov	r3, r0
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <main+0x2e0>)
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	e015      	b.n	8000b8c <main+0x248>
		  	 						}
		  	 						else if (0 < pwmLeft)
 8000b60:	4b30      	ldr	r3, [pc, #192]	; (8000c24 <main+0x2e0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f04f 0100 	mov.w	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fc81 	bl	8000470 <__aeabi_fcmpgt>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00b      	beq.n	8000b8c <main+0x248>
		  	 						{
		  	 							pwmLeft = pwmLeft-step;
 8000b74:	4b2b      	ldr	r3, [pc, #172]	; (8000c24 <main+0x2e0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a29      	ldr	r2, [pc, #164]	; (8000c20 <main+0x2dc>)
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fb00 	bl	8000184 <__aeabi_fsub>
 8000b84:	4603      	mov	r3, r0
 8000b86:	461a      	mov	r2, r3
 8000b88:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <main+0x2e0>)
 8000b8a:	601a      	str	r2, [r3, #0]
		  	 						}
		  	 						if (pwmLeft > 0)
 8000b8c:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <main+0x2e0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f04f 0100 	mov.w	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fc6b 	bl	8000470 <__aeabi_fcmpgt>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d00d      	beq.n	8000bbc <main+0x278>
		  	 						{
		  	 							LmotorF();
 8000ba0:	f000 fb04 	bl	80011ac <LmotorF>
		  	 							PWMval(7, (int)pwmLeft);
 8000ba4:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <main+0x2e0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fc6b 	bl	8000484 <__aeabi_f2iz>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	2007      	movs	r0, #7
 8000bb6:	f000 f939 	bl	8000e2c <PWMval>
 8000bba:	e71b      	b.n	80009f4 <main+0xb0>
		  	 						}
		  	 						else if (pwmLeft < 0)
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <main+0x2e0>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f04f 0100 	mov.w	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fc35 	bl	8000434 <__aeabi_fcmplt>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f000 80b6 	beq.w	8000d3e <main+0x3fa>
		  	 						{
		  	 							LmotorB();
 8000bd2:	f000 fafd 	bl	80011d0 <LmotorB>
		  	 							PWMval(7, ((int)pwmLeft)*-1);
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <main+0x2e0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fc52 	bl	8000484 <__aeabi_f2iz>
 8000be0:	4603      	mov	r3, r0
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	425b      	negs	r3, r3
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	4619      	mov	r1, r3
 8000bea:	2007      	movs	r0, #7
 8000bec:	f000 f91e 	bl	8000e2c <PWMval>
 8000bf0:	e700      	b.n	80009f4 <main+0xb0>
 8000bf2:	bf00      	nop
 8000bf4:	2000006c 	.word	0x2000006c
 8000bf8:	080050dc 	.word	0x080050dc
 8000bfc:	080050e0 	.word	0x080050e0
 8000c00:	20000104 	.word	0x20000104
 8000c04:	200000c4 	.word	0x200000c4
 8000c08:	20000144 	.word	0x20000144
 8000c0c:	2000005c 	.word	0x2000005c
 8000c10:	20000060 	.word	0x20000060
 8000c14:	40020000 	.word	0x40020000
 8000c18:	2000002c 	.word	0x2000002c
 8000c1c:	20000054 	.word	0x20000054
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000058 	.word	0x20000058
		  	 						}



	  }
	  else if (nrfdata[14] == 34 && (nrfdata[0] == 48 || nrfdata[0] == 49) &&
 8000c28:	4b45      	ldr	r3, [pc, #276]	; (8000d40 <main+0x3fc>)
 8000c2a:	7b9b      	ldrb	r3, [r3, #14]
 8000c2c:	2b22      	cmp	r3, #34	; 0x22
 8000c2e:	f47f aee1 	bne.w	80009f4 <main+0xb0>
 8000c32:	4b43      	ldr	r3, [pc, #268]	; (8000d40 <main+0x3fc>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b30      	cmp	r3, #48	; 0x30
 8000c38:	d004      	beq.n	8000c44 <main+0x300>
 8000c3a:	4b41      	ldr	r3, [pc, #260]	; (8000d40 <main+0x3fc>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b31      	cmp	r3, #49	; 0x31
 8000c40:	f47f aed8 	bne.w	80009f4 <main+0xb0>
			  (nrfdata[1] == 50 || nrfdata[1] == 48) && (nrfdata[2] == 51 || nrfdata[2] == 48 || nrfdata[2] == 52 ) &&
 8000c44:	4b3e      	ldr	r3, [pc, #248]	; (8000d40 <main+0x3fc>)
 8000c46:	785b      	ldrb	r3, [r3, #1]
	  else if (nrfdata[14] == 34 && (nrfdata[0] == 48 || nrfdata[0] == 49) &&
 8000c48:	2b32      	cmp	r3, #50	; 0x32
 8000c4a:	d004      	beq.n	8000c56 <main+0x312>
			  (nrfdata[1] == 50 || nrfdata[1] == 48) && (nrfdata[2] == 51 || nrfdata[2] == 48 || nrfdata[2] == 52 ) &&
 8000c4c:	4b3c      	ldr	r3, [pc, #240]	; (8000d40 <main+0x3fc>)
 8000c4e:	785b      	ldrb	r3, [r3, #1]
 8000c50:	2b30      	cmp	r3, #48	; 0x30
 8000c52:	f47f aecf 	bne.w	80009f4 <main+0xb0>
 8000c56:	4b3a      	ldr	r3, [pc, #232]	; (8000d40 <main+0x3fc>)
 8000c58:	789b      	ldrb	r3, [r3, #2]
 8000c5a:	2b33      	cmp	r3, #51	; 0x33
 8000c5c:	d008      	beq.n	8000c70 <main+0x32c>
 8000c5e:	4b38      	ldr	r3, [pc, #224]	; (8000d40 <main+0x3fc>)
 8000c60:	789b      	ldrb	r3, [r3, #2]
 8000c62:	2b30      	cmp	r3, #48	; 0x30
 8000c64:	d004      	beq.n	8000c70 <main+0x32c>
 8000c66:	4b36      	ldr	r3, [pc, #216]	; (8000d40 <main+0x3fc>)
 8000c68:	789b      	ldrb	r3, [r3, #2]
 8000c6a:	2b34      	cmp	r3, #52	; 0x34
 8000c6c:	f47f aec2 	bne.w	80009f4 <main+0xb0>
			  (nrfdata[3] == 53 || nrfdata[3] == 48 || nrfdata[3] == 54) && (nrfdata[4] == 55 || nrfdata[4] == 48 || nrfdata[4] == 56) &&
 8000c70:	4b33      	ldr	r3, [pc, #204]	; (8000d40 <main+0x3fc>)
 8000c72:	78db      	ldrb	r3, [r3, #3]
			  (nrfdata[1] == 50 || nrfdata[1] == 48) && (nrfdata[2] == 51 || nrfdata[2] == 48 || nrfdata[2] == 52 ) &&
 8000c74:	2b35      	cmp	r3, #53	; 0x35
 8000c76:	d008      	beq.n	8000c8a <main+0x346>
			  (nrfdata[3] == 53 || nrfdata[3] == 48 || nrfdata[3] == 54) && (nrfdata[4] == 55 || nrfdata[4] == 48 || nrfdata[4] == 56) &&
 8000c78:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <main+0x3fc>)
 8000c7a:	78db      	ldrb	r3, [r3, #3]
 8000c7c:	2b30      	cmp	r3, #48	; 0x30
 8000c7e:	d004      	beq.n	8000c8a <main+0x346>
 8000c80:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <main+0x3fc>)
 8000c82:	78db      	ldrb	r3, [r3, #3]
 8000c84:	2b36      	cmp	r3, #54	; 0x36
 8000c86:	f47f aeb5 	bne.w	80009f4 <main+0xb0>
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <main+0x3fc>)
 8000c8c:	791b      	ldrb	r3, [r3, #4]
 8000c8e:	2b37      	cmp	r3, #55	; 0x37
 8000c90:	d008      	beq.n	8000ca4 <main+0x360>
 8000c92:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <main+0x3fc>)
 8000c94:	791b      	ldrb	r3, [r3, #4]
 8000c96:	2b30      	cmp	r3, #48	; 0x30
 8000c98:	d004      	beq.n	8000ca4 <main+0x360>
 8000c9a:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <main+0x3fc>)
 8000c9c:	791b      	ldrb	r3, [r3, #4]
 8000c9e:	2b38      	cmp	r3, #56	; 0x38
 8000ca0:	f47f aea8 	bne.w	80009f4 <main+0xb0>
			  (nrfdata[5] == 57 || nrfdata[5] == 48 || nrfdata[5] == 58) && (nrfdata[8] == 59 || nrfdata[8] == 61 || nrfdata[8] == 60) &&
 8000ca4:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <main+0x3fc>)
 8000ca6:	795b      	ldrb	r3, [r3, #5]
			  (nrfdata[3] == 53 || nrfdata[3] == 48 || nrfdata[3] == 54) && (nrfdata[4] == 55 || nrfdata[4] == 48 || nrfdata[4] == 56) &&
 8000ca8:	2b39      	cmp	r3, #57	; 0x39
 8000caa:	d008      	beq.n	8000cbe <main+0x37a>
			  (nrfdata[5] == 57 || nrfdata[5] == 48 || nrfdata[5] == 58) && (nrfdata[8] == 59 || nrfdata[8] == 61 || nrfdata[8] == 60) &&
 8000cac:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <main+0x3fc>)
 8000cae:	795b      	ldrb	r3, [r3, #5]
 8000cb0:	2b30      	cmp	r3, #48	; 0x30
 8000cb2:	d004      	beq.n	8000cbe <main+0x37a>
 8000cb4:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <main+0x3fc>)
 8000cb6:	795b      	ldrb	r3, [r3, #5]
 8000cb8:	2b3a      	cmp	r3, #58	; 0x3a
 8000cba:	f47f ae9b 	bne.w	80009f4 <main+0xb0>
 8000cbe:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <main+0x3fc>)
 8000cc0:	7a1b      	ldrb	r3, [r3, #8]
 8000cc2:	2b3b      	cmp	r3, #59	; 0x3b
 8000cc4:	d008      	beq.n	8000cd8 <main+0x394>
 8000cc6:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <main+0x3fc>)
 8000cc8:	7a1b      	ldrb	r3, [r3, #8]
 8000cca:	2b3d      	cmp	r3, #61	; 0x3d
 8000ccc:	d004      	beq.n	8000cd8 <main+0x394>
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <main+0x3fc>)
 8000cd0:	7a1b      	ldrb	r3, [r3, #8]
 8000cd2:	2b3c      	cmp	r3, #60	; 0x3c
 8000cd4:	f47f ae8e 	bne.w	80009f4 <main+0xb0>
			  (nrfdata[9] == 64 || nrfdata[9] == 62 || nrfdata[9] == 63)&&
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <main+0x3fc>)
 8000cda:	7a5b      	ldrb	r3, [r3, #9]
			  (nrfdata[5] == 57 || nrfdata[5] == 48 || nrfdata[5] == 58) && (nrfdata[8] == 59 || nrfdata[8] == 61 || nrfdata[8] == 60) &&
 8000cdc:	2b40      	cmp	r3, #64	; 0x40
 8000cde:	d008      	beq.n	8000cf2 <main+0x3ae>
			  (nrfdata[9] == 64 || nrfdata[9] == 62 || nrfdata[9] == 63)&&
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <main+0x3fc>)
 8000ce2:	7a5b      	ldrb	r3, [r3, #9]
 8000ce4:	2b3e      	cmp	r3, #62	; 0x3e
 8000ce6:	d004      	beq.n	8000cf2 <main+0x3ae>
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <main+0x3fc>)
 8000cea:	7a5b      	ldrb	r3, [r3, #9]
 8000cec:	2b3f      	cmp	r3, #63	; 0x3f
 8000cee:	f47f ae81 	bne.w	80009f4 <main+0xb0>


			  (nrfdata[6] >= 32 && nrfdata[6] <= 127)&&
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <main+0x3fc>)
 8000cf4:	799b      	ldrb	r3, [r3, #6]
			  (nrfdata[9] == 64 || nrfdata[9] == 62 || nrfdata[9] == 63)&&
 8000cf6:	2b1f      	cmp	r3, #31
 8000cf8:	f67f ae7c 	bls.w	80009f4 <main+0xb0>
			  (nrfdata[6] >= 32 && nrfdata[6] <= 127)&&
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <main+0x3fc>)
 8000cfe:	799b      	ldrb	r3, [r3, #6]
 8000d00:	b25b      	sxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f6ff ae76 	blt.w	80009f4 <main+0xb0>
			  (nrfdata[7] >= 32 && nrfdata[7] <= 127)
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <main+0x3fc>)
 8000d0a:	79db      	ldrb	r3, [r3, #7]
			  (nrfdata[6] >= 32 && nrfdata[6] <= 127)&&
 8000d0c:	2b1f      	cmp	r3, #31
 8000d0e:	f67f ae71 	bls.w	80009f4 <main+0xb0>
			  (nrfdata[7] >= 32 && nrfdata[7] <= 127)
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <main+0x3fc>)
 8000d14:	79db      	ldrb	r3, [r3, #7]
 8000d16:	b25b      	sxtb	r3, r3
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f6ff ae6b 	blt.w	80009f4 <main+0xb0>

			  )
	  {
		  	// triggergripper();
		  	 rightside();
 8000d1e:	f000 fabf 	bl	80012a0 <rightside>
		  	 leftside();
 8000d22:	f000 fb4f 	bl	80013c4 <leftside>
		  	 motor5control();
 8000d26:	f000 fca7 	bl	8001678 <motor5control>
	 		 motor4control();
 8000d2a:	f000 fc7d 	bl	8001628 <motor4control>
	 		 motor3control();
 8000d2e:	f000 fc53 	bl	80015d8 <motor3control>
	 		 motor2control();
 8000d32:	f000 fc29 	bl	8001588 <motor2control>
	 		 motor1control();
 8000d36:	f000 fbff 	bl	8001538 <motor1control>
	 		 motor0control();
 8000d3a:	f000 fbd5 	bl	80014e8 <motor0control>
	  if(nRF24_RXAvailible())
 8000d3e:	e659      	b.n	80009f4 <main+0xb0>
 8000d40:	2000002c 	.word	0x2000002c

08000d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b092      	sub	sp, #72	; 0x48
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	2234      	movs	r2, #52	; 0x34
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f004 f9ae 	bl	80050b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d58:	463b      	mov	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <SystemClock_Config+0x98>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000d6e:	4a1b      	ldr	r2, [pc, #108]	; (8000ddc <SystemClock_Config+0x98>)
 8000d70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d74:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d76:	2302      	movs	r3, #2
 8000d78:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d7e:	2310      	movs	r3, #16
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d82:	2302      	movs	r3, #2
 8000d84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d86:	2300      	movs	r3, #0
 8000d88:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000d8a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000d90:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000d94:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 ff52 	bl	8002c44 <HAL_RCC_OscConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000da6:	f000 fc8f 	bl	80016c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000daa:	230f      	movs	r3, #15
 8000dac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dae:	2303      	movs	r3, #3
 8000db0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 fa6e 	bl	80032a4 <HAL_RCC_ClockConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000dce:	f000 fc7b 	bl	80016c8 <Error_Handler>
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	3748      	adds	r7, #72	; 0x48
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40007000 	.word	0x40007000

08000de0 <map>:

/* USER CODE BEGIN 4 */

uint16_t map(uint16_t input_value, uint16_t minRange, uint16_t maxRange, uint16_t New_minRange, uint16_t New_maxRange)
{
 8000de0:	b490      	push	{r4, r7}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4604      	mov	r4, r0
 8000de8:	4608      	mov	r0, r1
 8000dea:	4611      	mov	r1, r2
 8000dec:	461a      	mov	r2, r3
 8000dee:	4623      	mov	r3, r4
 8000df0:	80fb      	strh	r3, [r7, #6]
 8000df2:	4603      	mov	r3, r0
 8000df4:	80bb      	strh	r3, [r7, #4]
 8000df6:	460b      	mov	r3, r1
 8000df8:	807b      	strh	r3, [r7, #2]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	803b      	strh	r3, [r7, #0]
	return (((input_value - minRange)*(New_maxRange - New_minRange))/(maxRange - minRange) + New_minRange);
 8000dfe:	88fa      	ldrh	r2, [r7, #6]
 8000e00:	88bb      	ldrh	r3, [r7, #4]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	8a39      	ldrh	r1, [r7, #16]
 8000e06:	883a      	ldrh	r2, [r7, #0]
 8000e08:	1a8a      	subs	r2, r1, r2
 8000e0a:	fb03 f202 	mul.w	r2, r3, r2
 8000e0e:	8879      	ldrh	r1, [r7, #2]
 8000e10:	88bb      	ldrh	r3, [r7, #4]
 8000e12:	1acb      	subs	r3, r1, r3
 8000e14:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	883b      	ldrh	r3, [r7, #0]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	b29b      	uxth	r3, r3
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc90      	pop	{r4, r7}
 8000e28:	4770      	bx	lr
	...

08000e2c <PWMval>:
void PWMval(uint8_t ch, uint16_t val)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	460a      	mov	r2, r1
 8000e36:	71fb      	strb	r3, [r7, #7]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	80bb      	strh	r3, [r7, #4]
	switch (ch)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b07      	cmp	r3, #7
 8000e40:	d83a      	bhi.n	8000eb8 <PWMval+0x8c>
 8000e42:	a201      	add	r2, pc, #4	; (adr r2, 8000e48 <PWMval+0x1c>)
 8000e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e48:	08000e69 	.word	0x08000e69
 8000e4c:	08000e73 	.word	0x08000e73
 8000e50:	08000e7d 	.word	0x08000e7d
 8000e54:	08000e87 	.word	0x08000e87
 8000e58:	08000e91 	.word	0x08000e91
 8000e5c:	08000e9b 	.word	0x08000e9b
 8000e60:	08000ea5 	.word	0x08000ea5
 8000e64:	08000eaf 	.word	0x08000eaf
	{
	case 0:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, val);
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <PWMval+0x98>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	88ba      	ldrh	r2, [r7, #4]
 8000e6e:	635a      	str	r2, [r3, #52]	; 0x34
	break;
 8000e70:	e022      	b.n	8000eb8 <PWMval+0x8c>
	case 1:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, val);
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <PWMval+0x98>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	88ba      	ldrh	r2, [r7, #4]
 8000e78:	639a      	str	r2, [r3, #56]	; 0x38
	break;
 8000e7a:	e01d      	b.n	8000eb8 <PWMval+0x8c>
	case 2:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, val);
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <PWMval+0x98>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	88ba      	ldrh	r2, [r7, #4]
 8000e82:	63da      	str	r2, [r3, #60]	; 0x3c
	break;
 8000e84:	e018      	b.n	8000eb8 <PWMval+0x8c>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, val);
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <PWMval+0x98>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	88ba      	ldrh	r2, [r7, #4]
 8000e8c:	641a      	str	r2, [r3, #64]	; 0x40
	break;
 8000e8e:	e013      	b.n	8000eb8 <PWMval+0x8c>
	case 4:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, val);
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <PWMval+0x9c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	88ba      	ldrh	r2, [r7, #4]
 8000e96:	635a      	str	r2, [r3, #52]	; 0x34
	break;
 8000e98:	e00e      	b.n	8000eb8 <PWMval+0x8c>
	case 5:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, val);
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <PWMval+0x9c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	88ba      	ldrh	r2, [r7, #4]
 8000ea0:	639a      	str	r2, [r3, #56]	; 0x38
	break;
 8000ea2:	e009      	b.n	8000eb8 <PWMval+0x8c>
	case 6:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, val);
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <PWMval+0x9c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	88ba      	ldrh	r2, [r7, #4]
 8000eaa:	63da      	str	r2, [r3, #60]	; 0x3c
	break;
 8000eac:	e004      	b.n	8000eb8 <PWMval+0x8c>
	case 7:
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, val);
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <PWMval+0xa0>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	88ba      	ldrh	r2, [r7, #4]
 8000eb4:	639a      	str	r2, [r3, #56]	; 0x38
	break;
 8000eb6:	bf00      	nop
	}
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000104 	.word	0x20000104
 8000ec8:	200000c4 	.word	0x200000c4
 8000ecc:	20000144 	.word	0x20000144

08000ed0 <podstR>:
void podstR()
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Podstawa_D1_GPIO_Port, Podstawa_D1_Pin, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2120      	movs	r1, #32
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <podstR+0x1c>)
 8000eda:	f001 fe81 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Podstawa_D2_GPIO_Port, Podstawa_D2_Pin, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2110      	movs	r1, #16
 8000ee2:	4802      	ldr	r0, [pc, #8]	; (8000eec <podstR+0x1c>)
 8000ee4:	f001 fe7c 	bl	8002be0 <HAL_GPIO_WritePin>

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40020400 	.word	0x40020400

08000ef0 <podstL>:
void podstL()
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Podstawa_D2_GPIO_Port, Podstawa_D2_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <podstL+0x1c>)
 8000efa:	f001 fe71 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Podstawa_D1_GPIO_Port, Podstawa_D1_Pin, GPIO_PIN_SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2120      	movs	r1, #32
 8000f02:	4802      	ldr	r0, [pc, #8]	; (8000f0c <podstL+0x1c>)
 8000f04:	f001 fe6c 	bl	8002be0 <HAL_GPIO_WritePin>
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40020400 	.word	0x40020400

08000f10 <stoppodst>:

void stoppodst()
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Podstawa_D1_GPIO_Port, Podstawa_D1_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2120      	movs	r1, #32
 8000f18:	4806      	ldr	r0, [pc, #24]	; (8000f34 <stoppodst+0x24>)
 8000f1a:	f001 fe61 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Podstawa_D2_GPIO_Port, Podstawa_D2_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2110      	movs	r1, #16
 8000f22:	4804      	ldr	r0, [pc, #16]	; (8000f34 <stoppodst+0x24>)
 8000f24:	f001 fe5c 	bl	8002be0 <HAL_GPIO_WritePin>
	PWMval(0,0);
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f7ff ff7e 	bl	8000e2c <PWMval>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40020400 	.word	0x40020400

08000f38 <czlon1R>:

void czlon1R()
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon1_D1_GPIO_Port, Czlon1_D1_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <czlon1R+0x20>)
 8000f44:	f001 fe4c 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon1_D2_GPIO_Port, Czlon1_D2_Pin, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f4e:	4803      	ldr	r0, [pc, #12]	; (8000f5c <czlon1R+0x24>)
 8000f50:	f001 fe46 	bl	8002be0 <HAL_GPIO_WritePin>
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40020400 	.word	0x40020400
 8000f5c:	40020000 	.word	0x40020000

08000f60 <czlon1L>:
void czlon1L()
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon1_D1_GPIO_Port, Czlon1_D1_Pin, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <czlon1L+0x20>)
 8000f6c:	f001 fe38 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon1_D2_GPIO_Port, Czlon1_D2_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f76:	4803      	ldr	r0, [pc, #12]	; (8000f84 <czlon1L+0x24>)
 8000f78:	f001 fe32 	bl	8002be0 <HAL_GPIO_WritePin>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40020400 	.word	0x40020400
 8000f84:	40020000 	.word	0x40020000

08000f88 <stopczlon1>:
void stopczlon1()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon1_D1_GPIO_Port, Czlon1_D1_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f92:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <stopczlon1+0x28>)
 8000f94:	f001 fe24 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon1_D2_GPIO_Port, Czlon1_D2_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <stopczlon1+0x2c>)
 8000fa0:	f001 fe1e 	bl	8002be0 <HAL_GPIO_WritePin>
	PWMval(1,0);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f7ff ff40 	bl	8000e2c <PWMval>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40020400 	.word	0x40020400
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <czlon2R>:

void czlon2R()
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon2_D1_GPIO_Port, Czlon2_D1_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <czlon2R+0x20>)
 8000fc4:	f001 fe0c 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon2_D2_GPIO_Port, Czlon2_D2_Pin, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	4803      	ldr	r0, [pc, #12]	; (8000fdc <czlon2R+0x24>)
 8000fce:	f001 fe07 	bl	8002be0 <HAL_GPIO_WritePin>
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40020800 	.word	0x40020800

08000fe0 <czlon2L>:
void czlon2L()
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon2_D1_GPIO_Port, Czlon2_D1_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <czlon2L+0x20>)
 8000fec:	f001 fdf8 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon2_D2_GPIO_Port, Czlon2_D2_Pin, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2180      	movs	r1, #128	; 0x80
 8000ff4:	4803      	ldr	r0, [pc, #12]	; (8001004 <czlon2L+0x24>)
 8000ff6:	f001 fdf3 	bl	8002be0 <HAL_GPIO_WritePin>
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40020000 	.word	0x40020000
 8001004:	40020800 	.word	0x40020800

08001008 <stopczlon2>:
void stopczlon2()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon2_D1_GPIO_Port, Czlon2_D1_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001012:	4807      	ldr	r0, [pc, #28]	; (8001030 <stopczlon2+0x28>)
 8001014:	f001 fde4 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon2_D2_GPIO_Port, Czlon2_D2_Pin, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2180      	movs	r1, #128	; 0x80
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <stopczlon2+0x2c>)
 800101e:	f001 fddf 	bl	8002be0 <HAL_GPIO_WritePin>
	PWMval(2,0);
 8001022:	2100      	movs	r1, #0
 8001024:	2002      	movs	r0, #2
 8001026:	f7ff ff01 	bl	8000e2c <PWMval>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40020000 	.word	0x40020000
 8001034:	40020800 	.word	0x40020800

08001038 <czlon3R>:

void czlon3R()
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon3_D1_GPIO_Port, Czlon3_D1_Pin, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <czlon3R+0x20>)
 8001044:	f001 fdcc 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon3_D2_GPIO_Port, Czlon3_D2_Pin, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	2140      	movs	r1, #64	; 0x40
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <czlon3R+0x20>)
 800104e:	f001 fdc7 	bl	8002be0 <HAL_GPIO_WritePin>
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40020800 	.word	0x40020800

0800105c <czlon3L>:
void czlon3L()
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon3_D1_GPIO_Port, Czlon3_D1_Pin, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <czlon3L+0x20>)
 8001068:	f001 fdba 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon3_D2_GPIO_Port, Czlon3_D2_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	2140      	movs	r1, #64	; 0x40
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <czlon3L+0x20>)
 8001072:	f001 fdb5 	bl	8002be0 <HAL_GPIO_WritePin>
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40020800 	.word	0x40020800

08001080 <stopczlon3>:
void stopczlon3()
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon3_D1_GPIO_Port, Czlon3_D1_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 7180 	mov.w	r1, #256	; 0x100
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <stopczlon3+0x28>)
 800108c:	f001 fda8 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon3_D2_GPIO_Port, Czlon3_D2_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2140      	movs	r1, #64	; 0x40
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <stopczlon3+0x28>)
 8001096:	f001 fda3 	bl	8002be0 <HAL_GPIO_WritePin>
	PWMval(3,0);
 800109a:	2100      	movs	r1, #0
 800109c:	2003      	movs	r0, #3
 800109e:	f7ff fec5 	bl	8000e2c <PWMval>
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40020800 	.word	0x40020800

080010ac <czlon4R>:

void czlon4R()
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon4_D1_GPIO_Port, Czlon4_D1_Pin, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2120      	movs	r1, #32
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <czlon4R+0x20>)
 80010b6:	f001 fd93 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon4_D2_GPIO_Port, Czlon4_D2_Pin, GPIO_PIN_SET);
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c0:	4803      	ldr	r0, [pc, #12]	; (80010d0 <czlon4R+0x24>)
 80010c2:	f001 fd8d 	bl	8002be0 <HAL_GPIO_WritePin>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40020800 	.word	0x40020800
 80010d0:	40020000 	.word	0x40020000

080010d4 <czlon4L>:
void czlon4L()
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon4_D1_GPIO_Port, Czlon4_D1_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2120      	movs	r1, #32
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <czlon4L+0x20>)
 80010de:	f001 fd7f 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon4_D2_GPIO_Port, Czlon4_D2_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e8:	4803      	ldr	r0, [pc, #12]	; (80010f8 <czlon4L+0x24>)
 80010ea:	f001 fd79 	bl	8002be0 <HAL_GPIO_WritePin>
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40020800 	.word	0x40020800
 80010f8:	40020000 	.word	0x40020000

080010fc <stopczlon4>:
void stopczlon4()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon4_D1_GPIO_Port, Czlon4_D1_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	2120      	movs	r1, #32
 8001104:	4807      	ldr	r0, [pc, #28]	; (8001124 <stopczlon4+0x28>)
 8001106:	f001 fd6b 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon4_D2_GPIO_Port, Czlon4_D2_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <stopczlon4+0x2c>)
 8001112:	f001 fd65 	bl	8002be0 <HAL_GPIO_WritePin>
	PWMval(4,0);
 8001116:	2100      	movs	r1, #0
 8001118:	2004      	movs	r0, #4
 800111a:	f7ff fe87 	bl	8000e2c <PWMval>
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40020800 	.word	0x40020800
 8001128:	40020000 	.word	0x40020000

0800112c <czlon5R>:

void czlon5R()
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon5_D1_GPIO_Port, Czlon5_D1_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <czlon5R+0x20>)
 8001138:	f001 fd52 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon5_D2_GPIO_Port, Czlon5_D2_Pin, GPIO_PIN_SET);
 800113c:	2201      	movs	r2, #1
 800113e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001142:	4803      	ldr	r0, [pc, #12]	; (8001150 <czlon5R+0x24>)
 8001144:	f001 fd4c 	bl	8002be0 <HAL_GPIO_WritePin>
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40020000 	.word	0x40020000
 8001150:	40020400 	.word	0x40020400

08001154 <czlon5L>:
void czlon5L()
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon5_D1_GPIO_Port, Czlon5_D1_Pin, GPIO_PIN_SET);
 8001158:	2201      	movs	r2, #1
 800115a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <czlon5L+0x20>)
 8001160:	f001 fd3e 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon5_D2_GPIO_Port, Czlon5_D2_Pin, GPIO_PIN_RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800116a:	4803      	ldr	r0, [pc, #12]	; (8001178 <czlon5L+0x24>)
 800116c:	f001 fd38 	bl	8002be0 <HAL_GPIO_WritePin>
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40020000 	.word	0x40020000
 8001178:	40020400 	.word	0x40020400

0800117c <stopczlon5>:
void stopczlon5()
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon5_D1_GPIO_Port, Czlon5_D1_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001186:	4807      	ldr	r0, [pc, #28]	; (80011a4 <stopczlon5+0x28>)
 8001188:	f001 fd2a 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon5_D2_GPIO_Port, Czlon5_D2_Pin, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <stopczlon5+0x2c>)
 8001194:	f001 fd24 	bl	8002be0 <HAL_GPIO_WritePin>
	PWMval(5,0);
 8001198:	2100      	movs	r1, #0
 800119a:	2005      	movs	r0, #5
 800119c:	f7ff fe46 	bl	8000e2c <PWMval>
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40020400 	.word	0x40020400

080011ac <LmotorF>:

void LmotorF()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L_D1_GPIO_Port,L_D1_Pin , GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2104      	movs	r1, #4
 80011b4:	4805      	ldr	r0, [pc, #20]	; (80011cc <LmotorF+0x20>)
 80011b6:	f001 fd13 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_D2_GPIO_Port,L_D2_Pin , GPIO_PIN_SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <LmotorF+0x20>)
 80011c2:	f001 fd0d 	bl	8002be0 <HAL_GPIO_WritePin>
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40020800 	.word	0x40020800

080011d0 <LmotorB>:
void LmotorB()
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L_D2_GPIO_Port, L_D2_Pin, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <LmotorB+0x20>)
 80011dc:	f001 fd00 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_D1_GPIO_Port, L_D1_Pin, GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2104      	movs	r1, #4
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <LmotorB+0x20>)
 80011e6:	f001 fcfb 	bl	8002be0 <HAL_GPIO_WritePin>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40020800 	.word	0x40020800

080011f4 <stopLmotorF>:
void stopLmotorF()
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L_D1_GPIO_Port, L_D1_Pin, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2104      	movs	r1, #4
 80011fc:	4807      	ldr	r0, [pc, #28]	; (800121c <stopLmotorF+0x28>)
 80011fe:	f001 fcef 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_D2_GPIO_Port,L_D2_Pin , GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001208:	4804      	ldr	r0, [pc, #16]	; (800121c <stopLmotorF+0x28>)
 800120a:	f001 fce9 	bl	8002be0 <HAL_GPIO_WritePin>
	PWMval(7,0);
 800120e:	2100      	movs	r1, #0
 8001210:	2007      	movs	r0, #7
 8001212:	f7ff fe0b 	bl	8000e2c <PWMval>
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40020800 	.word	0x40020800

08001220 <RmotorF>:
void RmotorF()
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R_D1_GPIO_Port,R_D1_Pin , GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	2104      	movs	r1, #4
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <RmotorF+0x20>)
 800122a:	f001 fcd9 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_D2_GPIO_Port,R_D2_Pin , GPIO_PIN_SET);
 800122e:	2201      	movs	r2, #1
 8001230:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001234:	4803      	ldr	r0, [pc, #12]	; (8001244 <RmotorF+0x24>)
 8001236:	f001 fcd3 	bl	8002be0 <HAL_GPIO_WritePin>
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40020c00 	.word	0x40020c00
 8001244:	40020800 	.word	0x40020800

08001248 <RmotorB>:
void RmotorB()
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R_D2_GPIO_Port,R_D2_Pin , GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <RmotorB+0x20>)
 8001254:	f001 fcc4 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_D1_GPIO_Port,R_D1_Pin , GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2104      	movs	r1, #4
 800125c:	4803      	ldr	r0, [pc, #12]	; (800126c <RmotorB+0x24>)
 800125e:	f001 fcbf 	bl	8002be0 <HAL_GPIO_WritePin>
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40020800 	.word	0x40020800
 800126c:	40020c00 	.word	0x40020c00

08001270 <stopRmotorF>:
void stopRmotorF()
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R_D1_GPIO_Port,R_D1_Pin , GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2104      	movs	r1, #4
 8001278:	4807      	ldr	r0, [pc, #28]	; (8001298 <stopRmotorF+0x28>)
 800127a:	f001 fcb1 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_D2_GPIO_Port, R_D2_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <stopRmotorF+0x2c>)
 8001286:	f001 fcab 	bl	8002be0 <HAL_GPIO_WritePin>
	PWMval(6,0);
 800128a:	2100      	movs	r1, #0
 800128c:	2006      	movs	r0, #6
 800128e:	f7ff fdcd 	bl	8000e2c <PWMval>
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40020c00 	.word	0x40020c00
 800129c:	40020800 	.word	0x40020800

080012a0 <rightside>:


void rightside()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af02      	add	r7, sp, #8
	pwm1 = map(nrfdata[6],32,127,0,1000);
 80012a6:	4b42      	ldr	r3, [pc, #264]	; (80013b0 <rightside+0x110>)
 80012a8:	799b      	ldrb	r3, [r3, #6]
 80012aa:	b298      	uxth	r0, r3
 80012ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2300      	movs	r3, #0
 80012b4:	227f      	movs	r2, #127	; 0x7f
 80012b6:	2120      	movs	r1, #32
 80012b8:	f7ff fd92 	bl	8000de0 <map>
 80012bc:	4603      	mov	r3, r0
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f812 	bl	80002e8 <__aeabi_ui2f>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4a3b      	ldr	r2, [pc, #236]	; (80013b4 <rightside+0x114>)
 80012c8:	6013      	str	r3, [r2, #0]
	c4 = nrfdata[0];
 80012ca:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <rightside+0x110>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	4b39      	ldr	r3, [pc, #228]	; (80013b8 <rightside+0x118>)
 80012d2:	801a      	strh	r2, [r3, #0]
	if (c4 == 49)
 80012d4:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <rightside+0x118>)
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	2b31      	cmp	r3, #49	; 0x31
 80012da:	d105      	bne.n	80012e8 <rightside+0x48>
		{
		pwm1 = pwm1*-1;
 80012dc:	4b35      	ldr	r3, [pc, #212]	; (80013b4 <rightside+0x114>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80012e4:	4a33      	ldr	r2, [pc, #204]	; (80013b4 <rightside+0x114>)
 80012e6:	6013      	str	r3, [r2, #0]
		}

		if (pwm1 > pwmRight)
 80012e8:	4b32      	ldr	r3, [pc, #200]	; (80013b4 <rightside+0x114>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a33      	ldr	r2, [pc, #204]	; (80013bc <rightside+0x11c>)
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f8bc 	bl	8000470 <__aeabi_fcmpgt>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00c      	beq.n	8001318 <rightside+0x78>
		{
			pwmRight = pwmRight + step;
 80012fe:	4b2f      	ldr	r3, [pc, #188]	; (80013bc <rightside+0x11c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a2f      	ldr	r2, [pc, #188]	; (80013c0 <rightside+0x120>)
 8001304:	6812      	ldr	r2, [r2, #0]
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f7fe ff3d 	bl	8000188 <__addsf3>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <rightside+0x11c>)
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e016      	b.n	8001346 <rightside+0xa6>
		}
		else if (pwm1 < pwmRight)
 8001318:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <rightside+0x114>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a27      	ldr	r2, [pc, #156]	; (80013bc <rightside+0x11c>)
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f886 	bl	8000434 <__aeabi_fcmplt>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00b      	beq.n	8001346 <rightside+0xa6>
		{
			pwmRight = pwmRight - step;
 800132e:	4b23      	ldr	r3, [pc, #140]	; (80013bc <rightside+0x11c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a23      	ldr	r2, [pc, #140]	; (80013c0 <rightside+0x120>)
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f7fe ff23 	bl	8000184 <__aeabi_fsub>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <rightside+0x11c>)
 8001344:	601a      	str	r2, [r3, #0]
		}
		if (pwmRight > 0)
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <rightside+0x11c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f04f 0100 	mov.w	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f88e 	bl	8000470 <__aeabi_fcmpgt>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00d      	beq.n	8001376 <rightside+0xd6>
			{
				RmotorF();
 800135a:	f7ff ff61 	bl	8001220 <RmotorF>
				PWMval(6, (int)pwmRight);
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <rightside+0x11c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f88e 	bl	8000484 <__aeabi_f2iz>
 8001368:	4603      	mov	r3, r0
 800136a:	b29b      	uxth	r3, r3
 800136c:	4619      	mov	r1, r3
 800136e:	2006      	movs	r0, #6
 8001370:	f7ff fd5c 	bl	8000e2c <PWMval>
		}




}
 8001374:	e019      	b.n	80013aa <rightside+0x10a>
		else if (pwmRight < 0)
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <rightside+0x11c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f04f 0100 	mov.w	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f858 	bl	8000434 <__aeabi_fcmplt>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d100      	bne.n	800138c <rightside+0xec>
}
 800138a:	e00e      	b.n	80013aa <rightside+0x10a>
			RmotorB();
 800138c:	f7ff ff5c 	bl	8001248 <RmotorB>
			PWMval(6, ((int)pwmRight)*-1);
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <rightside+0x11c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f875 	bl	8000484 <__aeabi_f2iz>
 800139a:	4603      	mov	r3, r0
 800139c:	b29b      	uxth	r3, r3
 800139e:	425b      	negs	r3, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	4619      	mov	r1, r3
 80013a4:	2006      	movs	r0, #6
 80013a6:	f7ff fd41 	bl	8000e2c <PWMval>
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2000002c 	.word	0x2000002c
 80013b4:	2000004c 	.word	0x2000004c
 80013b8:	20000044 	.word	0x20000044
 80013bc:	20000054 	.word	0x20000054
 80013c0:	20000000 	.word	0x20000000

080013c4 <leftside>:
void leftside()
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af02      	add	r7, sp, #8

	pwm2 = map(nrfdata[7],32,127,0,1000);
 80013ca:	4b42      	ldr	r3, [pc, #264]	; (80014d4 <leftside+0x110>)
 80013cc:	79db      	ldrb	r3, [r3, #7]
 80013ce:	b298      	uxth	r0, r3
 80013d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2300      	movs	r3, #0
 80013d8:	227f      	movs	r2, #127	; 0x7f
 80013da:	2120      	movs	r1, #32
 80013dc:	f7ff fd00 	bl	8000de0 <map>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7fe ff80 	bl	80002e8 <__aeabi_ui2f>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4a3b      	ldr	r2, [pc, #236]	; (80014d8 <leftside+0x114>)
 80013ec:	6013      	str	r3, [r2, #0]
	c5 = nrfdata[1];
 80013ee:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <leftside+0x110>)
 80013f0:	785b      	ldrb	r3, [r3, #1]
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	4b39      	ldr	r3, [pc, #228]	; (80014dc <leftside+0x118>)
 80013f6:	801a      	strh	r2, [r3, #0]

	if (c5 == 50)
 80013f8:	4b38      	ldr	r3, [pc, #224]	; (80014dc <leftside+0x118>)
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	2b32      	cmp	r3, #50	; 0x32
 80013fe:	d105      	bne.n	800140c <leftside+0x48>
	{
		pwm2 = pwm2 *-1;
 8001400:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <leftside+0x114>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001408:	4a33      	ldr	r2, [pc, #204]	; (80014d8 <leftside+0x114>)
 800140a:	6013      	str	r3, [r2, #0]
	}

		if (pwm2 > pwmLeft)
 800140c:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <leftside+0x114>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a33      	ldr	r2, [pc, #204]	; (80014e0 <leftside+0x11c>)
 8001412:	6812      	ldr	r2, [r2, #0]
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f82a 	bl	8000470 <__aeabi_fcmpgt>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00c      	beq.n	800143c <leftside+0x78>
			{
				pwmLeft = pwmLeft+step;
 8001422:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <leftside+0x11c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a2f      	ldr	r2, [pc, #188]	; (80014e4 <leftside+0x120>)
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f7fe feab 	bl	8000188 <__addsf3>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <leftside+0x11c>)
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	e016      	b.n	800146a <leftside+0xa6>
			}
			else if (pwm2 < pwmLeft)
 800143c:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <leftside+0x114>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a27      	ldr	r2, [pc, #156]	; (80014e0 <leftside+0x11c>)
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f7fe fff4 	bl	8000434 <__aeabi_fcmplt>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00b      	beq.n	800146a <leftside+0xa6>
			{
				pwmLeft = pwmLeft-step;
 8001452:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <leftside+0x11c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <leftside+0x120>)
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7fe fe91 	bl	8000184 <__aeabi_fsub>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <leftside+0x11c>)
 8001468:	601a      	str	r2, [r3, #0]
			}
			if (pwmLeft > 0)
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <leftside+0x11c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f04f 0100 	mov.w	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f7fe fffc 	bl	8000470 <__aeabi_fcmpgt>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00d      	beq.n	800149a <leftside+0xd6>
			{
				LmotorF();
 800147e:	f7ff fe95 	bl	80011ac <LmotorF>
				PWMval(7, (int)pwmLeft);
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <leftside+0x11c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe fffc 	bl	8000484 <__aeabi_f2iz>
 800148c:	4603      	mov	r3, r0
 800148e:	b29b      	uxth	r3, r3
 8001490:	4619      	mov	r1, r3
 8001492:	2007      	movs	r0, #7
 8001494:	f7ff fcca 	bl	8000e2c <PWMval>





}
 8001498:	e019      	b.n	80014ce <leftside+0x10a>
			else if (pwmLeft < 0)
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <leftside+0x11c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f04f 0100 	mov.w	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7fe ffc6 	bl	8000434 <__aeabi_fcmplt>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d100      	bne.n	80014b0 <leftside+0xec>
}
 80014ae:	e00e      	b.n	80014ce <leftside+0x10a>
				LmotorB();
 80014b0:	f7ff fe8e 	bl	80011d0 <LmotorB>
				PWMval(7, ((int)pwmLeft)*-1);
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <leftside+0x11c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe ffe3 	bl	8000484 <__aeabi_f2iz>
 80014be:	4603      	mov	r3, r0
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	425b      	negs	r3, r3
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4619      	mov	r1, r3
 80014c8:	2007      	movs	r0, #7
 80014ca:	f7ff fcaf 	bl	8000e2c <PWMval>
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	2000002c 	.word	0x2000002c
 80014d8:	20000050 	.word	0x20000050
 80014dc:	20000046 	.word	0x20000046
 80014e0:	20000058 	.word	0x20000058
 80014e4:	20000000 	.word	0x20000000

080014e8 <motor0control>:


void motor0control()
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	c0 = (nrfdata[2]);
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <motor0control+0x48>)
 80014ee:	789b      	ldrb	r3, [r3, #2]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <motor0control+0x4c>)
 80014f4:	801a      	strh	r2, [r3, #0]
	if(c0 == 51)
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <motor0control+0x4c>)
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	2b33      	cmp	r3, #51	; 0x33
 80014fc:	d107      	bne.n	800150e <motor0control+0x26>
				{
					podstL();
 80014fe:	f7ff fcf7 	bl	8000ef0 <podstL>
					PWMval(0, 1000);
 8001502:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff fc90 	bl	8000e2c <PWMval>
				}
	else
	{
		stoppodst();
	}
}
 800150c:	e00d      	b.n	800152a <motor0control+0x42>
	else if(c0 == 52)
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <motor0control+0x4c>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	2b34      	cmp	r3, #52	; 0x34
 8001514:	d107      	bne.n	8001526 <motor0control+0x3e>
					podstR();
 8001516:	f7ff fcdb 	bl	8000ed0 <podstR>
					PWMval(0, 1000);
 800151a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800151e:	2000      	movs	r0, #0
 8001520:	f7ff fc84 	bl	8000e2c <PWMval>
}
 8001524:	e001      	b.n	800152a <motor0control+0x42>
		stoppodst();
 8001526:	f7ff fcf3 	bl	8000f10 <stoppodst>
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000002c 	.word	0x2000002c
 8001534:	2000003c 	.word	0x2000003c

08001538 <motor1control>:

void motor1control()
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	c1 = (nrfdata[3]);
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <motor1control+0x48>)
 800153e:	78db      	ldrb	r3, [r3, #3]
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <motor1control+0x4c>)
 8001544:	801a      	strh	r2, [r3, #0]
	if(c1 == 53)
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <motor1control+0x4c>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	2b35      	cmp	r3, #53	; 0x35
 800154c:	d107      	bne.n	800155e <motor1control+0x26>
				{
					czlon1L();
 800154e:	f7ff fd07 	bl	8000f60 <czlon1L>
					PWMval(1, 1000);
 8001552:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001556:	2001      	movs	r0, #1
 8001558:	f7ff fc68 	bl	8000e2c <PWMval>
				}
	else
	{
		stopczlon1();
	}
}
 800155c:	e00d      	b.n	800157a <motor1control+0x42>
	else if(c1 == 54)
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <motor1control+0x4c>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	2b36      	cmp	r3, #54	; 0x36
 8001564:	d107      	bne.n	8001576 <motor1control+0x3e>
					czlon1R();
 8001566:	f7ff fce7 	bl	8000f38 <czlon1R>
					PWMval(1, 1000);
 800156a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800156e:	2001      	movs	r0, #1
 8001570:	f7ff fc5c 	bl	8000e2c <PWMval>
}
 8001574:	e001      	b.n	800157a <motor1control+0x42>
		stopczlon1();
 8001576:	f7ff fd07 	bl	8000f88 <stopczlon1>
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000002c 	.word	0x2000002c
 8001584:	2000003e 	.word	0x2000003e

08001588 <motor2control>:

void motor2control()
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	c2 = (nrfdata[4]);
 800158c:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <motor2control+0x48>)
 800158e:	791b      	ldrb	r3, [r3, #4]
 8001590:	b29a      	uxth	r2, r3
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <motor2control+0x4c>)
 8001594:	801a      	strh	r2, [r3, #0]
	if(c2 == 55)
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <motor2control+0x4c>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	2b37      	cmp	r3, #55	; 0x37
 800159c:	d107      	bne.n	80015ae <motor2control+0x26>
				{
					czlon2L();
 800159e:	f7ff fd1f 	bl	8000fe0 <czlon2L>
					PWMval(2, 1000);
 80015a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015a6:	2002      	movs	r0, #2
 80015a8:	f7ff fc40 	bl	8000e2c <PWMval>
				}
	else
	{
		stopczlon2();
	}
}
 80015ac:	e00d      	b.n	80015ca <motor2control+0x42>
	else if(c2 == 56)
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <motor2control+0x4c>)
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	2b38      	cmp	r3, #56	; 0x38
 80015b4:	d107      	bne.n	80015c6 <motor2control+0x3e>
					czlon2R();
 80015b6:	f7ff fcff 	bl	8000fb8 <czlon2R>
					PWMval(2, 1000);
 80015ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015be:	2002      	movs	r0, #2
 80015c0:	f7ff fc34 	bl	8000e2c <PWMval>
}
 80015c4:	e001      	b.n	80015ca <motor2control+0x42>
		stopczlon2();
 80015c6:	f7ff fd1f 	bl	8001008 <stopczlon2>
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000002c 	.word	0x2000002c
 80015d4:	20000040 	.word	0x20000040

080015d8 <motor3control>:

void motor3control()
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	c3 = (nrfdata[5]);
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <motor3control+0x48>)
 80015de:	795b      	ldrb	r3, [r3, #5]
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <motor3control+0x4c>)
 80015e4:	801a      	strh	r2, [r3, #0]
	if(c3 == 57)
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <motor3control+0x4c>)
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	2b39      	cmp	r3, #57	; 0x39
 80015ec:	d107      	bne.n	80015fe <motor3control+0x26>
				{
					czlon3L();
 80015ee:	f7ff fd35 	bl	800105c <czlon3L>
					PWMval(3, 1000);
 80015f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015f6:	2003      	movs	r0, #3
 80015f8:	f7ff fc18 	bl	8000e2c <PWMval>
				}
	else
	{
		stopczlon3();
	}
}
 80015fc:	e00d      	b.n	800161a <motor3control+0x42>
	else if(c3 == 58)
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <motor3control+0x4c>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	2b3a      	cmp	r3, #58	; 0x3a
 8001604:	d107      	bne.n	8001616 <motor3control+0x3e>
					czlon3R();
 8001606:	f7ff fd17 	bl	8001038 <czlon3R>
					PWMval(3, 1000);
 800160a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800160e:	2003      	movs	r0, #3
 8001610:	f7ff fc0c 	bl	8000e2c <PWMval>
}
 8001614:	e001      	b.n	800161a <motor3control+0x42>
		stopczlon3();
 8001616:	f7ff fd33 	bl	8001080 <stopczlon3>
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000002c 	.word	0x2000002c
 8001624:	20000042 	.word	0x20000042

08001628 <motor4control>:

void motor4control()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	c6 = (nrfdata[8]);
 800162c:	4b10      	ldr	r3, [pc, #64]	; (8001670 <motor4control+0x48>)
 800162e:	7a1b      	ldrb	r3, [r3, #8]
 8001630:	b29a      	uxth	r2, r3
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <motor4control+0x4c>)
 8001634:	801a      	strh	r2, [r3, #0]
	if(c6 == 59)
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <motor4control+0x4c>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	2b3b      	cmp	r3, #59	; 0x3b
 800163c:	d107      	bne.n	800164e <motor4control+0x26>
				{
					czlon4L();
 800163e:	f7ff fd49 	bl	80010d4 <czlon4L>
					PWMval(4, 1000);
 8001642:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001646:	2004      	movs	r0, #4
 8001648:	f7ff fbf0 	bl	8000e2c <PWMval>
				}
	else
	{
		stopczlon4();
	}
}
 800164c:	e00d      	b.n	800166a <motor4control+0x42>
	else if(c6 == 60)
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <motor4control+0x4c>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	2b3c      	cmp	r3, #60	; 0x3c
 8001654:	d107      	bne.n	8001666 <motor4control+0x3e>
					czlon4R();
 8001656:	f7ff fd29 	bl	80010ac <czlon4R>
					PWMval(4, 1000);
 800165a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800165e:	2004      	movs	r0, #4
 8001660:	f7ff fbe4 	bl	8000e2c <PWMval>
}
 8001664:	e001      	b.n	800166a <motor4control+0x42>
		stopczlon4();
 8001666:	f7ff fd49 	bl	80010fc <stopczlon4>
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000002c 	.word	0x2000002c
 8001674:	20000048 	.word	0x20000048

08001678 <motor5control>:

void motor5control()
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	c7 = (nrfdata[9]);
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <motor5control+0x48>)
 800167e:	7a5b      	ldrb	r3, [r3, #9]
 8001680:	b29a      	uxth	r2, r3
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <motor5control+0x4c>)
 8001684:	801a      	strh	r2, [r3, #0]
	if(c7 == 62)
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <motor5control+0x4c>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	2b3e      	cmp	r3, #62	; 0x3e
 800168c:	d107      	bne.n	800169e <motor5control+0x26>
				{
					czlon5L();
 800168e:	f7ff fd61 	bl	8001154 <czlon5L>
					PWMval(5, 1000);
 8001692:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001696:	2005      	movs	r0, #5
 8001698:	f7ff fbc8 	bl	8000e2c <PWMval>
				}
	else
	{
		stopczlon5();
	}
}
 800169c:	e00d      	b.n	80016ba <motor5control+0x42>
	else if(c7 == 63)
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <motor5control+0x4c>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	2b3f      	cmp	r3, #63	; 0x3f
 80016a4:	d107      	bne.n	80016b6 <motor5control+0x3e>
					czlon5R();
 80016a6:	f7ff fd41 	bl	800112c <czlon5R>
					PWMval(5, 1000);
 80016aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016ae:	2005      	movs	r0, #5
 80016b0:	f7ff fbbc 	bl	8000e2c <PWMval>
}
 80016b4:	e001      	b.n	80016ba <motor5control+0x42>
		stopczlon5();
 80016b6:	f7ff fd61 	bl	800117c <stopczlon5>
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	2000002c 	.word	0x2000002c
 80016c4:	2000004a 	.word	0x2000004a

080016c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <Error_Handler+0x8>
	...

080016d4 <nRF24_SendSpi>:
#define NRF24_CE_LOW		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET)

// Spi send and read

static void nRF24_SendSpi(uint8_t *Data, uint8_t length)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, length, 1000);
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <nRF24_SendSpi+0x28>)
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	f002 f928 	bl	8003942 <HAL_SPI_Transmit>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000064 	.word	0x20000064

08001700 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t length)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, length, 1000);
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <nRF24_ReadSpi+0x28>)
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	b29a      	uxth	r2, r3
 8001714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	f002 fa55 	bl	8003bc8 <HAL_SPI_Receive>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000064 	.word	0x20000064

0800172c <nRF24_ReadRegister>:

//Reading register

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800173a:	2200      	movs	r2, #0
 800173c:	2104      	movs	r1, #4
 800173e:	480c      	ldr	r0, [pc, #48]	; (8001770 <nRF24_ReadRegister+0x44>)
 8001740:	f001 fa4e 	bl	8002be0 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001744:	1dfb      	adds	r3, r7, #7
 8001746:	2101      	movs	r1, #1
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ffc3 	bl	80016d4 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 800174e:	f107 030f 	add.w	r3, r7, #15
 8001752:	2101      	movs	r1, #1
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ffd3 	bl	8001700 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 800175a:	2201      	movs	r2, #1
 800175c:	2104      	movs	r1, #4
 800175e:	4804      	ldr	r0, [pc, #16]	; (8001770 <nRF24_ReadRegister+0x44>)
 8001760:	f001 fa3e 	bl	8002be0 <HAL_GPIO_WritePin>

	return result;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40020400 	.word	0x40020400

08001774 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* result, uint8_t lenght)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	71fb      	strb	r3, [r7, #7]
 8001780:	4613      	mov	r3, r2
 8001782:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001788:	2200      	movs	r2, #0
 800178a:	2104      	movs	r1, #4
 800178c:	480a      	ldr	r0, [pc, #40]	; (80017b8 <nRF24_ReadRegisters+0x44>)
 800178e:	f001 fa27 	bl	8002be0 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001792:	1dfb      	adds	r3, r7, #7
 8001794:	2101      	movs	r1, #1
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff9c 	bl	80016d4 <nRF24_SendSpi>
	nRF24_ReadSpi(result, lenght);
 800179c:	79bb      	ldrb	r3, [r7, #6]
 800179e:	4619      	mov	r1, r3
 80017a0:	6838      	ldr	r0, [r7, #0]
 80017a2:	f7ff ffad 	bl	8001700 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 80017a6:	2201      	movs	r2, #1
 80017a8:	2104      	movs	r1, #4
 80017aa:	4803      	ldr	r0, [pc, #12]	; (80017b8 <nRF24_ReadRegisters+0x44>)
 80017ac:	f001 fa18 	bl	8002be0 <HAL_GPIO_WritePin>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40020400 	.word	0x40020400

080017bc <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t value)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	460a      	mov	r2, r1
 80017c6:	71fb      	strb	r3, [r7, #7]
 80017c8:	4613      	mov	r3, r2
 80017ca:	71bb      	strb	r3, [r7, #6]
	uint8_t list[2];

	list[0] = NRF24_CMD_W_REGISTER | reg;
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	f043 0320 	orr.w	r3, r3, #32
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	733b      	strb	r3, [r7, #12]
	list[1] = value;
 80017d6:	79bb      	ldrb	r3, [r7, #6]
 80017d8:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 80017da:	2200      	movs	r2, #0
 80017dc:	2104      	movs	r1, #4
 80017de:	4809      	ldr	r0, [pc, #36]	; (8001804 <nRF24_WriteRegister+0x48>)
 80017e0:	f001 f9fe 	bl	8002be0 <HAL_GPIO_WritePin>

	nRF24_SendSpi(list, 2);
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	2102      	movs	r1, #2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ff72 	bl	80016d4 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80017f0:	2201      	movs	r2, #1
 80017f2:	2104      	movs	r1, #4
 80017f4:	4803      	ldr	r0, [pc, #12]	; (8001804 <nRF24_WriteRegister+0x48>)
 80017f6:	f001 f9f3 	bl	8002be0 <HAL_GPIO_WritePin>
}
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40020400 	.word	0x40020400

08001808 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* result, uint8_t lenght)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
 8001814:	4613      	mov	r3, r2
 8001816:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	f043 0320 	orr.w	r3, r3, #32
 800181e:	b2db      	uxtb	r3, r3
 8001820:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001822:	2200      	movs	r2, #0
 8001824:	2104      	movs	r1, #4
 8001826:	480b      	ldr	r0, [pc, #44]	; (8001854 <nRF24_WriteRegisters+0x4c>)
 8001828:	f001 f9da 	bl	8002be0 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 800182c:	1dfb      	adds	r3, r7, #7
 800182e:	2101      	movs	r1, #1
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff4f 	bl	80016d4 <nRF24_SendSpi>
	nRF24_SendSpi(result, lenght);
 8001836:	79bb      	ldrb	r3, [r7, #6]
 8001838:	4619      	mov	r1, r3
 800183a:	6838      	ldr	r0, [r7, #0]
 800183c:	f7ff ff4a 	bl	80016d4 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001840:	2201      	movs	r2, #1
 8001842:	2104      	movs	r1, #4
 8001844:	4803      	ldr	r0, [pc, #12]	; (8001854 <nRF24_WriteRegisters+0x4c>)
 8001846:	f001 f9cb 	bl	8002be0 <HAL_GPIO_WritePin>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40020400 	.word	0x40020400

08001858 <nRF24_ReadConfig>:

uint8_t nRF24_ReadConfig(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 800185c:	2000      	movs	r0, #0
 800185e:	f7ff ff65 	bl	800172c <nRF24_ReadRegister>
 8001862:	4603      	mov	r3, r0
}
 8001864:	4618      	mov	r0, r3
 8001866:	bd80      	pop	{r7, pc}

08001868 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t config)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, config);
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	4619      	mov	r1, r3
 8001876:	2000      	movs	r0, #0
 8001878:	f7ff ffa0 	bl	80017bc <nRF24_WriteRegister>
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8001888:	2007      	movs	r0, #7
 800188a:	f7ff ff4f 	bl	800172c <nRF24_ReadRegister>
 800188e:	4603      	mov	r3, r0
}
 8001890:	4618      	mov	r0, r3
 8001892:	bd80      	pop	{r7, pc}

08001894 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	4619      	mov	r1, r3
 80018a2:	2007      	movs	r0, #7
 80018a4:	f7ff ff8a 	bl	80017bc <nRF24_WriteRegister>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 80018b6:	f7ff ffcf 	bl	8001858 <nRF24_ReadConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 80018be:	4911      	ldr	r1, [pc, #68]	; (8001904 <nRF24_RX_Mode+0x54>)
 80018c0:	2000      	movs	r0, #0
 80018c2:	f000 f9a6 	bl	8001c12 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ffc5 	bl	8001868 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 80018de:	2070      	movs	r0, #112	; 0x70
 80018e0:	f7ff ffd8 	bl	8001894 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 80018e4:	f000 f858 	bl	8001998 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 80018e8:	f000 f870 	bl	80019cc <nRF24_FlushTX>

	NRF24_CE_HIGH;
 80018ec:	2201      	movs	r2, #1
 80018ee:	2102      	movs	r1, #2
 80018f0:	4805      	ldr	r0, [pc, #20]	; (8001908 <nRF24_RX_Mode+0x58>)
 80018f2:	f001 f975 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80018f6:	2001      	movs	r0, #1
 80018f8:	f000 fedc 	bl	80026b4 <HAL_Delay>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000068 	.word	0x20000068
 8001908:	40020400 	.word	0x40020400

0800190c <nRF24_SetPALevel>:




void nRF24_SetPALevel(uint8_t lev)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001916:	2006      	movs	r0, #6
 8001918:	f7ff ff08 	bl	800172c <nRF24_ReadRegister>
 800191c:	4603      	mov	r3, r0
 800191e:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	f023 0307 	bic.w	r3, r3, #7
 8001926:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	b25a      	sxtb	r2, r3
 800192e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001932:	4313      	orrs	r3, r2
 8001934:	b25b      	sxtb	r3, r3
 8001936:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	4619      	mov	r1, r3
 800193c:	2006      	movs	r0, #6
 800193e:	f7ff ff3d 	bl	80017bc <nRF24_WriteRegister>
}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001954:	2006      	movs	r0, #6
 8001956:	f7ff fee9 	bl	800172c <nRF24_ReadRegister>
 800195a:	4603      	mov	r3, r0
 800195c:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001964:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	2b02      	cmp	r3, #2
 800196a:	d104      	bne.n	8001976 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	f043 0320 	orr.w	r3, r3, #32
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	e006      	b.n	8001984 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d103      	bne.n	8001984 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	f043 0308 	orr.w	r3, r3, #8
 8001982:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	4619      	mov	r1, r3
 8001988:	2006      	movs	r0, #6
 800198a:	f7ff ff17 	bl	80017bc <nRF24_WriteRegister>
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <nRF24_FlushRX>:



void nRF24_FlushRX(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800199e:	23e2      	movs	r3, #226	; 0xe2
 80019a0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80019a2:	2200      	movs	r2, #0
 80019a4:	2104      	movs	r1, #4
 80019a6:	4808      	ldr	r0, [pc, #32]	; (80019c8 <nRF24_FlushRX+0x30>)
 80019a8:	f001 f91a 	bl	8002be0 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80019ac:	1dfb      	adds	r3, r7, #7
 80019ae:	2101      	movs	r1, #1
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fe8f 	bl	80016d4 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80019b6:	2201      	movs	r2, #1
 80019b8:	2104      	movs	r1, #4
 80019ba:	4803      	ldr	r0, [pc, #12]	; (80019c8 <nRF24_FlushRX+0x30>)
 80019bc:	f001 f910 	bl	8002be0 <HAL_GPIO_WritePin>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40020400 	.word	0x40020400

080019cc <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80019d2:	23e1      	movs	r3, #225	; 0xe1
 80019d4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80019d6:	2200      	movs	r2, #0
 80019d8:	2104      	movs	r1, #4
 80019da:	4808      	ldr	r0, [pc, #32]	; (80019fc <nRF24_FlushTX+0x30>)
 80019dc:	f001 f900 	bl	8002be0 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80019e0:	1dfb      	adds	r3, r7, #7
 80019e2:	2101      	movs	r1, #1
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fe75 	bl	80016d4 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80019ea:	2201      	movs	r2, #1
 80019ec:	2104      	movs	r1, #4
 80019ee:	4803      	ldr	r0, [pc, #12]	; (80019fc <nRF24_FlushTX+0x30>)
 80019f0:	f001 f8f6 	bl	8002be0 <HAL_GPIO_WritePin>
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40020400 	.word	0x40020400

08001a00 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001a0a:	f7ff ff25 	bl	8001858 <nRF24_ReadConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	f043 0308 	orr.w	r3, r3, #8
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	e003      	b.n	8001a2a <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	f023 0308 	bic.w	r3, r3, #8
 8001a28:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff1b 	bl	8001868 <nRF24_WriteConfig>
}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b084      	sub	sp, #16
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001a44:	f7ff ff08 	bl	8001858 <nRF24_ReadConfig>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d104      	bne.n	8001a5c <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	73fb      	strb	r3, [r7, #15]
 8001a5a:	e003      	b.n	8001a64 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	f023 0304 	bic.w	r3, r3, #4
 8001a62:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fefe 	bl	8001868 <nRF24_WriteConfig>
}
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	460a      	mov	r2, r1
 8001a7e:	71fb      	strb	r3, [r7, #7]
 8001a80:	4613      	mov	r3, r2
 8001a82:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	b25a      	sxtb	r2, r3
 8001a8a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	b25b      	sxtb	r3, r3
 8001a94:	4313      	orrs	r3, r2
 8001a96:	b25b      	sxtb	r3, r3
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	2004      	movs	r0, #4
 8001a9e:	f7ff fe8d 	bl	80017bc <nRF24_WriteRegister>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	4619      	mov	r1, r3
 8001abe:	2005      	movs	r0, #5
 8001ac0:	f7ff fe7c 	bl	80017bc <nRF24_WriteRegister>
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	460a      	mov	r2, r1
 8001ad6:	71fb      	strb	r3, [r7, #7]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	2b05      	cmp	r3, #5
 8001ae0:	d901      	bls.n	8001ae6 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 8001ae2:	2305      	movs	r3, #5
 8001ae4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	3311      	adds	r3, #17
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	79bb      	ldrb	r3, [r7, #6]
 8001aee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f7ff fe60 	bl	80017bc <nRF24_WriteRegister>
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	460a      	mov	r2, r1
 8001b0e:	71fb      	strb	r3, [r7, #7]
 8001b10:	4613      	mov	r3, r2
 8001b12:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	2b05      	cmp	r3, #5
 8001b18:	d901      	bls.n	8001b1e <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8001b1a:	2305      	movs	r3, #5
 8001b1c:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8001b1e:	2002      	movs	r0, #2
 8001b20:	f7ff fe04 	bl	800172c <nRF24_ReadRegister>
 8001b24:	4603      	mov	r3, r0
 8001b26:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001b28:	79bb      	ldrb	r3, [r7, #6]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d10a      	bne.n	8001b44 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	2201      	movs	r2, #1
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	b25a      	sxtb	r2, r3
 8001b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	b25b      	sxtb	r3, r3
 8001b40:	73fb      	strb	r3, [r7, #15]
 8001b42:	e00b      	b.n	8001b5c <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	2201      	movs	r2, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	b25b      	sxtb	r3, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	b25a      	sxtb	r2, r3
 8001b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b56:	4013      	ands	r3, r2
 8001b58:	b25b      	sxtb	r3, r3
 8001b5a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	2002      	movs	r0, #2
 8001b62:	f7ff fe2b 	bl	80017bc <nRF24_WriteRegister>
}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	460a      	mov	r2, r1
 8001b78:	71fb      	strb	r3, [r7, #7]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	2b05      	cmp	r3, #5
 8001b82:	d901      	bls.n	8001b88 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8001b84:	2305      	movs	r3, #5
 8001b86:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f7ff fdcf 	bl	800172c <nRF24_ReadRegister>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001b92:	79bb      	ldrb	r3, [r7, #6]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d10a      	bne.n	8001bae <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	b25a      	sxtb	r2, r3
 8001ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	b25b      	sxtb	r3, r3
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	e00b      	b.n	8001bc6 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	b25b      	sxtb	r3, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	b25a      	sxtb	r2, r3
 8001bbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	b25b      	sxtb	r3, r3
 8001bc4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f7ff fdf6 	bl	80017bc <nRF24_WriteRegister>
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	2b05      	cmp	r3, #5
 8001be6:	d901      	bls.n	8001bec <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8001be8:	2305      	movs	r3, #5
 8001bea:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d801      	bhi.n	8001bf6 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	3b02      	subs	r3, #2
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	4619      	mov	r1, r3
 8001c04:	2003      	movs	r0, #3
 8001c06:	f7ff fdd9 	bl	80017bc <nRF24_WriteRegister>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	6039      	str	r1, [r7, #0]
 8001c1c:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <nRF24_SetRXAddress+0x18>
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d11d      	bne.n	8001c66 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	73fb      	strb	r3, [r7, #15]
 8001c2e:	e00d      	b.n	8001c4c <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	441a      	add	r2, r3
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	f1c3 0302 	rsb	r3, r3, #2
 8001c3c:	7812      	ldrb	r2, [r2, #0]
 8001c3e:	3310      	adds	r3, #16
 8001c40:	443b      	add	r3, r7
 8001c42:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d9ee      	bls.n	8001c30 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	330a      	adds	r3, #10
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	f107 010c 	add.w	r1, r7, #12
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fdd2 	bl	8001808 <nRF24_WriteRegisters>
	{
 8001c64:	e00a      	b.n	8001c7c <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	330a      	adds	r3, #10
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	3302      	adds	r3, #2
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	4619      	mov	r1, r3
 8001c74:	4610      	mov	r0, r2
 8001c76:	f7ff fda1 	bl	80017bc <nRF24_WriteRegister>
}
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	2203      	movs	r2, #3
 8001c92:	4619      	mov	r1, r3
 8001c94:	200a      	movs	r0, #10
 8001c96:	f7ff fd6d 	bl	8001774 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73fb      	strb	r3, [r7, #15]
 8001c9e:	e00c      	b.n	8001cba <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	f1c3 0302 	rsb	r3, r3, #2
 8001ca8:	3210      	adds	r2, #16
 8001caa:	443a      	add	r2, r7
 8001cac:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8001cb0:	4a16      	ldr	r2, [pc, #88]	; (8001d0c <nRF24_SetTXAddress+0x88>)
 8001cb2:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	73fb      	strb	r3, [r7, #15]
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d9ef      	bls.n	8001ca0 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	73fb      	strb	r3, [r7, #15]
 8001cc4:	e00d      	b.n	8001ce2 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	441a      	add	r2, r3
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	f1c3 0302 	rsb	r3, r3, #2
 8001cd2:	7812      	ldrb	r2, [r2, #0]
 8001cd4:	3310      	adds	r3, #16
 8001cd6:	443b      	add	r3, r7
 8001cd8:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	73fb      	strb	r3, [r7, #15]
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d9ee      	bls.n	8001cc6 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	2203      	movs	r2, #3
 8001cee:	4619      	mov	r1, r3
 8001cf0:	200a      	movs	r0, #10
 8001cf2:	f7ff fd89 	bl	8001808 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	2010      	movs	r0, #16
 8001d00:	f7ff fd82 	bl	8001808 <nRF24_WriteRegisters>

}
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000068 	.word	0x20000068

08001d10 <nRF24_ReadRXPaylaod>:
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));

}

void nRF24_ReadRXPaylaod(uint8_t *data)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8001d18:	220f      	movs	r2, #15
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	2061      	movs	r0, #97	; 0x61
 8001d1e:	f7ff fd29 	bl	8001774 <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 8001d22:	2101      	movs	r1, #1
 8001d24:	2007      	movs	r0, #7
 8001d26:	f7ff fd49 	bl	80017bc <nRF24_WriteRegister>
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
 8001d2a:	f7ff fdab 	bl	8001884 <nRF24_ReadStatus>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f003 0320 	and.w	r3, r3, #32
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8001d38:	2120      	movs	r1, #32
 8001d3a:	2007      	movs	r0, #7
 8001d3c:	f7ff fd3e 	bl	80017bc <nRF24_WriteRegister>
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <nRF24_RXAvailible>:


uint8_t nRF24_RXAvailible(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8001d4e:	f7ff fd99 	bl	8001884 <nRF24_ReadStatus>
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]

	// RX FIFO Interrupt
	if ((status & (1 << 6)))
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00c      	beq.n	8001d7a <nRF24_RXAvailible+0x32>
	{
		nrf24_rx_flag = 1;
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <nRF24_RXAvailible+0x3c>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
		status |= (1<<6); // Interrupt flag clear
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d6c:	71fb      	strb	r3, [r7, #7]
		nRF24_WriteStatus(status);
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fd8f 	bl	8001894 <nRF24_WriteStatus>
		return 1;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <nRF24_RXAvailible+0x34>
	}
	return 0;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	2000006b 	.word	0x2000006b

08001d88 <nRF24_Init>:

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8001d90:	4a1e      	ldr	r2, [pc, #120]	; (8001e0c <nRF24_Init+0x84>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8001d96:	2200      	movs	r2, #0
 8001d98:	2102      	movs	r1, #2
 8001d9a:	481d      	ldr	r0, [pc, #116]	; (8001e10 <nRF24_Init+0x88>)
 8001d9c:	f000 ff20 	bl	8002be0 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8001da0:	2201      	movs	r2, #1
 8001da2:	2104      	movs	r1, #4
 8001da4:	481a      	ldr	r0, [pc, #104]	; (8001e10 <nRF24_Init+0x88>)
 8001da6:	f000 ff1b 	bl	8002be0 <HAL_GPIO_WritePin>

	HAL_Delay(5);
 8001daa:	2005      	movs	r0, #5
 8001dac:	f000 fc82 	bl	80026b4 <HAL_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_M18dBM); // Radio power
 8001db0:	2000      	movs	r0, #0
 8001db2:	f7ff fdab 	bl	800190c <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8001db6:	2002      	movs	r0, #2
 8001db8:	f7ff fdc7 	bl	800194a <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	f7ff fe1f 	bl	8001a00 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f7ff fe39 	bl	8001a3a <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8001dc8:	2107      	movs	r1, #7
 8001dca:	2004      	movs	r0, #4
 8001dcc:	f7ff fe52 	bl	8001a74 <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	201c      	movs	r0, #28
 8001dd4:	f7ff fcf2 	bl	80017bc <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8001dd8:	200a      	movs	r0, #10
 8001dda:	f7ff fe66 	bl	8001aaa <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8001dde:	210f      	movs	r1, #15
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff fe73 	bl	8001acc <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8001de6:	2101      	movs	r1, #1
 8001de8:	2000      	movs	r0, #0
 8001dea:	f7ff fe8b 	bl	8001b04 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8001dee:	2101      	movs	r1, #1
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff febc 	bl	8001b6e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8001df6:	2003      	movs	r0, #3
 8001df8:	f7ff feee 	bl	8001bd8 <nRF24_SetAddressWidth>

	HAL_Delay(20);
 8001dfc:	2014      	movs	r0, #20
 8001dfe:	f000 fc59 	bl	80026b4 <HAL_Delay>

}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000064 	.word	0x20000064
 8001e10:	40020400 	.word	0x40020400

08001e14 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001e18:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <MX_SPI2_Init+0x64>)
 8001e1a:	4a18      	ldr	r2, [pc, #96]	; (8001e7c <MX_SPI2_Init+0x68>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <MX_SPI2_Init+0x64>)
 8001e20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e26:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <MX_SPI2_Init+0x64>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <MX_SPI2_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <MX_SPI2_Init+0x64>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e38:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <MX_SPI2_Init+0x64>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <MX_SPI2_Init+0x64>)
 8001e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e44:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <MX_SPI2_Init+0x64>)
 8001e48:	2210      	movs	r2, #16
 8001e4a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <MX_SPI2_Init+0x64>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <MX_SPI2_Init+0x64>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e58:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <MX_SPI2_Init+0x64>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <MX_SPI2_Init+0x64>)
 8001e60:	220a      	movs	r2, #10
 8001e62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e64:	4804      	ldr	r0, [pc, #16]	; (8001e78 <MX_SPI2_Init+0x64>)
 8001e66:	f001 fce3 	bl	8003830 <HAL_SPI_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e70:	f7ff fc2a 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	2000006c 	.word	0x2000006c
 8001e7c:	40003800 	.word	0x40003800

08001e80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a17      	ldr	r2, [pc, #92]	; (8001efc <HAL_SPI_MspInit+0x7c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d128      	bne.n	8001ef4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <HAL_SPI_MspInit+0x80>)
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	4a16      	ldr	r2, [pc, #88]	; (8001f00 <HAL_SPI_MspInit+0x80>)
 8001ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eac:	6253      	str	r3, [r2, #36]	; 0x24
 8001eae:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <HAL_SPI_MspInit+0x80>)
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <HAL_SPI_MspInit+0x80>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	4a10      	ldr	r2, [pc, #64]	; (8001f00 <HAL_SPI_MspInit+0x80>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	61d3      	str	r3, [r2, #28]
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_SPI_MspInit+0x80>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ed2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ee4:	2305      	movs	r3, #5
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	4619      	mov	r1, r3
 8001eee:	4805      	ldr	r0, [pc, #20]	; (8001f04 <HAL_SPI_MspInit+0x84>)
 8001ef0:	f000 fce6 	bl	80028c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3728      	adds	r7, #40	; 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40003800 	.word	0x40003800
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40020400 	.word	0x40020400

08001f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	4a14      	ldr	r2, [pc, #80]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f18:	6253      	str	r3, [r2, #36]	; 0x24
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f26:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	4a0e      	ldr	r2, [pc, #56]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6213      	str	r3, [r2, #32]
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	4a08      	ldr	r2, [pc, #32]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f48:	6253      	str	r3, [r2, #36]	; 0x24
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f56:	2007      	movs	r0, #7
 8001f58:	f000 fc7e 	bl	8002858 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40023800 	.word	0x40023800

08001f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <NMI_Handler+0x4>

08001f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f72:	e7fe      	b.n	8001f72 <HardFault_Handler+0x4>

08001f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <MemManage_Handler+0x4>

08001f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f7e:	e7fe      	b.n	8001f7e <BusFault_Handler+0x4>

08001f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <UsageFault_Handler+0x4>

08001f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fae:	f000 fb65 	bl	800267c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
	...

08001fc4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	; 0x28
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fca:	f107 0318 	add.w	r3, r7, #24
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd8:	f107 0310 	add.w	r3, r7, #16
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fee:	4b38      	ldr	r3, [pc, #224]	; (80020d0 <MX_TIM3_Init+0x10c>)
 8001ff0:	4a38      	ldr	r2, [pc, #224]	; (80020d4 <MX_TIM3_Init+0x110>)
 8001ff2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001ff4:	4b36      	ldr	r3, [pc, #216]	; (80020d0 <MX_TIM3_Init+0x10c>)
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffa:	4b35      	ldr	r3, [pc, #212]	; (80020d0 <MX_TIM3_Init+0x10c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002000:	4b33      	ldr	r3, [pc, #204]	; (80020d0 <MX_TIM3_Init+0x10c>)
 8002002:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002006:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002008:	4b31      	ldr	r3, [pc, #196]	; (80020d0 <MX_TIM3_Init+0x10c>)
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200e:	4b30      	ldr	r3, [pc, #192]	; (80020d0 <MX_TIM3_Init+0x10c>)
 8002010:	2200      	movs	r2, #0
 8002012:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002014:	482e      	ldr	r0, [pc, #184]	; (80020d0 <MX_TIM3_Init+0x10c>)
 8002016:	f002 f9cf 	bl	80043b8 <HAL_TIM_Base_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002020:	f7ff fb52 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002028:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800202a:	f107 0318 	add.w	r3, r7, #24
 800202e:	4619      	mov	r1, r3
 8002030:	4827      	ldr	r0, [pc, #156]	; (80020d0 <MX_TIM3_Init+0x10c>)
 8002032:	f002 fba1 	bl	8004778 <HAL_TIM_ConfigClockSource>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800203c:	f7ff fb44 	bl	80016c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002040:	4823      	ldr	r0, [pc, #140]	; (80020d0 <MX_TIM3_Init+0x10c>)
 8002042:	f002 f9f8 	bl	8004436 <HAL_TIM_PWM_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800204c:	f7ff fb3c 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002050:	2300      	movs	r3, #0
 8002052:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002058:	f107 0310 	add.w	r3, r7, #16
 800205c:	4619      	mov	r1, r3
 800205e:	481c      	ldr	r0, [pc, #112]	; (80020d0 <MX_TIM3_Init+0x10c>)
 8002060:	f002 fe72 	bl	8004d48 <HAL_TIMEx_MasterConfigSynchronization>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800206a:	f7ff fb2d 	bl	80016c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800206e:	2360      	movs	r3, #96	; 0x60
 8002070:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800207e:	463b      	mov	r3, r7
 8002080:	2200      	movs	r2, #0
 8002082:	4619      	mov	r1, r3
 8002084:	4812      	ldr	r0, [pc, #72]	; (80020d0 <MX_TIM3_Init+0x10c>)
 8002086:	f002 fab5 	bl	80045f4 <HAL_TIM_PWM_ConfigChannel>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002090:	f7ff fb1a 	bl	80016c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002094:	463b      	mov	r3, r7
 8002096:	2204      	movs	r2, #4
 8002098:	4619      	mov	r1, r3
 800209a:	480d      	ldr	r0, [pc, #52]	; (80020d0 <MX_TIM3_Init+0x10c>)
 800209c:	f002 faaa 	bl	80045f4 <HAL_TIM_PWM_ConfigChannel>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80020a6:	f7ff fb0f 	bl	80016c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020aa:	463b      	mov	r3, r7
 80020ac:	2208      	movs	r2, #8
 80020ae:	4619      	mov	r1, r3
 80020b0:	4807      	ldr	r0, [pc, #28]	; (80020d0 <MX_TIM3_Init+0x10c>)
 80020b2:	f002 fa9f 	bl	80045f4 <HAL_TIM_PWM_ConfigChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 80020bc:	f7ff fb04 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020c0:	4803      	ldr	r0, [pc, #12]	; (80020d0 <MX_TIM3_Init+0x10c>)
 80020c2:	f000 f957 	bl	8002374 <HAL_TIM_MspPostInit>

}
 80020c6:	bf00      	nop
 80020c8:	3728      	adds	r7, #40	; 0x28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200000c4 	.word	0x200000c4
 80020d4:	40000400 	.word	0x40000400

080020d8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	; 0x28
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020de:	f107 0318 	add.w	r3, r7, #24
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020f6:	463b      	mov	r3, r7
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002102:	4b3d      	ldr	r3, [pc, #244]	; (80021f8 <MX_TIM4_Init+0x120>)
 8002104:	4a3d      	ldr	r2, [pc, #244]	; (80021fc <MX_TIM4_Init+0x124>)
 8002106:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8002108:	4b3b      	ldr	r3, [pc, #236]	; (80021f8 <MX_TIM4_Init+0x120>)
 800210a:	220f      	movs	r2, #15
 800210c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800210e:	4b3a      	ldr	r3, [pc, #232]	; (80021f8 <MX_TIM4_Init+0x120>)
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002114:	4b38      	ldr	r3, [pc, #224]	; (80021f8 <MX_TIM4_Init+0x120>)
 8002116:	f240 32e7 	movw	r2, #999	; 0x3e7
 800211a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211c:	4b36      	ldr	r3, [pc, #216]	; (80021f8 <MX_TIM4_Init+0x120>)
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002122:	4b35      	ldr	r3, [pc, #212]	; (80021f8 <MX_TIM4_Init+0x120>)
 8002124:	2200      	movs	r2, #0
 8002126:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002128:	4833      	ldr	r0, [pc, #204]	; (80021f8 <MX_TIM4_Init+0x120>)
 800212a:	f002 f945 	bl	80043b8 <HAL_TIM_Base_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002134:	f7ff fac8 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800213c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800213e:	f107 0318 	add.w	r3, r7, #24
 8002142:	4619      	mov	r1, r3
 8002144:	482c      	ldr	r0, [pc, #176]	; (80021f8 <MX_TIM4_Init+0x120>)
 8002146:	f002 fb17 	bl	8004778 <HAL_TIM_ConfigClockSource>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002150:	f7ff faba 	bl	80016c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002154:	4828      	ldr	r0, [pc, #160]	; (80021f8 <MX_TIM4_Init+0x120>)
 8002156:	f002 f96e 	bl	8004436 <HAL_TIM_PWM_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002160:	f7ff fab2 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	4619      	mov	r1, r3
 8002172:	4821      	ldr	r0, [pc, #132]	; (80021f8 <MX_TIM4_Init+0x120>)
 8002174:	f002 fde8 	bl	8004d48 <HAL_TIMEx_MasterConfigSynchronization>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 800217e:	f7ff faa3 	bl	80016c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002182:	2360      	movs	r3, #96	; 0x60
 8002184:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002192:	463b      	mov	r3, r7
 8002194:	2200      	movs	r2, #0
 8002196:	4619      	mov	r1, r3
 8002198:	4817      	ldr	r0, [pc, #92]	; (80021f8 <MX_TIM4_Init+0x120>)
 800219a:	f002 fa2b 	bl	80045f4 <HAL_TIM_PWM_ConfigChannel>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80021a4:	f7ff fa90 	bl	80016c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021a8:	463b      	mov	r3, r7
 80021aa:	2204      	movs	r2, #4
 80021ac:	4619      	mov	r1, r3
 80021ae:	4812      	ldr	r0, [pc, #72]	; (80021f8 <MX_TIM4_Init+0x120>)
 80021b0:	f002 fa20 	bl	80045f4 <HAL_TIM_PWM_ConfigChannel>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 80021ba:	f7ff fa85 	bl	80016c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021be:	463b      	mov	r3, r7
 80021c0:	2208      	movs	r2, #8
 80021c2:	4619      	mov	r1, r3
 80021c4:	480c      	ldr	r0, [pc, #48]	; (80021f8 <MX_TIM4_Init+0x120>)
 80021c6:	f002 fa15 	bl	80045f4 <HAL_TIM_PWM_ConfigChannel>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM4_Init+0xfc>
  {
    Error_Handler();
 80021d0:	f7ff fa7a 	bl	80016c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021d4:	463b      	mov	r3, r7
 80021d6:	220c      	movs	r2, #12
 80021d8:	4619      	mov	r1, r3
 80021da:	4807      	ldr	r0, [pc, #28]	; (80021f8 <MX_TIM4_Init+0x120>)
 80021dc:	f002 fa0a 	bl	80045f4 <HAL_TIM_PWM_ConfigChannel>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 80021e6:	f7ff fa6f 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80021ea:	4803      	ldr	r0, [pc, #12]	; (80021f8 <MX_TIM4_Init+0x120>)
 80021ec:	f000 f8c2 	bl	8002374 <HAL_TIM_MspPostInit>

}
 80021f0:	bf00      	nop
 80021f2:	3728      	adds	r7, #40	; 0x28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000104 	.word	0x20000104
 80021fc:	40000800 	.word	0x40000800

08002200 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002206:	f107 0318 	add.w	r3, r7, #24
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002214:	f107 0310 	add.w	r3, r7, #16
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800221e:	463b      	mov	r3, r7
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800222a:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <MX_TIM5_Init+0xe0>)
 800222c:	4a2d      	ldr	r2, [pc, #180]	; (80022e4 <MX_TIM5_Init+0xe4>)
 800222e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 8002230:	4b2b      	ldr	r3, [pc, #172]	; (80022e0 <MX_TIM5_Init+0xe0>)
 8002232:	220f      	movs	r2, #15
 8002234:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002236:	4b2a      	ldr	r3, [pc, #168]	; (80022e0 <MX_TIM5_Init+0xe0>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800223c:	4b28      	ldr	r3, [pc, #160]	; (80022e0 <MX_TIM5_Init+0xe0>)
 800223e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002242:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002244:	4b26      	ldr	r3, [pc, #152]	; (80022e0 <MX_TIM5_Init+0xe0>)
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800224a:	4b25      	ldr	r3, [pc, #148]	; (80022e0 <MX_TIM5_Init+0xe0>)
 800224c:	2200      	movs	r2, #0
 800224e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002250:	4823      	ldr	r0, [pc, #140]	; (80022e0 <MX_TIM5_Init+0xe0>)
 8002252:	f002 f8b1 	bl	80043b8 <HAL_TIM_Base_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 800225c:	f7ff fa34 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002264:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002266:	f107 0318 	add.w	r3, r7, #24
 800226a:	4619      	mov	r1, r3
 800226c:	481c      	ldr	r0, [pc, #112]	; (80022e0 <MX_TIM5_Init+0xe0>)
 800226e:	f002 fa83 	bl	8004778 <HAL_TIM_ConfigClockSource>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002278:	f7ff fa26 	bl	80016c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800227c:	4818      	ldr	r0, [pc, #96]	; (80022e0 <MX_TIM5_Init+0xe0>)
 800227e:	f002 f8da 	bl	8004436 <HAL_TIM_PWM_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002288:	f7ff fa1e 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002294:	f107 0310 	add.w	r3, r7, #16
 8002298:	4619      	mov	r1, r3
 800229a:	4811      	ldr	r0, [pc, #68]	; (80022e0 <MX_TIM5_Init+0xe0>)
 800229c:	f002 fd54 	bl	8004d48 <HAL_TIMEx_MasterConfigSynchronization>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 80022a6:	f7ff fa0f 	bl	80016c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022aa:	2360      	movs	r3, #96	; 0x60
 80022ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022ba:	463b      	mov	r3, r7
 80022bc:	2204      	movs	r2, #4
 80022be:	4619      	mov	r1, r3
 80022c0:	4807      	ldr	r0, [pc, #28]	; (80022e0 <MX_TIM5_Init+0xe0>)
 80022c2:	f002 f997 	bl	80045f4 <HAL_TIM_PWM_ConfigChannel>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 80022cc:	f7ff f9fc 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80022d0:	4803      	ldr	r0, [pc, #12]	; (80022e0 <MX_TIM5_Init+0xe0>)
 80022d2:	f000 f84f 	bl	8002374 <HAL_TIM_MspPostInit>

}
 80022d6:	bf00      	nop
 80022d8:	3728      	adds	r7, #40	; 0x28
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000144 	.word	0x20000144
 80022e4:	40000c00 	.word	0x40000c00

080022e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a1b      	ldr	r2, [pc, #108]	; (8002364 <HAL_TIM_Base_MspInit+0x7c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d10c      	bne.n	8002314 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <HAL_TIM_Base_MspInit+0x80>)
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	4a1a      	ldr	r2, [pc, #104]	; (8002368 <HAL_TIM_Base_MspInit+0x80>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	6253      	str	r3, [r2, #36]	; 0x24
 8002306:	4b18      	ldr	r3, [pc, #96]	; (8002368 <HAL_TIM_Base_MspInit+0x80>)
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002312:	e022      	b.n	800235a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a14      	ldr	r2, [pc, #80]	; (800236c <HAL_TIM_Base_MspInit+0x84>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d10c      	bne.n	8002338 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_TIM_Base_MspInit+0x80>)
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	4a11      	ldr	r2, [pc, #68]	; (8002368 <HAL_TIM_Base_MspInit+0x80>)
 8002324:	f043 0304 	orr.w	r3, r3, #4
 8002328:	6253      	str	r3, [r2, #36]	; 0x24
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <HAL_TIM_Base_MspInit+0x80>)
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	693b      	ldr	r3, [r7, #16]
}
 8002336:	e010      	b.n	800235a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM5)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0c      	ldr	r2, [pc, #48]	; (8002370 <HAL_TIM_Base_MspInit+0x88>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10b      	bne.n	800235a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <HAL_TIM_Base_MspInit+0x80>)
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	4a08      	ldr	r2, [pc, #32]	; (8002368 <HAL_TIM_Base_MspInit+0x80>)
 8002348:	f043 0308 	orr.w	r3, r3, #8
 800234c:	6253      	str	r3, [r2, #36]	; 0x24
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_TIM_Base_MspInit+0x80>)
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
}
 800235a:	bf00      	nop
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	40000400 	.word	0x40000400
 8002368:	40023800 	.word	0x40023800
 800236c:	40000800 	.word	0x40000800
 8002370:	40000c00 	.word	0x40000c00

08002374 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08c      	sub	sp, #48	; 0x30
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	f107 031c 	add.w	r3, r7, #28
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a41      	ldr	r2, [pc, #260]	; (8002498 <HAL_TIM_MspPostInit+0x124>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d138      	bne.n	8002408 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002396:	4b41      	ldr	r3, [pc, #260]	; (800249c <HAL_TIM_MspPostInit+0x128>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4a40      	ldr	r2, [pc, #256]	; (800249c <HAL_TIM_MspPostInit+0x128>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	61d3      	str	r3, [r2, #28]
 80023a2:	4b3e      	ldr	r3, [pc, #248]	; (800249c <HAL_TIM_MspPostInit+0x128>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ae:	4b3b      	ldr	r3, [pc, #236]	; (800249c <HAL_TIM_MspPostInit+0x128>)
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	4a3a      	ldr	r2, [pc, #232]	; (800249c <HAL_TIM_MspPostInit+0x128>)
 80023b4:	f043 0302 	orr.w	r3, r3, #2
 80023b8:	61d3      	str	r3, [r2, #28]
 80023ba:	4b38      	ldr	r3, [pc, #224]	; (800249c <HAL_TIM_MspPostInit+0x128>)
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = Czlon4PWM_Pin|Czlon5PWM_Pin;
 80023c6:	23c0      	movs	r3, #192	; 0xc0
 80023c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2300      	movs	r3, #0
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023d6:	2302      	movs	r3, #2
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023da:	f107 031c 	add.w	r3, r7, #28
 80023de:	4619      	mov	r1, r3
 80023e0:	482f      	ldr	r0, [pc, #188]	; (80024a0 <HAL_TIM_MspPostInit+0x12c>)
 80023e2:	f000 fa6d 	bl	80028c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R_PWM_Pin;
 80023e6:	2301      	movs	r3, #1
 80023e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023f6:	2302      	movs	r3, #2
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(R_PWM_GPIO_Port, &GPIO_InitStruct);
 80023fa:	f107 031c 	add.w	r3, r7, #28
 80023fe:	4619      	mov	r1, r3
 8002400:	4828      	ldr	r0, [pc, #160]	; (80024a4 <HAL_TIM_MspPostInit+0x130>)
 8002402:	f000 fa5d 	bl	80028c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002406:	e043      	b.n	8002490 <HAL_TIM_MspPostInit+0x11c>
  else if(timHandle->Instance==TIM4)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a26      	ldr	r2, [pc, #152]	; (80024a8 <HAL_TIM_MspPostInit+0x134>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d11d      	bne.n	800244e <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002412:	4b22      	ldr	r3, [pc, #136]	; (800249c <HAL_TIM_MspPostInit+0x128>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4a21      	ldr	r2, [pc, #132]	; (800249c <HAL_TIM_MspPostInit+0x128>)
 8002418:	f043 0302 	orr.w	r3, r3, #2
 800241c:	61d3      	str	r3, [r2, #28]
 800241e:	4b1f      	ldr	r3, [pc, #124]	; (800249c <HAL_TIM_MspPostInit+0x128>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PodstawaPWM_Pin|Czlon1PWM_Pin|Czlon2PWM_Pin|Czlon3PWM_Pin;
 800242a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800242e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002438:	2300      	movs	r3, #0
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800243c:	2302      	movs	r3, #2
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002440:	f107 031c 	add.w	r3, r7, #28
 8002444:	4619      	mov	r1, r3
 8002446:	4817      	ldr	r0, [pc, #92]	; (80024a4 <HAL_TIM_MspPostInit+0x130>)
 8002448:	f000 fa3a 	bl	80028c0 <HAL_GPIO_Init>
}
 800244c:	e020      	b.n	8002490 <HAL_TIM_MspPostInit+0x11c>
  else if(timHandle->Instance==TIM5)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a16      	ldr	r2, [pc, #88]	; (80024ac <HAL_TIM_MspPostInit+0x138>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d11b      	bne.n	8002490 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <HAL_TIM_MspPostInit+0x128>)
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	4a0f      	ldr	r2, [pc, #60]	; (800249c <HAL_TIM_MspPostInit+0x128>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	61d3      	str	r3, [r2, #28]
 8002464:	4b0d      	ldr	r3, [pc, #52]	; (800249c <HAL_TIM_MspPostInit+0x128>)
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = L_PWM_Pin;
 8002470:	2302      	movs	r3, #2
 8002472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	2302      	movs	r3, #2
 8002476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247c:	2300      	movs	r3, #0
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002480:	2302      	movs	r3, #2
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(L_PWM_GPIO_Port, &GPIO_InitStruct);
 8002484:	f107 031c 	add.w	r3, r7, #28
 8002488:	4619      	mov	r1, r3
 800248a:	4805      	ldr	r0, [pc, #20]	; (80024a0 <HAL_TIM_MspPostInit+0x12c>)
 800248c:	f000 fa18 	bl	80028c0 <HAL_GPIO_Init>
}
 8002490:	bf00      	nop
 8002492:	3730      	adds	r7, #48	; 0x30
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40000400 	.word	0x40000400
 800249c:	40023800 	.word	0x40023800
 80024a0:	40020000 	.word	0x40020000
 80024a4:	40020400 	.word	0x40020400
 80024a8:	40000800 	.word	0x40000800
 80024ac:	40000c00 	.word	0x40000c00

080024b0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <MX_USART2_UART_Init+0x4c>)
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <MX_USART2_UART_Init+0x50>)
 80024b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <MX_USART2_UART_Init+0x4c>)
 80024bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <MX_USART2_UART_Init+0x4c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <MX_USART2_UART_Init+0x4c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <MX_USART2_UART_Init+0x4c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <MX_USART2_UART_Init+0x4c>)
 80024d6:	220c      	movs	r2, #12
 80024d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <MX_USART2_UART_Init+0x4c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <MX_USART2_UART_Init+0x4c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024e6:	4805      	ldr	r0, [pc, #20]	; (80024fc <MX_USART2_UART_Init+0x4c>)
 80024e8:	f002 fc8c 	bl	8004e04 <HAL_UART_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024f2:	f7ff f8e9 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000184 	.word	0x20000184
 8002500:	40004400 	.word	0x40004400

08002504 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	; 0x28
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a17      	ldr	r2, [pc, #92]	; (8002580 <HAL_UART_MspInit+0x7c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d127      	bne.n	8002576 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <HAL_UART_MspInit+0x80>)
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	4a16      	ldr	r2, [pc, #88]	; (8002584 <HAL_UART_MspInit+0x80>)
 800252c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002530:	6253      	str	r3, [r2, #36]	; 0x24
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <HAL_UART_MspInit+0x80>)
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	4b11      	ldr	r3, [pc, #68]	; (8002584 <HAL_UART_MspInit+0x80>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4a10      	ldr	r2, [pc, #64]	; (8002584 <HAL_UART_MspInit+0x80>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	61d3      	str	r3, [r2, #28]
 800254a:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <HAL_UART_MspInit+0x80>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002556:	230c      	movs	r3, #12
 8002558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002562:	2303      	movs	r3, #3
 8002564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002566:	2307      	movs	r3, #7
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256a:	f107 0314 	add.w	r3, r7, #20
 800256e:	4619      	mov	r1, r3
 8002570:	4805      	ldr	r0, [pc, #20]	; (8002588 <HAL_UART_MspInit+0x84>)
 8002572:	f000 f9a5 	bl	80028c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002576:	bf00      	nop
 8002578:	3728      	adds	r7, #40	; 0x28
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40004400 	.word	0x40004400
 8002584:	40023800 	.word	0x40023800
 8002588:	40020000 	.word	0x40020000

0800258c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 800258c:	f7ff fd13 	bl	8001fb6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002590:	480b      	ldr	r0, [pc, #44]	; (80025c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002592:	490c      	ldr	r1, [pc, #48]	; (80025c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002594:	4a0c      	ldr	r2, [pc, #48]	; (80025c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002598:	e002      	b.n	80025a0 <LoopCopyDataInit>

0800259a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800259a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800259c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800259e:	3304      	adds	r3, #4

080025a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a4:	d3f9      	bcc.n	800259a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025a6:	4a09      	ldr	r2, [pc, #36]	; (80025cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80025a8:	4c09      	ldr	r4, [pc, #36]	; (80025d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025ac:	e001      	b.n	80025b2 <LoopFillZerobss>

080025ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b0:	3204      	adds	r2, #4

080025b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b4:	d3fb      	bcc.n	80025ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025b6:	f002 fd59 	bl	800506c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025ba:	f7fe f9c3 	bl	8000944 <main>
  bx lr
 80025be:	4770      	bx	lr
  ldr r0, =_sdata
 80025c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80025c8:	08005118 	.word	0x08005118
  ldr r2, =_sbss
 80025cc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80025d0:	200001d0 	.word	0x200001d0

080025d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025d4:	e7fe      	b.n	80025d4 <ADC1_IRQHandler>

080025d6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e0:	2003      	movs	r0, #3
 80025e2:	f000 f939 	bl	8002858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025e6:	2000      	movs	r0, #0
 80025e8:	f000 f80e 	bl	8002608 <HAL_InitTick>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	71fb      	strb	r3, [r7, #7]
 80025f6:	e001      	b.n	80025fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025f8:	f7ff fc86 	bl	8001f08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025fc:	79fb      	ldrb	r3, [r7, #7]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002614:	4b16      	ldr	r3, [pc, #88]	; (8002670 <HAL_InitTick+0x68>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d022      	beq.n	8002662 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800261c:	4b15      	ldr	r3, [pc, #84]	; (8002674 <HAL_InitTick+0x6c>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <HAL_InitTick+0x68>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002628:	fbb1 f3f3 	udiv	r3, r1, r3
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	4618      	mov	r0, r3
 8002632:	f000 f938 	bl	80028a6 <HAL_SYSTICK_Config>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10f      	bne.n	800265c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b0f      	cmp	r3, #15
 8002640:	d809      	bhi.n	8002656 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002642:	2200      	movs	r2, #0
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	f04f 30ff 	mov.w	r0, #4294967295
 800264a:	f000 f910 	bl	800286e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800264e:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <HAL_InitTick+0x70>)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	e007      	b.n	8002666 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
 800265a:	e004      	b.n	8002666 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	e001      	b.n	8002666 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	2000000c 	.word	0x2000000c
 8002674:	20000004 	.word	0x20000004
 8002678:	20000008 	.word	0x20000008

0800267c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_IncTick+0x1c>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <HAL_IncTick+0x20>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4413      	add	r3, r2
 800268a:	4a03      	ldr	r2, [pc, #12]	; (8002698 <HAL_IncTick+0x1c>)
 800268c:	6013      	str	r3, [r2, #0]
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	200001cc 	.word	0x200001cc
 800269c:	2000000c 	.word	0x2000000c

080026a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return uwTick;
 80026a4:	4b02      	ldr	r3, [pc, #8]	; (80026b0 <HAL_GetTick+0x10>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr
 80026b0:	200001cc 	.word	0x200001cc

080026b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026bc:	f7ff fff0 	bl	80026a0 <HAL_GetTick>
 80026c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d004      	beq.n	80026d8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <HAL_Delay+0x40>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4413      	add	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026d8:	bf00      	nop
 80026da:	f7ff ffe1 	bl	80026a0 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d8f7      	bhi.n	80026da <HAL_Delay+0x26>
  {
  }
}
 80026ea:	bf00      	nop
 80026ec:	bf00      	nop
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	2000000c 	.word	0x2000000c

080026f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <__NVIC_SetPriorityGrouping+0x44>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002714:	4013      	ands	r3, r2
 8002716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272a:	4a04      	ldr	r2, [pc, #16]	; (800273c <__NVIC_SetPriorityGrouping+0x44>)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	60d3      	str	r3, [r2, #12]
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <__NVIC_GetPriorityGrouping+0x18>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	f003 0307 	and.w	r3, r3, #7
}
 800274e:	4618      	mov	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	6039      	str	r1, [r7, #0]
 8002766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276c:	2b00      	cmp	r3, #0
 800276e:	db0a      	blt.n	8002786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	b2da      	uxtb	r2, r3
 8002774:	490c      	ldr	r1, [pc, #48]	; (80027a8 <__NVIC_SetPriority+0x4c>)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	0112      	lsls	r2, r2, #4
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	440b      	add	r3, r1
 8002780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002784:	e00a      	b.n	800279c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4908      	ldr	r1, [pc, #32]	; (80027ac <__NVIC_SetPriority+0x50>)
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	3b04      	subs	r3, #4
 8002794:	0112      	lsls	r2, r2, #4
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	440b      	add	r3, r1
 800279a:	761a      	strb	r2, [r3, #24]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000e100 	.word	0xe000e100
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b089      	sub	sp, #36	; 0x24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f1c3 0307 	rsb	r3, r3, #7
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	bf28      	it	cs
 80027ce:	2304      	movcs	r3, #4
 80027d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3304      	adds	r3, #4
 80027d6:	2b06      	cmp	r3, #6
 80027d8:	d902      	bls.n	80027e0 <NVIC_EncodePriority+0x30>
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3b03      	subs	r3, #3
 80027de:	e000      	b.n	80027e2 <NVIC_EncodePriority+0x32>
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e4:	f04f 32ff 	mov.w	r2, #4294967295
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43da      	mvns	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	401a      	ands	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f8:	f04f 31ff 	mov.w	r1, #4294967295
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002802:	43d9      	mvns	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	4313      	orrs	r3, r2
         );
}
 800280a:	4618      	mov	r0, r3
 800280c:	3724      	adds	r7, #36	; 0x24
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3b01      	subs	r3, #1
 8002820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002824:	d301      	bcc.n	800282a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002826:	2301      	movs	r3, #1
 8002828:	e00f      	b.n	800284a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800282a:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <SysTick_Config+0x40>)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3b01      	subs	r3, #1
 8002830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002832:	210f      	movs	r1, #15
 8002834:	f04f 30ff 	mov.w	r0, #4294967295
 8002838:	f7ff ff90 	bl	800275c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <SysTick_Config+0x40>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002842:	4b04      	ldr	r3, [pc, #16]	; (8002854 <SysTick_Config+0x40>)
 8002844:	2207      	movs	r2, #7
 8002846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	e000e010 	.word	0xe000e010

08002858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff ff49 	bl	80026f8 <__NVIC_SetPriorityGrouping>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b086      	sub	sp, #24
 8002872:	af00      	add	r7, sp, #0
 8002874:	4603      	mov	r3, r0
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	607a      	str	r2, [r7, #4]
 800287a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002880:	f7ff ff5e 	bl	8002740 <__NVIC_GetPriorityGrouping>
 8002884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68b9      	ldr	r1, [r7, #8]
 800288a:	6978      	ldr	r0, [r7, #20]
 800288c:	f7ff ff90 	bl	80027b0 <NVIC_EncodePriority>
 8002890:	4602      	mov	r2, r0
 8002892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002896:	4611      	mov	r1, r2
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff5f 	bl	800275c <__NVIC_SetPriority>
}
 800289e:	bf00      	nop
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ffb0 	bl	8002814 <SysTick_Config>
 80028b4:	4603      	mov	r3, r0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80028d6:	e160      	b.n	8002b9a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	2101      	movs	r1, #1
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	fa01 f303 	lsl.w	r3, r1, r3
 80028e4:	4013      	ands	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 8152 	beq.w	8002b94 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d005      	beq.n	8002908 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002904:	2b02      	cmp	r3, #2
 8002906:	d130      	bne.n	800296a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	2203      	movs	r2, #3
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4013      	ands	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800293e:	2201      	movs	r2, #1
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4013      	ands	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	091b      	lsrs	r3, r3, #4
 8002954:	f003 0201 	and.w	r2, r3, #1
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b03      	cmp	r3, #3
 8002974:	d017      	beq.n	80029a6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	2203      	movs	r2, #3
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4013      	ands	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d123      	bne.n	80029fa <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	08da      	lsrs	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3208      	adds	r2, #8
 80029ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029be:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	220f      	movs	r2, #15
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4013      	ands	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	08da      	lsrs	r2, r3, #3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3208      	adds	r2, #8
 80029f4:	6939      	ldr	r1, [r7, #16]
 80029f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	2203      	movs	r2, #3
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 0203 	and.w	r2, r3, #3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 80ac 	beq.w	8002b94 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3c:	4b5e      	ldr	r3, [pc, #376]	; (8002bb8 <HAL_GPIO_Init+0x2f8>)
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	4a5d      	ldr	r2, [pc, #372]	; (8002bb8 <HAL_GPIO_Init+0x2f8>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	6213      	str	r3, [r2, #32]
 8002a48:	4b5b      	ldr	r3, [pc, #364]	; (8002bb8 <HAL_GPIO_Init+0x2f8>)
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a54:	4a59      	ldr	r2, [pc, #356]	; (8002bbc <HAL_GPIO_Init+0x2fc>)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	089b      	lsrs	r3, r3, #2
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	220f      	movs	r2, #15
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a51      	ldr	r2, [pc, #324]	; (8002bc0 <HAL_GPIO_Init+0x300>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d025      	beq.n	8002acc <HAL_GPIO_Init+0x20c>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a50      	ldr	r2, [pc, #320]	; (8002bc4 <HAL_GPIO_Init+0x304>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d01f      	beq.n	8002ac8 <HAL_GPIO_Init+0x208>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a4f      	ldr	r2, [pc, #316]	; (8002bc8 <HAL_GPIO_Init+0x308>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d019      	beq.n	8002ac4 <HAL_GPIO_Init+0x204>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a4e      	ldr	r2, [pc, #312]	; (8002bcc <HAL_GPIO_Init+0x30c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d013      	beq.n	8002ac0 <HAL_GPIO_Init+0x200>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a4d      	ldr	r2, [pc, #308]	; (8002bd0 <HAL_GPIO_Init+0x310>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00d      	beq.n	8002abc <HAL_GPIO_Init+0x1fc>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a4c      	ldr	r2, [pc, #304]	; (8002bd4 <HAL_GPIO_Init+0x314>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d007      	beq.n	8002ab8 <HAL_GPIO_Init+0x1f8>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a4b      	ldr	r2, [pc, #300]	; (8002bd8 <HAL_GPIO_Init+0x318>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d101      	bne.n	8002ab4 <HAL_GPIO_Init+0x1f4>
 8002ab0:	2306      	movs	r3, #6
 8002ab2:	e00c      	b.n	8002ace <HAL_GPIO_Init+0x20e>
 8002ab4:	2307      	movs	r3, #7
 8002ab6:	e00a      	b.n	8002ace <HAL_GPIO_Init+0x20e>
 8002ab8:	2305      	movs	r3, #5
 8002aba:	e008      	b.n	8002ace <HAL_GPIO_Init+0x20e>
 8002abc:	2304      	movs	r3, #4
 8002abe:	e006      	b.n	8002ace <HAL_GPIO_Init+0x20e>
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e004      	b.n	8002ace <HAL_GPIO_Init+0x20e>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e002      	b.n	8002ace <HAL_GPIO_Init+0x20e>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <HAL_GPIO_Init+0x20e>
 8002acc:	2300      	movs	r3, #0
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	f002 0203 	and.w	r2, r2, #3
 8002ad4:	0092      	lsls	r2, r2, #2
 8002ad6:	4093      	lsls	r3, r2
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ade:	4937      	ldr	r1, [pc, #220]	; (8002bbc <HAL_GPIO_Init+0x2fc>)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	089b      	lsrs	r3, r3, #2
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aec:	4b3b      	ldr	r3, [pc, #236]	; (8002bdc <HAL_GPIO_Init+0x31c>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b10:	4a32      	ldr	r2, [pc, #200]	; (8002bdc <HAL_GPIO_Init+0x31c>)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b16:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <HAL_GPIO_Init+0x31c>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b3a:	4a28      	ldr	r2, [pc, #160]	; (8002bdc <HAL_GPIO_Init+0x31c>)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b40:	4b26      	ldr	r3, [pc, #152]	; (8002bdc <HAL_GPIO_Init+0x31c>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b64:	4a1d      	ldr	r2, [pc, #116]	; (8002bdc <HAL_GPIO_Init+0x31c>)
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b6a:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <HAL_GPIO_Init+0x31c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b8e:	4a13      	ldr	r2, [pc, #76]	; (8002bdc <HAL_GPIO_Init+0x31c>)
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	3301      	adds	r3, #1
 8002b98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f47f ae97 	bne.w	80028d8 <HAL_GPIO_Init+0x18>
  }
}
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40010000 	.word	0x40010000
 8002bc0:	40020000 	.word	0x40020000
 8002bc4:	40020400 	.word	0x40020400
 8002bc8:	40020800 	.word	0x40020800
 8002bcc:	40020c00 	.word	0x40020c00
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40021400 	.word	0x40021400
 8002bd8:	40021800 	.word	0x40021800
 8002bdc:	40010400 	.word	0x40010400

08002be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	807b      	strh	r3, [r7, #2]
 8002bec:	4613      	mov	r3, r2
 8002bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bf0:	787b      	ldrb	r3, [r7, #1]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002bfc:	e003      	b.n	8002c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002bfe:	887b      	ldrh	r3, [r7, #2]
 8002c00:	041a      	lsls	r2, r3, #16
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	619a      	str	r2, [r3, #24]
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c22:	887a      	ldrh	r2, [r7, #2]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4013      	ands	r3, r2
 8002c28:	041a      	lsls	r2, r3, #16
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	43d9      	mvns	r1, r3
 8002c2e:	887b      	ldrh	r3, [r7, #2]
 8002c30:	400b      	ands	r3, r1
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	619a      	str	r2, [r3, #24]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr
	...

08002c44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e31d      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c56:	4b94      	ldr	r3, [pc, #592]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c60:	4b91      	ldr	r3, [pc, #580]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c68:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d07b      	beq.n	8002d6e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d006      	beq.n	8002c8a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	2b0c      	cmp	r3, #12
 8002c80:	d10f      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x5e>
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c88:	d10b      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8a:	4b87      	ldr	r3, [pc, #540]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d06a      	beq.n	8002d6c <HAL_RCC_OscConfig+0x128>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d166      	bne.n	8002d6c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e2f7      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d106      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x74>
 8002caa:	4b7f      	ldr	r3, [pc, #508]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a7e      	ldr	r2, [pc, #504]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	e02d      	b.n	8002d14 <HAL_RCC_OscConfig+0xd0>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10c      	bne.n	8002cda <HAL_RCC_OscConfig+0x96>
 8002cc0:	4b79      	ldr	r3, [pc, #484]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a78      	ldr	r2, [pc, #480]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	4b76      	ldr	r3, [pc, #472]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a75      	ldr	r2, [pc, #468]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cd6:	6013      	str	r3, [r2, #0]
 8002cd8:	e01c      	b.n	8002d14 <HAL_RCC_OscConfig+0xd0>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b05      	cmp	r3, #5
 8002ce0:	d10c      	bne.n	8002cfc <HAL_RCC_OscConfig+0xb8>
 8002ce2:	4b71      	ldr	r3, [pc, #452]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a70      	ldr	r2, [pc, #448]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	4b6e      	ldr	r3, [pc, #440]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a6d      	ldr	r2, [pc, #436]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	e00b      	b.n	8002d14 <HAL_RCC_OscConfig+0xd0>
 8002cfc:	4b6a      	ldr	r3, [pc, #424]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a69      	ldr	r2, [pc, #420]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	4b67      	ldr	r3, [pc, #412]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a66      	ldr	r2, [pc, #408]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d013      	beq.n	8002d44 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7ff fcc0 	bl	80026a0 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d24:	f7ff fcbc 	bl	80026a0 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e2ad      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d36:	4b5c      	ldr	r3, [pc, #368]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0xe0>
 8002d42:	e014      	b.n	8002d6e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7ff fcac 	bl	80026a0 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7ff fca8 	bl	80026a0 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	; 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e299      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d5e:	4b52      	ldr	r3, [pc, #328]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x108>
 8002d6a:	e000      	b.n	8002d6e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d05a      	beq.n	8002e30 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	d119      	bne.n	8002dba <HAL_RCC_OscConfig+0x176>
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d116      	bne.n	8002dba <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8c:	4b46      	ldr	r3, [pc, #280]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_OscConfig+0x160>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e276      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da4:	4b40      	ldr	r3, [pc, #256]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	021b      	lsls	r3, r3, #8
 8002db2:	493d      	ldr	r1, [pc, #244]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db8:	e03a      	b.n	8002e30 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d020      	beq.n	8002e04 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc2:	4b3a      	ldr	r3, [pc, #232]	; (8002eac <HAL_RCC_OscConfig+0x268>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7ff fc6a 	bl	80026a0 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd0:	f7ff fc66 	bl	80026a0 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e257      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002de2:	4b31      	ldr	r3, [pc, #196]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dee:	4b2e      	ldr	r3, [pc, #184]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	492a      	ldr	r1, [pc, #168]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]
 8002e02:	e015      	b.n	8002e30 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e04:	4b29      	ldr	r3, [pc, #164]	; (8002eac <HAL_RCC_OscConfig+0x268>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7ff fc49 	bl	80026a0 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e12:	f7ff fc45 	bl	80026a0 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e236      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e24:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f0      	bne.n	8002e12 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80b8 	beq.w	8002fae <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d170      	bne.n	8002f26 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e44:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_OscConfig+0x218>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e21a      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1a      	ldr	r2, [r3, #32]
 8002e60:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d921      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fc7d 	bl	8003770 <RCC_SetFlashLatencyFromMSIRange>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e208      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4906      	ldr	r1, [pc, #24]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	061b      	lsls	r3, r3, #24
 8002ea0:	4901      	ldr	r1, [pc, #4]	; (8002ea8 <HAL_RCC_OscConfig+0x264>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]
 8002ea6:	e020      	b.n	8002eea <HAL_RCC_OscConfig+0x2a6>
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eb0:	4b99      	ldr	r3, [pc, #612]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4996      	ldr	r1, [pc, #600]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ec2:	4b95      	ldr	r3, [pc, #596]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	061b      	lsls	r3, r3, #24
 8002ed0:	4991      	ldr	r1, [pc, #580]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fc48 	bl	8003770 <RCC_SetFlashLatencyFromMSIRange>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e1d3      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	0b5b      	lsrs	r3, r3, #13
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002efa:	4a87      	ldr	r2, [pc, #540]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8002efc:	6892      	ldr	r2, [r2, #8]
 8002efe:	0912      	lsrs	r2, r2, #4
 8002f00:	f002 020f 	and.w	r2, r2, #15
 8002f04:	4985      	ldr	r1, [pc, #532]	; (800311c <HAL_RCC_OscConfig+0x4d8>)
 8002f06:	5c8a      	ldrb	r2, [r1, r2]
 8002f08:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f0a:	4a85      	ldr	r2, [pc, #532]	; (8003120 <HAL_RCC_OscConfig+0x4dc>)
 8002f0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f0e:	4b85      	ldr	r3, [pc, #532]	; (8003124 <HAL_RCC_OscConfig+0x4e0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fb78 	bl	8002608 <HAL_InitTick>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d045      	beq.n	8002fae <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	e1b5      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d029      	beq.n	8002f82 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f2e:	4b7e      	ldr	r3, [pc, #504]	; (8003128 <HAL_RCC_OscConfig+0x4e4>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7ff fbb4 	bl	80026a0 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f3c:	f7ff fbb0 	bl	80026a0 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e1a1      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f4e:	4b72      	ldr	r3, [pc, #456]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f5a:	4b6f      	ldr	r3, [pc, #444]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	496c      	ldr	r1, [pc, #432]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f6c:	4b6a      	ldr	r3, [pc, #424]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	061b      	lsls	r3, r3, #24
 8002f7a:	4967      	ldr	r1, [pc, #412]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]
 8002f80:	e015      	b.n	8002fae <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f82:	4b69      	ldr	r3, [pc, #420]	; (8003128 <HAL_RCC_OscConfig+0x4e4>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7ff fb8a 	bl	80026a0 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f90:	f7ff fb86 	bl	80026a0 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e177      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002fa2:	4b5d      	ldr	r3, [pc, #372]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d030      	beq.n	800301c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d016      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fc2:	4b5a      	ldr	r3, [pc, #360]	; (800312c <HAL_RCC_OscConfig+0x4e8>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc8:	f7ff fb6a 	bl	80026a0 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fd0:	f7ff fb66 	bl	80026a0 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e157      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fe2:	4b4d      	ldr	r3, [pc, #308]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8002fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x38c>
 8002fee:	e015      	b.n	800301c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff0:	4b4e      	ldr	r3, [pc, #312]	; (800312c <HAL_RCC_OscConfig+0x4e8>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff6:	f7ff fb53 	bl	80026a0 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ffe:	f7ff fb4f 	bl	80026a0 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e140      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003010:	4b41      	ldr	r3, [pc, #260]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8003012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1f0      	bne.n	8002ffe <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80b5 	beq.w	8003194 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800302a:	2300      	movs	r3, #0
 800302c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800302e:	4b3a      	ldr	r3, [pc, #232]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10d      	bne.n	8003056 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800303a:	4b37      	ldr	r3, [pc, #220]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	4a36      	ldr	r2, [pc, #216]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8003040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003044:	6253      	str	r3, [r2, #36]	; 0x24
 8003046:	4b34      	ldr	r3, [pc, #208]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003052:	2301      	movs	r3, #1
 8003054:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003056:	4b36      	ldr	r3, [pc, #216]	; (8003130 <HAL_RCC_OscConfig+0x4ec>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305e:	2b00      	cmp	r3, #0
 8003060:	d118      	bne.n	8003094 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003062:	4b33      	ldr	r3, [pc, #204]	; (8003130 <HAL_RCC_OscConfig+0x4ec>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a32      	ldr	r2, [pc, #200]	; (8003130 <HAL_RCC_OscConfig+0x4ec>)
 8003068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800306e:	f7ff fb17 	bl	80026a0 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003076:	f7ff fb13 	bl	80026a0 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b64      	cmp	r3, #100	; 0x64
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e104      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003088:	4b29      	ldr	r3, [pc, #164]	; (8003130 <HAL_RCC_OscConfig+0x4ec>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d106      	bne.n	80030aa <HAL_RCC_OscConfig+0x466>
 800309c:	4b1e      	ldr	r3, [pc, #120]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 800309e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a0:	4a1d      	ldr	r2, [pc, #116]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 80030a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a6:	6353      	str	r3, [r2, #52]	; 0x34
 80030a8:	e02d      	b.n	8003106 <HAL_RCC_OscConfig+0x4c2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10c      	bne.n	80030cc <HAL_RCC_OscConfig+0x488>
 80030b2:	4b19      	ldr	r3, [pc, #100]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 80030b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b6:	4a18      	ldr	r2, [pc, #96]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 80030b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030bc:	6353      	str	r3, [r2, #52]	; 0x34
 80030be:	4b16      	ldr	r3, [pc, #88]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 80030c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c2:	4a15      	ldr	r2, [pc, #84]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 80030c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030c8:	6353      	str	r3, [r2, #52]	; 0x34
 80030ca:	e01c      	b.n	8003106 <HAL_RCC_OscConfig+0x4c2>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b05      	cmp	r3, #5
 80030d2:	d10c      	bne.n	80030ee <HAL_RCC_OscConfig+0x4aa>
 80030d4:	4b10      	ldr	r3, [pc, #64]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 80030d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d8:	4a0f      	ldr	r2, [pc, #60]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 80030da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030de:	6353      	str	r3, [r2, #52]	; 0x34
 80030e0:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 80030e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e4:	4a0c      	ldr	r2, [pc, #48]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 80030e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ea:	6353      	str	r3, [r2, #52]	; 0x34
 80030ec:	e00b      	b.n	8003106 <HAL_RCC_OscConfig+0x4c2>
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 80030f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f2:	4a09      	ldr	r2, [pc, #36]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 80030f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f8:	6353      	str	r3, [r2, #52]	; 0x34
 80030fa:	4b07      	ldr	r3, [pc, #28]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 80030fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fe:	4a06      	ldr	r2, [pc, #24]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8003100:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003104:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d024      	beq.n	8003158 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800310e:	f7ff fac7 	bl	80026a0 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003114:	e019      	b.n	800314a <HAL_RCC_OscConfig+0x506>
 8003116:	bf00      	nop
 8003118:	40023800 	.word	0x40023800
 800311c:	080050f0 	.word	0x080050f0
 8003120:	20000004 	.word	0x20000004
 8003124:	20000008 	.word	0x20000008
 8003128:	42470020 	.word	0x42470020
 800312c:	42470680 	.word	0x42470680
 8003130:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003134:	f7ff fab4 	bl	80026a0 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e0a3      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800314a:	4b54      	ldr	r3, [pc, #336]	; (800329c <HAL_RCC_OscConfig+0x658>)
 800314c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0ee      	beq.n	8003134 <HAL_RCC_OscConfig+0x4f0>
 8003156:	e014      	b.n	8003182 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003158:	f7ff faa2 	bl	80026a0 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800315e:	e00a      	b.n	8003176 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003160:	f7ff fa9e 	bl	80026a0 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	f241 3288 	movw	r2, #5000	; 0x1388
 800316e:	4293      	cmp	r3, r2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e08d      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003176:	4b49      	ldr	r3, [pc, #292]	; (800329c <HAL_RCC_OscConfig+0x658>)
 8003178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1ee      	bne.n	8003160 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003182:	7ffb      	ldrb	r3, [r7, #31]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d105      	bne.n	8003194 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003188:	4b44      	ldr	r3, [pc, #272]	; (800329c <HAL_RCC_OscConfig+0x658>)
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	4a43      	ldr	r2, [pc, #268]	; (800329c <HAL_RCC_OscConfig+0x658>)
 800318e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003192:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	2b00      	cmp	r3, #0
 800319a:	d079      	beq.n	8003290 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	2b0c      	cmp	r3, #12
 80031a0:	d056      	beq.n	8003250 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d13b      	bne.n	8003222 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <HAL_RCC_OscConfig+0x65c>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7ff fa76 	bl	80026a0 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b8:	f7ff fa72 	bl	80026a0 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e063      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031ca:	4b34      	ldr	r3, [pc, #208]	; (800329c <HAL_RCC_OscConfig+0x658>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031d6:	4b31      	ldr	r3, [pc, #196]	; (800329c <HAL_RCC_OscConfig+0x658>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e6:	4319      	orrs	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	430b      	orrs	r3, r1
 80031ee:	492b      	ldr	r1, [pc, #172]	; (800329c <HAL_RCC_OscConfig+0x658>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031f4:	4b2a      	ldr	r3, [pc, #168]	; (80032a0 <HAL_RCC_OscConfig+0x65c>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fa:	f7ff fa51 	bl	80026a0 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003202:	f7ff fa4d 	bl	80026a0 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e03e      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003214:	4b21      	ldr	r3, [pc, #132]	; (800329c <HAL_RCC_OscConfig+0x658>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0f0      	beq.n	8003202 <HAL_RCC_OscConfig+0x5be>
 8003220:	e036      	b.n	8003290 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003222:	4b1f      	ldr	r3, [pc, #124]	; (80032a0 <HAL_RCC_OscConfig+0x65c>)
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7ff fa3a 	bl	80026a0 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003230:	f7ff fa36 	bl	80026a0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e027      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003242:	4b16      	ldr	r3, [pc, #88]	; (800329c <HAL_RCC_OscConfig+0x658>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x5ec>
 800324e:	e01f      	b.n	8003290 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e01a      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800325c:	4b0f      	ldr	r3, [pc, #60]	; (800329c <HAL_RCC_OscConfig+0x658>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	429a      	cmp	r2, r3
 800326e:	d10d      	bne.n	800328c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327a:	429a      	cmp	r2, r3
 800327c:	d106      	bne.n	800328c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3720      	adds	r7, #32
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800
 80032a0:	42470060 	.word	0x42470060

080032a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e11a      	b.n	80034ee <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032b8:	4b8f      	ldr	r3, [pc, #572]	; (80034f8 <HAL_RCC_ClockConfig+0x254>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d919      	bls.n	80032fa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d105      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x34>
 80032cc:	4b8a      	ldr	r3, [pc, #552]	; (80034f8 <HAL_RCC_ClockConfig+0x254>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a89      	ldr	r2, [pc, #548]	; (80034f8 <HAL_RCC_ClockConfig+0x254>)
 80032d2:	f043 0304 	orr.w	r3, r3, #4
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4b87      	ldr	r3, [pc, #540]	; (80034f8 <HAL_RCC_ClockConfig+0x254>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f023 0201 	bic.w	r2, r3, #1
 80032e0:	4985      	ldr	r1, [pc, #532]	; (80034f8 <HAL_RCC_ClockConfig+0x254>)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e8:	4b83      	ldr	r3, [pc, #524]	; (80034f8 <HAL_RCC_ClockConfig+0x254>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d001      	beq.n	80032fa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e0f9      	b.n	80034ee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d008      	beq.n	8003318 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003306:	4b7d      	ldr	r3, [pc, #500]	; (80034fc <HAL_RCC_ClockConfig+0x258>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	497a      	ldr	r1, [pc, #488]	; (80034fc <HAL_RCC_ClockConfig+0x258>)
 8003314:	4313      	orrs	r3, r2
 8003316:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 808e 	beq.w	8003442 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d107      	bne.n	800333e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800332e:	4b73      	ldr	r3, [pc, #460]	; (80034fc <HAL_RCC_ClockConfig+0x258>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d121      	bne.n	800337e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e0d7      	b.n	80034ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d107      	bne.n	8003356 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003346:	4b6d      	ldr	r3, [pc, #436]	; (80034fc <HAL_RCC_ClockConfig+0x258>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d115      	bne.n	800337e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e0cb      	b.n	80034ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d107      	bne.n	800336e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800335e:	4b67      	ldr	r3, [pc, #412]	; (80034fc <HAL_RCC_ClockConfig+0x258>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d109      	bne.n	800337e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e0bf      	b.n	80034ee <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800336e:	4b63      	ldr	r3, [pc, #396]	; (80034fc <HAL_RCC_ClockConfig+0x258>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e0b7      	b.n	80034ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800337e:	4b5f      	ldr	r3, [pc, #380]	; (80034fc <HAL_RCC_ClockConfig+0x258>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f023 0203 	bic.w	r2, r3, #3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	495c      	ldr	r1, [pc, #368]	; (80034fc <HAL_RCC_ClockConfig+0x258>)
 800338c:	4313      	orrs	r3, r2
 800338e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003390:	f7ff f986 	bl	80026a0 <HAL_GetTick>
 8003394:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d112      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a0:	f7ff f97e 	bl	80026a0 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e09b      	b.n	80034ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033b6:	4b51      	ldr	r3, [pc, #324]	; (80034fc <HAL_RCC_ClockConfig+0x258>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d1ee      	bne.n	80033a0 <HAL_RCC_ClockConfig+0xfc>
 80033c2:	e03e      	b.n	8003442 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d112      	bne.n	80033f2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033cc:	e00a      	b.n	80033e4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ce:	f7ff f967 	bl	80026a0 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033dc:	4293      	cmp	r3, r2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e084      	b.n	80034ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e4:	4b45      	ldr	r3, [pc, #276]	; (80034fc <HAL_RCC_ClockConfig+0x258>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 030c 	and.w	r3, r3, #12
 80033ec:	2b0c      	cmp	r3, #12
 80033ee:	d1ee      	bne.n	80033ce <HAL_RCC_ClockConfig+0x12a>
 80033f0:	e027      	b.n	8003442 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d11d      	bne.n	8003436 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033fa:	e00a      	b.n	8003412 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033fc:	f7ff f950 	bl	80026a0 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f241 3288 	movw	r2, #5000	; 0x1388
 800340a:	4293      	cmp	r3, r2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e06d      	b.n	80034ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003412:	4b3a      	ldr	r3, [pc, #232]	; (80034fc <HAL_RCC_ClockConfig+0x258>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b04      	cmp	r3, #4
 800341c:	d1ee      	bne.n	80033fc <HAL_RCC_ClockConfig+0x158>
 800341e:	e010      	b.n	8003442 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003420:	f7ff f93e 	bl	80026a0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	; 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e05b      	b.n	80034ee <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003436:	4b31      	ldr	r3, [pc, #196]	; (80034fc <HAL_RCC_ClockConfig+0x258>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1ee      	bne.n	8003420 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003442:	4b2d      	ldr	r3, [pc, #180]	; (80034f8 <HAL_RCC_ClockConfig+0x254>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d219      	bcs.n	8003484 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d105      	bne.n	8003462 <HAL_RCC_ClockConfig+0x1be>
 8003456:	4b28      	ldr	r3, [pc, #160]	; (80034f8 <HAL_RCC_ClockConfig+0x254>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a27      	ldr	r2, [pc, #156]	; (80034f8 <HAL_RCC_ClockConfig+0x254>)
 800345c:	f043 0304 	orr.w	r3, r3, #4
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	4b25      	ldr	r3, [pc, #148]	; (80034f8 <HAL_RCC_ClockConfig+0x254>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 0201 	bic.w	r2, r3, #1
 800346a:	4923      	ldr	r1, [pc, #140]	; (80034f8 <HAL_RCC_ClockConfig+0x254>)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	4313      	orrs	r3, r2
 8003470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <HAL_RCC_ClockConfig+0x254>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e034      	b.n	80034ee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003490:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <HAL_RCC_ClockConfig+0x258>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4917      	ldr	r1, [pc, #92]	; (80034fc <HAL_RCC_ClockConfig+0x258>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ae:	4b13      	ldr	r3, [pc, #76]	; (80034fc <HAL_RCC_ClockConfig+0x258>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	490f      	ldr	r1, [pc, #60]	; (80034fc <HAL_RCC_ClockConfig+0x258>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034c2:	f000 f823 	bl	800350c <HAL_RCC_GetSysClockFreq>
 80034c6:	4602      	mov	r2, r0
 80034c8:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <HAL_RCC_ClockConfig+0x258>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	490b      	ldr	r1, [pc, #44]	; (8003500 <HAL_RCC_ClockConfig+0x25c>)
 80034d4:	5ccb      	ldrb	r3, [r1, r3]
 80034d6:	fa22 f303 	lsr.w	r3, r2, r3
 80034da:	4a0a      	ldr	r2, [pc, #40]	; (8003504 <HAL_RCC_ClockConfig+0x260>)
 80034dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034de:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <HAL_RCC_ClockConfig+0x264>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff f890 	bl	8002608 <HAL_InitTick>
 80034e8:	4603      	mov	r3, r0
 80034ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80034ec:	7afb      	ldrb	r3, [r7, #11]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023c00 	.word	0x40023c00
 80034fc:	40023800 	.word	0x40023800
 8003500:	080050f0 	.word	0x080050f0
 8003504:	20000004 	.word	0x20000004
 8003508:	20000008 	.word	0x20000008

0800350c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800350c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003510:	b092      	sub	sp, #72	; 0x48
 8003512:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003514:	4b79      	ldr	r3, [pc, #484]	; (80036fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800351a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351c:	f003 030c 	and.w	r3, r3, #12
 8003520:	2b0c      	cmp	r3, #12
 8003522:	d00d      	beq.n	8003540 <HAL_RCC_GetSysClockFreq+0x34>
 8003524:	2b0c      	cmp	r3, #12
 8003526:	f200 80d5 	bhi.w	80036d4 <HAL_RCC_GetSysClockFreq+0x1c8>
 800352a:	2b04      	cmp	r3, #4
 800352c:	d002      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0x28>
 800352e:	2b08      	cmp	r3, #8
 8003530:	d003      	beq.n	800353a <HAL_RCC_GetSysClockFreq+0x2e>
 8003532:	e0cf      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003534:	4b72      	ldr	r3, [pc, #456]	; (8003700 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003536:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003538:	e0da      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800353a:	4b72      	ldr	r3, [pc, #456]	; (8003704 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800353c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800353e:	e0d7      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003542:	0c9b      	lsrs	r3, r3, #18
 8003544:	f003 020f 	and.w	r2, r3, #15
 8003548:	4b6f      	ldr	r3, [pc, #444]	; (8003708 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800354a:	5c9b      	ldrb	r3, [r3, r2]
 800354c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800354e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003550:	0d9b      	lsrs	r3, r3, #22
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	3301      	adds	r3, #1
 8003558:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800355a:	4b68      	ldr	r3, [pc, #416]	; (80036fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d05d      	beq.n	8003622 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003568:	2200      	movs	r2, #0
 800356a:	4618      	mov	r0, r3
 800356c:	4611      	mov	r1, r2
 800356e:	4604      	mov	r4, r0
 8003570:	460d      	mov	r5, r1
 8003572:	4622      	mov	r2, r4
 8003574:	462b      	mov	r3, r5
 8003576:	f04f 0000 	mov.w	r0, #0
 800357a:	f04f 0100 	mov.w	r1, #0
 800357e:	0159      	lsls	r1, r3, #5
 8003580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003584:	0150      	lsls	r0, r2, #5
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4621      	mov	r1, r4
 800358c:	1a51      	subs	r1, r2, r1
 800358e:	6139      	str	r1, [r7, #16]
 8003590:	4629      	mov	r1, r5
 8003592:	eb63 0301 	sbc.w	r3, r3, r1
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035a4:	4659      	mov	r1, fp
 80035a6:	018b      	lsls	r3, r1, #6
 80035a8:	4651      	mov	r1, sl
 80035aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035ae:	4651      	mov	r1, sl
 80035b0:	018a      	lsls	r2, r1, #6
 80035b2:	46d4      	mov	ip, sl
 80035b4:	ebb2 080c 	subs.w	r8, r2, ip
 80035b8:	4659      	mov	r1, fp
 80035ba:	eb63 0901 	sbc.w	r9, r3, r1
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035d2:	4690      	mov	r8, r2
 80035d4:	4699      	mov	r9, r3
 80035d6:	4623      	mov	r3, r4
 80035d8:	eb18 0303 	adds.w	r3, r8, r3
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	462b      	mov	r3, r5
 80035e0:	eb49 0303 	adc.w	r3, r9, r3
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	f04f 0300 	mov.w	r3, #0
 80035ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035f2:	4629      	mov	r1, r5
 80035f4:	024b      	lsls	r3, r1, #9
 80035f6:	4620      	mov	r0, r4
 80035f8:	4629      	mov	r1, r5
 80035fa:	4604      	mov	r4, r0
 80035fc:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003600:	4601      	mov	r1, r0
 8003602:	024a      	lsls	r2, r1, #9
 8003604:	4610      	mov	r0, r2
 8003606:	4619      	mov	r1, r3
 8003608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800360a:	2200      	movs	r2, #0
 800360c:	62bb      	str	r3, [r7, #40]	; 0x28
 800360e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003610:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003614:	f7fc ff5c 	bl	80004d0 <__aeabi_uldivmod>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4613      	mov	r3, r2
 800361e:	647b      	str	r3, [r7, #68]	; 0x44
 8003620:	e055      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003624:	2200      	movs	r2, #0
 8003626:	623b      	str	r3, [r7, #32]
 8003628:	627a      	str	r2, [r7, #36]	; 0x24
 800362a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800362e:	4642      	mov	r2, r8
 8003630:	464b      	mov	r3, r9
 8003632:	f04f 0000 	mov.w	r0, #0
 8003636:	f04f 0100 	mov.w	r1, #0
 800363a:	0159      	lsls	r1, r3, #5
 800363c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003640:	0150      	lsls	r0, r2, #5
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	46c4      	mov	ip, r8
 8003648:	ebb2 0a0c 	subs.w	sl, r2, ip
 800364c:	4640      	mov	r0, r8
 800364e:	4649      	mov	r1, r9
 8003650:	468c      	mov	ip, r1
 8003652:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003662:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003666:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800366a:	ebb2 040a 	subs.w	r4, r2, sl
 800366e:	eb63 050b 	sbc.w	r5, r3, fp
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	00eb      	lsls	r3, r5, #3
 800367c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003680:	00e2      	lsls	r2, r4, #3
 8003682:	4614      	mov	r4, r2
 8003684:	461d      	mov	r5, r3
 8003686:	4603      	mov	r3, r0
 8003688:	18e3      	adds	r3, r4, r3
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	460b      	mov	r3, r1
 800368e:	eb45 0303 	adc.w	r3, r5, r3
 8003692:	607b      	str	r3, [r7, #4]
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036a0:	4629      	mov	r1, r5
 80036a2:	028b      	lsls	r3, r1, #10
 80036a4:	4620      	mov	r0, r4
 80036a6:	4629      	mov	r1, r5
 80036a8:	4604      	mov	r4, r0
 80036aa:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80036ae:	4601      	mov	r1, r0
 80036b0:	028a      	lsls	r2, r1, #10
 80036b2:	4610      	mov	r0, r2
 80036b4:	4619      	mov	r1, r3
 80036b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b8:	2200      	movs	r2, #0
 80036ba:	61bb      	str	r3, [r7, #24]
 80036bc:	61fa      	str	r2, [r7, #28]
 80036be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036c2:	f7fc ff05 	bl	80004d0 <__aeabi_uldivmod>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4613      	mov	r3, r2
 80036cc:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80036ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80036d2:	e00d      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80036d4:	4b09      	ldr	r3, [pc, #36]	; (80036fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	0b5b      	lsrs	r3, r3, #13
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	3301      	adds	r3, #1
 80036e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80036ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3748      	adds	r7, #72	; 0x48
 80036f6:	46bd      	mov	sp, r7
 80036f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036fc:	40023800 	.word	0x40023800
 8003700:	00f42400 	.word	0x00f42400
 8003704:	007a1200 	.word	0x007a1200
 8003708:	080050e4 	.word	0x080050e4

0800370c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003710:	4b02      	ldr	r3, [pc, #8]	; (800371c <HAL_RCC_GetHCLKFreq+0x10>)
 8003712:	681b      	ldr	r3, [r3, #0]
}
 8003714:	4618      	mov	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr
 800371c:	20000004 	.word	0x20000004

08003720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003724:	f7ff fff2 	bl	800370c <HAL_RCC_GetHCLKFreq>
 8003728:	4602      	mov	r2, r0
 800372a:	4b05      	ldr	r3, [pc, #20]	; (8003740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	4903      	ldr	r1, [pc, #12]	; (8003744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003736:	5ccb      	ldrb	r3, [r1, r3]
 8003738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800373c:	4618      	mov	r0, r3
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40023800 	.word	0x40023800
 8003744:	08005100 	.word	0x08005100

08003748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800374c:	f7ff ffde 	bl	800370c <HAL_RCC_GetHCLKFreq>
 8003750:	4602      	mov	r2, r0
 8003752:	4b05      	ldr	r3, [pc, #20]	; (8003768 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	0adb      	lsrs	r3, r3, #11
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	4903      	ldr	r1, [pc, #12]	; (800376c <HAL_RCC_GetPCLK2Freq+0x24>)
 800375e:	5ccb      	ldrb	r3, [r1, r3]
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003764:	4618      	mov	r0, r3
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40023800 	.word	0x40023800
 800376c:	08005100 	.word	0x08005100

08003770 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003770:	b480      	push	{r7}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003778:	2300      	movs	r3, #0
 800377a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800377c:	4b29      	ldr	r3, [pc, #164]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d12c      	bne.n	80037e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003788:	4b26      	ldr	r3, [pc, #152]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003794:	4b24      	ldr	r3, [pc, #144]	; (8003828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	e016      	b.n	80037ce <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a0:	4b20      	ldr	r3, [pc, #128]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	4a1f      	ldr	r2, [pc, #124]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037aa:	6253      	str	r3, [r2, #36]	; 0x24
 80037ac:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80037b8:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80037c0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c2:	4b18      	ldr	r3, [pc, #96]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	4a17      	ldr	r2, [pc, #92]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037cc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80037d4:	d105      	bne.n	80037e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037dc:	d101      	bne.n	80037e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80037de:	2301      	movs	r3, #1
 80037e0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d105      	bne.n	80037f4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80037e8:	4b10      	ldr	r3, [pc, #64]	; (800382c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a0f      	ldr	r2, [pc, #60]	; (800382c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037ee:	f043 0304 	orr.w	r3, r3, #4
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	4b0d      	ldr	r3, [pc, #52]	; (800382c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f023 0201 	bic.w	r2, r3, #1
 80037fc:	490b      	ldr	r1, [pc, #44]	; (800382c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003804:	4b09      	ldr	r3, [pc, #36]	; (800382c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	429a      	cmp	r2, r3
 8003810:	d001      	beq.n	8003816 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	371c      	adds	r7, #28
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40023800 	.word	0x40023800
 8003828:	40007000 	.word	0x40007000
 800382c:	40023c00 	.word	0x40023c00

08003830 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e07b      	b.n	800393a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	2b00      	cmp	r3, #0
 8003848:	d108      	bne.n	800385c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003852:	d009      	beq.n	8003868 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	61da      	str	r2, [r3, #28]
 800385a:	e005      	b.n	8003868 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fe fafc 	bl	8001e80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800389e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ec:	ea42 0103 	orr.w	r1, r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	0c1b      	lsrs	r3, r3, #16
 8003906:	f003 0104 	and.w	r1, r3, #4
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	f003 0210 	and.w	r2, r3, #16
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69da      	ldr	r2, [r3, #28]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003928:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b088      	sub	sp, #32
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	603b      	str	r3, [r7, #0]
 800394e:	4613      	mov	r3, r2
 8003950:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_SPI_Transmit+0x22>
 8003960:	2302      	movs	r3, #2
 8003962:	e12d      	b.n	8003bc0 <HAL_SPI_Transmit+0x27e>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800396c:	f7fe fe98 	bl	80026a0 <HAL_GetTick>
 8003970:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b01      	cmp	r3, #1
 8003980:	d002      	beq.n	8003988 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003982:	2302      	movs	r3, #2
 8003984:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003986:	e116      	b.n	8003bb6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <HAL_SPI_Transmit+0x52>
 800398e:	88fb      	ldrh	r3, [r7, #6]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d102      	bne.n	800399a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003998:	e10d      	b.n	8003bb6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2203      	movs	r2, #3
 800399e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	88fa      	ldrh	r2, [r7, #6]
 80039b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	88fa      	ldrh	r2, [r7, #6]
 80039b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e0:	d10f      	bne.n	8003a02 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0c:	2b40      	cmp	r3, #64	; 0x40
 8003a0e:	d007      	beq.n	8003a20 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a28:	d14f      	bne.n	8003aca <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_SPI_Transmit+0xf6>
 8003a32:	8afb      	ldrh	r3, [r7, #22]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d142      	bne.n	8003abe <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	881a      	ldrh	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	1c9a      	adds	r2, r3, #2
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a5c:	e02f      	b.n	8003abe <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d112      	bne.n	8003a92 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	881a      	ldrh	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	1c9a      	adds	r2, r3, #2
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a90:	e015      	b.n	8003abe <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a92:	f7fe fe05 	bl	80026a0 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d803      	bhi.n	8003aaa <HAL_SPI_Transmit+0x168>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa8:	d102      	bne.n	8003ab0 <HAL_SPI_Transmit+0x16e>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d106      	bne.n	8003abe <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003abc:	e07b      	b.n	8003bb6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1ca      	bne.n	8003a5e <HAL_SPI_Transmit+0x11c>
 8003ac8:	e050      	b.n	8003b6c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_SPI_Transmit+0x196>
 8003ad2:	8afb      	ldrh	r3, [r7, #22]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d144      	bne.n	8003b62 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	330c      	adds	r3, #12
 8003ae2:	7812      	ldrb	r2, [r2, #0]
 8003ae4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003afe:	e030      	b.n	8003b62 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d113      	bne.n	8003b36 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	330c      	adds	r3, #12
 8003b18:	7812      	ldrb	r2, [r2, #0]
 8003b1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b34:	e015      	b.n	8003b62 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b36:	f7fe fdb3 	bl	80026a0 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d803      	bhi.n	8003b4e <HAL_SPI_Transmit+0x20c>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4c:	d102      	bne.n	8003b54 <HAL_SPI_Transmit+0x212>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d106      	bne.n	8003b62 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003b60:	e029      	b.n	8003bb6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1c9      	bne.n	8003b00 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	6839      	ldr	r1, [r7, #0]
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 fbdf 	bl	8004334 <SPI_EndRxTxTransaction>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10a      	bne.n	8003ba0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	77fb      	strb	r3, [r7, #31]
 8003bac:	e003      	b.n	8003bb6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3720      	adds	r7, #32
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d002      	beq.n	8003bee <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003be8:	2302      	movs	r3, #2
 8003bea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bec:	e0fb      	b.n	8003de6 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bf6:	d112      	bne.n	8003c1e <HAL_SPI_Receive+0x56>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10e      	bne.n	8003c1e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2204      	movs	r2, #4
 8003c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c08:	88fa      	ldrh	r2, [r7, #6]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	68b9      	ldr	r1, [r7, #8]
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 f8ef 	bl	8003df8 <HAL_SPI_TransmitReceive>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	e0e8      	b.n	8003df0 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_SPI_Receive+0x64>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e0e1      	b.n	8003df0 <HAL_SPI_Receive+0x228>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c34:	f7fe fd34 	bl	80026a0 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <HAL_SPI_Receive+0x7e>
 8003c40:	88fb      	ldrh	r3, [r7, #6]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d102      	bne.n	8003c4c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c4a:	e0cc      	b.n	8003de6 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2204      	movs	r2, #4
 8003c50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	88fa      	ldrh	r2, [r7, #6]
 8003c64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	88fa      	ldrh	r2, [r7, #6]
 8003c6a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c92:	d10f      	bne.n	8003cb4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cb2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbe:	2b40      	cmp	r3, #64	; 0x40
 8003cc0:	d007      	beq.n	8003cd2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cd0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d16a      	bne.n	8003db0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003cda:	e032      	b.n	8003d42 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d115      	bne.n	8003d16 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f103 020c 	add.w	r2, r3, #12
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf6:	7812      	ldrb	r2, [r2, #0]
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d14:	e015      	b.n	8003d42 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d16:	f7fe fcc3 	bl	80026a0 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d803      	bhi.n	8003d2e <HAL_SPI_Receive+0x166>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d102      	bne.n	8003d34 <HAL_SPI_Receive+0x16c>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d106      	bne.n	8003d42 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003d40:	e051      	b.n	8003de6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1c7      	bne.n	8003cdc <HAL_SPI_Receive+0x114>
 8003d4c:	e035      	b.n	8003dba <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d113      	bne.n	8003d84 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d66:	b292      	uxth	r2, r2
 8003d68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	1c9a      	adds	r2, r3, #2
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d82:	e015      	b.n	8003db0 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d84:	f7fe fc8c 	bl	80026a0 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d803      	bhi.n	8003d9c <HAL_SPI_Receive+0x1d4>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9a:	d102      	bne.n	8003da2 <HAL_SPI_Receive+0x1da>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003dae:	e01a      	b.n	8003de6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1c9      	bne.n	8003d4e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	6839      	ldr	r1, [r7, #0]
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 fa52 	bl	8004268 <SPI_EndRxTransaction>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	75fb      	strb	r3, [r7, #23]
 8003ddc:	e003      	b.n	8003de6 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08c      	sub	sp, #48	; 0x30
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e06:	2301      	movs	r3, #1
 8003e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_SPI_TransmitReceive+0x26>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e198      	b.n	8004150 <HAL_SPI_TransmitReceive+0x358>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e26:	f7fe fc3b 	bl	80026a0 <HAL_GetTick>
 8003e2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e3c:	887b      	ldrh	r3, [r7, #2]
 8003e3e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d00f      	beq.n	8003e68 <HAL_SPI_TransmitReceive+0x70>
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e4e:	d107      	bne.n	8003e60 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d103      	bne.n	8003e60 <HAL_SPI_TransmitReceive+0x68>
 8003e58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d003      	beq.n	8003e68 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e60:	2302      	movs	r3, #2
 8003e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e66:	e16d      	b.n	8004144 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_SPI_TransmitReceive+0x82>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <HAL_SPI_TransmitReceive+0x82>
 8003e74:	887b      	ldrh	r3, [r7, #2]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d103      	bne.n	8003e82 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e80:	e160      	b.n	8004144 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d003      	beq.n	8003e96 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2205      	movs	r2, #5
 8003e92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	887a      	ldrh	r2, [r7, #2]
 8003ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	887a      	ldrh	r2, [r7, #2]
 8003eac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	887a      	ldrh	r2, [r7, #2]
 8003eb8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	887a      	ldrh	r2, [r7, #2]
 8003ebe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed6:	2b40      	cmp	r3, #64	; 0x40
 8003ed8:	d007      	beq.n	8003eea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef2:	d17c      	bne.n	8003fee <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_SPI_TransmitReceive+0x10a>
 8003efc:	8b7b      	ldrh	r3, [r7, #26]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d16a      	bne.n	8003fd8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	881a      	ldrh	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	1c9a      	adds	r2, r3, #2
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f26:	e057      	b.n	8003fd8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d11b      	bne.n	8003f6e <HAL_SPI_TransmitReceive+0x176>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d016      	beq.n	8003f6e <HAL_SPI_TransmitReceive+0x176>
 8003f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d113      	bne.n	8003f6e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	881a      	ldrh	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	1c9a      	adds	r2, r3, #2
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d119      	bne.n	8003fb0 <HAL_SPI_TransmitReceive+0x1b8>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d014      	beq.n	8003fb0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	b292      	uxth	r2, r2
 8003f92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	1c9a      	adds	r2, r3, #2
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fac:	2301      	movs	r3, #1
 8003fae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fb0:	f7fe fb76 	bl	80026a0 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d80b      	bhi.n	8003fd8 <HAL_SPI_TransmitReceive+0x1e0>
 8003fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc6:	d007      	beq.n	8003fd8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003fd6:	e0b5      	b.n	8004144 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1a2      	bne.n	8003f28 <HAL_SPI_TransmitReceive+0x130>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d19d      	bne.n	8003f28 <HAL_SPI_TransmitReceive+0x130>
 8003fec:	e080      	b.n	80040f0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <HAL_SPI_TransmitReceive+0x204>
 8003ff6:	8b7b      	ldrh	r3, [r7, #26]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d16f      	bne.n	80040dc <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	7812      	ldrb	r2, [r2, #0]
 8004008:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004022:	e05b      	b.n	80040dc <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b02      	cmp	r3, #2
 8004030:	d11c      	bne.n	800406c <HAL_SPI_TransmitReceive+0x274>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d017      	beq.n	800406c <HAL_SPI_TransmitReceive+0x274>
 800403c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403e:	2b01      	cmp	r3, #1
 8004040:	d114      	bne.n	800406c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	7812      	ldrb	r2, [r2, #0]
 800404e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b01      	cmp	r3, #1
 8004078:	d119      	bne.n	80040ae <HAL_SPI_TransmitReceive+0x2b6>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d014      	beq.n	80040ae <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040aa:	2301      	movs	r3, #1
 80040ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040ae:	f7fe faf7 	bl	80026a0 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d803      	bhi.n	80040c6 <HAL_SPI_TransmitReceive+0x2ce>
 80040be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d102      	bne.n	80040cc <HAL_SPI_TransmitReceive+0x2d4>
 80040c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d107      	bne.n	80040dc <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80040da:	e033      	b.n	8004144 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d19e      	bne.n	8004024 <HAL_SPI_TransmitReceive+0x22c>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d199      	bne.n	8004024 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f91d 	bl	8004334 <SPI_EndRxTxTransaction>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d006      	beq.n	800410e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2220      	movs	r2, #32
 800410a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800410c:	e01a      	b.n	8004144 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800413a:	e003      	b.n	8004144 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800414c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004150:	4618      	mov	r0, r3
 8004152:	3730      	adds	r7, #48	; 0x30
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	4613      	mov	r3, r2
 8004166:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004168:	f7fe fa9a 	bl	80026a0 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	4413      	add	r3, r2
 8004176:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004178:	f7fe fa92 	bl	80026a0 <HAL_GetTick>
 800417c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800417e:	4b39      	ldr	r3, [pc, #228]	; (8004264 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	015b      	lsls	r3, r3, #5
 8004184:	0d1b      	lsrs	r3, r3, #20
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	fb02 f303 	mul.w	r3, r2, r3
 800418c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800418e:	e054      	b.n	800423a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004196:	d050      	beq.n	800423a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004198:	f7fe fa82 	bl	80026a0 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d902      	bls.n	80041ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d13d      	bne.n	800422a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c6:	d111      	bne.n	80041ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d0:	d004      	beq.n	80041dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041da:	d107      	bne.n	80041ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041f4:	d10f      	bne.n	8004216 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004214:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e017      	b.n	800425a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	3b01      	subs	r3, #1
 8004238:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4013      	ands	r3, r2
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	429a      	cmp	r2, r3
 8004248:	bf0c      	ite	eq
 800424a:	2301      	moveq	r3, #1
 800424c:	2300      	movne	r3, #0
 800424e:	b2db      	uxtb	r3, r3
 8004250:	461a      	mov	r2, r3
 8004252:	79fb      	ldrb	r3, [r7, #7]
 8004254:	429a      	cmp	r2, r3
 8004256:	d19b      	bne.n	8004190 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3720      	adds	r7, #32
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20000004 	.word	0x20000004

08004268 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af02      	add	r7, sp, #8
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800427c:	d111      	bne.n	80042a2 <SPI_EndRxTransaction+0x3a>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004286:	d004      	beq.n	8004292 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004290:	d107      	bne.n	80042a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042aa:	d12a      	bne.n	8004302 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b4:	d012      	beq.n	80042dc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2200      	movs	r2, #0
 80042be:	2180      	movs	r1, #128	; 0x80
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f7ff ff49 	bl	8004158 <SPI_WaitFlagStateUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d02d      	beq.n	8004328 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d0:	f043 0220 	orr.w	r2, r3, #32
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e026      	b.n	800432a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2200      	movs	r2, #0
 80042e4:	2101      	movs	r1, #1
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f7ff ff36 	bl	8004158 <SPI_WaitFlagStateUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d01a      	beq.n	8004328 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f6:	f043 0220 	orr.w	r2, r3, #32
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e013      	b.n	800432a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2200      	movs	r2, #0
 800430a:	2101      	movs	r1, #1
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f7ff ff23 	bl	8004158 <SPI_WaitFlagStateUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431c:	f043 0220 	orr.w	r2, r3, #32
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e000      	b.n	800432a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004340:	4b1b      	ldr	r3, [pc, #108]	; (80043b0 <SPI_EndRxTxTransaction+0x7c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a1b      	ldr	r2, [pc, #108]	; (80043b4 <SPI_EndRxTxTransaction+0x80>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	0d5b      	lsrs	r3, r3, #21
 800434c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004350:	fb02 f303 	mul.w	r3, r2, r3
 8004354:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800435e:	d112      	bne.n	8004386 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2200      	movs	r2, #0
 8004368:	2180      	movs	r1, #128	; 0x80
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f7ff fef4 	bl	8004158 <SPI_WaitFlagStateUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d016      	beq.n	80043a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437a:	f043 0220 	orr.w	r2, r3, #32
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e00f      	b.n	80043a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00a      	beq.n	80043a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	3b01      	subs	r3, #1
 8004390:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439c:	2b80      	cmp	r3, #128	; 0x80
 800439e:	d0f2      	beq.n	8004386 <SPI_EndRxTxTransaction+0x52>
 80043a0:	e000      	b.n	80043a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80043a2:	bf00      	nop
  }

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	20000004 	.word	0x20000004
 80043b4:	165e9f81 	.word	0x165e9f81

080043b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e031      	b.n	800442e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fd ff82 	bl	80022e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4619      	mov	r1, r3
 80043f6:	4610      	mov	r0, r2
 80043f8:	f000 fa86 	bl	8004908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e031      	b.n	80044ac <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d106      	bne.n	8004462 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f829 	bl	80044b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2202      	movs	r2, #2
 8004466:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3304      	adds	r3, #4
 8004472:	4619      	mov	r1, r3
 8004474:	4610      	mov	r0, r2
 8004476:	f000 fa47 	bl	8004908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr
	...

080044c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d109      	bne.n	80044ec <HAL_TIM_PWM_Start+0x24>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	bf14      	ite	ne
 80044e4:	2301      	movne	r3, #1
 80044e6:	2300      	moveq	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	e022      	b.n	8004532 <HAL_TIM_PWM_Start+0x6a>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d109      	bne.n	8004506 <HAL_TIM_PWM_Start+0x3e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	bf14      	ite	ne
 80044fe:	2301      	movne	r3, #1
 8004500:	2300      	moveq	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	e015      	b.n	8004532 <HAL_TIM_PWM_Start+0x6a>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b08      	cmp	r3, #8
 800450a:	d109      	bne.n	8004520 <HAL_TIM_PWM_Start+0x58>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	bf14      	ite	ne
 8004518:	2301      	movne	r3, #1
 800451a:	2300      	moveq	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	e008      	b.n	8004532 <HAL_TIM_PWM_Start+0x6a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	bf14      	ite	ne
 800452c:	2301      	movne	r3, #1
 800452e:	2300      	moveq	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e051      	b.n	80045de <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <HAL_TIM_PWM_Start+0x82>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004548:	e013      	b.n	8004572 <HAL_TIM_PWM_Start+0xaa>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b04      	cmp	r3, #4
 800454e:	d104      	bne.n	800455a <HAL_TIM_PWM_Start+0x92>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004558:	e00b      	b.n	8004572 <HAL_TIM_PWM_Start+0xaa>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b08      	cmp	r3, #8
 800455e:	d104      	bne.n	800456a <HAL_TIM_PWM_Start+0xa2>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004568:	e003      	b.n	8004572 <HAL_TIM_PWM_Start+0xaa>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2202      	movs	r2, #2
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2201      	movs	r2, #1
 8004578:	6839      	ldr	r1, [r7, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fbbf 	bl	8004cfe <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004588:	d00e      	beq.n	80045a8 <HAL_TIM_PWM_Start+0xe0>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a16      	ldr	r2, [pc, #88]	; (80045e8 <HAL_TIM_PWM_Start+0x120>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d009      	beq.n	80045a8 <HAL_TIM_PWM_Start+0xe0>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a14      	ldr	r2, [pc, #80]	; (80045ec <HAL_TIM_PWM_Start+0x124>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d004      	beq.n	80045a8 <HAL_TIM_PWM_Start+0xe0>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a13      	ldr	r2, [pc, #76]	; (80045f0 <HAL_TIM_PWM_Start+0x128>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d111      	bne.n	80045cc <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b06      	cmp	r3, #6
 80045b8:	d010      	beq.n	80045dc <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0201 	orr.w	r2, r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ca:	e007      	b.n	80045dc <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	40000400 	.word	0x40000400
 80045ec:	40000800 	.word	0x40000800
 80045f0:	40010800 	.word	0x40010800

080045f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800460e:	2302      	movs	r3, #2
 8004610:	e0ae      	b.n	8004770 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b0c      	cmp	r3, #12
 800461e:	f200 809f 	bhi.w	8004760 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004622:	a201      	add	r2, pc, #4	; (adr r2, 8004628 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004628:	0800465d 	.word	0x0800465d
 800462c:	08004761 	.word	0x08004761
 8004630:	08004761 	.word	0x08004761
 8004634:	08004761 	.word	0x08004761
 8004638:	0800469d 	.word	0x0800469d
 800463c:	08004761 	.word	0x08004761
 8004640:	08004761 	.word	0x08004761
 8004644:	08004761 	.word	0x08004761
 8004648:	080046df 	.word	0x080046df
 800464c:	08004761 	.word	0x08004761
 8004650:	08004761 	.word	0x08004761
 8004654:	08004761 	.word	0x08004761
 8004658:	0800471f 	.word	0x0800471f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	4618      	mov	r0, r3
 8004664:	f000 f9c0 	bl	80049e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0208 	orr.w	r2, r2, #8
 8004676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699a      	ldr	r2, [r3, #24]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0204 	bic.w	r2, r2, #4
 8004686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6999      	ldr	r1, [r3, #24]
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	619a      	str	r2, [r3, #24]
      break;
 800469a:	e064      	b.n	8004766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 f9dc 	bl	8004a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6999      	ldr	r1, [r3, #24]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	021a      	lsls	r2, r3, #8
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	619a      	str	r2, [r3, #24]
      break;
 80046dc:	e043      	b.n	8004766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 f9f9 	bl	8004adc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69da      	ldr	r2, [r3, #28]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 0208 	orr.w	r2, r2, #8
 80046f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69da      	ldr	r2, [r3, #28]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0204 	bic.w	r2, r2, #4
 8004708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69d9      	ldr	r1, [r3, #28]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	61da      	str	r2, [r3, #28]
      break;
 800471c:	e023      	b.n	8004766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	4618      	mov	r0, r3
 8004726:	f000 fa16 	bl	8004b56 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69da      	ldr	r2, [r3, #28]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69d9      	ldr	r1, [r3, #28]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	021a      	lsls	r2, r3, #8
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	61da      	str	r2, [r3, #28]
      break;
 800475e:	e002      	b.n	8004766 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	75fb      	strb	r3, [r7, #23]
      break;
 8004764:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 800476e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_TIM_ConfigClockSource+0x1c>
 8004790:	2302      	movs	r3, #2
 8004792:	e0b4      	b.n	80048fe <HAL_TIM_ConfigClockSource+0x186>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047cc:	d03e      	beq.n	800484c <HAL_TIM_ConfigClockSource+0xd4>
 80047ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d2:	f200 8087 	bhi.w	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 80047d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047da:	f000 8086 	beq.w	80048ea <HAL_TIM_ConfigClockSource+0x172>
 80047de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e2:	d87f      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 80047e4:	2b70      	cmp	r3, #112	; 0x70
 80047e6:	d01a      	beq.n	800481e <HAL_TIM_ConfigClockSource+0xa6>
 80047e8:	2b70      	cmp	r3, #112	; 0x70
 80047ea:	d87b      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 80047ec:	2b60      	cmp	r3, #96	; 0x60
 80047ee:	d050      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x11a>
 80047f0:	2b60      	cmp	r3, #96	; 0x60
 80047f2:	d877      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 80047f4:	2b50      	cmp	r3, #80	; 0x50
 80047f6:	d03c      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0xfa>
 80047f8:	2b50      	cmp	r3, #80	; 0x50
 80047fa:	d873      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 80047fc:	2b40      	cmp	r3, #64	; 0x40
 80047fe:	d058      	beq.n	80048b2 <HAL_TIM_ConfigClockSource+0x13a>
 8004800:	2b40      	cmp	r3, #64	; 0x40
 8004802:	d86f      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004804:	2b30      	cmp	r3, #48	; 0x30
 8004806:	d064      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004808:	2b30      	cmp	r3, #48	; 0x30
 800480a:	d86b      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 800480c:	2b20      	cmp	r3, #32
 800480e:	d060      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004810:	2b20      	cmp	r3, #32
 8004812:	d867      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d05c      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004818:	2b10      	cmp	r3, #16
 800481a:	d05a      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0x15a>
 800481c:	e062      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6899      	ldr	r1, [r3, #8]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f000 fa47 	bl	8004cc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004840:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	609a      	str	r2, [r3, #8]
      break;
 800484a:	e04f      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	6899      	ldr	r1, [r3, #8]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f000 fa30 	bl	8004cc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800486e:	609a      	str	r2, [r3, #8]
      break;
 8004870:	e03c      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6859      	ldr	r1, [r3, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	461a      	mov	r2, r3
 8004880:	f000 f9a7 	bl	8004bd2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2150      	movs	r1, #80	; 0x50
 800488a:	4618      	mov	r0, r3
 800488c:	f000 f9fe 	bl	8004c8c <TIM_ITRx_SetConfig>
      break;
 8004890:	e02c      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	6859      	ldr	r1, [r3, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	461a      	mov	r2, r3
 80048a0:	f000 f9c5 	bl	8004c2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2160      	movs	r1, #96	; 0x60
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 f9ee 	bl	8004c8c <TIM_ITRx_SetConfig>
      break;
 80048b0:	e01c      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	6859      	ldr	r1, [r3, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	461a      	mov	r2, r3
 80048c0:	f000 f987 	bl	8004bd2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2140      	movs	r1, #64	; 0x40
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 f9de 	bl	8004c8c <TIM_ITRx_SetConfig>
      break;
 80048d0:	e00c      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4619      	mov	r1, r3
 80048dc:	4610      	mov	r0, r2
 80048de:	f000 f9d5 	bl	8004c8c <TIM_ITRx_SetConfig>
      break;
 80048e2:	e003      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	73fb      	strb	r3, [r7, #15]
      break;
 80048e8:	e000      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491e:	d00f      	beq.n	8004940 <TIM_Base_SetConfig+0x38>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a2b      	ldr	r2, [pc, #172]	; (80049d0 <TIM_Base_SetConfig+0xc8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d00b      	beq.n	8004940 <TIM_Base_SetConfig+0x38>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a2a      	ldr	r2, [pc, #168]	; (80049d4 <TIM_Base_SetConfig+0xcc>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d007      	beq.n	8004940 <TIM_Base_SetConfig+0x38>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a29      	ldr	r2, [pc, #164]	; (80049d8 <TIM_Base_SetConfig+0xd0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d003      	beq.n	8004940 <TIM_Base_SetConfig+0x38>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a28      	ldr	r2, [pc, #160]	; (80049dc <TIM_Base_SetConfig+0xd4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d108      	bne.n	8004952 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004958:	d017      	beq.n	800498a <TIM_Base_SetConfig+0x82>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a1c      	ldr	r2, [pc, #112]	; (80049d0 <TIM_Base_SetConfig+0xc8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d013      	beq.n	800498a <TIM_Base_SetConfig+0x82>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a1b      	ldr	r2, [pc, #108]	; (80049d4 <TIM_Base_SetConfig+0xcc>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00f      	beq.n	800498a <TIM_Base_SetConfig+0x82>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a1a      	ldr	r2, [pc, #104]	; (80049d8 <TIM_Base_SetConfig+0xd0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00b      	beq.n	800498a <TIM_Base_SetConfig+0x82>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a19      	ldr	r2, [pc, #100]	; (80049dc <TIM_Base_SetConfig+0xd4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d007      	beq.n	800498a <TIM_Base_SetConfig+0x82>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a18      	ldr	r2, [pc, #96]	; (80049e0 <TIM_Base_SetConfig+0xd8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d003      	beq.n	800498a <TIM_Base_SetConfig+0x82>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a17      	ldr	r2, [pc, #92]	; (80049e4 <TIM_Base_SetConfig+0xdc>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d108      	bne.n	800499c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4313      	orrs	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	615a      	str	r2, [r3, #20]
}
 80049c6:	bf00      	nop
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr
 80049d0:	40000400 	.word	0x40000400
 80049d4:	40000800 	.word	0x40000800
 80049d8:	40000c00 	.word	0x40000c00
 80049dc:	40010800 	.word	0x40010800
 80049e0:	40010c00 	.word	0x40010c00
 80049e4:	40011000 	.word	0x40011000

080049e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	f023 0201 	bic.w	r2, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0303 	bic.w	r3, r3, #3
 8004a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f023 0302 	bic.w	r3, r3, #2
 8004a30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	621a      	str	r2, [r3, #32]
}
 8004a56:	bf00      	nop
 8004a58:	371c      	adds	r7, #28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr

08004a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	f023 0210 	bic.w	r2, r3, #16
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f023 0320 	bic.w	r3, r3, #32
 8004aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	621a      	str	r2, [r3, #32]
}
 8004ad2:	bf00      	nop
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0303 	bic.w	r3, r3, #3
 8004b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	021b      	lsls	r3, r3, #8
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	621a      	str	r2, [r3, #32]
}
 8004b4c:	bf00      	nop
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc80      	pop	{r7}
 8004b54:	4770      	bx	lr

08004b56 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b087      	sub	sp, #28
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b84:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	021b      	lsls	r3, r3, #8
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	031b      	lsls	r3, r3, #12
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	621a      	str	r2, [r3, #32]
}
 8004bc8:	bf00      	nop
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr

08004bd2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b087      	sub	sp, #28
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	f023 0201 	bic.w	r2, r3, #1
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f023 030a 	bic.w	r3, r3, #10
 8004c0e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	621a      	str	r2, [r3, #32]
}
 8004c24:	bf00      	nop
 8004c26:	371c      	adds	r7, #28
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bc80      	pop	{r7}
 8004c2c:	4770      	bx	lr

08004c2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b087      	sub	sp, #28
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f023 0210 	bic.w	r2, r3, #16
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	031b      	lsls	r3, r3, #12
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	621a      	str	r2, [r3, #32]
}
 8004c82:	bf00      	nop
 8004c84:	371c      	adds	r7, #28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bc80      	pop	{r7}
 8004c8a:	4770      	bx	lr

08004c8c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f043 0307 	orr.w	r3, r3, #7
 8004cae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	609a      	str	r2, [r3, #8]
}
 8004cb6:	bf00      	nop
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr

08004cc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	021a      	lsls	r2, r3, #8
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	609a      	str	r2, [r3, #8]
}
 8004cf4:	bf00      	nop
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr

08004cfe <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b087      	sub	sp, #28
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f003 031f 	and.w	r3, r3, #31
 8004d10:	2201      	movs	r2, #1
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a1a      	ldr	r2, [r3, #32]
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	43db      	mvns	r3, r3
 8004d20:	401a      	ands	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a1a      	ldr	r2, [r3, #32]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f003 031f 	and.w	r3, r3, #31
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	fa01 f303 	lsl.w	r3, r1, r3
 8004d36:	431a      	orrs	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	621a      	str	r2, [r3, #32]
}
 8004d3c:	bf00      	nop
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bc80      	pop	{r7}
 8004d44:	4770      	bx	lr
	...

08004d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e046      	b.n	8004dee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da2:	d00e      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a13      	ldr	r2, [pc, #76]	; (8004df8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d009      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a12      	ldr	r2, [pc, #72]	; (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d004      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a10      	ldr	r2, [pc, #64]	; (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d10c      	bne.n	8004ddc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr
 8004df8:	40000400 	.word	0x40000400
 8004dfc:	40000800 	.word	0x40000800
 8004e00:	40010800 	.word	0x40010800

08004e04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e042      	b.n	8004e9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fd fb6a 	bl	8002504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2224      	movs	r2, #36	; 0x24
 8004e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f82b 	bl	8004ea4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	695a      	ldr	r2, [r3, #20]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004ee4:	f023 030c 	bic.w	r3, r3, #12
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6812      	ldr	r2, [r2, #0]
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699a      	ldr	r2, [r3, #24]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a55      	ldr	r2, [pc, #340]	; (8005064 <UART_SetConfig+0x1c0>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d103      	bne.n	8004f1a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f12:	f7fe fc19 	bl	8003748 <HAL_RCC_GetPCLK2Freq>
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	e002      	b.n	8004f20 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f1a:	f7fe fc01 	bl	8003720 <HAL_RCC_GetPCLK1Freq>
 8004f1e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f28:	d14c      	bne.n	8004fc4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	009a      	lsls	r2, r3, #2
 8004f34:	441a      	add	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f40:	4a49      	ldr	r2, [pc, #292]	; (8005068 <UART_SetConfig+0x1c4>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	0119      	lsls	r1, r3, #4
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	009a      	lsls	r2, r3, #2
 8004f54:	441a      	add	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f60:	4b41      	ldr	r3, [pc, #260]	; (8005068 <UART_SetConfig+0x1c4>)
 8004f62:	fba3 0302 	umull	r0, r3, r3, r2
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	2064      	movs	r0, #100	; 0x64
 8004f6a:	fb00 f303 	mul.w	r3, r0, r3
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	3332      	adds	r3, #50	; 0x32
 8004f74:	4a3c      	ldr	r2, [pc, #240]	; (8005068 <UART_SetConfig+0x1c4>)
 8004f76:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f82:	4419      	add	r1, r3
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009a      	lsls	r2, r3, #2
 8004f8e:	441a      	add	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f9a:	4b33      	ldr	r3, [pc, #204]	; (8005068 <UART_SetConfig+0x1c4>)
 8004f9c:	fba3 0302 	umull	r0, r3, r3, r2
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	2064      	movs	r0, #100	; 0x64
 8004fa4:	fb00 f303 	mul.w	r3, r0, r3
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	3332      	adds	r3, #50	; 0x32
 8004fae:	4a2e      	ldr	r2, [pc, #184]	; (8005068 <UART_SetConfig+0x1c4>)
 8004fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb4:	095b      	lsrs	r3, r3, #5
 8004fb6:	f003 0207 	and.w	r2, r3, #7
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	440a      	add	r2, r1
 8004fc0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fc2:	e04a      	b.n	800505a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	009a      	lsls	r2, r3, #2
 8004fce:	441a      	add	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fda:	4a23      	ldr	r2, [pc, #140]	; (8005068 <UART_SetConfig+0x1c4>)
 8004fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe0:	095b      	lsrs	r3, r3, #5
 8004fe2:	0119      	lsls	r1, r3, #4
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	009a      	lsls	r2, r3, #2
 8004fee:	441a      	add	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ffa:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <UART_SetConfig+0x1c4>)
 8004ffc:	fba3 0302 	umull	r0, r3, r3, r2
 8005000:	095b      	lsrs	r3, r3, #5
 8005002:	2064      	movs	r0, #100	; 0x64
 8005004:	fb00 f303 	mul.w	r3, r0, r3
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	3332      	adds	r3, #50	; 0x32
 800500e:	4a16      	ldr	r2, [pc, #88]	; (8005068 <UART_SetConfig+0x1c4>)
 8005010:	fba2 2303 	umull	r2, r3, r2, r3
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800501a:	4419      	add	r1, r3
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	009a      	lsls	r2, r3, #2
 8005026:	441a      	add	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005032:	4b0d      	ldr	r3, [pc, #52]	; (8005068 <UART_SetConfig+0x1c4>)
 8005034:	fba3 0302 	umull	r0, r3, r3, r2
 8005038:	095b      	lsrs	r3, r3, #5
 800503a:	2064      	movs	r0, #100	; 0x64
 800503c:	fb00 f303 	mul.w	r3, r0, r3
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	3332      	adds	r3, #50	; 0x32
 8005046:	4a08      	ldr	r2, [pc, #32]	; (8005068 <UART_SetConfig+0x1c4>)
 8005048:	fba2 2303 	umull	r2, r3, r2, r3
 800504c:	095b      	lsrs	r3, r3, #5
 800504e:	f003 020f 	and.w	r2, r3, #15
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	440a      	add	r2, r1
 8005058:	609a      	str	r2, [r3, #8]
}
 800505a:	bf00      	nop
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	40013800 	.word	0x40013800
 8005068:	51eb851f 	.word	0x51eb851f

0800506c <__libc_init_array>:
 800506c:	b570      	push	{r4, r5, r6, lr}
 800506e:	2600      	movs	r6, #0
 8005070:	4d0c      	ldr	r5, [pc, #48]	; (80050a4 <__libc_init_array+0x38>)
 8005072:	4c0d      	ldr	r4, [pc, #52]	; (80050a8 <__libc_init_array+0x3c>)
 8005074:	1b64      	subs	r4, r4, r5
 8005076:	10a4      	asrs	r4, r4, #2
 8005078:	42a6      	cmp	r6, r4
 800507a:	d109      	bne.n	8005090 <__libc_init_array+0x24>
 800507c:	f000 f822 	bl	80050c4 <_init>
 8005080:	2600      	movs	r6, #0
 8005082:	4d0a      	ldr	r5, [pc, #40]	; (80050ac <__libc_init_array+0x40>)
 8005084:	4c0a      	ldr	r4, [pc, #40]	; (80050b0 <__libc_init_array+0x44>)
 8005086:	1b64      	subs	r4, r4, r5
 8005088:	10a4      	asrs	r4, r4, #2
 800508a:	42a6      	cmp	r6, r4
 800508c:	d105      	bne.n	800509a <__libc_init_array+0x2e>
 800508e:	bd70      	pop	{r4, r5, r6, pc}
 8005090:	f855 3b04 	ldr.w	r3, [r5], #4
 8005094:	4798      	blx	r3
 8005096:	3601      	adds	r6, #1
 8005098:	e7ee      	b.n	8005078 <__libc_init_array+0xc>
 800509a:	f855 3b04 	ldr.w	r3, [r5], #4
 800509e:	4798      	blx	r3
 80050a0:	3601      	adds	r6, #1
 80050a2:	e7f2      	b.n	800508a <__libc_init_array+0x1e>
 80050a4:	08005110 	.word	0x08005110
 80050a8:	08005110 	.word	0x08005110
 80050ac:	08005110 	.word	0x08005110
 80050b0:	08005114 	.word	0x08005114

080050b4 <memset>:
 80050b4:	4603      	mov	r3, r0
 80050b6:	4402      	add	r2, r0
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d100      	bne.n	80050be <memset+0xa>
 80050bc:	4770      	bx	lr
 80050be:	f803 1b01 	strb.w	r1, [r3], #1
 80050c2:	e7f9      	b.n	80050b8 <memset+0x4>

080050c4 <_init>:
 80050c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c6:	bf00      	nop
 80050c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ca:	bc08      	pop	{r3}
 80050cc:	469e      	mov	lr, r3
 80050ce:	4770      	bx	lr

080050d0 <_fini>:
 80050d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d2:	bf00      	nop
 80050d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d6:	bc08      	pop	{r3}
 80050d8:	469e      	mov	lr, r3
 80050da:	4770      	bx	lr
