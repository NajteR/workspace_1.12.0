
nowyManipulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006050  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800618c  0800618c  0001618c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061b8  080061b8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080061b8  080061b8  000161b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061c0  080061c0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061c0  080061c0  000161c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061c4  080061c4  000161c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080061c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000014  080061dc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  080061dc  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eca7  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002261  00000000  00000000  0002ece4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00030f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00031e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d37  00000000  00000000  00032be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e26  00000000  00000000  00049917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e50d  00000000  00000000  0005a73d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8c4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc0  00000000  00000000  000e8c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08006174 	.word	0x08006174

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08006174 	.word	0x08006174

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__gesf2>:
 8000398:	f04f 3cff 	mov.w	ip, #4294967295
 800039c:	e006      	b.n	80003ac <__cmpsf2+0x4>
 800039e:	bf00      	nop

080003a0 <__lesf2>:
 80003a0:	f04f 0c01 	mov.w	ip, #1
 80003a4:	e002      	b.n	80003ac <__cmpsf2+0x4>
 80003a6:	bf00      	nop

080003a8 <__cmpsf2>:
 80003a8:	f04f 0c01 	mov.w	ip, #1
 80003ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80003b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80003b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003bc:	bf18      	it	ne
 80003be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003c2:	d011      	beq.n	80003e8 <__cmpsf2+0x40>
 80003c4:	b001      	add	sp, #4
 80003c6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80003ca:	bf18      	it	ne
 80003cc:	ea90 0f01 	teqne	r0, r1
 80003d0:	bf58      	it	pl
 80003d2:	ebb2 0003 	subspl.w	r0, r2, r3
 80003d6:	bf88      	it	hi
 80003d8:	17c8      	asrhi	r0, r1, #31
 80003da:	bf38      	it	cc
 80003dc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80003e0:	bf18      	it	ne
 80003e2:	f040 0001 	orrne.w	r0, r0, #1
 80003e6:	4770      	bx	lr
 80003e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003ec:	d102      	bne.n	80003f4 <__cmpsf2+0x4c>
 80003ee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80003f2:	d105      	bne.n	8000400 <__cmpsf2+0x58>
 80003f4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80003f8:	d1e4      	bne.n	80003c4 <__cmpsf2+0x1c>
 80003fa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80003fe:	d0e1      	beq.n	80003c4 <__cmpsf2+0x1c>
 8000400:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop

08000408 <__aeabi_cfrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	4608      	mov	r0, r1
 800040c:	4661      	mov	r1, ip
 800040e:	e7ff      	b.n	8000410 <__aeabi_cfcmpeq>

08000410 <__aeabi_cfcmpeq>:
 8000410:	b50f      	push	{r0, r1, r2, r3, lr}
 8000412:	f7ff ffc9 	bl	80003a8 <__cmpsf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	bf48      	it	mi
 800041a:	f110 0f00 	cmnmi.w	r0, #0
 800041e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000420 <__aeabi_fcmpeq>:
 8000420:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000424:	f7ff fff4 	bl	8000410 <__aeabi_cfcmpeq>
 8000428:	bf0c      	ite	eq
 800042a:	2001      	moveq	r0, #1
 800042c:	2000      	movne	r0, #0
 800042e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000432:	bf00      	nop

08000434 <__aeabi_fcmplt>:
 8000434:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000438:	f7ff ffea 	bl	8000410 <__aeabi_cfcmpeq>
 800043c:	bf34      	ite	cc
 800043e:	2001      	movcc	r0, #1
 8000440:	2000      	movcs	r0, #0
 8000442:	f85d fb08 	ldr.w	pc, [sp], #8
 8000446:	bf00      	nop

08000448 <__aeabi_fcmple>:
 8000448:	f84d ed08 	str.w	lr, [sp, #-8]!
 800044c:	f7ff ffe0 	bl	8000410 <__aeabi_cfcmpeq>
 8000450:	bf94      	ite	ls
 8000452:	2001      	movls	r0, #1
 8000454:	2000      	movhi	r0, #0
 8000456:	f85d fb08 	ldr.w	pc, [sp], #8
 800045a:	bf00      	nop

0800045c <__aeabi_fcmpge>:
 800045c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000460:	f7ff ffd2 	bl	8000408 <__aeabi_cfrcmple>
 8000464:	bf94      	ite	ls
 8000466:	2001      	movls	r0, #1
 8000468:	2000      	movhi	r0, #0
 800046a:	f85d fb08 	ldr.w	pc, [sp], #8
 800046e:	bf00      	nop

08000470 <__aeabi_fcmpgt>:
 8000470:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000474:	f7ff ffc8 	bl	8000408 <__aeabi_cfrcmple>
 8000478:	bf34      	ite	cc
 800047a:	2001      	movcc	r0, #1
 800047c:	2000      	movcs	r0, #0
 800047e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000482:	bf00      	nop

08000484 <__aeabi_f2iz>:
 8000484:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000488:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800048c:	d30f      	bcc.n	80004ae <__aeabi_f2iz+0x2a>
 800048e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000492:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000496:	d90d      	bls.n	80004b4 <__aeabi_f2iz+0x30>
 8000498:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800049c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004a0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80004a4:	fa23 f002 	lsr.w	r0, r3, r2
 80004a8:	bf18      	it	ne
 80004aa:	4240      	negne	r0, r0
 80004ac:	4770      	bx	lr
 80004ae:	f04f 0000 	mov.w	r0, #0
 80004b2:	4770      	bx	lr
 80004b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004b8:	d101      	bne.n	80004be <__aeabi_f2iz+0x3a>
 80004ba:	0242      	lsls	r2, r0, #9
 80004bc:	d105      	bne.n	80004ca <__aeabi_f2iz+0x46>
 80004be:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80004c2:	bf08      	it	eq
 80004c4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80004c8:	4770      	bx	lr
 80004ca:	f04f 0000 	mov.w	r0, #0
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <__aeabi_uldivmod>:
 8000510:	b953      	cbnz	r3, 8000528 <__aeabi_uldivmod+0x18>
 8000512:	b94a      	cbnz	r2, 8000528 <__aeabi_uldivmod+0x18>
 8000514:	2900      	cmp	r1, #0
 8000516:	bf08      	it	eq
 8000518:	2800      	cmpeq	r0, #0
 800051a:	bf1c      	itt	ne
 800051c:	f04f 31ff 	movne.w	r1, #4294967295
 8000520:	f04f 30ff 	movne.w	r0, #4294967295
 8000524:	f000 b976 	b.w	8000814 <__aeabi_idiv0>
 8000528:	f1ad 0c08 	sub.w	ip, sp, #8
 800052c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000530:	f000 f806 	bl	8000540 <__udivmoddi4>
 8000534:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800053c:	b004      	add	sp, #16
 800053e:	4770      	bx	lr

08000540 <__udivmoddi4>:
 8000540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000544:	9e08      	ldr	r6, [sp, #32]
 8000546:	460d      	mov	r5, r1
 8000548:	4604      	mov	r4, r0
 800054a:	4688      	mov	r8, r1
 800054c:	2b00      	cmp	r3, #0
 800054e:	d14d      	bne.n	80005ec <__udivmoddi4+0xac>
 8000550:	428a      	cmp	r2, r1
 8000552:	4694      	mov	ip, r2
 8000554:	d968      	bls.n	8000628 <__udivmoddi4+0xe8>
 8000556:	fab2 f282 	clz	r2, r2
 800055a:	b152      	cbz	r2, 8000572 <__udivmoddi4+0x32>
 800055c:	fa01 f302 	lsl.w	r3, r1, r2
 8000560:	f1c2 0120 	rsb	r1, r2, #32
 8000564:	fa20 f101 	lsr.w	r1, r0, r1
 8000568:	fa0c fc02 	lsl.w	ip, ip, r2
 800056c:	ea41 0803 	orr.w	r8, r1, r3
 8000570:	4094      	lsls	r4, r2
 8000572:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000576:	fbb8 f7f1 	udiv	r7, r8, r1
 800057a:	fa1f fe8c 	uxth.w	lr, ip
 800057e:	fb01 8817 	mls	r8, r1, r7, r8
 8000582:	fb07 f00e 	mul.w	r0, r7, lr
 8000586:	0c23      	lsrs	r3, r4, #16
 8000588:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058c:	4298      	cmp	r0, r3
 800058e:	d90a      	bls.n	80005a6 <__udivmoddi4+0x66>
 8000590:	eb1c 0303 	adds.w	r3, ip, r3
 8000594:	f107 35ff 	add.w	r5, r7, #4294967295
 8000598:	f080 811e 	bcs.w	80007d8 <__udivmoddi4+0x298>
 800059c:	4298      	cmp	r0, r3
 800059e:	f240 811b 	bls.w	80007d8 <__udivmoddi4+0x298>
 80005a2:	3f02      	subs	r7, #2
 80005a4:	4463      	add	r3, ip
 80005a6:	1a1b      	subs	r3, r3, r0
 80005a8:	fbb3 f0f1 	udiv	r0, r3, r1
 80005ac:	fb01 3310 	mls	r3, r1, r0, r3
 80005b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80005b4:	b2a4      	uxth	r4, r4
 80005b6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ba:	45a6      	cmp	lr, r4
 80005bc:	d90a      	bls.n	80005d4 <__udivmoddi4+0x94>
 80005be:	eb1c 0404 	adds.w	r4, ip, r4
 80005c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80005c6:	f080 8109 	bcs.w	80007dc <__udivmoddi4+0x29c>
 80005ca:	45a6      	cmp	lr, r4
 80005cc:	f240 8106 	bls.w	80007dc <__udivmoddi4+0x29c>
 80005d0:	4464      	add	r4, ip
 80005d2:	3802      	subs	r0, #2
 80005d4:	2100      	movs	r1, #0
 80005d6:	eba4 040e 	sub.w	r4, r4, lr
 80005da:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80005de:	b11e      	cbz	r6, 80005e8 <__udivmoddi4+0xa8>
 80005e0:	2300      	movs	r3, #0
 80005e2:	40d4      	lsrs	r4, r2
 80005e4:	e9c6 4300 	strd	r4, r3, [r6]
 80005e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ec:	428b      	cmp	r3, r1
 80005ee:	d908      	bls.n	8000602 <__udivmoddi4+0xc2>
 80005f0:	2e00      	cmp	r6, #0
 80005f2:	f000 80ee 	beq.w	80007d2 <__udivmoddi4+0x292>
 80005f6:	2100      	movs	r1, #0
 80005f8:	e9c6 0500 	strd	r0, r5, [r6]
 80005fc:	4608      	mov	r0, r1
 80005fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000602:	fab3 f183 	clz	r1, r3
 8000606:	2900      	cmp	r1, #0
 8000608:	d14a      	bne.n	80006a0 <__udivmoddi4+0x160>
 800060a:	42ab      	cmp	r3, r5
 800060c:	d302      	bcc.n	8000614 <__udivmoddi4+0xd4>
 800060e:	4282      	cmp	r2, r0
 8000610:	f200 80fc 	bhi.w	800080c <__udivmoddi4+0x2cc>
 8000614:	1a84      	subs	r4, r0, r2
 8000616:	eb65 0303 	sbc.w	r3, r5, r3
 800061a:	2001      	movs	r0, #1
 800061c:	4698      	mov	r8, r3
 800061e:	2e00      	cmp	r6, #0
 8000620:	d0e2      	beq.n	80005e8 <__udivmoddi4+0xa8>
 8000622:	e9c6 4800 	strd	r4, r8, [r6]
 8000626:	e7df      	b.n	80005e8 <__udivmoddi4+0xa8>
 8000628:	b902      	cbnz	r2, 800062c <__udivmoddi4+0xec>
 800062a:	deff      	udf	#255	; 0xff
 800062c:	fab2 f282 	clz	r2, r2
 8000630:	2a00      	cmp	r2, #0
 8000632:	f040 8091 	bne.w	8000758 <__udivmoddi4+0x218>
 8000636:	eba1 000c 	sub.w	r0, r1, ip
 800063a:	2101      	movs	r1, #1
 800063c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000640:	fa1f fe8c 	uxth.w	lr, ip
 8000644:	fbb0 f3f7 	udiv	r3, r0, r7
 8000648:	fb07 0013 	mls	r0, r7, r3, r0
 800064c:	0c25      	lsrs	r5, r4, #16
 800064e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000652:	fb0e f003 	mul.w	r0, lr, r3
 8000656:	42a8      	cmp	r0, r5
 8000658:	d908      	bls.n	800066c <__udivmoddi4+0x12c>
 800065a:	eb1c 0505 	adds.w	r5, ip, r5
 800065e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000662:	d202      	bcs.n	800066a <__udivmoddi4+0x12a>
 8000664:	42a8      	cmp	r0, r5
 8000666:	f200 80ce 	bhi.w	8000806 <__udivmoddi4+0x2c6>
 800066a:	4643      	mov	r3, r8
 800066c:	1a2d      	subs	r5, r5, r0
 800066e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000672:	fb07 5510 	mls	r5, r7, r0, r5
 8000676:	fb0e fe00 	mul.w	lr, lr, r0
 800067a:	b2a4      	uxth	r4, r4
 800067c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000680:	45a6      	cmp	lr, r4
 8000682:	d908      	bls.n	8000696 <__udivmoddi4+0x156>
 8000684:	eb1c 0404 	adds.w	r4, ip, r4
 8000688:	f100 35ff 	add.w	r5, r0, #4294967295
 800068c:	d202      	bcs.n	8000694 <__udivmoddi4+0x154>
 800068e:	45a6      	cmp	lr, r4
 8000690:	f200 80b6 	bhi.w	8000800 <__udivmoddi4+0x2c0>
 8000694:	4628      	mov	r0, r5
 8000696:	eba4 040e 	sub.w	r4, r4, lr
 800069a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800069e:	e79e      	b.n	80005de <__udivmoddi4+0x9e>
 80006a0:	f1c1 0720 	rsb	r7, r1, #32
 80006a4:	408b      	lsls	r3, r1
 80006a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80006aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80006ae:	fa25 fa07 	lsr.w	sl, r5, r7
 80006b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006b6:	fbba f8f9 	udiv	r8, sl, r9
 80006ba:	fa20 f307 	lsr.w	r3, r0, r7
 80006be:	fb09 aa18 	mls	sl, r9, r8, sl
 80006c2:	408d      	lsls	r5, r1
 80006c4:	fa1f fe8c 	uxth.w	lr, ip
 80006c8:	431d      	orrs	r5, r3
 80006ca:	fa00 f301 	lsl.w	r3, r0, r1
 80006ce:	fb08 f00e 	mul.w	r0, r8, lr
 80006d2:	0c2c      	lsrs	r4, r5, #16
 80006d4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80006d8:	42a0      	cmp	r0, r4
 80006da:	fa02 f201 	lsl.w	r2, r2, r1
 80006de:	d90b      	bls.n	80006f8 <__udivmoddi4+0x1b8>
 80006e0:	eb1c 0404 	adds.w	r4, ip, r4
 80006e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80006e8:	f080 8088 	bcs.w	80007fc <__udivmoddi4+0x2bc>
 80006ec:	42a0      	cmp	r0, r4
 80006ee:	f240 8085 	bls.w	80007fc <__udivmoddi4+0x2bc>
 80006f2:	f1a8 0802 	sub.w	r8, r8, #2
 80006f6:	4464      	add	r4, ip
 80006f8:	1a24      	subs	r4, r4, r0
 80006fa:	fbb4 f0f9 	udiv	r0, r4, r9
 80006fe:	fb09 4410 	mls	r4, r9, r0, r4
 8000702:	fb00 fe0e 	mul.w	lr, r0, lr
 8000706:	b2ad      	uxth	r5, r5
 8000708:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800070c:	45a6      	cmp	lr, r4
 800070e:	d908      	bls.n	8000722 <__udivmoddi4+0x1e2>
 8000710:	eb1c 0404 	adds.w	r4, ip, r4
 8000714:	f100 35ff 	add.w	r5, r0, #4294967295
 8000718:	d26c      	bcs.n	80007f4 <__udivmoddi4+0x2b4>
 800071a:	45a6      	cmp	lr, r4
 800071c:	d96a      	bls.n	80007f4 <__udivmoddi4+0x2b4>
 800071e:	3802      	subs	r0, #2
 8000720:	4464      	add	r4, ip
 8000722:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000726:	fba0 9502 	umull	r9, r5, r0, r2
 800072a:	eba4 040e 	sub.w	r4, r4, lr
 800072e:	42ac      	cmp	r4, r5
 8000730:	46c8      	mov	r8, r9
 8000732:	46ae      	mov	lr, r5
 8000734:	d356      	bcc.n	80007e4 <__udivmoddi4+0x2a4>
 8000736:	d053      	beq.n	80007e0 <__udivmoddi4+0x2a0>
 8000738:	2e00      	cmp	r6, #0
 800073a:	d069      	beq.n	8000810 <__udivmoddi4+0x2d0>
 800073c:	ebb3 0208 	subs.w	r2, r3, r8
 8000740:	eb64 040e 	sbc.w	r4, r4, lr
 8000744:	fa22 f301 	lsr.w	r3, r2, r1
 8000748:	fa04 f707 	lsl.w	r7, r4, r7
 800074c:	431f      	orrs	r7, r3
 800074e:	40cc      	lsrs	r4, r1
 8000750:	e9c6 7400 	strd	r7, r4, [r6]
 8000754:	2100      	movs	r1, #0
 8000756:	e747      	b.n	80005e8 <__udivmoddi4+0xa8>
 8000758:	fa0c fc02 	lsl.w	ip, ip, r2
 800075c:	f1c2 0120 	rsb	r1, r2, #32
 8000760:	fa25 f301 	lsr.w	r3, r5, r1
 8000764:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000768:	fa20 f101 	lsr.w	r1, r0, r1
 800076c:	4095      	lsls	r5, r2
 800076e:	430d      	orrs	r5, r1
 8000770:	fbb3 f1f7 	udiv	r1, r3, r7
 8000774:	fb07 3311 	mls	r3, r7, r1, r3
 8000778:	fa1f fe8c 	uxth.w	lr, ip
 800077c:	0c28      	lsrs	r0, r5, #16
 800077e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000782:	fb01 f30e 	mul.w	r3, r1, lr
 8000786:	4283      	cmp	r3, r0
 8000788:	fa04 f402 	lsl.w	r4, r4, r2
 800078c:	d908      	bls.n	80007a0 <__udivmoddi4+0x260>
 800078e:	eb1c 0000 	adds.w	r0, ip, r0
 8000792:	f101 38ff 	add.w	r8, r1, #4294967295
 8000796:	d22f      	bcs.n	80007f8 <__udivmoddi4+0x2b8>
 8000798:	4283      	cmp	r3, r0
 800079a:	d92d      	bls.n	80007f8 <__udivmoddi4+0x2b8>
 800079c:	3902      	subs	r1, #2
 800079e:	4460      	add	r0, ip
 80007a0:	1ac0      	subs	r0, r0, r3
 80007a2:	fbb0 f3f7 	udiv	r3, r0, r7
 80007a6:	fb07 0013 	mls	r0, r7, r3, r0
 80007aa:	b2ad      	uxth	r5, r5
 80007ac:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80007b0:	fb03 f00e 	mul.w	r0, r3, lr
 80007b4:	42a8      	cmp	r0, r5
 80007b6:	d908      	bls.n	80007ca <__udivmoddi4+0x28a>
 80007b8:	eb1c 0505 	adds.w	r5, ip, r5
 80007bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80007c0:	d216      	bcs.n	80007f0 <__udivmoddi4+0x2b0>
 80007c2:	42a8      	cmp	r0, r5
 80007c4:	d914      	bls.n	80007f0 <__udivmoddi4+0x2b0>
 80007c6:	3b02      	subs	r3, #2
 80007c8:	4465      	add	r5, ip
 80007ca:	1a28      	subs	r0, r5, r0
 80007cc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80007d0:	e738      	b.n	8000644 <__udivmoddi4+0x104>
 80007d2:	4631      	mov	r1, r6
 80007d4:	4630      	mov	r0, r6
 80007d6:	e707      	b.n	80005e8 <__udivmoddi4+0xa8>
 80007d8:	462f      	mov	r7, r5
 80007da:	e6e4      	b.n	80005a6 <__udivmoddi4+0x66>
 80007dc:	4618      	mov	r0, r3
 80007de:	e6f9      	b.n	80005d4 <__udivmoddi4+0x94>
 80007e0:	454b      	cmp	r3, r9
 80007e2:	d2a9      	bcs.n	8000738 <__udivmoddi4+0x1f8>
 80007e4:	ebb9 0802 	subs.w	r8, r9, r2
 80007e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80007ec:	3801      	subs	r0, #1
 80007ee:	e7a3      	b.n	8000738 <__udivmoddi4+0x1f8>
 80007f0:	4643      	mov	r3, r8
 80007f2:	e7ea      	b.n	80007ca <__udivmoddi4+0x28a>
 80007f4:	4628      	mov	r0, r5
 80007f6:	e794      	b.n	8000722 <__udivmoddi4+0x1e2>
 80007f8:	4641      	mov	r1, r8
 80007fa:	e7d1      	b.n	80007a0 <__udivmoddi4+0x260>
 80007fc:	46d0      	mov	r8, sl
 80007fe:	e77b      	b.n	80006f8 <__udivmoddi4+0x1b8>
 8000800:	4464      	add	r4, ip
 8000802:	3802      	subs	r0, #2
 8000804:	e747      	b.n	8000696 <__udivmoddi4+0x156>
 8000806:	3b02      	subs	r3, #2
 8000808:	4465      	add	r5, ip
 800080a:	e72f      	b.n	800066c <__udivmoddi4+0x12c>
 800080c:	4608      	mov	r0, r1
 800080e:	e706      	b.n	800061e <__udivmoddi4+0xde>
 8000810:	4631      	mov	r1, r6
 8000812:	e6e9      	b.n	80005e8 <__udivmoddi4+0xa8>

08000814 <__aeabi_idiv0>:
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop

08000818 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	4b50      	ldr	r3, [pc, #320]	; (8000970 <MX_GPIO_Init+0x158>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	4a4f      	ldr	r2, [pc, #316]	; (8000970 <MX_GPIO_Init+0x158>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	61d3      	str	r3, [r2, #28]
 800083a:	4b4d      	ldr	r3, [pc, #308]	; (8000970 <MX_GPIO_Init+0x158>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	4b4a      	ldr	r3, [pc, #296]	; (8000970 <MX_GPIO_Init+0x158>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	4a49      	ldr	r2, [pc, #292]	; (8000970 <MX_GPIO_Init+0x158>)
 800084c:	f043 0320 	orr.w	r3, r3, #32
 8000850:	61d3      	str	r3, [r2, #28]
 8000852:	4b47      	ldr	r3, [pc, #284]	; (8000970 <MX_GPIO_Init+0x158>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f003 0320 	and.w	r3, r3, #32
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b44      	ldr	r3, [pc, #272]	; (8000970 <MX_GPIO_Init+0x158>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	4a43      	ldr	r2, [pc, #268]	; (8000970 <MX_GPIO_Init+0x158>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	61d3      	str	r3, [r2, #28]
 800086a:	4b41      	ldr	r3, [pc, #260]	; (8000970 <MX_GPIO_Init+0x158>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b3e      	ldr	r3, [pc, #248]	; (8000970 <MX_GPIO_Init+0x158>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	4a3d      	ldr	r2, [pc, #244]	; (8000970 <MX_GPIO_Init+0x158>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	61d3      	str	r3, [r2, #28]
 8000882:	4b3b      	ldr	r3, [pc, #236]	; (8000970 <MX_GPIO_Init+0x158>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	4b38      	ldr	r3, [pc, #224]	; (8000970 <MX_GPIO_Init+0x158>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	4a37      	ldr	r2, [pc, #220]	; (8000970 <MX_GPIO_Init+0x158>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	61d3      	str	r3, [r2, #28]
 800089a:	4b35      	ldr	r3, [pc, #212]	; (8000970 <MX_GPIO_Init+0x158>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_GREEN_Pin|L_D1_Pin|LED_YELLOW_Pin
 80008a6:	2200      	movs	r2, #0
 80008a8:	f241 51ef 	movw	r1, #5615	; 0x15ef
 80008ac:	4831      	ldr	r0, [pc, #196]	; (8000974 <MX_GPIO_Init+0x15c>)
 80008ae:	f003 f86b 	bl	8003988 <HAL_GPIO_WritePin>
                          |Czlon4_D1_Pin|Czlon3_D2_Pin|Czlon2_D2_Pin|Czlon3_D1_Pin
                          |L_D2_Pin|R_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Czlon1_D2_Pin|Czlon2_D1_Pin|Czlon5_D1_Pin
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 80008b8:	482f      	ldr	r0, [pc, #188]	; (8000978 <MX_GPIO_Init+0x160>)
 80008ba:	f003 f865 	bl	8003988 <HAL_GPIO_WritePin>
                          |Czlon4_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|CSN_Pin|Czlon1_D1_Pin|Czlon5_D2_Pin
 80008be:	2200      	movs	r2, #0
 80008c0:	f241 4136 	movw	r1, #5174	; 0x1436
 80008c4:	482d      	ldr	r0, [pc, #180]	; (800097c <MX_GPIO_Init+0x164>)
 80008c6:	f003 f85f 	bl	8003988 <HAL_GPIO_WritePin>
                          |Podstawa_D2_Pin|Podstawa_D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R_D1_GPIO_Port, R_D1_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2104      	movs	r1, #4
 80008ce:	482c      	ldr	r0, [pc, #176]	; (8000980 <MX_GPIO_Init+0x168>)
 80008d0:	f003 f85a 	bl	8003988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	4822      	ldr	r0, [pc, #136]	; (8000974 <MX_GPIO_Init+0x15c>)
 80008ec:	f002 febc 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|L_D1_Pin|LED_YELLOW_Pin
 80008f0:	f241 53ef 	movw	r3, #5615	; 0x15ef
 80008f4:	617b      	str	r3, [r7, #20]
                          |Czlon4_D1_Pin|Czlon3_D2_Pin|Czlon2_D2_Pin|Czlon3_D1_Pin
                          |L_D2_Pin|R_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	481a      	ldr	r0, [pc, #104]	; (8000974 <MX_GPIO_Init+0x15c>)
 800090a:	f002 fead 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Czlon1_D2_Pin|Czlon2_D1_Pin|Czlon5_D1_Pin
 800090e:	f44f 53d9 	mov.w	r3, #6944	; 0x1b20
 8000912:	617b      	str	r3, [r7, #20]
                          |Czlon4_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	4814      	ldr	r0, [pc, #80]	; (8000978 <MX_GPIO_Init+0x160>)
 8000928:	f002 fe9e 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin|Czlon1_D1_Pin|Czlon5_D2_Pin
 800092c:	f241 4336 	movw	r3, #5174	; 0x1436
 8000930:	617b      	str	r3, [r7, #20]
                          |Podstawa_D2_Pin|Podstawa_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <MX_GPIO_Init+0x164>)
 8000946:	f002 fe8f 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = R_D1_Pin;
 800094a:	2304      	movs	r3, #4
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R_D1_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4807      	ldr	r0, [pc, #28]	; (8000980 <MX_GPIO_Init+0x168>)
 8000962:	f002 fe81 	bl	8003668 <HAL_GPIO_Init>

}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	; 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40020800 	.word	0x40020800
 8000978:	40020000 	.word	0x40020000
 800097c:	40020400 	.word	0x40020400
 8000980:	40020c00 	.word	0x40020c00

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098a:	f002 fcf8 	bl	800337e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098e:	f000 fee1 	bl	8001754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000992:	f7ff ff41 	bl	8000818 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000996:	f002 fc5f 	bl	8003258 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800099a:	f002 f83f 	bl	8002a1c <MX_SPI2_Init>
  MX_TIM3_Init();
 800099e:	f002 f993 	bl	8002cc8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009a2:	f002 fa1b 	bl	8002ddc <MX_TIM4_Init>
  MX_TIM5_Init();
 80009a6:	f002 faad 	bl	8002f04 <MX_TIM5_Init>
  MX_TIM2_Init();
 80009aa:	f002 f90f 	bl	8002bcc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	//nRF initialize and settings
	nRF24_Init(&hspi2);
 80009ae:	48aa      	ldr	r0, [pc, #680]	; (8000c58 <main+0x2d4>)
 80009b0:	f001 ffee 	bl	8002990 <nRF24_Init>
	nRF24_SetRXAddress(0, "Odb");
 80009b4:	49a9      	ldr	r1, [pc, #676]	; (8000c5c <main+0x2d8>)
 80009b6:	2000      	movs	r0, #0
 80009b8:	f001 ff2f 	bl	800281a <nRF24_SetRXAddress>
	nRF24_SetTXAddress("Nad");
 80009bc:	48a8      	ldr	r0, [pc, #672]	; (8000c60 <main+0x2dc>)
 80009be:	f001 ff65 	bl	800288c <nRF24_SetTXAddress>
	nRF24_RX_Mode();
 80009c2:	f001 fd79 	bl	80024b8 <nRF24_RX_Mode>

	//Set timer 2 to PWM function

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80009c6:	2100      	movs	r1, #0
 80009c8:	48a6      	ldr	r0, [pc, #664]	; (8000c64 <main+0x2e0>)
 80009ca:	f004 fc51 	bl	8005270 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80009ce:	2104      	movs	r1, #4
 80009d0:	48a4      	ldr	r0, [pc, #656]	; (8000c64 <main+0x2e0>)
 80009d2:	f004 fc4d 	bl	8005270 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80009d6:	2108      	movs	r1, #8
 80009d8:	48a2      	ldr	r0, [pc, #648]	; (8000c64 <main+0x2e0>)
 80009da:	f004 fc49 	bl	8005270 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80009de:	210c      	movs	r1, #12
 80009e0:	48a0      	ldr	r0, [pc, #640]	; (8000c64 <main+0x2e0>)
 80009e2:	f004 fc45 	bl	8005270 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80009e6:	2100      	movs	r1, #0
 80009e8:	489f      	ldr	r0, [pc, #636]	; (8000c68 <main+0x2e4>)
 80009ea:	f004 fc41 	bl	8005270 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80009ee:	2104      	movs	r1, #4
 80009f0:	489d      	ldr	r0, [pc, #628]	; (8000c68 <main+0x2e4>)
 80009f2:	f004 fc3d 	bl	8005270 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80009f6:	2108      	movs	r1, #8
 80009f8:	489b      	ldr	r0, [pc, #620]	; (8000c68 <main+0x2e4>)
 80009fa:	f004 fc39 	bl	8005270 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80009fe:	2104      	movs	r1, #4
 8000a00:	489a      	ldr	r0, [pc, #616]	; (8000c6c <main+0x2e8>)
 8000a02:	f004 fc35 	bl	8005270 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a06:	2100      	movs	r1, #0
 8000a08:	4899      	ldr	r0, [pc, #612]	; (8000c70 <main+0x2ec>)
 8000a0a:	f004 fc31 	bl	8005270 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000a0e:	210c      	movs	r1, #12
 8000a10:	4897      	ldr	r0, [pc, #604]	; (8000c70 <main+0x2ec>)
 8000a12:	f004 fc2d 	bl	8005270 <HAL_TIM_PWM_Start>
	time = HAL_GetTick();
 8000a16:	f002 fd17 	bl	8003448 <HAL_GetTick>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	4a95      	ldr	r2, [pc, #596]	; (8000c74 <main+0x2f0>)
 8000a1e:	6013      	str	r3, [r2, #0]
	timereset = HAL_GetTick();
 8000a20:	f002 fd12 	bl	8003448 <HAL_GetTick>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4a94      	ldr	r2, [pc, #592]	; (8000c78 <main+0x2f4>)
 8000a28:	6013      	str	r3, [r2, #0]
	timeauto = HAL_GetTick();
 8000a2a:	f002 fd0d 	bl	8003448 <HAL_GetTick>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	4a92      	ldr	r2, [pc, #584]	; (8000c7c <main+0x2f8>)
 8000a32:	6013      	str	r3, [r2, #0]
	timeauto2 = HAL_GetTick();
 8000a34:	f002 fd08 	bl	8003448 <HAL_GetTick>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	4a91      	ldr	r2, [pc, #580]	; (8000c80 <main+0x2fc>)
 8000a3c:	6013      	str	r3, [r2, #0]
	stoppodst();
 8000a3e:	f000 ff6f 	bl	8001920 <stoppodst>
	stopczlon5();
 8000a42:	f001 f8a3 	bl	8001b8c <stopczlon5>
	stopczlon1();
 8000a46:	f000 ffa7 	bl	8001998 <stopczlon1>
	stopczlon2();
 8000a4a:	f000 ffe5 	bl	8001a18 <stopczlon2>
	stopczlon3();
 8000a4e:	f001 f81f 	bl	8001a90 <stopczlon3>
	stopczlon4();
 8000a52:	f001 f85b 	bl	8001b0c <stopczlon4>
	servox0();
 8000a56:	f001 fb29 	bl	80020ac <servox0>
	servoy0();
 8000a5a:	f001 fb5f 	bl	800211c <servoy0>

	autoY[2] = ((autoY[0] + autoY[1]) & 0xFF);
 8000a5e:	4b89      	ldr	r3, [pc, #548]	; (8000c84 <main+0x300>)
 8000a60:	781a      	ldrb	r2, [r3, #0]
 8000a62:	4b88      	ldr	r3, [pc, #544]	; (8000c84 <main+0x300>)
 8000a64:	785b      	ldrb	r3, [r3, #1]
 8000a66:	4413      	add	r3, r2
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b86      	ldr	r3, [pc, #536]	; (8000c84 <main+0x300>)
 8000a6c:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN WHILE */
	while (1) {

		//Check if there is receive message

		if (nRF24_RXAvailible()) {
 8000a6e:	f001 ff6f 	bl	8002950 <nRF24_RXAvailible>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	f000 80e4 	beq.w	8000c42 <main+0x2be>
			//if working blink diode once per second
			if (HAL_GetTick() - time > 1000) {
 8000a7a:	f002 fce5 	bl	8003448 <HAL_GetTick>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	4b7c      	ldr	r3, [pc, #496]	; (8000c74 <main+0x2f0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a8a:	d908      	bls.n	8000a9e <main+0x11a>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	487e      	ldr	r0, [pc, #504]	; (8000c88 <main+0x304>)
 8000a90:	f002 ff92 	bl	80039b8 <HAL_GPIO_TogglePin>
				time = HAL_GetTick();
 8000a94:	f002 fcd8 	bl	8003448 <HAL_GetTick>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	4a76      	ldr	r2, [pc, #472]	; (8000c74 <main+0x2f0>)
 8000a9c:	6013      	str	r3, [r2, #0]
			}
			//read received data and save to nrfdata variable
			nRF24_ReadRXPaylaod(nrfdata);
 8000a9e:	487b      	ldr	r0, [pc, #492]	; (8000c8c <main+0x308>)
 8000aa0:	f001 ff3a 	bl	8002918 <nRF24_ReadRXPaylaod>
			timereset = HAL_GetTick();
 8000aa4:	f002 fcd0 	bl	8003448 <HAL_GetTick>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	4a73      	ldr	r2, [pc, #460]	; (8000c78 <main+0x2f4>)
 8000aac:	6013      	str	r3, [r2, #0]

			//byte 1
			button = nrfdata[0] & 0b00000001; // acsii 1 dec 49
 8000aae:	4b77      	ldr	r3, [pc, #476]	; (8000c8c <main+0x308>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b75      	ldr	r3, [pc, #468]	; (8000c90 <main+0x30c>)
 8000aba:	701a      	strb	r2, [r3, #0]
			button01 = (nrfdata[0] & 0b00000010) >> 1; // ascii 2 dec 50
 8000abc:	4b73      	ldr	r3, [pc, #460]	; (8000c8c <main+0x308>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	105b      	asrs	r3, r3, #1
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b72      	ldr	r3, [pc, #456]	; (8000c94 <main+0x310>)
 8000acc:	701a      	strb	r2, [r3, #0]
			button1A = (nrfdata[0] & 0b00000100) >> 2; // ascii 3 dec 51
 8000ace:	4b6f      	ldr	r3, [pc, #444]	; (8000c8c <main+0x308>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	109b      	asrs	r3, r3, #2
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b6e      	ldr	r3, [pc, #440]	; (8000c98 <main+0x314>)
 8000ade:	701a      	strb	r2, [r3, #0]
			button1B = (nrfdata[0] & 0b00001000) >> 3; // ascii 4 dec 52
 8000ae0:	4b6a      	ldr	r3, [pc, #424]	; (8000c8c <main+0x308>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	10db      	asrs	r3, r3, #3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b6b      	ldr	r3, [pc, #428]	; (8000c9c <main+0x318>)
 8000af0:	701a      	strb	r2, [r3, #0]
			button2A = (nrfdata[0] & 0b00010000) >> 4; // ascii 5 dec 53
 8000af2:	4b66      	ldr	r3, [pc, #408]	; (8000c8c <main+0x308>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	111b      	asrs	r3, r3, #4
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	4b67      	ldr	r3, [pc, #412]	; (8000ca0 <main+0x31c>)
 8000b02:	701a      	strb	r2, [r3, #0]
			button2B = (nrfdata[0] & 0b00100000) >> 5; // ascii 6 dec 54
 8000b04:	4b61      	ldr	r3, [pc, #388]	; (8000c8c <main+0x308>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	115b      	asrs	r3, r3, #5
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4b64      	ldr	r3, [pc, #400]	; (8000ca4 <main+0x320>)
 8000b14:	701a      	strb	r2, [r3, #0]
			button3A = (nrfdata[0] & 0b01000000) >> 6; // ascii 7 dec 55 otw
 8000b16:	4b5d      	ldr	r3, [pc, #372]	; (8000c8c <main+0x308>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	119b      	asrs	r3, r3, #6
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b60      	ldr	r3, [pc, #384]	; (8000ca8 <main+0x324>)
 8000b26:	701a      	strb	r2, [r3, #0]
			button3B = (nrfdata[0] & 0b10000000) >> 7; // ascii 8 dec 56 zamk
 8000b28:	4b58      	ldr	r3, [pc, #352]	; (8000c8c <main+0x308>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	09db      	lsrs	r3, r3, #7
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	4b5e      	ldr	r3, [pc, #376]	; (8000cac <main+0x328>)
 8000b32:	701a      	strb	r2, [r3, #0]

			//byte 2
			button4A = (nrfdata[1] & 0b00000001); // acsii 9 dec 57
 8000b34:	4b55      	ldr	r3, [pc, #340]	; (8000c8c <main+0x308>)
 8000b36:	785b      	ldrb	r3, [r3, #1]
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b5c      	ldr	r3, [pc, #368]	; (8000cb0 <main+0x32c>)
 8000b40:	701a      	strb	r2, [r3, #0]
			button4B = (nrfdata[1] & 0b00000010) >> 1; // ascii : dec 58
 8000b42:	4b52      	ldr	r3, [pc, #328]	; (8000c8c <main+0x308>)
 8000b44:	785b      	ldrb	r3, [r3, #1]
 8000b46:	105b      	asrs	r3, r3, #1
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b58      	ldr	r3, [pc, #352]	; (8000cb4 <main+0x330>)
 8000b52:	701a      	strb	r2, [r3, #0]
			moveA = (nrfdata[1] & 0b00000100) >> 2; // ascii ; dec 59
 8000b54:	4b4d      	ldr	r3, [pc, #308]	; (8000c8c <main+0x308>)
 8000b56:	785b      	ldrb	r3, [r3, #1]
 8000b58:	109b      	asrs	r3, r3, #2
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4b55      	ldr	r3, [pc, #340]	; (8000cb8 <main+0x334>)
 8000b64:	701a      	strb	r2, [r3, #0]
			moveB = (nrfdata[1] & 0b00001000) >> 3; // ascii < dec 60
 8000b66:	4b49      	ldr	r3, [pc, #292]	; (8000c8c <main+0x308>)
 8000b68:	785b      	ldrb	r3, [r3, #1]
 8000b6a:	10db      	asrs	r3, r3, #3
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	4b51      	ldr	r3, [pc, #324]	; (8000cbc <main+0x338>)
 8000b76:	701a      	strb	r2, [r3, #0]
			rotateA = (nrfdata[1] & 0b00010000) >> 4; // ascii > dec 62
 8000b78:	4b44      	ldr	r3, [pc, #272]	; (8000c8c <main+0x308>)
 8000b7a:	785b      	ldrb	r3, [r3, #1]
 8000b7c:	111b      	asrs	r3, r3, #4
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4b4e      	ldr	r3, [pc, #312]	; (8000cc0 <main+0x33c>)
 8000b88:	701a      	strb	r2, [r3, #0]
			rotateB = (nrfdata[1] & 0b00100000) >> 5; // ascii ? dec 63
 8000b8a:	4b40      	ldr	r3, [pc, #256]	; (8000c8c <main+0x308>)
 8000b8c:	785b      	ldrb	r3, [r3, #1]
 8000b8e:	115b      	asrs	r3, r3, #5
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b4a      	ldr	r3, [pc, #296]	; (8000cc4 <main+0x340>)
 8000b9a:	701a      	strb	r2, [r3, #0]
			offcon = (nrfdata[1] & 0b01000000) >> 6; // ascii 7
 8000b9c:	4b3b      	ldr	r3, [pc, #236]	; (8000c8c <main+0x308>)
 8000b9e:	785b      	ldrb	r3, [r3, #1]
 8000ba0:	119b      	asrs	r3, r3, #6
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b47      	ldr	r3, [pc, #284]	; (8000cc8 <main+0x344>)
 8000bac:	701a      	strb	r2, [r3, #0]
			autonomy = (nrfdata[1] & 0b10000000) >> 7; // ascii 8
 8000bae:	4b37      	ldr	r3, [pc, #220]	; (8000c8c <main+0x308>)
 8000bb0:	785b      	ldrb	r3, [r3, #1]
 8000bb2:	09db      	lsrs	r3, r3, #7
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4b45      	ldr	r3, [pc, #276]	; (8000ccc <main+0x348>)
 8000bb8:	701a      	strb	r2, [r3, #0]

			byte1 = nrfdata[0];
 8000bba:	4b34      	ldr	r3, [pc, #208]	; (8000c8c <main+0x308>)
 8000bbc:	781a      	ldrb	r2, [r3, #0]
 8000bbe:	4b44      	ldr	r3, [pc, #272]	; (8000cd0 <main+0x34c>)
 8000bc0:	701a      	strb	r2, [r3, #0]
			byte2 = nrfdata[1];
 8000bc2:	4b32      	ldr	r3, [pc, #200]	; (8000c8c <main+0x308>)
 8000bc4:	785a      	ldrb	r2, [r3, #1]
 8000bc6:	4b43      	ldr	r3, [pc, #268]	; (8000cd4 <main+0x350>)
 8000bc8:	701a      	strb	r2, [r3, #0]
			byte3 = nrfdata[2];
 8000bca:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <main+0x308>)
 8000bcc:	789a      	ldrb	r2, [r3, #2]
 8000bce:	4b42      	ldr	r3, [pc, #264]	; (8000cd8 <main+0x354>)
 8000bd0:	701a      	strb	r2, [r3, #0]
			byte4 = nrfdata[3];
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <main+0x308>)
 8000bd4:	78da      	ldrb	r2, [r3, #3]
 8000bd6:	4b41      	ldr	r3, [pc, #260]	; (8000cdc <main+0x358>)
 8000bd8:	701a      	strb	r2, [r3, #0]
			byte5 = nrfdata[4];
 8000bda:	4b2c      	ldr	r3, [pc, #176]	; (8000c8c <main+0x308>)
 8000bdc:	791a      	ldrb	r2, [r3, #4]
 8000bde:	4b40      	ldr	r3, [pc, #256]	; (8000ce0 <main+0x35c>)
 8000be0:	701a      	strb	r2, [r3, #0]
			byte6 = nrfdata[5];
 8000be2:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <main+0x308>)
 8000be4:	795a      	ldrb	r2, [r3, #5]
 8000be6:	4b3f      	ldr	r3, [pc, #252]	; (8000ce4 <main+0x360>)
 8000be8:	701a      	strb	r2, [r3, #0]
			byte7 = nrfdata[6]; // nrfdata6
 8000bea:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <main+0x308>)
 8000bec:	799a      	ldrb	r2, [r3, #6]
 8000bee:	4b3e      	ldr	r3, [pc, #248]	; (8000ce8 <main+0x364>)
 8000bf0:	701a      	strb	r2, [r3, #0]
			byte8 = nrfdata[7]; // nrfdata7
 8000bf2:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <main+0x308>)
 8000bf4:	79da      	ldrb	r2, [r3, #7]
 8000bf6:	4b3d      	ldr	r3, [pc, #244]	; (8000cec <main+0x368>)
 8000bf8:	701a      	strb	r2, [r3, #0]

			chsm = nrfdata[8];
 8000bfa:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <main+0x308>)
 8000bfc:	7a1a      	ldrb	r2, [r3, #8]
 8000bfe:	4b3c      	ldr	r3, [pc, #240]	; (8000cf0 <main+0x36c>)
 8000c00:	701a      	strb	r2, [r3, #0]
			sum = ((byte1 + byte2 + byte3 + byte4 + byte5 + byte6 + byte7
 8000c02:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <main+0x34c>)
 8000c04:	781a      	ldrb	r2, [r3, #0]
 8000c06:	4b33      	ldr	r3, [pc, #204]	; (8000cd4 <main+0x350>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4b32      	ldr	r3, [pc, #200]	; (8000cd8 <main+0x354>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4b31      	ldr	r3, [pc, #196]	; (8000cdc <main+0x358>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4b30      	ldr	r3, [pc, #192]	; (8000ce0 <main+0x35c>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4b2f      	ldr	r3, [pc, #188]	; (8000ce4 <main+0x360>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <main+0x364>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	b2da      	uxtb	r2, r3
					+ byte8) & 0xFF);
 8000c36:	4b2d      	ldr	r3, [pc, #180]	; (8000cec <main+0x368>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	b2da      	uxtb	r2, r3
			sum = ((byte1 + byte2 + byte3 + byte4 + byte5 + byte6 + byte7
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <main+0x370>)
 8000c40:	701a      	strb	r2, [r3, #0]

		}

		//if there is no signal restart nRF24 and stop motor
		if (HAL_GetTick() - timereset > 400) {
 8000c42:	f002 fc01 	bl	8003448 <HAL_GetTick>
 8000c46:	4602      	mov	r2, r0
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <main+0x2f4>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c52:	f240 8347 	bls.w	80012e4 <main+0x960>
 8000c56:	e04f      	b.n	8000cf8 <main+0x374>
 8000c58:	20000098 	.word	0x20000098
 8000c5c:	0800618c 	.word	0x0800618c
 8000c60:	08006190 	.word	0x08006190
 8000c64:	20000170 	.word	0x20000170
 8000c68:	20000130 	.word	0x20000130
 8000c6c:	200001b0 	.word	0x200001b0
 8000c70:	200000f0 	.word	0x200000f0
 8000c74:	20000080 	.word	0x20000080
 8000c78:	20000084 	.word	0x20000084
 8000c7c:	20000088 	.word	0x20000088
 8000c80:	2000008c 	.word	0x2000008c
 8000c84:	20000000 	.word	0x20000000
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	20000030 	.word	0x20000030
 8000c90:	20000049 	.word	0x20000049
 8000c94:	2000004a 	.word	0x2000004a
 8000c98:	2000004b 	.word	0x2000004b
 8000c9c:	2000004c 	.word	0x2000004c
 8000ca0:	2000004d 	.word	0x2000004d
 8000ca4:	2000004e 	.word	0x2000004e
 8000ca8:	2000004f 	.word	0x2000004f
 8000cac:	20000050 	.word	0x20000050
 8000cb0:	20000051 	.word	0x20000051
 8000cb4:	20000052 	.word	0x20000052
 8000cb8:	20000053 	.word	0x20000053
 8000cbc:	20000054 	.word	0x20000054
 8000cc0:	20000055 	.word	0x20000055
 8000cc4:	20000056 	.word	0x20000056
 8000cc8:	20000057 	.word	0x20000057
 8000ccc:	20000058 	.word	0x20000058
 8000cd0:	2000005e 	.word	0x2000005e
 8000cd4:	2000005f 	.word	0x2000005f
 8000cd8:	20000060 	.word	0x20000060
 8000cdc:	20000061 	.word	0x20000061
 8000ce0:	20000062 	.word	0x20000062
 8000ce4:	20000063 	.word	0x20000063
 8000ce8:	20000064 	.word	0x20000064
 8000cec:	20000065 	.word	0x20000065
 8000cf0:	20000066 	.word	0x20000066
 8000cf4:	20000059 	.word	0x20000059
			if (HAL_UART_Receive(&huart2, start2, 1, 20) != 3 && start2[0] == 38)
 8000cf8:	2314      	movs	r3, #20
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	498c      	ldr	r1, [pc, #560]	; (8000f30 <main+0x5ac>)
 8000cfe:	488d      	ldr	r0, [pc, #564]	; (8000f34 <main+0x5b0>)
 8000d00:	f005 f827 	bl	8005d52 <HAL_UART_Receive>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	f000 81dc 	beq.w	80010c4 <main+0x740>
 8000d0c:	4b88      	ldr	r3, [pc, #544]	; (8000f30 <main+0x5ac>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b26      	cmp	r3, #38	; 0x26
 8000d12:	f040 81d7 	bne.w	80010c4 <main+0x740>
					{

						//autonomia po braku anteny

						HAL_UART_Receive(&huart2, jetsondata4, 4, 100);
 8000d16:	2364      	movs	r3, #100	; 0x64
 8000d18:	2204      	movs	r2, #4
 8000d1a:	4987      	ldr	r1, [pc, #540]	; (8000f38 <main+0x5b4>)
 8000d1c:	4885      	ldr	r0, [pc, #532]	; (8000f34 <main+0x5b0>)
 8000d1e:	f005 f818 	bl	8005d52 <HAL_UART_Receive>
						if (jetsondata4[3] == ((jetsondata4[2]+jetsondata4[1] + jetsondata4[0] + start2[0]) & 0xFF))
 8000d22:	4b85      	ldr	r3, [pc, #532]	; (8000f38 <main+0x5b4>)
 8000d24:	78db      	ldrb	r3, [r3, #3]
 8000d26:	4619      	mov	r1, r3
 8000d28:	4b83      	ldr	r3, [pc, #524]	; (8000f38 <main+0x5b4>)
 8000d2a:	789b      	ldrb	r3, [r3, #2]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b82      	ldr	r3, [pc, #520]	; (8000f38 <main+0x5b4>)
 8000d30:	785b      	ldrb	r3, [r3, #1]
 8000d32:	4413      	add	r3, r2
 8000d34:	4a80      	ldr	r2, [pc, #512]	; (8000f38 <main+0x5b4>)
 8000d36:	7812      	ldrb	r2, [r2, #0]
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a7d      	ldr	r2, [pc, #500]	; (8000f30 <main+0x5ac>)
 8000d3c:	7812      	ldrb	r2, [r2, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f040 84ed 	bne.w	8001722 <main+0xd9e>
						{
							timeauto2 = HAL_GetTick();
 8000d48:	f002 fb7e 	bl	8003448 <HAL_GetTick>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4a7b      	ldr	r2, [pc, #492]	; (8000f3c <main+0x5b8>)
 8000d50:	6013      	str	r3, [r2, #0]
							HAL_UART_Transmit(&huart2, autoY , 3, 60);
 8000d52:	233c      	movs	r3, #60	; 0x3c
 8000d54:	2203      	movs	r2, #3
 8000d56:	497a      	ldr	r1, [pc, #488]	; (8000f40 <main+0x5bc>)
 8000d58:	4876      	ldr	r0, [pc, #472]	; (8000f34 <main+0x5b0>)
 8000d5a:	f004 ff77 	bl	8005c4c <HAL_UART_Transmit>
						pwm1 = map(jetsondata4[0], 32, 127, 0, 1000);
 8000d5e:	4b76      	ldr	r3, [pc, #472]	; (8000f38 <main+0x5b4>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	b298      	uxth	r0, r3
 8000d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	227f      	movs	r2, #127	; 0x7f
 8000d6e:	2120      	movs	r1, #32
 8000d70:	f000 fd3e 	bl	80017f0 <map>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fab6 	bl	80002e8 <__aeabi_ui2f>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4a71      	ldr	r2, [pc, #452]	; (8000f44 <main+0x5c0>)
 8000d80:	6013      	str	r3, [r2, #0]
												pwm1 = (pwm1 - 500) * 2;
 8000d82:	4b70      	ldr	r3, [pc, #448]	; (8000f44 <main+0x5c0>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4970      	ldr	r1, [pc, #448]	; (8000f48 <main+0x5c4>)
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff f9fb 	bl	8000184 <__aeabi_fsub>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	4619      	mov	r1, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff f9f8 	bl	8000188 <__addsf3>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b69      	ldr	r3, [pc, #420]	; (8000f44 <main+0x5c0>)
 8000d9e:	601a      	str	r2, [r3, #0]

												if (pwm1 > -200 && pwm1 < 200) {
 8000da0:	4b68      	ldr	r3, [pc, #416]	; (8000f44 <main+0x5c0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4969      	ldr	r1, [pc, #420]	; (8000f4c <main+0x5c8>)
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fb62 	bl	8000470 <__aeabi_fcmpgt>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d00d      	beq.n	8000dce <main+0x44a>
 8000db2:	4b64      	ldr	r3, [pc, #400]	; (8000f44 <main+0x5c0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4966      	ldr	r1, [pc, #408]	; (8000f50 <main+0x5cc>)
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fb3b 	bl	8000434 <__aeabi_fcmplt>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d004      	beq.n	8000dce <main+0x44a>
													PWMval(6, 0);
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2006      	movs	r0, #6
 8000dc8:	f000 fd38 	bl	800183c <PWMval>
 8000dcc:	e02e      	b.n	8000e2c <main+0x4a8>
												}

												else if (pwm1 > pwmRight) {
 8000dce:	4b5d      	ldr	r3, [pc, #372]	; (8000f44 <main+0x5c0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a60      	ldr	r2, [pc, #384]	; (8000f54 <main+0x5d0>)
 8000dd4:	6812      	ldr	r2, [r2, #0]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fb49 	bl	8000470 <__aeabi_fcmpgt>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d00c      	beq.n	8000dfe <main+0x47a>
													pwmRight = pwmRight + step;
 8000de4:	4b5b      	ldr	r3, [pc, #364]	; (8000f54 <main+0x5d0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a5b      	ldr	r2, [pc, #364]	; (8000f58 <main+0x5d4>)
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	4611      	mov	r1, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff f9ca 	bl	8000188 <__addsf3>
 8000df4:	4603      	mov	r3, r0
 8000df6:	461a      	mov	r2, r3
 8000df8:	4b56      	ldr	r3, [pc, #344]	; (8000f54 <main+0x5d0>)
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	e016      	b.n	8000e2c <main+0x4a8>
												}
												else if (pwm1 < pwmRight) {
 8000dfe:	4b51      	ldr	r3, [pc, #324]	; (8000f44 <main+0x5c0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a54      	ldr	r2, [pc, #336]	; (8000f54 <main+0x5d0>)
 8000e04:	6812      	ldr	r2, [r2, #0]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fb13 	bl	8000434 <__aeabi_fcmplt>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d00b      	beq.n	8000e2c <main+0x4a8>
													pwmRight = pwmRight - step;
 8000e14:	4b4f      	ldr	r3, [pc, #316]	; (8000f54 <main+0x5d0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a4f      	ldr	r2, [pc, #316]	; (8000f58 <main+0x5d4>)
 8000e1a:	6812      	ldr	r2, [r2, #0]
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff f9b0 	bl	8000184 <__aeabi_fsub>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461a      	mov	r2, r3
 8000e28:	4b4a      	ldr	r3, [pc, #296]	; (8000f54 <main+0x5d0>)
 8000e2a:	601a      	str	r2, [r3, #0]
												}
												if (pwmRight > 0) {
 8000e2c:	4b49      	ldr	r3, [pc, #292]	; (8000f54 <main+0x5d0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f04f 0100 	mov.w	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fb1b 	bl	8000470 <__aeabi_fcmpgt>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00d      	beq.n	8000e5c <main+0x4d8>
													RmotorF();
 8000e40:	f000 fee0 	bl	8001c04 <RmotorF>
													PWMval(6, (int) pwmRight);
 8000e44:	4b43      	ldr	r3, [pc, #268]	; (8000f54 <main+0x5d0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fb1b 	bl	8000484 <__aeabi_f2iz>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	2006      	movs	r0, #6
 8000e56:	f000 fcf1 	bl	800183c <PWMval>
 8000e5a:	e018      	b.n	8000e8e <main+0x50a>
												}
												else if (pwmRight < 0) {
 8000e5c:	4b3d      	ldr	r3, [pc, #244]	; (8000f54 <main+0x5d0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f04f 0100 	mov.w	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fae5 	bl	8000434 <__aeabi_fcmplt>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d00e      	beq.n	8000e8e <main+0x50a>
													RmotorB();
 8000e70:	f000 fedc 	bl	8001c2c <RmotorB>
													PWMval(6, ((int) pwmRight) * -1);
 8000e74:	4b37      	ldr	r3, [pc, #220]	; (8000f54 <main+0x5d0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fb03 	bl	8000484 <__aeabi_f2iz>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	425b      	negs	r3, r3
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	4619      	mov	r1, r3
 8000e88:	2006      	movs	r0, #6
 8000e8a:	f000 fcd7 	bl	800183c <PWMval>
												}

												pwm2 = map(jetsondata4[1], 32, 127, 0, 1000);
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <main+0x5b4>)
 8000e90:	785b      	ldrb	r3, [r3, #1]
 8000e92:	b298      	uxth	r0, r3
 8000e94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	227f      	movs	r2, #127	; 0x7f
 8000e9e:	2120      	movs	r1, #32
 8000ea0:	f000 fca6 	bl	80017f0 <map>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fa1e 	bl	80002e8 <__aeabi_ui2f>
 8000eac:	4603      	mov	r3, r0
 8000eae:	4a2b      	ldr	r2, [pc, #172]	; (8000f5c <main+0x5d8>)
 8000eb0:	6013      	str	r3, [r2, #0]
												pwm2 = (pwm2 - 500) * 2;
 8000eb2:	4b2a      	ldr	r3, [pc, #168]	; (8000f5c <main+0x5d8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4924      	ldr	r1, [pc, #144]	; (8000f48 <main+0x5c4>)
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff f963 	bl	8000184 <__aeabi_fsub>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff f960 	bl	8000188 <__addsf3>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <main+0x5d8>)
 8000ece:	601a      	str	r2, [r3, #0]
												if (pwm1 > -200 && pwm1 < 200) {
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <main+0x5c0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	491d      	ldr	r1, [pc, #116]	; (8000f4c <main+0x5c8>)
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff faca 	bl	8000470 <__aeabi_fcmpgt>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00d      	beq.n	8000efe <main+0x57a>
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <main+0x5c0>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	491a      	ldr	r1, [pc, #104]	; (8000f50 <main+0x5cc>)
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff faa3 	bl	8000434 <__aeabi_fcmplt>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d004      	beq.n	8000efe <main+0x57a>
													PWMval(7, 0);
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2007      	movs	r0, #7
 8000ef8:	f000 fca0 	bl	800183c <PWMval>
 8000efc:	e049      	b.n	8000f92 <main+0x60e>
												}
												else if (pwm2 > pwmLeft) {
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <main+0x5d8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <main+0x5dc>)
 8000f04:	6812      	ldr	r2, [r2, #0]
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fab1 	bl	8000470 <__aeabi_fcmpgt>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d027      	beq.n	8000f64 <main+0x5e0>
													pwmLeft = pwmLeft + step;
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <main+0x5dc>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <main+0x5d4>)
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff f932 	bl	8000188 <__addsf3>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <main+0x5dc>)
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	e031      	b.n	8000f92 <main+0x60e>
 8000f2e:	bf00      	nop
 8000f30:	20000048 	.word	0x20000048
 8000f34:	200001f0 	.word	0x200001f0
 8000f38:	20000040 	.word	0x20000040
 8000f3c:	2000008c 	.word	0x2000008c
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000068 	.word	0x20000068
 8000f48:	43fa0000 	.word	0x43fa0000
 8000f4c:	c3480000 	.word	0xc3480000
 8000f50:	43480000 	.word	0x43480000
 8000f54:	20000070 	.word	0x20000070
 8000f58:	20000004 	.word	0x20000004
 8000f5c:	2000006c 	.word	0x2000006c
 8000f60:	20000074 	.word	0x20000074
												}
												else if (pwm2 < pwmLeft) {
 8000f64:	4ba3      	ldr	r3, [pc, #652]	; (80011f4 <main+0x870>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4aa3      	ldr	r2, [pc, #652]	; (80011f8 <main+0x874>)
 8000f6a:	6812      	ldr	r2, [r2, #0]
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fa60 	bl	8000434 <__aeabi_fcmplt>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00b      	beq.n	8000f92 <main+0x60e>
													pwmLeft = pwmLeft - step;
 8000f7a:	4b9f      	ldr	r3, [pc, #636]	; (80011f8 <main+0x874>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a9f      	ldr	r2, [pc, #636]	; (80011fc <main+0x878>)
 8000f80:	6812      	ldr	r2, [r2, #0]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff f8fd 	bl	8000184 <__aeabi_fsub>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b9a      	ldr	r3, [pc, #616]	; (80011f8 <main+0x874>)
 8000f90:	601a      	str	r2, [r3, #0]
												}
												if (pwmLeft > 0) {
 8000f92:	4b99      	ldr	r3, [pc, #612]	; (80011f8 <main+0x874>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f04f 0100 	mov.w	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fa68 	bl	8000470 <__aeabi_fcmpgt>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d00d      	beq.n	8000fc2 <main+0x63e>
													LmotorF();
 8000fa6:	f000 fe09 	bl	8001bbc <LmotorF>
													PWMval(7, (int) pwmLeft);
 8000faa:	4b93      	ldr	r3, [pc, #588]	; (80011f8 <main+0x874>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fa68 	bl	8000484 <__aeabi_f2iz>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	4619      	mov	r1, r3
 8000fba:	2007      	movs	r0, #7
 8000fbc:	f000 fc3e 	bl	800183c <PWMval>
 8000fc0:	e018      	b.n	8000ff4 <main+0x670>
												}
												else if (pwmLeft < 0) {
 8000fc2:	4b8d      	ldr	r3, [pc, #564]	; (80011f8 <main+0x874>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f04f 0100 	mov.w	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fa32 	bl	8000434 <__aeabi_fcmplt>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00e      	beq.n	8000ff4 <main+0x670>
													LmotorB();
 8000fd6:	f000 fe03 	bl	8001be0 <LmotorB>
													PWMval(7, ((int) pwmLeft) * -1);
 8000fda:	4b87      	ldr	r3, [pc, #540]	; (80011f8 <main+0x874>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fa50 	bl	8000484 <__aeabi_f2iz>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	425b      	negs	r3, r3
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	4619      	mov	r1, r3
 8000fee:	2007      	movs	r0, #7
 8000ff0:	f000 fc24 	bl	800183c <PWMval>
												}
												LEDR = (jetsondata4[2] & 0b00000001);
 8000ff4:	4b82      	ldr	r3, [pc, #520]	; (8001200 <main+0x87c>)
 8000ff6:	789b      	ldrb	r3, [r3, #2]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b81      	ldr	r3, [pc, #516]	; (8001204 <main+0x880>)
 8001000:	701a      	strb	r2, [r3, #0]
												LEDG = (jetsondata4[2] & 0b00000010) >> 1;
 8001002:	4b7f      	ldr	r3, [pc, #508]	; (8001200 <main+0x87c>)
 8001004:	789b      	ldrb	r3, [r3, #2]
 8001006:	105b      	asrs	r3, r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b7d      	ldr	r3, [pc, #500]	; (8001208 <main+0x884>)
 8001012:	701a      	strb	r2, [r3, #0]
												LEDY = (jetsondata4[2] & 0b00000100) >> 2;
 8001014:	4b7a      	ldr	r3, [pc, #488]	; (8001200 <main+0x87c>)
 8001016:	789b      	ldrb	r3, [r3, #2]
 8001018:	109b      	asrs	r3, r3, #2
 800101a:	b2db      	uxtb	r3, r3
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b7a      	ldr	r3, [pc, #488]	; (800120c <main+0x888>)
 8001024:	701a      	strb	r2, [r3, #0]
												otw = (jetsondata4[2] & 0b00001000) >> 3;
 8001026:	4b76      	ldr	r3, [pc, #472]	; (8001200 <main+0x87c>)
 8001028:	789b      	ldrb	r3, [r3, #2]
 800102a:	10db      	asrs	r3, r3, #3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b76      	ldr	r3, [pc, #472]	; (8001210 <main+0x88c>)
 8001036:	701a      	strb	r2, [r3, #0]

												if (otw){
 8001038:	4b75      	ldr	r3, [pc, #468]	; (8001210 <main+0x88c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d006      	beq.n	800104e <main+0x6ca>
													//otw chwytaka
													czlon2L();
 8001040:	f000 fcd6 	bl	80019f0 <czlon2L>
													PWMval(2, 1000);
 8001044:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001048:	2002      	movs	r0, #2
 800104a:	f000 fbf7 	bl	800183c <PWMval>
												}
												if (LEDR){
 800104e:	4b6d      	ldr	r3, [pc, #436]	; (8001204 <main+0x880>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d005      	beq.n	8001062 <main+0x6de>
													HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2101      	movs	r1, #1
 800105a:	486e      	ldr	r0, [pc, #440]	; (8001214 <main+0x890>)
 800105c:	f002 fc94 	bl	8003988 <HAL_GPIO_WritePin>
 8001060:	e008      	b.n	8001074 <main+0x6f0>
												}
												else if (!LEDR){
 8001062:	4b68      	ldr	r3, [pc, #416]	; (8001204 <main+0x880>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d104      	bne.n	8001074 <main+0x6f0>
													HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	2101      	movs	r1, #1
 800106e:	4869      	ldr	r0, [pc, #420]	; (8001214 <main+0x890>)
 8001070:	f002 fc8a 	bl	8003988 <HAL_GPIO_WritePin>
												}
												if (LEDG){
 8001074:	4b64      	ldr	r3, [pc, #400]	; (8001208 <main+0x884>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <main+0x704>
													HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	2102      	movs	r1, #2
 8001080:	4864      	ldr	r0, [pc, #400]	; (8001214 <main+0x890>)
 8001082:	f002 fc81 	bl	8003988 <HAL_GPIO_WritePin>
 8001086:	e008      	b.n	800109a <main+0x716>
												}
												else if (!LEDG){
 8001088:	4b5f      	ldr	r3, [pc, #380]	; (8001208 <main+0x884>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d104      	bne.n	800109a <main+0x716>
													HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2102      	movs	r1, #2
 8001094:	485f      	ldr	r0, [pc, #380]	; (8001214 <main+0x890>)
 8001096:	f002 fc77 	bl	8003988 <HAL_GPIO_WritePin>
												}
												if (LEDY){
 800109a:	4b5c      	ldr	r3, [pc, #368]	; (800120c <main+0x888>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d005      	beq.n	80010ae <main+0x72a>
													HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2108      	movs	r1, #8
 80010a6:	485b      	ldr	r0, [pc, #364]	; (8001214 <main+0x890>)
 80010a8:	f002 fc6e 	bl	8003988 <HAL_GPIO_WritePin>
						if (jetsondata4[3] == ((jetsondata4[2]+jetsondata4[1] + jetsondata4[0] + start2[0]) & 0xFF))
 80010ac:	e339      	b.n	8001722 <main+0xd9e>
												}
												else if (!LEDY){
 80010ae:	4b57      	ldr	r3, [pc, #348]	; (800120c <main+0x888>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f040 8335 	bne.w	8001722 <main+0xd9e>
													HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2108      	movs	r1, #8
 80010bc:	4855      	ldr	r0, [pc, #340]	; (8001214 <main+0x890>)
 80010be:	f002 fc63 	bl	8003988 <HAL_GPIO_WritePin>
						if (jetsondata4[3] == ((jetsondata4[2]+jetsondata4[1] + jetsondata4[0] + start2[0]) & 0xFF))
 80010c2:	e32e      	b.n	8001722 <main+0xd9e>

						}


					}
			else if (HAL_GetTick() - timeauto2 > 400) {
 80010c4:	f002 f9c0 	bl	8003448 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	4b53      	ldr	r3, [pc, #332]	; (8001218 <main+0x894>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80010d4:	f67f accb 	bls.w	8000a6e <main+0xea>
				// pewnie przez to dziala wolno
			//nRF24_Init(&hspi2);
			//nRF24_SetRXAddress(0, "Odb");
			//nRF24_SetTXAddress("Nad");
			//nRF24_RX_Mode();
			stoppodst();
 80010d8:	f000 fc22 	bl	8001920 <stoppodst>
			stopczlon5();
 80010dc:	f000 fd56 	bl	8001b8c <stopczlon5>
			stopczlon1();
 80010e0:	f000 fc5a 	bl	8001998 <stopczlon1>
			stopczlon2();
 80010e4:	f000 fc98 	bl	8001a18 <stopczlon2>
			stopczlon3();
 80010e8:	f000 fcd2 	bl	8001a90 <stopczlon3>
			stopczlon4();
 80010ec:	f000 fd0e 	bl	8001b0c <stopczlon4>
			servox0();
 80010f0:	f000 ffdc 	bl	80020ac <servox0>
			servoy0();
 80010f4:	f001 f812 	bl	800211c <servoy0>
			if (0 > pwmLeft) {
 80010f8:	4b3f      	ldr	r3, [pc, #252]	; (80011f8 <main+0x874>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f04f 0100 	mov.w	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f997 	bl	8000434 <__aeabi_fcmplt>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00a      	beq.n	8001122 <main+0x79e>
				pwmLeft = pwmLeft + 20;
 800110c:	4b3a      	ldr	r3, [pc, #232]	; (80011f8 <main+0x874>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4942      	ldr	r1, [pc, #264]	; (800121c <main+0x898>)
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff f838 	bl	8000188 <__addsf3>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	4b36      	ldr	r3, [pc, #216]	; (80011f8 <main+0x874>)
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	e013      	b.n	800114a <main+0x7c6>
			} else if (0 < pwmLeft) {
 8001122:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <main+0x874>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f04f 0100 	mov.w	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f9a0 	bl	8000470 <__aeabi_fcmpgt>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d009      	beq.n	800114a <main+0x7c6>
				pwmLeft = pwmLeft - 20;
 8001136:	4b30      	ldr	r3, [pc, #192]	; (80011f8 <main+0x874>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4938      	ldr	r1, [pc, #224]	; (800121c <main+0x898>)
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f821 	bl	8000184 <__aeabi_fsub>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	4b2c      	ldr	r3, [pc, #176]	; (80011f8 <main+0x874>)
 8001148:	601a      	str	r2, [r3, #0]
			}
			if (pwmLeft >=  20) {
 800114a:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <main+0x874>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4933      	ldr	r1, [pc, #204]	; (800121c <main+0x898>)
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f983 	bl	800045c <__aeabi_fcmpge>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d00d      	beq.n	8001178 <main+0x7f4>
				LmotorF();
 800115c:	f000 fd2e 	bl	8001bbc <LmotorF>
				PWMval(7, (int) pwmLeft);
 8001160:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <main+0x874>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f98d 	bl	8000484 <__aeabi_f2iz>
 800116a:	4603      	mov	r3, r0
 800116c:	b29b      	uxth	r3, r3
 800116e:	4619      	mov	r1, r3
 8001170:	2007      	movs	r0, #7
 8001172:	f000 fb63 	bl	800183c <PWMval>
 8001176:	e028      	b.n	80011ca <main+0x846>
			} else if (pwmLeft < -20) {
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <main+0x874>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4928      	ldr	r1, [pc, #160]	; (8001220 <main+0x89c>)
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f958 	bl	8000434 <__aeabi_fcmplt>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00f      	beq.n	80011aa <main+0x826>
				LmotorB();
 800118a:	f000 fd29 	bl	8001be0 <LmotorB>
				PWMval(7, ((int) pwmLeft) * -1);
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <main+0x874>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f976 	bl	8000484 <__aeabi_f2iz>
 8001198:	4603      	mov	r3, r0
 800119a:	b29b      	uxth	r3, r3
 800119c:	425b      	negs	r3, r3
 800119e:	b29b      	uxth	r3, r3
 80011a0:	4619      	mov	r1, r3
 80011a2:	2007      	movs	r0, #7
 80011a4:	f000 fb4a 	bl	800183c <PWMval>
 80011a8:	e00f      	b.n	80011ca <main+0x846>
			}
			else {
				PWMval(7, 0);
 80011aa:	2100      	movs	r1, #0
 80011ac:	2007      	movs	r0, #7
 80011ae:	f000 fb45 	bl	800183c <PWMval>
				nRF24_Init(&hspi2);
 80011b2:	481c      	ldr	r0, [pc, #112]	; (8001224 <main+0x8a0>)
 80011b4:	f001 fbec 	bl	8002990 <nRF24_Init>
				nRF24_SetRXAddress(0, "Odb");
 80011b8:	491b      	ldr	r1, [pc, #108]	; (8001228 <main+0x8a4>)
 80011ba:	2000      	movs	r0, #0
 80011bc:	f001 fb2d 	bl	800281a <nRF24_SetRXAddress>
				nRF24_SetTXAddress("Nad");
 80011c0:	481a      	ldr	r0, [pc, #104]	; (800122c <main+0x8a8>)
 80011c2:	f001 fb63 	bl	800288c <nRF24_SetTXAddress>
				nRF24_RX_Mode();
 80011c6:	f001 f977 	bl	80024b8 <nRF24_RX_Mode>

			}
			if (0 > pwmRight) {
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <main+0x8ac>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f04f 0100 	mov.w	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f92e 	bl	8000434 <__aeabi_fcmplt>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d02a      	beq.n	8001234 <main+0x8b0>
				pwmRight = pwmRight + 20;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <main+0x8ac>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	490e      	ldr	r1, [pc, #56]	; (800121c <main+0x898>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7fe ffcf 	bl	8000188 <__addsf3>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <main+0x8ac>)
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	e033      	b.n	800125c <main+0x8d8>
 80011f4:	2000006c 	.word	0x2000006c
 80011f8:	20000074 	.word	0x20000074
 80011fc:	20000004 	.word	0x20000004
 8001200:	20000040 	.word	0x20000040
 8001204:	2000005a 	.word	0x2000005a
 8001208:	2000005b 	.word	0x2000005b
 800120c:	2000005c 	.word	0x2000005c
 8001210:	2000005d 	.word	0x2000005d
 8001214:	40020800 	.word	0x40020800
 8001218:	2000008c 	.word	0x2000008c
 800121c:	41a00000 	.word	0x41a00000
 8001220:	c1a00000 	.word	0xc1a00000
 8001224:	20000098 	.word	0x20000098
 8001228:	0800618c 	.word	0x0800618c
 800122c:	08006190 	.word	0x08006190
 8001230:	20000070 	.word	0x20000070
			} else if (0 < pwmRight) {
 8001234:	4ba8      	ldr	r3, [pc, #672]	; (80014d8 <main+0xb54>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f04f 0100 	mov.w	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f917 	bl	8000470 <__aeabi_fcmpgt>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d009      	beq.n	800125c <main+0x8d8>
				pwmRight = pwmRight - 20;
 8001248:	4ba3      	ldr	r3, [pc, #652]	; (80014d8 <main+0xb54>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	49a3      	ldr	r1, [pc, #652]	; (80014dc <main+0xb58>)
 800124e:	4618      	mov	r0, r3
 8001250:	f7fe ff98 	bl	8000184 <__aeabi_fsub>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	4b9f      	ldr	r3, [pc, #636]	; (80014d8 <main+0xb54>)
 800125a:	601a      	str	r2, [r3, #0]
			}
			if (pwmRight >= 20) {
 800125c:	4b9e      	ldr	r3, [pc, #632]	; (80014d8 <main+0xb54>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	499e      	ldr	r1, [pc, #632]	; (80014dc <main+0xb58>)
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f8fa 	bl	800045c <__aeabi_fcmpge>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00e      	beq.n	800128c <main+0x908>
				RmotorF();
 800126e:	f000 fcc9 	bl	8001c04 <RmotorF>
				PWMval(6, (int) pwmRight);
 8001272:	4b99      	ldr	r3, [pc, #612]	; (80014d8 <main+0xb54>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f904 	bl	8000484 <__aeabi_f2iz>
 800127c:	4603      	mov	r3, r0
 800127e:	b29b      	uxth	r3, r3
 8001280:	4619      	mov	r1, r3
 8001282:	2006      	movs	r0, #6
 8001284:	f000 fada 	bl	800183c <PWMval>
 8001288:	f7ff bbf1 	b.w	8000a6e <main+0xea>
			} else if (pwmRight < -20) {
 800128c:	4b92      	ldr	r3, [pc, #584]	; (80014d8 <main+0xb54>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4993      	ldr	r1, [pc, #588]	; (80014e0 <main+0xb5c>)
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f8ce 	bl	8000434 <__aeabi_fcmplt>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d010      	beq.n	80012c0 <main+0x93c>
				RmotorB();
 800129e:	f000 fcc5 	bl	8001c2c <RmotorB>
				PWMval(6, ((int) pwmRight) * -1);
 80012a2:	4b8d      	ldr	r3, [pc, #564]	; (80014d8 <main+0xb54>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f8ec 	bl	8000484 <__aeabi_f2iz>
 80012ac:	4603      	mov	r3, r0
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	425b      	negs	r3, r3
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	4619      	mov	r1, r3
 80012b6:	2006      	movs	r0, #6
 80012b8:	f000 fac0 	bl	800183c <PWMval>
 80012bc:	f7ff bbd7 	b.w	8000a6e <main+0xea>
			}
			else {
				PWMval(6, 0);
 80012c0:	2100      	movs	r1, #0
 80012c2:	2006      	movs	r0, #6
 80012c4:	f000 faba 	bl	800183c <PWMval>
				nRF24_Init(&hspi2);
 80012c8:	4886      	ldr	r0, [pc, #536]	; (80014e4 <main+0xb60>)
 80012ca:	f001 fb61 	bl	8002990 <nRF24_Init>
				nRF24_SetRXAddress(0, "Odb");
 80012ce:	4986      	ldr	r1, [pc, #536]	; (80014e8 <main+0xb64>)
 80012d0:	2000      	movs	r0, #0
 80012d2:	f001 faa2 	bl	800281a <nRF24_SetRXAddress>
				nRF24_SetTXAddress("Nad");
 80012d6:	4885      	ldr	r0, [pc, #532]	; (80014ec <main+0xb68>)
 80012d8:	f001 fad8 	bl	800288c <nRF24_SetTXAddress>
				nRF24_RX_Mode();
 80012dc:	f001 f8ec 	bl	80024b8 <nRF24_RX_Mode>
 80012e0:	f7ff bbc5 	b.w	8000a6e <main+0xea>
			}

		}
		}

		else if (sum == chsm) {
 80012e4:	4b82      	ldr	r3, [pc, #520]	; (80014f0 <main+0xb6c>)
 80012e6:	781a      	ldrb	r2, [r3, #0]
 80012e8:	4b82      	ldr	r3, [pc, #520]	; (80014f4 <main+0xb70>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	f47f abbe 	bne.w	8000a6e <main+0xea>
			if (offcon) {
 80012f2:	4b81      	ldr	r3, [pc, #516]	; (80014f8 <main+0xb74>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d024      	beq.n	8001344 <main+0x9c0>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,
 80012fa:	2200      	movs	r2, #0
 80012fc:	2102      	movs	r1, #2
 80012fe:	487f      	ldr	r0, [pc, #508]	; (80014fc <main+0xb78>)
 8001300:	f002 fb42 	bl	8003988 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin,
 8001304:	2200      	movs	r2, #0
 8001306:	2108      	movs	r1, #8
 8001308:	487c      	ldr	r0, [pc, #496]	; (80014fc <main+0xb78>)
 800130a:	f002 fb3d 	bl	8003988 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800130e:	2201      	movs	r2, #1
 8001310:	2101      	movs	r1, #1
 8001312:	487a      	ldr	r0, [pc, #488]	; (80014fc <main+0xb78>)
 8001314:	f002 fb38 	bl	8003988 <HAL_GPIO_WritePin>
				stoppodst();
 8001318:	f000 fb02 	bl	8001920 <stoppodst>
				stopczlon5();
 800131c:	f000 fc36 	bl	8001b8c <stopczlon5>
				stopczlon1();
 8001320:	f000 fb3a 	bl	8001998 <stopczlon1>
				stopczlon2();
 8001324:	f000 fb78 	bl	8001a18 <stopczlon2>
				stopczlon3();
 8001328:	f000 fbb2 	bl	8001a90 <stopczlon3>
				stopczlon4();
 800132c:	f000 fbee 	bl	8001b0c <stopczlon4>
				stopjazdaR();
 8001330:	f000 fc90 	bl	8001c54 <stopjazdaR>
				stopjazdaL();
 8001334:	f000 fcf6 	bl	8001d24 <stopjazdaL>
				servox0();
 8001338:	f000 feb8 	bl	80020ac <servox0>
				servoy0();
 800133c:	f000 feee 	bl	800211c <servoy0>
 8001340:	f7ff bb95 	b.w	8000a6e <main+0xea>

			}
			else if (autonomy)
 8001344:	4b6e      	ldr	r3, [pc, #440]	; (8001500 <main+0xb7c>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 81c5 	beq.w	80016d8 <main+0xd54>
			{
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin,
 800134e:	2200      	movs	r2, #0
 8001350:	2101      	movs	r1, #1
 8001352:	486a      	ldr	r0, [pc, #424]	; (80014fc <main+0xb78>)
 8001354:	f002 fb18 	bl	8003988 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,
 8001358:	2200      	movs	r2, #0
 800135a:	2102      	movs	r1, #2
 800135c:	4867      	ldr	r0, [pc, #412]	; (80014fc <main+0xb78>)
 800135e:	f002 fb13 	bl	8003988 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				//HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);

				HAL_UART_Transmit(&huart2, autoY, 3, 100);
 8001362:	2364      	movs	r3, #100	; 0x64
 8001364:	2203      	movs	r2, #3
 8001366:	4967      	ldr	r1, [pc, #412]	; (8001504 <main+0xb80>)
 8001368:	4867      	ldr	r0, [pc, #412]	; (8001508 <main+0xb84>)
 800136a:	f004 fc6f 	bl	8005c4c <HAL_UART_Transmit>

				if (HAL_UART_Receive(&huart2, start, 1, 100) != 3 && start[0] == 58)
 800136e:	2364      	movs	r3, #100	; 0x64
 8001370:	2201      	movs	r2, #1
 8001372:	4966      	ldr	r1, [pc, #408]	; (800150c <main+0xb88>)
 8001374:	4864      	ldr	r0, [pc, #400]	; (8001508 <main+0xb84>)
 8001376:	f004 fcec 	bl	8005d52 <HAL_UART_Receive>
 800137a:	4603      	mov	r3, r0
 800137c:	2b03      	cmp	r3, #3
 800137e:	f43f ab76 	beq.w	8000a6e <main+0xea>
 8001382:	4b62      	ldr	r3, [pc, #392]	; (800150c <main+0xb88>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b3a      	cmp	r3, #58	; 0x3a
 8001388:	f47f ab71 	bne.w	8000a6e <main+0xea>
				{

					HAL_UART_Receive(&huart2, jetsondata, 3, 100);
 800138c:	2364      	movs	r3, #100	; 0x64
 800138e:	2203      	movs	r2, #3
 8001390:	495f      	ldr	r1, [pc, #380]	; (8001510 <main+0xb8c>)
 8001392:	485d      	ldr	r0, [pc, #372]	; (8001508 <main+0xb84>)
 8001394:	f004 fcdd 	bl	8005d52 <HAL_UART_Receive>

					if (jetsondata[2] == ((jetsondata[1] + jetsondata[0] + start[0]) & 0xFF))
 8001398:	4b5d      	ldr	r3, [pc, #372]	; (8001510 <main+0xb8c>)
 800139a:	789b      	ldrb	r3, [r3, #2]
 800139c:	4619      	mov	r1, r3
 800139e:	4b5c      	ldr	r3, [pc, #368]	; (8001510 <main+0xb8c>)
 80013a0:	785b      	ldrb	r3, [r3, #1]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b5a      	ldr	r3, [pc, #360]	; (8001510 <main+0xb8c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4413      	add	r3, r2
 80013aa:	4a58      	ldr	r2, [pc, #352]	; (800150c <main+0xb88>)
 80013ac:	7812      	ldrb	r2, [r2, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	4299      	cmp	r1, r3
 80013b4:	f040 817e 	bne.w	80016b4 <main+0xd30>
					{

						if (jetsondata[1] == 200 && jetsondata[2] == 200)
 80013b8:	4b55      	ldr	r3, [pc, #340]	; (8001510 <main+0xb8c>)
 80013ba:	785b      	ldrb	r3, [r3, #1]
 80013bc:	2bc8      	cmp	r3, #200	; 0xc8
 80013be:	d10b      	bne.n	80013d8 <main+0xa54>
 80013c0:	4b53      	ldr	r3, [pc, #332]	; (8001510 <main+0xb8c>)
 80013c2:	789b      	ldrb	r3, [r3, #2]
 80013c4:	2bc8      	cmp	r3, #200	; 0xc8
 80013c6:	d107      	bne.n	80013d8 <main+0xa54>
						{
							//otw chwytaka
							czlon2L();
 80013c8:	f000 fb12 	bl	80019f0 <czlon2L>
							PWMval(2, 1000);
 80013cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013d0:	2002      	movs	r0, #2
 80013d2:	f000 fa33 	bl	800183c <PWMval>
 80013d6:	e1a5      	b.n	8001724 <main+0xda0>
						}
						else
						{
						pwm1 = map(jetsondata[0], 32, 127, 0, 1000);
 80013d8:	4b4d      	ldr	r3, [pc, #308]	; (8001510 <main+0xb8c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b298      	uxth	r0, r3
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2300      	movs	r3, #0
 80013e6:	227f      	movs	r2, #127	; 0x7f
 80013e8:	2120      	movs	r1, #32
 80013ea:	f000 fa01 	bl	80017f0 <map>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7fe ff79 	bl	80002e8 <__aeabi_ui2f>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4a46      	ldr	r2, [pc, #280]	; (8001514 <main+0xb90>)
 80013fa:	6013      	str	r3, [r2, #0]
						pwm1 = (pwm1 - 500) * 2;
 80013fc:	4b45      	ldr	r3, [pc, #276]	; (8001514 <main+0xb90>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4945      	ldr	r1, [pc, #276]	; (8001518 <main+0xb94>)
 8001402:	4618      	mov	r0, r3
 8001404:	f7fe febe 	bl	8000184 <__aeabi_fsub>
 8001408:	4603      	mov	r3, r0
 800140a:	4619      	mov	r1, r3
 800140c:	4618      	mov	r0, r3
 800140e:	f7fe febb 	bl	8000188 <__addsf3>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	4b3f      	ldr	r3, [pc, #252]	; (8001514 <main+0xb90>)
 8001418:	601a      	str	r2, [r3, #0]

						if (pwm1 > -200 && pwm1 < 200) {
 800141a:	4b3e      	ldr	r3, [pc, #248]	; (8001514 <main+0xb90>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	493f      	ldr	r1, [pc, #252]	; (800151c <main+0xb98>)
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f825 	bl	8000470 <__aeabi_fcmpgt>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00d      	beq.n	8001448 <main+0xac4>
 800142c:	4b39      	ldr	r3, [pc, #228]	; (8001514 <main+0xb90>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	493b      	ldr	r1, [pc, #236]	; (8001520 <main+0xb9c>)
 8001432:	4618      	mov	r0, r3
 8001434:	f7fe fffe 	bl	8000434 <__aeabi_fcmplt>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d004      	beq.n	8001448 <main+0xac4>
							PWMval(6, 0);
 800143e:	2100      	movs	r1, #0
 8001440:	2006      	movs	r0, #6
 8001442:	f000 f9fb 	bl	800183c <PWMval>
 8001446:	e02e      	b.n	80014a6 <main+0xb22>
						}

						else if (pwm1 > pwmRight) {
 8001448:	4b32      	ldr	r3, [pc, #200]	; (8001514 <main+0xb90>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a22      	ldr	r2, [pc, #136]	; (80014d8 <main+0xb54>)
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	4611      	mov	r1, r2
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f80c 	bl	8000470 <__aeabi_fcmpgt>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00c      	beq.n	8001478 <main+0xaf4>
							pwmRight = pwmRight + step;
 800145e:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <main+0xb54>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a30      	ldr	r2, [pc, #192]	; (8001524 <main+0xba0>)
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f7fe fe8d 	bl	8000188 <__addsf3>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <main+0xb54>)
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	e016      	b.n	80014a6 <main+0xb22>
						}
						else if (pwm1 < pwmRight) {
 8001478:	4b26      	ldr	r3, [pc, #152]	; (8001514 <main+0xb90>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a16      	ldr	r2, [pc, #88]	; (80014d8 <main+0xb54>)
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	4611      	mov	r1, r2
 8001482:	4618      	mov	r0, r3
 8001484:	f7fe ffd6 	bl	8000434 <__aeabi_fcmplt>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00b      	beq.n	80014a6 <main+0xb22>
							pwmRight = pwmRight - step;
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <main+0xb54>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a24      	ldr	r2, [pc, #144]	; (8001524 <main+0xba0>)
 8001494:	6812      	ldr	r2, [r2, #0]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7fe fe73 	bl	8000184 <__aeabi_fsub>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <main+0xb54>)
 80014a4:	601a      	str	r2, [r3, #0]
						}
						if (pwmRight > 0) {
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <main+0xb54>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f04f 0100 	mov.w	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7fe ffde 	bl	8000470 <__aeabi_fcmpgt>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d036      	beq.n	8001528 <main+0xba4>
							RmotorF();
 80014ba:	f000 fba3 	bl	8001c04 <RmotorF>
							PWMval(6, (int) pwmRight);
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <main+0xb54>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe ffde 	bl	8000484 <__aeabi_f2iz>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	4619      	mov	r1, r3
 80014ce:	2006      	movs	r0, #6
 80014d0:	f000 f9b4 	bl	800183c <PWMval>
 80014d4:	e041      	b.n	800155a <main+0xbd6>
 80014d6:	bf00      	nop
 80014d8:	20000070 	.word	0x20000070
 80014dc:	41a00000 	.word	0x41a00000
 80014e0:	c1a00000 	.word	0xc1a00000
 80014e4:	20000098 	.word	0x20000098
 80014e8:	0800618c 	.word	0x0800618c
 80014ec:	08006190 	.word	0x08006190
 80014f0:	20000059 	.word	0x20000059
 80014f4:	20000066 	.word	0x20000066
 80014f8:	20000057 	.word	0x20000057
 80014fc:	40020800 	.word	0x40020800
 8001500:	20000058 	.word	0x20000058
 8001504:	20000000 	.word	0x20000000
 8001508:	200001f0 	.word	0x200001f0
 800150c:	20000044 	.word	0x20000044
 8001510:	2000003c 	.word	0x2000003c
 8001514:	20000068 	.word	0x20000068
 8001518:	43fa0000 	.word	0x43fa0000
 800151c:	c3480000 	.word	0xc3480000
 8001520:	43480000 	.word	0x43480000
 8001524:	20000004 	.word	0x20000004
						}
						else if (pwmRight < 0) {
 8001528:	4b7f      	ldr	r3, [pc, #508]	; (8001728 <main+0xda4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f04f 0100 	mov.w	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe ff7f 	bl	8000434 <__aeabi_fcmplt>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00e      	beq.n	800155a <main+0xbd6>
							RmotorB();
 800153c:	f000 fb76 	bl	8001c2c <RmotorB>
							PWMval(6, ((int) pwmRight) * -1);
 8001540:	4b79      	ldr	r3, [pc, #484]	; (8001728 <main+0xda4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe ff9d 	bl	8000484 <__aeabi_f2iz>
 800154a:	4603      	mov	r3, r0
 800154c:	b29b      	uxth	r3, r3
 800154e:	425b      	negs	r3, r3
 8001550:	b29b      	uxth	r3, r3
 8001552:	4619      	mov	r1, r3
 8001554:	2006      	movs	r0, #6
 8001556:	f000 f971 	bl	800183c <PWMval>
						}

						pwm2 = map(jetsondata[1], 32, 127, 0, 1000);
 800155a:	4b74      	ldr	r3, [pc, #464]	; (800172c <main+0xda8>)
 800155c:	785b      	ldrb	r3, [r3, #1]
 800155e:	b298      	uxth	r0, r3
 8001560:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2300      	movs	r3, #0
 8001568:	227f      	movs	r2, #127	; 0x7f
 800156a:	2120      	movs	r1, #32
 800156c:	f000 f940 	bl	80017f0 <map>
 8001570:	4603      	mov	r3, r0
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe feb8 	bl	80002e8 <__aeabi_ui2f>
 8001578:	4603      	mov	r3, r0
 800157a:	4a6d      	ldr	r2, [pc, #436]	; (8001730 <main+0xdac>)
 800157c:	6013      	str	r3, [r2, #0]
						pwm2 = (pwm2 - 500) * 2;
 800157e:	4b6c      	ldr	r3, [pc, #432]	; (8001730 <main+0xdac>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	496c      	ldr	r1, [pc, #432]	; (8001734 <main+0xdb0>)
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe fdfd 	bl	8000184 <__aeabi_fsub>
 800158a:	4603      	mov	r3, r0
 800158c:	4619      	mov	r1, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe fdfa 	bl	8000188 <__addsf3>
 8001594:	4603      	mov	r3, r0
 8001596:	461a      	mov	r2, r3
 8001598:	4b65      	ldr	r3, [pc, #404]	; (8001730 <main+0xdac>)
 800159a:	601a      	str	r2, [r3, #0]
						if (pwm1 > -200 && pwm1 < 200) {
 800159c:	4b66      	ldr	r3, [pc, #408]	; (8001738 <main+0xdb4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4966      	ldr	r1, [pc, #408]	; (800173c <main+0xdb8>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ff64 	bl	8000470 <__aeabi_fcmpgt>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00d      	beq.n	80015ca <main+0xc46>
 80015ae:	4b62      	ldr	r3, [pc, #392]	; (8001738 <main+0xdb4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4963      	ldr	r1, [pc, #396]	; (8001740 <main+0xdbc>)
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ff3d 	bl	8000434 <__aeabi_fcmplt>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d004      	beq.n	80015ca <main+0xc46>
							PWMval(7, 0);
 80015c0:	2100      	movs	r1, #0
 80015c2:	2007      	movs	r0, #7
 80015c4:	f000 f93a 	bl	800183c <PWMval>
 80015c8:	e02e      	b.n	8001628 <main+0xca4>
						}
						else if (pwm2 > pwmLeft) {
 80015ca:	4b59      	ldr	r3, [pc, #356]	; (8001730 <main+0xdac>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a5d      	ldr	r2, [pc, #372]	; (8001744 <main+0xdc0>)
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ff4b 	bl	8000470 <__aeabi_fcmpgt>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00c      	beq.n	80015fa <main+0xc76>
							pwmLeft = pwmLeft + step;
 80015e0:	4b58      	ldr	r3, [pc, #352]	; (8001744 <main+0xdc0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a58      	ldr	r2, [pc, #352]	; (8001748 <main+0xdc4>)
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	4611      	mov	r1, r2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe fdcc 	bl	8000188 <__addsf3>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b53      	ldr	r3, [pc, #332]	; (8001744 <main+0xdc0>)
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	e016      	b.n	8001628 <main+0xca4>
						}
						else if (pwm2 < pwmLeft) {
 80015fa:	4b4d      	ldr	r3, [pc, #308]	; (8001730 <main+0xdac>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a51      	ldr	r2, [pc, #324]	; (8001744 <main+0xdc0>)
 8001600:	6812      	ldr	r2, [r2, #0]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff15 	bl	8000434 <__aeabi_fcmplt>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00b      	beq.n	8001628 <main+0xca4>
							pwmLeft = pwmLeft - step;
 8001610:	4b4c      	ldr	r3, [pc, #304]	; (8001744 <main+0xdc0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a4c      	ldr	r2, [pc, #304]	; (8001748 <main+0xdc4>)
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe fdb2 	bl	8000184 <__aeabi_fsub>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	4b47      	ldr	r3, [pc, #284]	; (8001744 <main+0xdc0>)
 8001626:	601a      	str	r2, [r3, #0]
						}
						if (pwmLeft > 0) {
 8001628:	4b46      	ldr	r3, [pc, #280]	; (8001744 <main+0xdc0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f04f 0100 	mov.w	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ff1d 	bl	8000470 <__aeabi_fcmpgt>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00d      	beq.n	8001658 <main+0xcd4>
							LmotorF();
 800163c:	f000 fabe 	bl	8001bbc <LmotorF>
							PWMval(7, (int) pwmLeft);
 8001640:	4b40      	ldr	r3, [pc, #256]	; (8001744 <main+0xdc0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff1d 	bl	8000484 <__aeabi_f2iz>
 800164a:	4603      	mov	r3, r0
 800164c:	b29b      	uxth	r3, r3
 800164e:	4619      	mov	r1, r3
 8001650:	2007      	movs	r0, #7
 8001652:	f000 f8f3 	bl	800183c <PWMval>
 8001656:	e018      	b.n	800168a <main+0xd06>
						}
						else if (pwmLeft < 0) {
 8001658:	4b3a      	ldr	r3, [pc, #232]	; (8001744 <main+0xdc0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f04f 0100 	mov.w	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fee7 	bl	8000434 <__aeabi_fcmplt>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00e      	beq.n	800168a <main+0xd06>
							LmotorB();
 800166c:	f000 fab8 	bl	8001be0 <LmotorB>
							PWMval(7, ((int) pwmLeft) * -1);
 8001670:	4b34      	ldr	r3, [pc, #208]	; (8001744 <main+0xdc0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff05 	bl	8000484 <__aeabi_f2iz>
 800167a:	4603      	mov	r3, r0
 800167c:	b29b      	uxth	r3, r3
 800167e:	425b      	negs	r3, r3
 8001680:	b29b      	uxth	r3, r3
 8001682:	4619      	mov	r1, r3
 8001684:	2007      	movs	r0, #7
 8001686:	f000 f8d9 	bl	800183c <PWMval>
						}

						if (HAL_GetTick() - timeauto > 1000) {
 800168a:	f001 fedd 	bl	8003448 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	4b2e      	ldr	r3, [pc, #184]	; (800174c <main+0xdc8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800169a:	f67f a9e8 	bls.w	8000a6e <main+0xea>
							HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port,
 800169e:	2108      	movs	r1, #8
 80016a0:	482b      	ldr	r0, [pc, #172]	; (8001750 <main+0xdcc>)
 80016a2:	f002 f989 	bl	80039b8 <HAL_GPIO_TogglePin>
									LED_YELLOW_Pin);
							timeauto = HAL_GetTick();
 80016a6:	f001 fecf 	bl	8003448 <HAL_GetTick>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4a27      	ldr	r2, [pc, #156]	; (800174c <main+0xdc8>)
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	f7ff b9dd 	b.w	8000a6e <main+0xea>

						}

					}
					else {
						stoppodst();
 80016b4:	f000 f934 	bl	8001920 <stoppodst>
						stopczlon5();
 80016b8:	f000 fa68 	bl	8001b8c <stopczlon5>
						stopczlon1();
 80016bc:	f000 f96c 	bl	8001998 <stopczlon1>
						stopczlon2();
 80016c0:	f000 f9aa 	bl	8001a18 <stopczlon2>
						stopczlon3();
 80016c4:	f000 f9e4 	bl	8001a90 <stopczlon3>
						stopczlon4();
 80016c8:	f000 fa20 	bl	8001b0c <stopczlon4>
						stopjazdaR();
 80016cc:	f000 fac2 	bl	8001c54 <stopjazdaR>
						stopjazdaL();
 80016d0:	f000 fb28 	bl	8001d24 <stopjazdaL>
 80016d4:	f7ff b9cb 	b.w	8000a6e <main+0xea>
				}

			}
			else {
				// triggergripper();
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin,
 80016d8:	2200      	movs	r2, #0
 80016da:	2108      	movs	r1, #8
 80016dc:	481c      	ldr	r0, [pc, #112]	; (8001750 <main+0xdcc>)
 80016de:	f002 f953 	bl	8003988 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin,
 80016e2:	2200      	movs	r2, #0
 80016e4:	2101      	movs	r1, #1
 80016e6:	481a      	ldr	r0, [pc, #104]	; (8001750 <main+0xdcc>)
 80016e8:	f002 f94e 	bl	8003988 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,
 80016ec:	2201      	movs	r2, #1
 80016ee:	2102      	movs	r1, #2
 80016f0:	4817      	ldr	r0, [pc, #92]	; (8001750 <main+0xdcc>)
 80016f2:	f002 f949 	bl	8003988 <HAL_GPIO_WritePin>
						GPIO_PIN_SET);

				rightside();
 80016f6:	f000 fb7d 	bl	8001df4 <rightside>
				leftside();
 80016fa:	f000 fc09 	bl	8001f10 <leftside>
				motor5control();
 80016fe:	f000 fdc5 	bl	800228c <motor5control>
				motor4control();
 8001702:	f000 fda1 	bl	8002248 <motor4control>
				motor3control();
 8001706:	f000 fd7d 	bl	8002204 <motor3control>
				motor2control();
 800170a:	f000 fd59 	bl	80021c0 <motor2control>
				motor1control();
 800170e:	f000 fd35 	bl	800217c <motor1control>
				motor0control();
 8001712:	f000 fd11 	bl	8002138 <motor0control>
				servox();
 8001716:	f000 fc89 	bl	800202c <servox>
				servoy();
 800171a:	f000 fcd5 	bl	80020c8 <servoy>
 800171e:	f7ff b9a6 	b.w	8000a6e <main+0xea>
						if (jetsondata4[3] == ((jetsondata4[2]+jetsondata4[1] + jetsondata4[0] + start2[0]) & 0xFF))
 8001722:	bf00      	nop
		if (nRF24_RXAvailible()) {
 8001724:	f7ff b9a3 	b.w	8000a6e <main+0xea>
 8001728:	20000070 	.word	0x20000070
 800172c:	2000003c 	.word	0x2000003c
 8001730:	2000006c 	.word	0x2000006c
 8001734:	43fa0000 	.word	0x43fa0000
 8001738:	20000068 	.word	0x20000068
 800173c:	c3480000 	.word	0xc3480000
 8001740:	43480000 	.word	0x43480000
 8001744:	20000074 	.word	0x20000074
 8001748:	20000004 	.word	0x20000004
 800174c:	20000088 	.word	0x20000088
 8001750:	40020800 	.word	0x40020800

08001754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b092      	sub	sp, #72	; 0x48
 8001758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	2234      	movs	r2, #52	; 0x34
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f004 fcfe 	bl	8006164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001768:	463b      	mov	r3, r7
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
 8001774:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001776:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <SystemClock_Config+0x98>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800177e:	4a1b      	ldr	r2, [pc, #108]	; (80017ec <SystemClock_Config+0x98>)
 8001780:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001784:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001786:	2302      	movs	r3, #2
 8001788:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800178a:	2301      	movs	r3, #1
 800178c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800178e:	2310      	movs	r3, #16
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001792:	2302      	movs	r3, #2
 8001794:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001796:	2300      	movs	r3, #0
 8001798:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800179a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800179e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80017a0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80017a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4618      	mov	r0, r3
 80017ac:	f002 f91e 	bl	80039ec <HAL_RCC_OscConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80017b6:	f000 fd8b 	bl	80022d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ba:	230f      	movs	r3, #15
 80017bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017be:	2303      	movs	r3, #3
 80017c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017ce:	463b      	mov	r3, r7
 80017d0:	2101      	movs	r1, #1
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 fc3a 	bl	800404c <HAL_RCC_ClockConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80017de:	f000 fd77 	bl	80022d0 <Error_Handler>
  }
}
 80017e2:	bf00      	nop
 80017e4:	3748      	adds	r7, #72	; 0x48
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40007000 	.word	0x40007000

080017f0 <map>:

/* USER CODE BEGIN 4 */

uint16_t map(uint16_t input_value, uint16_t minRange, uint16_t maxRange,
		uint16_t New_minRange, uint16_t New_maxRange) {
 80017f0:	b490      	push	{r4, r7}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4604      	mov	r4, r0
 80017f8:	4608      	mov	r0, r1
 80017fa:	4611      	mov	r1, r2
 80017fc:	461a      	mov	r2, r3
 80017fe:	4623      	mov	r3, r4
 8001800:	80fb      	strh	r3, [r7, #6]
 8001802:	4603      	mov	r3, r0
 8001804:	80bb      	strh	r3, [r7, #4]
 8001806:	460b      	mov	r3, r1
 8001808:	807b      	strh	r3, [r7, #2]
 800180a:	4613      	mov	r3, r2
 800180c:	803b      	strh	r3, [r7, #0]
	return (((input_value - minRange) * (New_maxRange - New_minRange))
 800180e:	88fa      	ldrh	r2, [r7, #6]
 8001810:	88bb      	ldrh	r3, [r7, #4]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	8a39      	ldrh	r1, [r7, #16]
 8001816:	883a      	ldrh	r2, [r7, #0]
 8001818:	1a8a      	subs	r2, r1, r2
 800181a:	fb03 f202 	mul.w	r2, r3, r2
			/ (maxRange - minRange) + New_minRange);
 800181e:	8879      	ldrh	r1, [r7, #2]
 8001820:	88bb      	ldrh	r3, [r7, #4]
 8001822:	1acb      	subs	r3, r1, r3
 8001824:	fb92 f3f3 	sdiv	r3, r2, r3
 8001828:	b29a      	uxth	r2, r3
 800182a:	883b      	ldrh	r3, [r7, #0]
 800182c:	4413      	add	r3, r2
 800182e:	b29b      	uxth	r3, r3
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bc90      	pop	{r4, r7}
 8001838:	4770      	bx	lr
	...

0800183c <PWMval>:
void PWMval(uint8_t ch, uint16_t val) {
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	460a      	mov	r2, r1
 8001846:	71fb      	strb	r3, [r7, #7]
 8001848:	4613      	mov	r3, r2
 800184a:	80bb      	strh	r3, [r7, #4]
	switch (ch) {
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	2b07      	cmp	r3, #7
 8001850:	d83a      	bhi.n	80018c8 <PWMval+0x8c>
 8001852:	a201      	add	r2, pc, #4	; (adr r2, 8001858 <PWMval+0x1c>)
 8001854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001858:	08001879 	.word	0x08001879
 800185c:	08001883 	.word	0x08001883
 8001860:	0800188d 	.word	0x0800188d
 8001864:	08001897 	.word	0x08001897
 8001868:	080018a1 	.word	0x080018a1
 800186c:	080018ab 	.word	0x080018ab
 8001870:	080018b5 	.word	0x080018b5
 8001874:	080018bf 	.word	0x080018bf
	case 0:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, val);
 8001878:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <PWMval+0x98>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	88ba      	ldrh	r2, [r7, #4]
 800187e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001880:	e022      	b.n	80018c8 <PWMval+0x8c>
	case 1:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, val);
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <PWMval+0x98>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	88ba      	ldrh	r2, [r7, #4]
 8001888:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800188a:	e01d      	b.n	80018c8 <PWMval+0x8c>
	case 2:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, val);
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <PWMval+0x98>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	88ba      	ldrh	r2, [r7, #4]
 8001892:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8001894:	e018      	b.n	80018c8 <PWMval+0x8c>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, val);
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <PWMval+0x98>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	88ba      	ldrh	r2, [r7, #4]
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800189e:	e013      	b.n	80018c8 <PWMval+0x8c>
	case 4:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, val);
 80018a0:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <PWMval+0x9c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	88ba      	ldrh	r2, [r7, #4]
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80018a8:	e00e      	b.n	80018c8 <PWMval+0x8c>
	case 5:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, val);
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <PWMval+0x9c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	88ba      	ldrh	r2, [r7, #4]
 80018b0:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80018b2:	e009      	b.n	80018c8 <PWMval+0x8c>
	case 6:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, val);
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <PWMval+0x9c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	88ba      	ldrh	r2, [r7, #4]
 80018ba:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80018bc:	e004      	b.n	80018c8 <PWMval+0x8c>
	case 7:
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, val);
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <PWMval+0xa0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	88ba      	ldrh	r2, [r7, #4]
 80018c4:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80018c6:	bf00      	nop
	}
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000170 	.word	0x20000170
 80018d8:	20000130 	.word	0x20000130
 80018dc:	200001b0 	.word	0x200001b0

080018e0 <podstR>:
void podstR() {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Podstawa_D1_GPIO_Port, Podstawa_D1_Pin, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2120      	movs	r1, #32
 80018e8:	4804      	ldr	r0, [pc, #16]	; (80018fc <podstR+0x1c>)
 80018ea:	f002 f84d 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Podstawa_D2_GPIO_Port, Podstawa_D2_Pin, GPIO_PIN_SET);
 80018ee:	2201      	movs	r2, #1
 80018f0:	2110      	movs	r1, #16
 80018f2:	4802      	ldr	r0, [pc, #8]	; (80018fc <podstR+0x1c>)
 80018f4:	f002 f848 	bl	8003988 <HAL_GPIO_WritePin>

}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40020400 	.word	0x40020400

08001900 <podstL>:
void podstL() {
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Podstawa_D2_GPIO_Port, Podstawa_D2_Pin, GPIO_PIN_RESET);
 8001904:	2200      	movs	r2, #0
 8001906:	2110      	movs	r1, #16
 8001908:	4804      	ldr	r0, [pc, #16]	; (800191c <podstL+0x1c>)
 800190a:	f002 f83d 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Podstawa_D1_GPIO_Port, Podstawa_D1_Pin, GPIO_PIN_SET);
 800190e:	2201      	movs	r2, #1
 8001910:	2120      	movs	r1, #32
 8001912:	4802      	ldr	r0, [pc, #8]	; (800191c <podstL+0x1c>)
 8001914:	f002 f838 	bl	8003988 <HAL_GPIO_WritePin>
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40020400 	.word	0x40020400

08001920 <stoppodst>:

void stoppodst() {
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Podstawa_D1_GPIO_Port, Podstawa_D1_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	2120      	movs	r1, #32
 8001928:	4806      	ldr	r0, [pc, #24]	; (8001944 <stoppodst+0x24>)
 800192a:	f002 f82d 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Podstawa_D2_GPIO_Port, Podstawa_D2_Pin, GPIO_PIN_RESET);
 800192e:	2200      	movs	r2, #0
 8001930:	2110      	movs	r1, #16
 8001932:	4804      	ldr	r0, [pc, #16]	; (8001944 <stoppodst+0x24>)
 8001934:	f002 f828 	bl	8003988 <HAL_GPIO_WritePin>
	PWMval(0, 0);
 8001938:	2100      	movs	r1, #0
 800193a:	2000      	movs	r0, #0
 800193c:	f7ff ff7e 	bl	800183c <PWMval>
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40020400 	.word	0x40020400

08001948 <czlon1R>:

void czlon1R() {
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon1_D1_GPIO_Port, Czlon1_D1_Pin, GPIO_PIN_RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <czlon1R+0x20>)
 8001954:	f002 f818 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon1_D2_GPIO_Port, Czlon1_D2_Pin, GPIO_PIN_SET);
 8001958:	2201      	movs	r2, #1
 800195a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800195e:	4803      	ldr	r0, [pc, #12]	; (800196c <czlon1R+0x24>)
 8001960:	f002 f812 	bl	8003988 <HAL_GPIO_WritePin>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40020400 	.word	0x40020400
 800196c:	40020000 	.word	0x40020000

08001970 <czlon1L>:
void czlon1L() {
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon1_D1_GPIO_Port, Czlon1_D1_Pin, GPIO_PIN_SET);
 8001974:	2201      	movs	r2, #1
 8001976:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <czlon1L+0x20>)
 800197c:	f002 f804 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon1_D2_GPIO_Port, Czlon1_D2_Pin, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001986:	4803      	ldr	r0, [pc, #12]	; (8001994 <czlon1L+0x24>)
 8001988:	f001 fffe 	bl	8003988 <HAL_GPIO_WritePin>
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40020400 	.word	0x40020400
 8001994:	40020000 	.word	0x40020000

08001998 <stopczlon1>:
void stopczlon1() {
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon1_D1_GPIO_Port, Czlon1_D1_Pin, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019a2:	4807      	ldr	r0, [pc, #28]	; (80019c0 <stopczlon1+0x28>)
 80019a4:	f001 fff0 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon1_D2_GPIO_Port, Czlon1_D2_Pin, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ae:	4805      	ldr	r0, [pc, #20]	; (80019c4 <stopczlon1+0x2c>)
 80019b0:	f001 ffea 	bl	8003988 <HAL_GPIO_WritePin>
	PWMval(1, 0);
 80019b4:	2100      	movs	r1, #0
 80019b6:	2001      	movs	r0, #1
 80019b8:	f7ff ff40 	bl	800183c <PWMval>
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40020400 	.word	0x40020400
 80019c4:	40020000 	.word	0x40020000

080019c8 <czlon2R>:

void czlon2R() {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon2_D1_GPIO_Port, Czlon2_D1_Pin, GPIO_PIN_RESET);
 80019cc:	2200      	movs	r2, #0
 80019ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <czlon2R+0x20>)
 80019d4:	f001 ffd8 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon2_D2_GPIO_Port, Czlon2_D2_Pin, GPIO_PIN_SET);
 80019d8:	2201      	movs	r2, #1
 80019da:	2180      	movs	r1, #128	; 0x80
 80019dc:	4803      	ldr	r0, [pc, #12]	; (80019ec <czlon2R+0x24>)
 80019de:	f001 ffd3 	bl	8003988 <HAL_GPIO_WritePin>
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40020000 	.word	0x40020000
 80019ec:	40020800 	.word	0x40020800

080019f0 <czlon2L>:
void czlon2L() {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon2_D1_GPIO_Port, Czlon2_D1_Pin, GPIO_PIN_SET);
 80019f4:	2201      	movs	r2, #1
 80019f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <czlon2L+0x20>)
 80019fc:	f001 ffc4 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon2_D2_GPIO_Port, Czlon2_D2_Pin, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2180      	movs	r1, #128	; 0x80
 8001a04:	4803      	ldr	r0, [pc, #12]	; (8001a14 <czlon2L+0x24>)
 8001a06:	f001 ffbf 	bl	8003988 <HAL_GPIO_WritePin>
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40020000 	.word	0x40020000
 8001a14:	40020800 	.word	0x40020800

08001a18 <stopczlon2>:
void stopczlon2() {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon2_D1_GPIO_Port, Czlon2_D1_Pin, GPIO_PIN_RESET);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a22:	4807      	ldr	r0, [pc, #28]	; (8001a40 <stopczlon2+0x28>)
 8001a24:	f001 ffb0 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon2_D2_GPIO_Port, Czlon2_D2_Pin, GPIO_PIN_RESET);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2180      	movs	r1, #128	; 0x80
 8001a2c:	4805      	ldr	r0, [pc, #20]	; (8001a44 <stopczlon2+0x2c>)
 8001a2e:	f001 ffab 	bl	8003988 <HAL_GPIO_WritePin>
	PWMval(2, 0);
 8001a32:	2100      	movs	r1, #0
 8001a34:	2002      	movs	r0, #2
 8001a36:	f7ff ff01 	bl	800183c <PWMval>
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40020800 	.word	0x40020800

08001a48 <czlon3R>:

void czlon3R() {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon3_D1_GPIO_Port, Czlon3_D1_Pin, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <czlon3R+0x20>)
 8001a54:	f001 ff98 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon3_D2_GPIO_Port, Czlon3_D2_Pin, GPIO_PIN_SET);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	2140      	movs	r1, #64	; 0x40
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <czlon3R+0x20>)
 8001a5e:	f001 ff93 	bl	8003988 <HAL_GPIO_WritePin>
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40020800 	.word	0x40020800

08001a6c <czlon3L>:
void czlon3L() {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon3_D1_GPIO_Port, Czlon3_D1_Pin, GPIO_PIN_SET);
 8001a70:	2201      	movs	r2, #1
 8001a72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <czlon3L+0x20>)
 8001a78:	f001 ff86 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon3_D2_GPIO_Port, Czlon3_D2_Pin, GPIO_PIN_RESET);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2140      	movs	r1, #64	; 0x40
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <czlon3L+0x20>)
 8001a82:	f001 ff81 	bl	8003988 <HAL_GPIO_WritePin>
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40020800 	.word	0x40020800

08001a90 <stopczlon3>:
void stopczlon3() {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon3_D1_GPIO_Port, Czlon3_D1_Pin, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a9a:	4807      	ldr	r0, [pc, #28]	; (8001ab8 <stopczlon3+0x28>)
 8001a9c:	f001 ff74 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon3_D2_GPIO_Port, Czlon3_D2_Pin, GPIO_PIN_RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2140      	movs	r1, #64	; 0x40
 8001aa4:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <stopczlon3+0x28>)
 8001aa6:	f001 ff6f 	bl	8003988 <HAL_GPIO_WritePin>
	PWMval(3, 0);
 8001aaa:	2100      	movs	r1, #0
 8001aac:	2003      	movs	r0, #3
 8001aae:	f7ff fec5 	bl	800183c <PWMval>
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40020800 	.word	0x40020800

08001abc <czlon4R>:

void czlon4R() {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon4_D1_GPIO_Port, Czlon4_D1_Pin, GPIO_PIN_RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2120      	movs	r1, #32
 8001ac4:	4805      	ldr	r0, [pc, #20]	; (8001adc <czlon4R+0x20>)
 8001ac6:	f001 ff5f 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon4_D2_GPIO_Port, Czlon4_D2_Pin, GPIO_PIN_SET);
 8001aca:	2201      	movs	r2, #1
 8001acc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad0:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <czlon4R+0x24>)
 8001ad2:	f001 ff59 	bl	8003988 <HAL_GPIO_WritePin>
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40020800 	.word	0x40020800
 8001ae0:	40020000 	.word	0x40020000

08001ae4 <czlon4L>:
void czlon4L() {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon4_D1_GPIO_Port, Czlon4_D1_Pin, GPIO_PIN_SET);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	2120      	movs	r1, #32
 8001aec:	4805      	ldr	r0, [pc, #20]	; (8001b04 <czlon4L+0x20>)
 8001aee:	f001 ff4b 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon4_D2_GPIO_Port, Czlon4_D2_Pin, GPIO_PIN_RESET);
 8001af2:	2200      	movs	r2, #0
 8001af4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af8:	4803      	ldr	r0, [pc, #12]	; (8001b08 <czlon4L+0x24>)
 8001afa:	f001 ff45 	bl	8003988 <HAL_GPIO_WritePin>
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40020800 	.word	0x40020800
 8001b08:	40020000 	.word	0x40020000

08001b0c <stopczlon4>:
void stopczlon4() {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon4_D1_GPIO_Port, Czlon4_D1_Pin, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2120      	movs	r1, #32
 8001b14:	4807      	ldr	r0, [pc, #28]	; (8001b34 <stopczlon4+0x28>)
 8001b16:	f001 ff37 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon4_D2_GPIO_Port, Czlon4_D2_Pin, GPIO_PIN_RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b20:	4805      	ldr	r0, [pc, #20]	; (8001b38 <stopczlon4+0x2c>)
 8001b22:	f001 ff31 	bl	8003988 <HAL_GPIO_WritePin>
	PWMval(4, 0);
 8001b26:	2100      	movs	r1, #0
 8001b28:	2004      	movs	r0, #4
 8001b2a:	f7ff fe87 	bl	800183c <PWMval>
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40020800 	.word	0x40020800
 8001b38:	40020000 	.word	0x40020000

08001b3c <czlon5R>:

void czlon5R() {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon5_D1_GPIO_Port, Czlon5_D1_Pin, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b46:	4805      	ldr	r0, [pc, #20]	; (8001b5c <czlon5R+0x20>)
 8001b48:	f001 ff1e 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon5_D2_GPIO_Port, Czlon5_D2_Pin, GPIO_PIN_SET);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b52:	4803      	ldr	r0, [pc, #12]	; (8001b60 <czlon5R+0x24>)
 8001b54:	f001 ff18 	bl	8003988 <HAL_GPIO_WritePin>
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40020000 	.word	0x40020000
 8001b60:	40020400 	.word	0x40020400

08001b64 <czlon5L>:
void czlon5L() {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon5_D1_GPIO_Port, Czlon5_D1_Pin, GPIO_PIN_SET);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b6e:	4805      	ldr	r0, [pc, #20]	; (8001b84 <czlon5L+0x20>)
 8001b70:	f001 ff0a 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon5_D2_GPIO_Port, Czlon5_D2_Pin, GPIO_PIN_RESET);
 8001b74:	2200      	movs	r2, #0
 8001b76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b7a:	4803      	ldr	r0, [pc, #12]	; (8001b88 <czlon5L+0x24>)
 8001b7c:	f001 ff04 	bl	8003988 <HAL_GPIO_WritePin>
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40020000 	.word	0x40020000
 8001b88:	40020400 	.word	0x40020400

08001b8c <stopczlon5>:
void stopczlon5() {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon5_D1_GPIO_Port, Czlon5_D1_Pin, GPIO_PIN_RESET);
 8001b90:	2200      	movs	r2, #0
 8001b92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b96:	4807      	ldr	r0, [pc, #28]	; (8001bb4 <stopczlon5+0x28>)
 8001b98:	f001 fef6 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon5_D2_GPIO_Port, Czlon5_D2_Pin, GPIO_PIN_RESET);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <stopczlon5+0x2c>)
 8001ba4:	f001 fef0 	bl	8003988 <HAL_GPIO_WritePin>
	PWMval(5, 0);
 8001ba8:	2100      	movs	r1, #0
 8001baa:	2005      	movs	r0, #5
 8001bac:	f7ff fe46 	bl	800183c <PWMval>
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	40020400 	.word	0x40020400

08001bbc <LmotorF>:

void LmotorF() {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L_D1_GPIO_Port, L_D1_Pin, GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2104      	movs	r1, #4
 8001bc4:	4805      	ldr	r0, [pc, #20]	; (8001bdc <LmotorF+0x20>)
 8001bc6:	f001 fedf 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_D2_GPIO_Port, L_D2_Pin, GPIO_PIN_SET);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bd0:	4802      	ldr	r0, [pc, #8]	; (8001bdc <LmotorF+0x20>)
 8001bd2:	f001 fed9 	bl	8003988 <HAL_GPIO_WritePin>
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40020800 	.word	0x40020800

08001be0 <LmotorB>:
void LmotorB() {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L_D2_GPIO_Port, L_D2_Pin, GPIO_PIN_RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <LmotorB+0x20>)
 8001bec:	f001 fecc 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_D1_GPIO_Port, L_D1_Pin, GPIO_PIN_SET);
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	2104      	movs	r1, #4
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <LmotorB+0x20>)
 8001bf6:	f001 fec7 	bl	8003988 <HAL_GPIO_WritePin>
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40020800 	.word	0x40020800

08001c04 <RmotorF>:

void RmotorF() {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R_D1_GPIO_Port, R_D1_Pin, GPIO_PIN_RESET);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2104      	movs	r1, #4
 8001c0c:	4805      	ldr	r0, [pc, #20]	; (8001c24 <RmotorF+0x20>)
 8001c0e:	f001 febb 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_D2_GPIO_Port, R_D2_Pin, GPIO_PIN_SET);
 8001c12:	2201      	movs	r2, #1
 8001c14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c18:	4803      	ldr	r0, [pc, #12]	; (8001c28 <RmotorF+0x24>)
 8001c1a:	f001 feb5 	bl	8003988 <HAL_GPIO_WritePin>
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40020c00 	.word	0x40020c00
 8001c28:	40020800 	.word	0x40020800

08001c2c <RmotorB>:
void RmotorB() {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R_D2_GPIO_Port, R_D2_Pin, GPIO_PIN_RESET);
 8001c30:	2200      	movs	r2, #0
 8001c32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <RmotorB+0x20>)
 8001c38:	f001 fea6 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_D1_GPIO_Port, R_D1_Pin, GPIO_PIN_SET);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	2104      	movs	r1, #4
 8001c40:	4803      	ldr	r0, [pc, #12]	; (8001c50 <RmotorB+0x24>)
 8001c42:	f001 fea1 	bl	8003988 <HAL_GPIO_WritePin>
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	40020c00 	.word	0x40020c00

08001c54 <stopjazdaR>:

void stopjazdaR() {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
	if (0 > pwmRight) {
 8001c58:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <stopjazdaR+0xc8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f04f 0100 	mov.w	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fbe7 	bl	8000434 <__aeabi_fcmplt>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00c      	beq.n	8001c86 <stopjazdaR+0x32>
		pwmRight = pwmRight + step;
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <stopjazdaR+0xc8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a2b      	ldr	r2, [pc, #172]	; (8001d20 <stopjazdaR+0xcc>)
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	4611      	mov	r1, r2
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe fa86 	bl	8000188 <__addsf3>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <stopjazdaR+0xc8>)
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	e015      	b.n	8001cb2 <stopjazdaR+0x5e>
	} else if (0 < pwmRight) {
 8001c86:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <stopjazdaR+0xc8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f04f 0100 	mov.w	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fbee 	bl	8000470 <__aeabi_fcmpgt>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00b      	beq.n	8001cb2 <stopjazdaR+0x5e>
		pwmRight = pwmRight - step;
 8001c9a:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <stopjazdaR+0xc8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a20      	ldr	r2, [pc, #128]	; (8001d20 <stopjazdaR+0xcc>)
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fa6d 	bl	8000184 <__aeabi_fsub>
 8001caa:	4603      	mov	r3, r0
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <stopjazdaR+0xc8>)
 8001cb0:	601a      	str	r2, [r3, #0]
	}
	if (pwmRight >= 0) {
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <stopjazdaR+0xc8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f04f 0100 	mov.w	r1, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fbce 	bl	800045c <__aeabi_fcmpge>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00d      	beq.n	8001ce2 <stopjazdaR+0x8e>
		RmotorF();
 8001cc6:	f7ff ff9d 	bl	8001c04 <RmotorF>
		PWMval(6, (int) pwmRight);
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <stopjazdaR+0xc8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fbd8 	bl	8000484 <__aeabi_f2iz>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	4619      	mov	r1, r3
 8001cda:	2006      	movs	r0, #6
 8001cdc:	f7ff fdae 	bl	800183c <PWMval>
	} else if (pwmRight < 0) {
		RmotorB();
		PWMval(6, ((int) pwmRight) * -1);
	}

}
 8001ce0:	e019      	b.n	8001d16 <stopjazdaR+0xc2>
	} else if (pwmRight < 0) {
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <stopjazdaR+0xc8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f04f 0100 	mov.w	r1, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fba2 	bl	8000434 <__aeabi_fcmplt>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d100      	bne.n	8001cf8 <stopjazdaR+0xa4>
}
 8001cf6:	e00e      	b.n	8001d16 <stopjazdaR+0xc2>
		RmotorB();
 8001cf8:	f7ff ff98 	bl	8001c2c <RmotorB>
		PWMval(6, ((int) pwmRight) * -1);
 8001cfc:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <stopjazdaR+0xc8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fbbf 	bl	8000484 <__aeabi_f2iz>
 8001d06:	4603      	mov	r3, r0
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	425b      	negs	r3, r3
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	4619      	mov	r1, r3
 8001d10:	2006      	movs	r0, #6
 8001d12:	f7ff fd93 	bl	800183c <PWMval>
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000070 	.word	0x20000070
 8001d20:	20000004 	.word	0x20000004

08001d24 <stopjazdaL>:
void stopjazdaL() {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
	if (0 > pwmLeft) {
 8001d28:	4b30      	ldr	r3, [pc, #192]	; (8001dec <stopjazdaL+0xc8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f04f 0100 	mov.w	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fb7f 	bl	8000434 <__aeabi_fcmplt>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00c      	beq.n	8001d56 <stopjazdaL+0x32>
		pwmLeft = pwmLeft + step;
 8001d3c:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <stopjazdaL+0xc8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a2b      	ldr	r2, [pc, #172]	; (8001df0 <stopjazdaL+0xcc>)
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fa1e 	bl	8000188 <__addsf3>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b26      	ldr	r3, [pc, #152]	; (8001dec <stopjazdaL+0xc8>)
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	e015      	b.n	8001d82 <stopjazdaL+0x5e>
	} else if (0 < pwmLeft) {
 8001d56:	4b25      	ldr	r3, [pc, #148]	; (8001dec <stopjazdaL+0xc8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f04f 0100 	mov.w	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fb86 	bl	8000470 <__aeabi_fcmpgt>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00b      	beq.n	8001d82 <stopjazdaL+0x5e>
		pwmLeft = pwmLeft - step;
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <stopjazdaL+0xc8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a20      	ldr	r2, [pc, #128]	; (8001df0 <stopjazdaL+0xcc>)
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fa05 	bl	8000184 <__aeabi_fsub>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <stopjazdaL+0xc8>)
 8001d80:	601a      	str	r2, [r3, #0]
	}
	if (pwmLeft >= 0) {
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <stopjazdaL+0xc8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f04f 0100 	mov.w	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fb66 	bl	800045c <__aeabi_fcmpge>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00d      	beq.n	8001db2 <stopjazdaL+0x8e>
		LmotorF();
 8001d96:	f7ff ff11 	bl	8001bbc <LmotorF>
		PWMval(7, (int) pwmLeft);
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <stopjazdaL+0xc8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fb70 	bl	8000484 <__aeabi_f2iz>
 8001da4:	4603      	mov	r3, r0
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	4619      	mov	r1, r3
 8001daa:	2007      	movs	r0, #7
 8001dac:	f7ff fd46 	bl	800183c <PWMval>
	} else if (pwmLeft < 0) {
		LmotorB();
		PWMval(7, ((int) pwmLeft) * -1);
	}

}
 8001db0:	e019      	b.n	8001de6 <stopjazdaL+0xc2>
	} else if (pwmLeft < 0) {
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <stopjazdaL+0xc8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f04f 0100 	mov.w	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fb3a 	bl	8000434 <__aeabi_fcmplt>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d100      	bne.n	8001dc8 <stopjazdaL+0xa4>
}
 8001dc6:	e00e      	b.n	8001de6 <stopjazdaL+0xc2>
		LmotorB();
 8001dc8:	f7ff ff0a 	bl	8001be0 <LmotorB>
		PWMval(7, ((int) pwmLeft) * -1);
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <stopjazdaL+0xc8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fb57 	bl	8000484 <__aeabi_f2iz>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	425b      	negs	r3, r3
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	4619      	mov	r1, r3
 8001de0:	2007      	movs	r0, #7
 8001de2:	f7ff fd2b 	bl	800183c <PWMval>
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000074 	.word	0x20000074
 8001df0:	20000004 	.word	0x20000004

08001df4 <rightside>:
void rightside() {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af02      	add	r7, sp, #8
	pwm1 = map(byte7, 32, 127, 0, 1000);
 8001dfa:	4b40      	ldr	r3, [pc, #256]	; (8001efc <rightside+0x108>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	b298      	uxth	r0, r3
 8001e00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2300      	movs	r3, #0
 8001e08:	227f      	movs	r2, #127	; 0x7f
 8001e0a:	2120      	movs	r1, #32
 8001e0c:	f7ff fcf0 	bl	80017f0 <map>
 8001e10:	4603      	mov	r3, r0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fa68 	bl	80002e8 <__aeabi_ui2f>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4a39      	ldr	r2, [pc, #228]	; (8001f00 <rightside+0x10c>)
 8001e1c:	6013      	str	r3, [r2, #0]
	if (button) {
 8001e1e:	4b39      	ldr	r3, [pc, #228]	; (8001f04 <rightside+0x110>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <rightside+0x3e>
		pwm1 = pwm1 * -1;
 8001e26:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <rightside+0x10c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e2e:	4a34      	ldr	r2, [pc, #208]	; (8001f00 <rightside+0x10c>)
 8001e30:	6013      	str	r3, [r2, #0]
	}

	if (pwm1 > pwmRight) {
 8001e32:	4b33      	ldr	r3, [pc, #204]	; (8001f00 <rightside+0x10c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a34      	ldr	r2, [pc, #208]	; (8001f08 <rightside+0x114>)
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb17 	bl	8000470 <__aeabi_fcmpgt>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00c      	beq.n	8001e62 <rightside+0x6e>
		pwmRight = pwmRight + step;
 8001e48:	4b2f      	ldr	r3, [pc, #188]	; (8001f08 <rightside+0x114>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a2f      	ldr	r2, [pc, #188]	; (8001f0c <rightside+0x118>)
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	4611      	mov	r1, r2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe f998 	bl	8000188 <__addsf3>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4b2a      	ldr	r3, [pc, #168]	; (8001f08 <rightside+0x114>)
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	e016      	b.n	8001e90 <rightside+0x9c>
	} else if (pwm1 < pwmRight) {
 8001e62:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <rightside+0x10c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a28      	ldr	r2, [pc, #160]	; (8001f08 <rightside+0x114>)
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fae1 	bl	8000434 <__aeabi_fcmplt>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00b      	beq.n	8001e90 <rightside+0x9c>
		pwmRight = pwmRight - step;
 8001e78:	4b23      	ldr	r3, [pc, #140]	; (8001f08 <rightside+0x114>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a23      	ldr	r2, [pc, #140]	; (8001f0c <rightside+0x118>)
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe f97e 	bl	8000184 <__aeabi_fsub>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <rightside+0x114>)
 8001e8e:	601a      	str	r2, [r3, #0]
	}
	if (pwmRight >= 0) {
 8001e90:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <rightside+0x114>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f04f 0100 	mov.w	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fadf 	bl	800045c <__aeabi_fcmpge>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00d      	beq.n	8001ec0 <rightside+0xcc>
		RmotorF();
 8001ea4:	f7ff feae 	bl	8001c04 <RmotorF>
		PWMval(6, (int) pwmRight);
 8001ea8:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <rightside+0x114>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fae9 	bl	8000484 <__aeabi_f2iz>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	2006      	movs	r0, #6
 8001eba:	f7ff fcbf 	bl	800183c <PWMval>
	} else if (pwmRight < 0) {
		RmotorB();
		PWMval(6, ((int) pwmRight) * -1);
	}

}
 8001ebe:	e019      	b.n	8001ef4 <rightside+0x100>
	} else if (pwmRight < 0) {
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <rightside+0x114>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f04f 0100 	mov.w	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fab3 	bl	8000434 <__aeabi_fcmplt>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d100      	bne.n	8001ed6 <rightside+0xe2>
}
 8001ed4:	e00e      	b.n	8001ef4 <rightside+0x100>
		RmotorB();
 8001ed6:	f7ff fea9 	bl	8001c2c <RmotorB>
		PWMval(6, ((int) pwmRight) * -1);
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <rightside+0x114>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fad0 	bl	8000484 <__aeabi_f2iz>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	425b      	negs	r3, r3
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	4619      	mov	r1, r3
 8001eee:	2006      	movs	r0, #6
 8001ef0:	f7ff fca4 	bl	800183c <PWMval>
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000064 	.word	0x20000064
 8001f00:	20000068 	.word	0x20000068
 8001f04:	20000049 	.word	0x20000049
 8001f08:	20000070 	.word	0x20000070
 8001f0c:	20000004 	.word	0x20000004

08001f10 <leftside>:
void leftside() {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af02      	add	r7, sp, #8

	pwm2 = map(byte8, 32, 127, 0, 1000);
 8001f16:	4b40      	ldr	r3, [pc, #256]	; (8002018 <leftside+0x108>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b298      	uxth	r0, r3
 8001f1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	2300      	movs	r3, #0
 8001f24:	227f      	movs	r2, #127	; 0x7f
 8001f26:	2120      	movs	r1, #32
 8001f28:	f7ff fc62 	bl	80017f0 <map>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe f9da 	bl	80002e8 <__aeabi_ui2f>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4a39      	ldr	r2, [pc, #228]	; (800201c <leftside+0x10c>)
 8001f38:	6013      	str	r3, [r2, #0]

	if (button01) {
 8001f3a:	4b39      	ldr	r3, [pc, #228]	; (8002020 <leftside+0x110>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d005      	beq.n	8001f4e <leftside+0x3e>
		pwm2 = pwm2 * -1;
 8001f42:	4b36      	ldr	r3, [pc, #216]	; (800201c <leftside+0x10c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f4a:	4a34      	ldr	r2, [pc, #208]	; (800201c <leftside+0x10c>)
 8001f4c:	6013      	str	r3, [r2, #0]
	}

	if (pwm2 > pwmLeft) {
 8001f4e:	4b33      	ldr	r3, [pc, #204]	; (800201c <leftside+0x10c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a34      	ldr	r2, [pc, #208]	; (8002024 <leftside+0x114>)
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe fa89 	bl	8000470 <__aeabi_fcmpgt>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00c      	beq.n	8001f7e <leftside+0x6e>
		pwmLeft = pwmLeft + step;
 8001f64:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <leftside+0x114>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a2f      	ldr	r2, [pc, #188]	; (8002028 <leftside+0x118>)
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe f90a 	bl	8000188 <__addsf3>
 8001f74:	4603      	mov	r3, r0
 8001f76:	461a      	mov	r2, r3
 8001f78:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <leftside+0x114>)
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	e016      	b.n	8001fac <leftside+0x9c>
	} else if (pwm2 < pwmLeft) {
 8001f7e:	4b27      	ldr	r3, [pc, #156]	; (800201c <leftside+0x10c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a28      	ldr	r2, [pc, #160]	; (8002024 <leftside+0x114>)
 8001f84:	6812      	ldr	r2, [r2, #0]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fa53 	bl	8000434 <__aeabi_fcmplt>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00b      	beq.n	8001fac <leftside+0x9c>
		pwmLeft = pwmLeft - step;
 8001f94:	4b23      	ldr	r3, [pc, #140]	; (8002024 <leftside+0x114>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a23      	ldr	r2, [pc, #140]	; (8002028 <leftside+0x118>)
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe f8f0 	bl	8000184 <__aeabi_fsub>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <leftside+0x114>)
 8001faa:	601a      	str	r2, [r3, #0]
	}
	if (pwmLeft >= 0) {
 8001fac:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <leftside+0x114>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f04f 0100 	mov.w	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fa51 	bl	800045c <__aeabi_fcmpge>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00d      	beq.n	8001fdc <leftside+0xcc>
		LmotorF();
 8001fc0:	f7ff fdfc 	bl	8001bbc <LmotorF>
		PWMval(7, (int) pwmLeft);
 8001fc4:	4b17      	ldr	r3, [pc, #92]	; (8002024 <leftside+0x114>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fa5b 	bl	8000484 <__aeabi_f2iz>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	2007      	movs	r0, #7
 8001fd6:	f7ff fc31 	bl	800183c <PWMval>
	} else if (pwmLeft < 0) {
		LmotorB();
		PWMval(7, ((int) pwmLeft) * -1);
	}

}
 8001fda:	e019      	b.n	8002010 <leftside+0x100>
	} else if (pwmLeft < 0) {
 8001fdc:	4b11      	ldr	r3, [pc, #68]	; (8002024 <leftside+0x114>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f04f 0100 	mov.w	r1, #0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fa25 	bl	8000434 <__aeabi_fcmplt>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d100      	bne.n	8001ff2 <leftside+0xe2>
}
 8001ff0:	e00e      	b.n	8002010 <leftside+0x100>
		LmotorB();
 8001ff2:	f7ff fdf5 	bl	8001be0 <LmotorB>
		PWMval(7, ((int) pwmLeft) * -1);
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <leftside+0x114>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fa42 	bl	8000484 <__aeabi_f2iz>
 8002000:	4603      	mov	r3, r0
 8002002:	b29b      	uxth	r3, r3
 8002004:	425b      	negs	r3, r3
 8002006:	b29b      	uxth	r3, r3
 8002008:	4619      	mov	r1, r3
 800200a:	2007      	movs	r0, #7
 800200c:	f7ff fc16 	bl	800183c <PWMval>
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000065 	.word	0x20000065
 800201c:	2000006c 	.word	0x2000006c
 8002020:	2000004a 	.word	0x2000004a
 8002024:	20000074 	.word	0x20000074
 8002028:	20000004 	.word	0x20000004

0800202c <servox>:

void servox() {
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b083      	sub	sp, #12
 8002030:	af02      	add	r7, sp, #8

	sx = map(byte5, 32, 127, 1250,1750);
 8002032:	4b1a      	ldr	r3, [pc, #104]	; (800209c <servox+0x70>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	b298      	uxth	r0, r3
 8002038:	f240 63d6 	movw	r3, #1750	; 0x6d6
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8002042:	227f      	movs	r2, #127	; 0x7f
 8002044:	2120      	movs	r1, #32
 8002046:	f7ff fbd3 	bl	80017f0 <map>
 800204a:	4603      	mov	r3, r0
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe f94b 	bl	80002e8 <__aeabi_ui2f>
 8002052:	4603      	mov	r3, r0
 8002054:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <servox+0x74>)
 8002056:	6013      	str	r3, [r2, #0]
	if(byte5 < 90 && byte5 > 70)
 8002058:	4b10      	ldr	r3, [pc, #64]	; (800209c <servox+0x70>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b59      	cmp	r3, #89	; 0x59
 800205e:	d80f      	bhi.n	8002080 <servox+0x54>
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <servox+0x70>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b46      	cmp	r3, #70	; 0x46
 8002066:	d90b      	bls.n	8002080 <servox+0x54>
	{
		sx = 1500;
 8002068:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <servox+0x74>)
 800206a:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <servox+0x78>)
 800206c:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, sx);
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <servox+0x74>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a0d      	ldr	r2, [pc, #52]	; (80020a8 <servox+0x7c>)
 8002074:	6814      	ldr	r4, [r2, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fa2a 	bl	80004d0 <__aeabi_f2uiz>
 800207c:	4603      	mov	r3, r0
 800207e:	6363      	str	r3, [r4, #52]	; 0x34
	}

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, sx);
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <servox+0x74>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <servox+0x7c>)
 8002086:	6814      	ldr	r4, [r2, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fa21 	bl	80004d0 <__aeabi_f2uiz>
 800208e:	4603      	mov	r3, r0
 8002090:	6363      	str	r3, [r4, #52]	; 0x34


}
 8002092:	bf00      	nop
 8002094:	3704      	adds	r7, #4
 8002096:	46bd      	mov	sp, r7
 8002098:	bd90      	pop	{r4, r7, pc}
 800209a:	bf00      	nop
 800209c:	20000062 	.word	0x20000062
 80020a0:	20000078 	.word	0x20000078
 80020a4:	44bb8000 	.word	0x44bb8000
 80020a8:	200000f0 	.word	0x200000f0

080020ac <servox0>:
void servox0() {
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <servox0+0x18>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80020b8:	635a      	str	r2, [r3, #52]	; 0x34

}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	200000f0 	.word	0x200000f0

080020c8 <servoy>:
void servoy() {
 80020c8:	b590      	push	{r4, r7, lr}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af02      	add	r7, sp, #8

	sy = map(byte6, 32, 127, 1000, 2000);
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <servoy+0x48>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	b298      	uxth	r0, r3
 80020d4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020de:	227f      	movs	r2, #127	; 0x7f
 80020e0:	2120      	movs	r1, #32
 80020e2:	f7ff fb85 	bl	80017f0 <map>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe f8fd 	bl	80002e8 <__aeabi_ui2f>
 80020ee:	4603      	mov	r3, r0
 80020f0:	4a08      	ldr	r2, [pc, #32]	; (8002114 <servoy+0x4c>)
 80020f2:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, sy);
 80020f4:	4b07      	ldr	r3, [pc, #28]	; (8002114 <servoy+0x4c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a07      	ldr	r2, [pc, #28]	; (8002118 <servoy+0x50>)
 80020fa:	6814      	ldr	r4, [r2, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe f9e7 	bl	80004d0 <__aeabi_f2uiz>
 8002102:	4603      	mov	r3, r0
 8002104:	6423      	str	r3, [r4, #64]	; 0x40

}
 8002106:	bf00      	nop
 8002108:	3704      	adds	r7, #4
 800210a:	46bd      	mov	sp, r7
 800210c:	bd90      	pop	{r4, r7, pc}
 800210e:	bf00      	nop
 8002110:	20000063 	.word	0x20000063
 8002114:	2000007c 	.word	0x2000007c
 8002118:	200000f0 	.word	0x200000f0

0800211c <servoy0>:
void servoy0(){
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1500);
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <servoy0+0x18>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002128:	641a      	str	r2, [r3, #64]	; 0x40

}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	200000f0 	.word	0x200000f0

08002138 <motor0control>:

void motor0control() {
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
	if (button1A) {
 800213c:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <motor0control+0x3c>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d007      	beq.n	8002154 <motor0control+0x1c>
		podstL();
 8002144:	f7ff fbdc 	bl	8001900 <podstL>
		PWMval(0, 1000);
 8002148:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800214c:	2000      	movs	r0, #0
 800214e:	f7ff fb75 	bl	800183c <PWMval>
		podstR();
		PWMval(0, 1000);
	} else {
		stoppodst();
	}
}
 8002152:	e00d      	b.n	8002170 <motor0control+0x38>
	} else if (button1B) {
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <motor0control+0x40>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d007      	beq.n	800216c <motor0control+0x34>
		podstR();
 800215c:	f7ff fbc0 	bl	80018e0 <podstR>
		PWMval(0, 1000);
 8002160:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002164:	2000      	movs	r0, #0
 8002166:	f7ff fb69 	bl	800183c <PWMval>
}
 800216a:	e001      	b.n	8002170 <motor0control+0x38>
		stoppodst();
 800216c:	f7ff fbd8 	bl	8001920 <stoppodst>
}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}
 8002174:	2000004b 	.word	0x2000004b
 8002178:	2000004c 	.word	0x2000004c

0800217c <motor1control>:

void motor1control() {
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
	if (button2A) {
 8002180:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <motor1control+0x3c>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d007      	beq.n	8002198 <motor1control+0x1c>
		czlon1L();
 8002188:	f7ff fbf2 	bl	8001970 <czlon1L>
		PWMval(1, 1000);
 800218c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002190:	2001      	movs	r0, #1
 8002192:	f7ff fb53 	bl	800183c <PWMval>
		czlon1R();
		PWMval(1, 1000);
	} else {
		stopczlon1();
	}
}
 8002196:	e00d      	b.n	80021b4 <motor1control+0x38>
	} else if (button2B) {
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <motor1control+0x40>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d007      	beq.n	80021b0 <motor1control+0x34>
		czlon1R();
 80021a0:	f7ff fbd2 	bl	8001948 <czlon1R>
		PWMval(1, 1000);
 80021a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021a8:	2001      	movs	r0, #1
 80021aa:	f7ff fb47 	bl	800183c <PWMval>
}
 80021ae:	e001      	b.n	80021b4 <motor1control+0x38>
		stopczlon1();
 80021b0:	f7ff fbf2 	bl	8001998 <stopczlon1>
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	2000004d 	.word	0x2000004d
 80021bc:	2000004e 	.word	0x2000004e

080021c0 <motor2control>:

void motor2control() {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
	if (button3A) {
 80021c4:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <motor2control+0x3c>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d007      	beq.n	80021dc <motor2control+0x1c>
		czlon2L();
 80021cc:	f7ff fc10 	bl	80019f0 <czlon2L>
		PWMval(2, 1000);
 80021d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021d4:	2002      	movs	r0, #2
 80021d6:	f7ff fb31 	bl	800183c <PWMval>
		czlon2R();
		PWMval(2, 1000);
	} else {
		stopczlon2();
	}
}
 80021da:	e00d      	b.n	80021f8 <motor2control+0x38>
	} else if (button3B) {
 80021dc:	4b08      	ldr	r3, [pc, #32]	; (8002200 <motor2control+0x40>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <motor2control+0x34>
		czlon2R();
 80021e4:	f7ff fbf0 	bl	80019c8 <czlon2R>
		PWMval(2, 1000);
 80021e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021ec:	2002      	movs	r0, #2
 80021ee:	f7ff fb25 	bl	800183c <PWMval>
}
 80021f2:	e001      	b.n	80021f8 <motor2control+0x38>
		stopczlon2();
 80021f4:	f7ff fc10 	bl	8001a18 <stopczlon2>
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	2000004f 	.word	0x2000004f
 8002200:	20000050 	.word	0x20000050

08002204 <motor3control>:

void motor3control() {
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
	if (button4A) {
 8002208:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <motor3control+0x3c>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <motor3control+0x1c>
		czlon3L();
 8002210:	f7ff fc2c 	bl	8001a6c <czlon3L>
		PWMval(3, 1000);
 8002214:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002218:	2003      	movs	r0, #3
 800221a:	f7ff fb0f 	bl	800183c <PWMval>
		czlon3R();
		PWMval(3, 1000);
	} else {
		stopczlon3();
	}
}
 800221e:	e00d      	b.n	800223c <motor3control+0x38>
	} else if (button4B) {
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <motor3control+0x40>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d007      	beq.n	8002238 <motor3control+0x34>
		czlon3R();
 8002228:	f7ff fc0e 	bl	8001a48 <czlon3R>
		PWMval(3, 1000);
 800222c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002230:	2003      	movs	r0, #3
 8002232:	f7ff fb03 	bl	800183c <PWMval>
}
 8002236:	e001      	b.n	800223c <motor3control+0x38>
		stopczlon3();
 8002238:	f7ff fc2a 	bl	8001a90 <stopczlon3>
}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000051 	.word	0x20000051
 8002244:	20000052 	.word	0x20000052

08002248 <motor4control>:

void motor4control() {
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
	if (moveA) {
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <motor4control+0x3c>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d007      	beq.n	8002264 <motor4control+0x1c>
		czlon4L();
 8002254:	f7ff fc46 	bl	8001ae4 <czlon4L>
		PWMval(4, 1000);
 8002258:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800225c:	2004      	movs	r0, #4
 800225e:	f7ff faed 	bl	800183c <PWMval>
		czlon4R();
		PWMval(4, 1000);
	} else {
		stopczlon4();
	}
}
 8002262:	e00d      	b.n	8002280 <motor4control+0x38>
	} else if (moveB) {
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <motor4control+0x40>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d007      	beq.n	800227c <motor4control+0x34>
		czlon4R();
 800226c:	f7ff fc26 	bl	8001abc <czlon4R>
		PWMval(4, 1000);
 8002270:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002274:	2004      	movs	r0, #4
 8002276:	f7ff fae1 	bl	800183c <PWMval>
}
 800227a:	e001      	b.n	8002280 <motor4control+0x38>
		stopczlon4();
 800227c:	f7ff fc46 	bl	8001b0c <stopczlon4>
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000053 	.word	0x20000053
 8002288:	20000054 	.word	0x20000054

0800228c <motor5control>:

void motor5control() {
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	if (rotateA) {
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <motor5control+0x3c>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d007      	beq.n	80022a8 <motor5control+0x1c>
		czlon5L();
 8002298:	f7ff fc64 	bl	8001b64 <czlon5L>
		PWMval(5, 1000);
 800229c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022a0:	2005      	movs	r0, #5
 80022a2:	f7ff facb 	bl	800183c <PWMval>
		czlon5R();
		PWMval(5, 1000);
	} else {
		stopczlon5();
	}
}
 80022a6:	e00d      	b.n	80022c4 <motor5control+0x38>
	} else if (rotateB) {
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <motor5control+0x40>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <motor5control+0x34>
		czlon5R();
 80022b0:	f7ff fc44 	bl	8001b3c <czlon5R>
		PWMval(5, 1000);
 80022b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022b8:	2005      	movs	r0, #5
 80022ba:	f7ff fabf 	bl	800183c <PWMval>
}
 80022be:	e001      	b.n	80022c4 <motor5control+0x38>
		stopczlon5();
 80022c0:	f7ff fc64 	bl	8001b8c <stopczlon5>
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000055 	.word	0x20000055
 80022cc:	20000056 	.word	0x20000056

080022d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022d4:	b672      	cpsid	i
}
 80022d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80022d8:	e7fe      	b.n	80022d8 <Error_Handler+0x8>
	...

080022dc <nRF24_SendSpi>:
#define NRF24_CE_LOW		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET)

// Spi send and read

static void nRF24_SendSpi(uint8_t *Data, uint8_t length)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, length, 1000);
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <nRF24_SendSpi+0x28>)
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	f002 f9f8 	bl	80046ea <HAL_SPI_Transmit>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000090 	.word	0x20000090

08002308 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t length)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, length, 1000);
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <nRF24_ReadSpi+0x28>)
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	b29a      	uxth	r2, r3
 800231c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	f002 fb25 	bl	8004970 <HAL_SPI_Receive>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000090 	.word	0x20000090

08002334 <nRF24_ReadRegister>:

//Reading register

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002342:	2200      	movs	r2, #0
 8002344:	2104      	movs	r1, #4
 8002346:	480c      	ldr	r0, [pc, #48]	; (8002378 <nRF24_ReadRegister+0x44>)
 8002348:	f001 fb1e 	bl	8003988 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 800234c:	1dfb      	adds	r3, r7, #7
 800234e:	2101      	movs	r1, #1
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ffc3 	bl	80022dc <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8002356:	f107 030f 	add.w	r3, r7, #15
 800235a:	2101      	movs	r1, #1
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ffd3 	bl	8002308 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8002362:	2201      	movs	r2, #1
 8002364:	2104      	movs	r1, #4
 8002366:	4804      	ldr	r0, [pc, #16]	; (8002378 <nRF24_ReadRegister+0x44>)
 8002368:	f001 fb0e 	bl	8003988 <HAL_GPIO_WritePin>

	return result;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40020400 	.word	0x40020400

0800237c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* result, uint8_t lenght)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	6039      	str	r1, [r7, #0]
 8002386:	71fb      	strb	r3, [r7, #7]
 8002388:	4613      	mov	r3, r2
 800238a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002390:	2200      	movs	r2, #0
 8002392:	2104      	movs	r1, #4
 8002394:	480a      	ldr	r0, [pc, #40]	; (80023c0 <nRF24_ReadRegisters+0x44>)
 8002396:	f001 faf7 	bl	8003988 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 800239a:	1dfb      	adds	r3, r7, #7
 800239c:	2101      	movs	r1, #1
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff9c 	bl	80022dc <nRF24_SendSpi>
	nRF24_ReadSpi(result, lenght);
 80023a4:	79bb      	ldrb	r3, [r7, #6]
 80023a6:	4619      	mov	r1, r3
 80023a8:	6838      	ldr	r0, [r7, #0]
 80023aa:	f7ff ffad 	bl	8002308 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 80023ae:	2201      	movs	r2, #1
 80023b0:	2104      	movs	r1, #4
 80023b2:	4803      	ldr	r0, [pc, #12]	; (80023c0 <nRF24_ReadRegisters+0x44>)
 80023b4:	f001 fae8 	bl	8003988 <HAL_GPIO_WritePin>
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40020400 	.word	0x40020400

080023c4 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t value)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	460a      	mov	r2, r1
 80023ce:	71fb      	strb	r3, [r7, #7]
 80023d0:	4613      	mov	r3, r2
 80023d2:	71bb      	strb	r3, [r7, #6]
	uint8_t list[2];

	list[0] = NRF24_CMD_W_REGISTER | reg;
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	f043 0320 	orr.w	r3, r3, #32
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	733b      	strb	r3, [r7, #12]
	list[1] = value;
 80023de:	79bb      	ldrb	r3, [r7, #6]
 80023e0:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 80023e2:	2200      	movs	r2, #0
 80023e4:	2104      	movs	r1, #4
 80023e6:	4809      	ldr	r0, [pc, #36]	; (800240c <nRF24_WriteRegister+0x48>)
 80023e8:	f001 face 	bl	8003988 <HAL_GPIO_WritePin>

	nRF24_SendSpi(list, 2);
 80023ec:	f107 030c 	add.w	r3, r7, #12
 80023f0:	2102      	movs	r1, #2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ff72 	bl	80022dc <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80023f8:	2201      	movs	r2, #1
 80023fa:	2104      	movs	r1, #4
 80023fc:	4803      	ldr	r0, [pc, #12]	; (800240c <nRF24_WriteRegister+0x48>)
 80023fe:	f001 fac3 	bl	8003988 <HAL_GPIO_WritePin>
}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40020400 	.word	0x40020400

08002410 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* result, uint8_t lenght)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	6039      	str	r1, [r7, #0]
 800241a:	71fb      	strb	r3, [r7, #7]
 800241c:	4613      	mov	r3, r2
 800241e:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	f043 0320 	orr.w	r3, r3, #32
 8002426:	b2db      	uxtb	r3, r3
 8002428:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800242a:	2200      	movs	r2, #0
 800242c:	2104      	movs	r1, #4
 800242e:	480b      	ldr	r0, [pc, #44]	; (800245c <nRF24_WriteRegisters+0x4c>)
 8002430:	f001 faaa 	bl	8003988 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8002434:	1dfb      	adds	r3, r7, #7
 8002436:	2101      	movs	r1, #1
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff4f 	bl	80022dc <nRF24_SendSpi>
	nRF24_SendSpi(result, lenght);
 800243e:	79bb      	ldrb	r3, [r7, #6]
 8002440:	4619      	mov	r1, r3
 8002442:	6838      	ldr	r0, [r7, #0]
 8002444:	f7ff ff4a 	bl	80022dc <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8002448:	2201      	movs	r2, #1
 800244a:	2104      	movs	r1, #4
 800244c:	4803      	ldr	r0, [pc, #12]	; (800245c <nRF24_WriteRegisters+0x4c>)
 800244e:	f001 fa9b 	bl	8003988 <HAL_GPIO_WritePin>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40020400 	.word	0x40020400

08002460 <nRF24_ReadConfig>:

uint8_t nRF24_ReadConfig(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8002464:	2000      	movs	r0, #0
 8002466:	f7ff ff65 	bl	8002334 <nRF24_ReadRegister>
 800246a:	4603      	mov	r3, r0
}
 800246c:	4618      	mov	r0, r3
 800246e:	bd80      	pop	{r7, pc}

08002470 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t config)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, config);
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	4619      	mov	r1, r3
 800247e:	2000      	movs	r0, #0
 8002480:	f7ff ffa0 	bl	80023c4 <nRF24_WriteRegister>
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8002490:	2007      	movs	r0, #7
 8002492:	f7ff ff4f 	bl	8002334 <nRF24_ReadRegister>
 8002496:	4603      	mov	r3, r0
}
 8002498:	4618      	mov	r0, r3
 800249a:	bd80      	pop	{r7, pc}

0800249c <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	4619      	mov	r1, r3
 80024aa:	2007      	movs	r0, #7
 80024ac:	f7ff ff8a 	bl	80023c4 <nRF24_WriteRegister>
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 80024be:	f7ff ffcf 	bl	8002460 <nRF24_ReadConfig>
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 80024c6:	4911      	ldr	r1, [pc, #68]	; (800250c <nRF24_RX_Mode+0x54>)
 80024c8:	2000      	movs	r0, #0
 80024ca:	f000 f9a6 	bl	800281a <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ffc5 	bl	8002470 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 80024e6:	2070      	movs	r0, #112	; 0x70
 80024e8:	f7ff ffd8 	bl	800249c <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 80024ec:	f000 f858 	bl	80025a0 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 80024f0:	f000 f870 	bl	80025d4 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 80024f4:	2201      	movs	r2, #1
 80024f6:	2102      	movs	r1, #2
 80024f8:	4805      	ldr	r0, [pc, #20]	; (8002510 <nRF24_RX_Mode+0x58>)
 80024fa:	f001 fa45 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80024fe:	2001      	movs	r0, #1
 8002500:	f000 ffac 	bl	800345c <HAL_Delay>
}
 8002504:	bf00      	nop
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000094 	.word	0x20000094
 8002510:	40020400 	.word	0x40020400

08002514 <nRF24_SetPALevel>:




void nRF24_SetPALevel(uint8_t lev)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800251e:	2006      	movs	r0, #6
 8002520:	f7ff ff08 	bl	8002334 <nRF24_ReadRegister>
 8002524:	4603      	mov	r3, r0
 8002526:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	f023 0307 	bic.w	r3, r3, #7
 800252e:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	b25a      	sxtb	r2, r3
 8002536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253a:	4313      	orrs	r3, r2
 800253c:	b25b      	sxtb	r3, r3
 800253e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	4619      	mov	r1, r3
 8002544:	2006      	movs	r0, #6
 8002546:	f7ff ff3d 	bl	80023c4 <nRF24_WriteRegister>
}
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800255c:	2006      	movs	r0, #6
 800255e:	f7ff fee9 	bl	8002334 <nRF24_ReadRegister>
 8002562:	4603      	mov	r3, r0
 8002564:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800256c:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d104      	bne.n	800257e <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	f043 0320 	orr.w	r3, r3, #32
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	e006      	b.n	800258c <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d103      	bne.n	800258c <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	f043 0308 	orr.w	r3, r3, #8
 800258a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	4619      	mov	r1, r3
 8002590:	2006      	movs	r0, #6
 8002592:	f7ff ff17 	bl	80023c4 <nRF24_WriteRegister>
}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <nRF24_FlushRX>:



void nRF24_FlushRX(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 80025a6:	23e2      	movs	r3, #226	; 0xe2
 80025a8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80025aa:	2200      	movs	r2, #0
 80025ac:	2104      	movs	r1, #4
 80025ae:	4808      	ldr	r0, [pc, #32]	; (80025d0 <nRF24_FlushRX+0x30>)
 80025b0:	f001 f9ea 	bl	8003988 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80025b4:	1dfb      	adds	r3, r7, #7
 80025b6:	2101      	movs	r1, #1
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fe8f 	bl	80022dc <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80025be:	2201      	movs	r2, #1
 80025c0:	2104      	movs	r1, #4
 80025c2:	4803      	ldr	r0, [pc, #12]	; (80025d0 <nRF24_FlushRX+0x30>)
 80025c4:	f001 f9e0 	bl	8003988 <HAL_GPIO_WritePin>
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40020400 	.word	0x40020400

080025d4 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80025da:	23e1      	movs	r3, #225	; 0xe1
 80025dc:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80025de:	2200      	movs	r2, #0
 80025e0:	2104      	movs	r1, #4
 80025e2:	4808      	ldr	r0, [pc, #32]	; (8002604 <nRF24_FlushTX+0x30>)
 80025e4:	f001 f9d0 	bl	8003988 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80025e8:	1dfb      	adds	r3, r7, #7
 80025ea:	2101      	movs	r1, #1
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fe75 	bl	80022dc <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80025f2:	2201      	movs	r2, #1
 80025f4:	2104      	movs	r1, #4
 80025f6:	4803      	ldr	r0, [pc, #12]	; (8002604 <nRF24_FlushTX+0x30>)
 80025f8:	f001 f9c6 	bl	8003988 <HAL_GPIO_WritePin>
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40020400 	.word	0x40020400

08002608 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002612:	f7ff ff25 	bl	8002460 <nRF24_ReadConfig>
 8002616:	4603      	mov	r3, r0
 8002618:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d004      	beq.n	800262a <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	f043 0308 	orr.w	r3, r3, #8
 8002626:	73fb      	strb	r3, [r7, #15]
 8002628:	e003      	b.n	8002632 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	f023 0308 	bic.w	r3, r3, #8
 8002630:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff1b 	bl	8002470 <nRF24_WriteConfig>
}
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800264c:	f7ff ff08 	bl	8002460 <nRF24_ReadConfig>
 8002650:	4603      	mov	r3, r0
 8002652:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d104      	bne.n	8002664 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	f043 0304 	orr.w	r3, r3, #4
 8002660:	73fb      	strb	r3, [r7, #15]
 8002662:	e003      	b.n	800266c <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	f023 0304 	bic.w	r3, r3, #4
 800266a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fefe 	bl	8002470 <nRF24_WriteConfig>
}
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	460a      	mov	r2, r1
 8002686:	71fb      	strb	r3, [r7, #7]
 8002688:	4613      	mov	r3, r2
 800268a:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	b25a      	sxtb	r2, r3
 8002692:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	b25b      	sxtb	r3, r3
 800269c:	4313      	orrs	r3, r2
 800269e:	b25b      	sxtb	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	4619      	mov	r1, r3
 80026a4:	2004      	movs	r0, #4
 80026a6:	f7ff fe8d 	bl	80023c4 <nRF24_WriteRegister>
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	4619      	mov	r1, r3
 80026c6:	2005      	movs	r0, #5
 80026c8:	f7ff fe7c 	bl	80023c4 <nRF24_WriteRegister>
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	460a      	mov	r2, r1
 80026de:	71fb      	strb	r3, [r7, #7]
 80026e0:	4613      	mov	r3, r2
 80026e2:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	2b05      	cmp	r3, #5
 80026e8:	d901      	bls.n	80026ee <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 80026ea:	2305      	movs	r3, #5
 80026ec:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	3311      	adds	r3, #17
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	79bb      	ldrb	r3, [r7, #6]
 80026f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	4610      	mov	r0, r2
 8002700:	f7ff fe60 	bl	80023c4 <nRF24_WriteRegister>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	460a      	mov	r2, r1
 8002716:	71fb      	strb	r3, [r7, #7]
 8002718:	4613      	mov	r3, r2
 800271a:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	2b05      	cmp	r3, #5
 8002720:	d901      	bls.n	8002726 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8002722:	2305      	movs	r3, #5
 8002724:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8002726:	2002      	movs	r0, #2
 8002728:	f7ff fe04 	bl	8002334 <nRF24_ReadRegister>
 800272c:	4603      	mov	r3, r0
 800272e:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002730:	79bb      	ldrb	r3, [r7, #6]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d10a      	bne.n	800274c <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	2201      	movs	r2, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	b25a      	sxtb	r2, r3
 8002740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002744:	4313      	orrs	r3, r2
 8002746:	b25b      	sxtb	r3, r3
 8002748:	73fb      	strb	r3, [r7, #15]
 800274a:	e00b      	b.n	8002764 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	2201      	movs	r2, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	b25b      	sxtb	r3, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	b25a      	sxtb	r2, r3
 800275a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275e:	4013      	ands	r3, r2
 8002760:	b25b      	sxtb	r3, r3
 8002762:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	4619      	mov	r1, r3
 8002768:	2002      	movs	r0, #2
 800276a:	f7ff fe2b 	bl	80023c4 <nRF24_WriteRegister>
}
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	4603      	mov	r3, r0
 800277e:	460a      	mov	r2, r1
 8002780:	71fb      	strb	r3, [r7, #7]
 8002782:	4613      	mov	r3, r2
 8002784:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	2b05      	cmp	r3, #5
 800278a:	d901      	bls.n	8002790 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 800278c:	2305      	movs	r3, #5
 800278e:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002790:	2001      	movs	r0, #1
 8002792:	f7ff fdcf 	bl	8002334 <nRF24_ReadRegister>
 8002796:	4603      	mov	r3, r0
 8002798:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 800279a:	79bb      	ldrb	r3, [r7, #6]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d10a      	bne.n	80027b6 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	2201      	movs	r2, #1
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	b25a      	sxtb	r2, r3
 80027aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	b25b      	sxtb	r3, r3
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	e00b      	b.n	80027ce <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	2201      	movs	r2, #1
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	b25b      	sxtb	r3, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	b25a      	sxtb	r2, r3
 80027c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c8:	4013      	ands	r3, r2
 80027ca:	b25b      	sxtb	r3, r3
 80027cc:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	4619      	mov	r1, r3
 80027d2:	2001      	movs	r0, #1
 80027d4:	f7ff fdf6 	bl	80023c4 <nRF24_WriteRegister>
}
 80027d8:	bf00      	nop
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	2b05      	cmp	r3, #5
 80027ee:	d901      	bls.n	80027f4 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 80027f0:	2305      	movs	r3, #5
 80027f2:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d801      	bhi.n	80027fe <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 80027fa:	2303      	movs	r3, #3
 80027fc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	3b02      	subs	r3, #2
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	b2db      	uxtb	r3, r3
 800280a:	4619      	mov	r1, r3
 800280c:	2003      	movs	r0, #3
 800280e:	f7ff fdd9 	bl	80023c4 <nRF24_WriteRegister>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b084      	sub	sp, #16
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	6039      	str	r1, [r7, #0]
 8002824:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <nRF24_SetRXAddress+0x18>
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d11d      	bne.n	800286e <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002832:	2300      	movs	r3, #0
 8002834:	73fb      	strb	r3, [r7, #15]
 8002836:	e00d      	b.n	8002854 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	441a      	add	r2, r3
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	f1c3 0302 	rsb	r3, r3, #2
 8002844:	7812      	ldrb	r2, [r2, #0]
 8002846:	3310      	adds	r3, #16
 8002848:	443b      	add	r3, r7
 800284a:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	3301      	adds	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d9ee      	bls.n	8002838 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	330a      	adds	r3, #10
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f107 010c 	add.w	r1, r7, #12
 8002864:	2203      	movs	r2, #3
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fdd2 	bl	8002410 <nRF24_WriteRegisters>
	{
 800286c:	e00a      	b.n	8002884 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	330a      	adds	r3, #10
 8002872:	b2da      	uxtb	r2, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	3302      	adds	r3, #2
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	4619      	mov	r1, r3
 800287c:	4610      	mov	r0, r2
 800287e:	f7ff fda1 	bl	80023c4 <nRF24_WriteRegister>
}
 8002882:	bf00      	nop
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8002894:	f107 030c 	add.w	r3, r7, #12
 8002898:	2203      	movs	r2, #3
 800289a:	4619      	mov	r1, r3
 800289c:	200a      	movs	r0, #10
 800289e:	f7ff fd6d 	bl	800237c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]
 80028a6:	e00c      	b.n	80028c2 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	f1c3 0302 	rsb	r3, r3, #2
 80028b0:	3210      	adds	r2, #16
 80028b2:	443a      	add	r2, r7
 80028b4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80028b8:	4a16      	ldr	r2, [pc, #88]	; (8002914 <nRF24_SetTXAddress+0x88>)
 80028ba:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	3301      	adds	r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d9ef      	bls.n	80028a8 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80028c8:	2300      	movs	r3, #0
 80028ca:	73fb      	strb	r3, [r7, #15]
 80028cc:	e00d      	b.n	80028ea <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	441a      	add	r2, r3
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	f1c3 0302 	rsb	r3, r3, #2
 80028da:	7812      	ldrb	r2, [r2, #0]
 80028dc:	3310      	adds	r3, #16
 80028de:	443b      	add	r3, r7
 80028e0:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	3301      	adds	r3, #1
 80028e8:	73fb      	strb	r3, [r7, #15]
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d9ee      	bls.n	80028ce <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80028f0:	f107 030c 	add.w	r3, r7, #12
 80028f4:	2203      	movs	r2, #3
 80028f6:	4619      	mov	r1, r3
 80028f8:	200a      	movs	r0, #10
 80028fa:	f7ff fd89 	bl	8002410 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80028fe:	f107 030c 	add.w	r3, r7, #12
 8002902:	2203      	movs	r2, #3
 8002904:	4619      	mov	r1, r3
 8002906:	2010      	movs	r0, #16
 8002908:	f7ff fd82 	bl	8002410 <nRF24_WriteRegisters>

}
 800290c:	bf00      	nop
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000094 	.word	0x20000094

08002918 <nRF24_ReadRXPaylaod>:
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));

}

void nRF24_ReadRXPaylaod(uint8_t *data)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002920:	2209      	movs	r2, #9
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	2061      	movs	r0, #97	; 0x61
 8002926:	f7ff fd29 	bl	800237c <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 800292a:	2101      	movs	r1, #1
 800292c:	2007      	movs	r0, #7
 800292e:	f7ff fd49 	bl	80023c4 <nRF24_WriteRegister>
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
 8002932:	f7ff fdab 	bl	800248c <nRF24_ReadStatus>
 8002936:	4603      	mov	r3, r0
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8002940:	2120      	movs	r1, #32
 8002942:	2007      	movs	r0, #7
 8002944:	f7ff fd3e 	bl	80023c4 <nRF24_WriteRegister>
}
 8002948:	bf00      	nop
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <nRF24_RXAvailible>:


uint8_t nRF24_RXAvailible(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8002956:	f7ff fd99 	bl	800248c <nRF24_ReadStatus>
 800295a:	4603      	mov	r3, r0
 800295c:	71fb      	strb	r3, [r7, #7]

	// RX FIFO Interrupt
	if ((status & (1 << 6)))
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00c      	beq.n	8002982 <nRF24_RXAvailible+0x32>
	{
		nrf24_rx_flag = 1;
 8002968:	4b08      	ldr	r3, [pc, #32]	; (800298c <nRF24_RXAvailible+0x3c>)
 800296a:	2201      	movs	r2, #1
 800296c:	701a      	strb	r2, [r3, #0]
		status |= (1<<6); // Interrupt flag clear
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002974:	71fb      	strb	r3, [r7, #7]
		nRF24_WriteStatus(status);
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fd8f 	bl	800249c <nRF24_WriteStatus>
		return 1;
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <nRF24_RXAvailible+0x34>
	}
	return 0;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20000097 	.word	0x20000097

08002990 <nRF24_Init>:

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8002998:	4a1e      	ldr	r2, [pc, #120]	; (8002a14 <nRF24_Init+0x84>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 800299e:	2200      	movs	r2, #0
 80029a0:	2102      	movs	r1, #2
 80029a2:	481d      	ldr	r0, [pc, #116]	; (8002a18 <nRF24_Init+0x88>)
 80029a4:	f000 fff0 	bl	8003988 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80029a8:	2201      	movs	r2, #1
 80029aa:	2104      	movs	r1, #4
 80029ac:	481a      	ldr	r0, [pc, #104]	; (8002a18 <nRF24_Init+0x88>)
 80029ae:	f000 ffeb 	bl	8003988 <HAL_GPIO_WritePin>

	HAL_Delay(5);
 80029b2:	2005      	movs	r0, #5
 80029b4:	f000 fd52 	bl	800345c <HAL_Delay>

	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 80029b8:	2002      	movs	r0, #2
 80029ba:	f7ff fdca 	bl	8002552 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80029be:	2001      	movs	r0, #1
 80029c0:	f7ff fe22 	bl	8002608 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80029c4:	2000      	movs	r0, #0
 80029c6:	f7ff fe3c 	bl	8002642 <nRF24_SetCRCLength>
	nRF24_SetPALevel(NRF24_PA_PWR_0dBM);
 80029ca:	2003      	movs	r0, #3
 80029cc:	f7ff fda2 	bl	8002514 <nRF24_SetPALevel>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 80029d0:	2107      	movs	r1, #7
 80029d2:	2004      	movs	r0, #4
 80029d4:	f7ff fe52 	bl	800267c <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 80029d8:	2100      	movs	r1, #0
 80029da:	201c      	movs	r0, #28
 80029dc:	f7ff fcf2 	bl	80023c4 <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 80029e0:	200a      	movs	r0, #10
 80029e2:	f7ff fe66 	bl	80026b2 <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 80029e6:	2109      	movs	r1, #9
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7ff fe73 	bl	80026d4 <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 80029ee:	2101      	movs	r1, #1
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7ff fe8b 	bl	800270c <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80029f6:	2101      	movs	r1, #1
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7ff febc 	bl	8002776 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80029fe:	2003      	movs	r0, #3
 8002a00:	f7ff feee 	bl	80027e0 <nRF24_SetAddressWidth>

	HAL_Delay(20);
 8002a04:	2014      	movs	r0, #20
 8002a06:	f000 fd29 	bl	800345c <HAL_Delay>

}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000090 	.word	0x20000090
 8002a18:	40020400 	.word	0x40020400

08002a1c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002a20:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <MX_SPI2_Init+0x64>)
 8002a22:	4a18      	ldr	r2, [pc, #96]	; (8002a84 <MX_SPI2_Init+0x68>)
 8002a24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a26:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <MX_SPI2_Init+0x64>)
 8002a28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <MX_SPI2_Init+0x64>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <MX_SPI2_Init+0x64>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a3a:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <MX_SPI2_Init+0x64>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a40:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <MX_SPI2_Init+0x64>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002a46:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <MX_SPI2_Init+0x64>)
 8002a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a4c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <MX_SPI2_Init+0x64>)
 8002a50:	2210      	movs	r2, #16
 8002a52:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a54:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <MX_SPI2_Init+0x64>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <MX_SPI2_Init+0x64>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a60:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <MX_SPI2_Init+0x64>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <MX_SPI2_Init+0x64>)
 8002a68:	220a      	movs	r2, #10
 8002a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002a6c:	4804      	ldr	r0, [pc, #16]	; (8002a80 <MX_SPI2_Init+0x64>)
 8002a6e:	f001 fdb3 	bl	80045d8 <HAL_SPI_Init>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002a78:	f7ff fc2a 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20000098 	.word	0x20000098
 8002a84:	40003800 	.word	0x40003800

08002a88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	; 0x28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a17      	ldr	r2, [pc, #92]	; (8002b04 <HAL_SPI_MspInit+0x7c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d128      	bne.n	8002afc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002aaa:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <HAL_SPI_MspInit+0x80>)
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	4a16      	ldr	r2, [pc, #88]	; (8002b08 <HAL_SPI_MspInit+0x80>)
 8002ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ab4:	6253      	str	r3, [r2, #36]	; 0x24
 8002ab6:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <HAL_SPI_MspInit+0x80>)
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac2:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <HAL_SPI_MspInit+0x80>)
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <HAL_SPI_MspInit+0x80>)
 8002ac8:	f043 0302 	orr.w	r3, r3, #2
 8002acc:	61d3      	str	r3, [r2, #28]
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <HAL_SPI_MspInit+0x80>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002ada:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002aec:	2305      	movs	r3, #5
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af0:	f107 0314 	add.w	r3, r7, #20
 8002af4:	4619      	mov	r1, r3
 8002af6:	4805      	ldr	r0, [pc, #20]	; (8002b0c <HAL_SPI_MspInit+0x84>)
 8002af8:	f000 fdb6 	bl	8003668 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002afc:	bf00      	nop
 8002afe:	3728      	adds	r7, #40	; 0x28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40003800 	.word	0x40003800
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40020400 	.word	0x40020400

08002b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002b16:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <HAL_MspInit+0x5c>)
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <HAL_MspInit+0x5c>)
 8002b1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b20:	6253      	str	r3, [r2, #36]	; 0x24
 8002b22:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <HAL_MspInit+0x5c>)
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2e:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <HAL_MspInit+0x5c>)
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4a0e      	ldr	r2, [pc, #56]	; (8002b6c <HAL_MspInit+0x5c>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6213      	str	r3, [r2, #32]
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <HAL_MspInit+0x5c>)
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_MspInit+0x5c>)
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <HAL_MspInit+0x5c>)
 8002b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b50:	6253      	str	r3, [r2, #36]	; 0x24
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_MspInit+0x5c>)
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	607b      	str	r3, [r7, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b5e:	2007      	movs	r0, #7
 8002b60:	f000 fd4e 	bl	8003600 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b64:	bf00      	nop
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40023800 	.word	0x40023800

08002b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b74:	e7fe      	b.n	8002b74 <NMI_Handler+0x4>

08002b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b7a:	e7fe      	b.n	8002b7a <HardFault_Handler+0x4>

08002b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <MemManage_Handler+0x4>

08002b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b86:	e7fe      	b.n	8002b86 <BusFault_Handler+0x4>

08002b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b8c:	e7fe      	b.n	8002b8c <UsageFault_Handler+0x4>

08002b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr

08002ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bb6:	f000 fc35 	bl	8003424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bc2:	bf00      	nop
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr
	...

08002bcc <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08a      	sub	sp, #40	; 0x28
 8002bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bd2:	f107 0318 	add.w	r3, r7, #24
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be0:	f107 0310 	add.w	r3, r7, #16
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bea:	463b      	mov	r3, r7
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bf6:	4b33      	ldr	r3, [pc, #204]	; (8002cc4 <MX_TIM2_Init+0xf8>)
 8002bf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bfc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 30-1;
 8002bfe:	4b31      	ldr	r3, [pc, #196]	; (8002cc4 <MX_TIM2_Init+0xf8>)
 8002c00:	221d      	movs	r2, #29
 8002c02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c04:	4b2f      	ldr	r3, [pc, #188]	; (8002cc4 <MX_TIM2_Init+0xf8>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8002c0a:	4b2e      	ldr	r3, [pc, #184]	; (8002cc4 <MX_TIM2_Init+0xf8>)
 8002c0c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002c10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c12:	4b2c      	ldr	r3, [pc, #176]	; (8002cc4 <MX_TIM2_Init+0xf8>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c18:	4b2a      	ldr	r3, [pc, #168]	; (8002cc4 <MX_TIM2_Init+0xf8>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c1e:	4829      	ldr	r0, [pc, #164]	; (8002cc4 <MX_TIM2_Init+0xf8>)
 8002c20:	f002 fa9e 	bl	8005160 <HAL_TIM_Base_Init>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002c2a:	f7ff fb51 	bl	80022d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c32:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c34:	f107 0318 	add.w	r3, r7, #24
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4822      	ldr	r0, [pc, #136]	; (8002cc4 <MX_TIM2_Init+0xf8>)
 8002c3c:	f002 fc70 	bl	8005520 <HAL_TIM_ConfigClockSource>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002c46:	f7ff fb43 	bl	80022d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c4a:	481e      	ldr	r0, [pc, #120]	; (8002cc4 <MX_TIM2_Init+0xf8>)
 8002c4c:	f002 fac7 	bl	80051de <HAL_TIM_PWM_Init>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002c56:	f7ff fb3b 	bl	80022d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c62:	f107 0310 	add.w	r3, r7, #16
 8002c66:	4619      	mov	r1, r3
 8002c68:	4816      	ldr	r0, [pc, #88]	; (8002cc4 <MX_TIM2_Init+0xf8>)
 8002c6a:	f002 ff41 	bl	8005af0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002c74:	f7ff fb2c 	bl	80022d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c78:	2360      	movs	r3, #96	; 0x60
 8002c7a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8002c7c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002c80:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c8a:	463b      	mov	r3, r7
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	4619      	mov	r1, r3
 8002c90:	480c      	ldr	r0, [pc, #48]	; (8002cc4 <MX_TIM2_Init+0xf8>)
 8002c92:	f002 fb83 	bl	800539c <HAL_TIM_PWM_ConfigChannel>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8002c9c:	f7ff fb18 	bl	80022d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ca0:	463b      	mov	r3, r7
 8002ca2:	220c      	movs	r2, #12
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4807      	ldr	r0, [pc, #28]	; (8002cc4 <MX_TIM2_Init+0xf8>)
 8002ca8:	f002 fb78 	bl	800539c <HAL_TIM_PWM_ConfigChannel>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8002cb2:	f7ff fb0d 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002cb6:	4803      	ldr	r0, [pc, #12]	; (8002cc4 <MX_TIM2_Init+0xf8>)
 8002cb8:	f000 f9f0 	bl	800309c <HAL_TIM_MspPostInit>

}
 8002cbc:	bf00      	nop
 8002cbe:	3728      	adds	r7, #40	; 0x28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	200000f0 	.word	0x200000f0

08002cc8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08a      	sub	sp, #40	; 0x28
 8002ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cce:	f107 0318 	add.w	r3, r7, #24
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	605a      	str	r2, [r3, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
 8002cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cdc:	f107 0310 	add.w	r3, r7, #16
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ce6:	463b      	mov	r3, r7
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002cf2:	4b38      	ldr	r3, [pc, #224]	; (8002dd4 <MX_TIM3_Init+0x10c>)
 8002cf4:	4a38      	ldr	r2, [pc, #224]	; (8002dd8 <MX_TIM3_Init+0x110>)
 8002cf6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8002cf8:	4b36      	ldr	r3, [pc, #216]	; (8002dd4 <MX_TIM3_Init+0x10c>)
 8002cfa:	220f      	movs	r2, #15
 8002cfc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cfe:	4b35      	ldr	r3, [pc, #212]	; (8002dd4 <MX_TIM3_Init+0x10c>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002d04:	4b33      	ldr	r3, [pc, #204]	; (8002dd4 <MX_TIM3_Init+0x10c>)
 8002d06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d0c:	4b31      	ldr	r3, [pc, #196]	; (8002dd4 <MX_TIM3_Init+0x10c>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d12:	4b30      	ldr	r3, [pc, #192]	; (8002dd4 <MX_TIM3_Init+0x10c>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d18:	482e      	ldr	r0, [pc, #184]	; (8002dd4 <MX_TIM3_Init+0x10c>)
 8002d1a:	f002 fa21 	bl	8005160 <HAL_TIM_Base_Init>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002d24:	f7ff fad4 	bl	80022d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d2c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d2e:	f107 0318 	add.w	r3, r7, #24
 8002d32:	4619      	mov	r1, r3
 8002d34:	4827      	ldr	r0, [pc, #156]	; (8002dd4 <MX_TIM3_Init+0x10c>)
 8002d36:	f002 fbf3 	bl	8005520 <HAL_TIM_ConfigClockSource>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002d40:	f7ff fac6 	bl	80022d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d44:	4823      	ldr	r0, [pc, #140]	; (8002dd4 <MX_TIM3_Init+0x10c>)
 8002d46:	f002 fa4a 	bl	80051de <HAL_TIM_PWM_Init>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002d50:	f7ff fabe 	bl	80022d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d54:	2300      	movs	r3, #0
 8002d56:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d5c:	f107 0310 	add.w	r3, r7, #16
 8002d60:	4619      	mov	r1, r3
 8002d62:	481c      	ldr	r0, [pc, #112]	; (8002dd4 <MX_TIM3_Init+0x10c>)
 8002d64:	f002 fec4 	bl	8005af0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002d6e:	f7ff faaf 	bl	80022d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d72:	2360      	movs	r3, #96	; 0x60
 8002d74:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d82:	463b      	mov	r3, r7
 8002d84:	2200      	movs	r2, #0
 8002d86:	4619      	mov	r1, r3
 8002d88:	4812      	ldr	r0, [pc, #72]	; (8002dd4 <MX_TIM3_Init+0x10c>)
 8002d8a:	f002 fb07 	bl	800539c <HAL_TIM_PWM_ConfigChannel>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002d94:	f7ff fa9c 	bl	80022d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d98:	463b      	mov	r3, r7
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	480d      	ldr	r0, [pc, #52]	; (8002dd4 <MX_TIM3_Init+0x10c>)
 8002da0:	f002 fafc 	bl	800539c <HAL_TIM_PWM_ConfigChannel>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8002daa:	f7ff fa91 	bl	80022d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002dae:	463b      	mov	r3, r7
 8002db0:	2208      	movs	r2, #8
 8002db2:	4619      	mov	r1, r3
 8002db4:	4807      	ldr	r0, [pc, #28]	; (8002dd4 <MX_TIM3_Init+0x10c>)
 8002db6:	f002 faf1 	bl	800539c <HAL_TIM_PWM_ConfigChannel>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8002dc0:	f7ff fa86 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002dc4:	4803      	ldr	r0, [pc, #12]	; (8002dd4 <MX_TIM3_Init+0x10c>)
 8002dc6:	f000 f969 	bl	800309c <HAL_TIM_MspPostInit>

}
 8002dca:	bf00      	nop
 8002dcc:	3728      	adds	r7, #40	; 0x28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000130 	.word	0x20000130
 8002dd8:	40000400 	.word	0x40000400

08002ddc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002de2:	f107 0318 	add.w	r3, r7, #24
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002df0:	f107 0310 	add.w	r3, r7, #16
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dfa:	463b      	mov	r3, r7
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e06:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <MX_TIM4_Init+0x120>)
 8002e08:	4a3d      	ldr	r2, [pc, #244]	; (8002f00 <MX_TIM4_Init+0x124>)
 8002e0a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8002e0c:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <MX_TIM4_Init+0x120>)
 8002e0e:	220f      	movs	r2, #15
 8002e10:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e12:	4b3a      	ldr	r3, [pc, #232]	; (8002efc <MX_TIM4_Init+0x120>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002e18:	4b38      	ldr	r3, [pc, #224]	; (8002efc <MX_TIM4_Init+0x120>)
 8002e1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e1e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e20:	4b36      	ldr	r3, [pc, #216]	; (8002efc <MX_TIM4_Init+0x120>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e26:	4b35      	ldr	r3, [pc, #212]	; (8002efc <MX_TIM4_Init+0x120>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e2c:	4833      	ldr	r0, [pc, #204]	; (8002efc <MX_TIM4_Init+0x120>)
 8002e2e:	f002 f997 	bl	8005160 <HAL_TIM_Base_Init>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002e38:	f7ff fa4a 	bl	80022d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e40:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e42:	f107 0318 	add.w	r3, r7, #24
 8002e46:	4619      	mov	r1, r3
 8002e48:	482c      	ldr	r0, [pc, #176]	; (8002efc <MX_TIM4_Init+0x120>)
 8002e4a:	f002 fb69 	bl	8005520 <HAL_TIM_ConfigClockSource>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002e54:	f7ff fa3c 	bl	80022d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002e58:	4828      	ldr	r0, [pc, #160]	; (8002efc <MX_TIM4_Init+0x120>)
 8002e5a:	f002 f9c0 	bl	80051de <HAL_TIM_PWM_Init>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002e64:	f7ff fa34 	bl	80022d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e70:	f107 0310 	add.w	r3, r7, #16
 8002e74:	4619      	mov	r1, r3
 8002e76:	4821      	ldr	r0, [pc, #132]	; (8002efc <MX_TIM4_Init+0x120>)
 8002e78:	f002 fe3a 	bl	8005af0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8002e82:	f7ff fa25 	bl	80022d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e86:	2360      	movs	r3, #96	; 0x60
 8002e88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e96:	463b      	mov	r3, r7
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4817      	ldr	r0, [pc, #92]	; (8002efc <MX_TIM4_Init+0x120>)
 8002e9e:	f002 fa7d 	bl	800539c <HAL_TIM_PWM_ConfigChannel>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002ea8:	f7ff fa12 	bl	80022d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002eac:	463b      	mov	r3, r7
 8002eae:	2204      	movs	r2, #4
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4812      	ldr	r0, [pc, #72]	; (8002efc <MX_TIM4_Init+0x120>)
 8002eb4:	f002 fa72 	bl	800539c <HAL_TIM_PWM_ConfigChannel>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8002ebe:	f7ff fa07 	bl	80022d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ec2:	463b      	mov	r3, r7
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	480c      	ldr	r0, [pc, #48]	; (8002efc <MX_TIM4_Init+0x120>)
 8002eca:	f002 fa67 	bl	800539c <HAL_TIM_PWM_ConfigChannel>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <MX_TIM4_Init+0xfc>
  {
    Error_Handler();
 8002ed4:	f7ff f9fc 	bl	80022d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ed8:	463b      	mov	r3, r7
 8002eda:	220c      	movs	r2, #12
 8002edc:	4619      	mov	r1, r3
 8002ede:	4807      	ldr	r0, [pc, #28]	; (8002efc <MX_TIM4_Init+0x120>)
 8002ee0:	f002 fa5c 	bl	800539c <HAL_TIM_PWM_ConfigChannel>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 8002eea:	f7ff f9f1 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002eee:	4803      	ldr	r0, [pc, #12]	; (8002efc <MX_TIM4_Init+0x120>)
 8002ef0:	f000 f8d4 	bl	800309c <HAL_TIM_MspPostInit>

}
 8002ef4:	bf00      	nop
 8002ef6:	3728      	adds	r7, #40	; 0x28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000170 	.word	0x20000170
 8002f00:	40000800 	.word	0x40000800

08002f04 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	; 0x28
 8002f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f0a:	f107 0318 	add.w	r3, r7, #24
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	609a      	str	r2, [r3, #8]
 8002f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f18:	f107 0310 	add.w	r3, r7, #16
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f22:	463b      	mov	r3, r7
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002f2e:	4b2d      	ldr	r3, [pc, #180]	; (8002fe4 <MX_TIM5_Init+0xe0>)
 8002f30:	4a2d      	ldr	r2, [pc, #180]	; (8002fe8 <MX_TIM5_Init+0xe4>)
 8002f32:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 8002f34:	4b2b      	ldr	r3, [pc, #172]	; (8002fe4 <MX_TIM5_Init+0xe0>)
 8002f36:	220f      	movs	r2, #15
 8002f38:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f3a:	4b2a      	ldr	r3, [pc, #168]	; (8002fe4 <MX_TIM5_Init+0xe0>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8002f40:	4b28      	ldr	r3, [pc, #160]	; (8002fe4 <MX_TIM5_Init+0xe0>)
 8002f42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f46:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f48:	4b26      	ldr	r3, [pc, #152]	; (8002fe4 <MX_TIM5_Init+0xe0>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f4e:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <MX_TIM5_Init+0xe0>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002f54:	4823      	ldr	r0, [pc, #140]	; (8002fe4 <MX_TIM5_Init+0xe0>)
 8002f56:	f002 f903 	bl	8005160 <HAL_TIM_Base_Init>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8002f60:	f7ff f9b6 	bl	80022d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f68:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002f6a:	f107 0318 	add.w	r3, r7, #24
 8002f6e:	4619      	mov	r1, r3
 8002f70:	481c      	ldr	r0, [pc, #112]	; (8002fe4 <MX_TIM5_Init+0xe0>)
 8002f72:	f002 fad5 	bl	8005520 <HAL_TIM_ConfigClockSource>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002f7c:	f7ff f9a8 	bl	80022d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002f80:	4818      	ldr	r0, [pc, #96]	; (8002fe4 <MX_TIM5_Init+0xe0>)
 8002f82:	f002 f92c 	bl	80051de <HAL_TIM_PWM_Init>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002f8c:	f7ff f9a0 	bl	80022d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f90:	2300      	movs	r3, #0
 8002f92:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002f98:	f107 0310 	add.w	r3, r7, #16
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4811      	ldr	r0, [pc, #68]	; (8002fe4 <MX_TIM5_Init+0xe0>)
 8002fa0:	f002 fda6 	bl	8005af0 <HAL_TIMEx_MasterConfigSynchronization>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8002faa:	f7ff f991 	bl	80022d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fae:	2360      	movs	r3, #96	; 0x60
 8002fb0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fbe:	463b      	mov	r3, r7
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4807      	ldr	r0, [pc, #28]	; (8002fe4 <MX_TIM5_Init+0xe0>)
 8002fc6:	f002 f9e9 	bl	800539c <HAL_TIM_PWM_ConfigChannel>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8002fd0:	f7ff f97e 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002fd4:	4803      	ldr	r0, [pc, #12]	; (8002fe4 <MX_TIM5_Init+0xe0>)
 8002fd6:	f000 f861 	bl	800309c <HAL_TIM_MspPostInit>

}
 8002fda:	bf00      	nop
 8002fdc:	3728      	adds	r7, #40	; 0x28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	200001b0 	.word	0x200001b0
 8002fe8:	40000c00 	.word	0x40000c00

08002fec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffc:	d10c      	bne.n	8003018 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ffe:	4b23      	ldr	r3, [pc, #140]	; (800308c <HAL_TIM_Base_MspInit+0xa0>)
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	4a22      	ldr	r2, [pc, #136]	; (800308c <HAL_TIM_Base_MspInit+0xa0>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	6253      	str	r3, [r2, #36]	; 0x24
 800300a:	4b20      	ldr	r3, [pc, #128]	; (800308c <HAL_TIM_Base_MspInit+0xa0>)
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003016:	e034      	b.n	8003082 <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM3)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1c      	ldr	r2, [pc, #112]	; (8003090 <HAL_TIM_Base_MspInit+0xa4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d10c      	bne.n	800303c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003022:	4b1a      	ldr	r3, [pc, #104]	; (800308c <HAL_TIM_Base_MspInit+0xa0>)
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	4a19      	ldr	r2, [pc, #100]	; (800308c <HAL_TIM_Base_MspInit+0xa0>)
 8003028:	f043 0302 	orr.w	r3, r3, #2
 800302c:	6253      	str	r3, [r2, #36]	; 0x24
 800302e:	4b17      	ldr	r3, [pc, #92]	; (800308c <HAL_TIM_Base_MspInit+0xa0>)
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	693b      	ldr	r3, [r7, #16]
}
 800303a:	e022      	b.n	8003082 <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM4)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a14      	ldr	r2, [pc, #80]	; (8003094 <HAL_TIM_Base_MspInit+0xa8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d10c      	bne.n	8003060 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003046:	4b11      	ldr	r3, [pc, #68]	; (800308c <HAL_TIM_Base_MspInit+0xa0>)
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	4a10      	ldr	r2, [pc, #64]	; (800308c <HAL_TIM_Base_MspInit+0xa0>)
 800304c:	f043 0304 	orr.w	r3, r3, #4
 8003050:	6253      	str	r3, [r2, #36]	; 0x24
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <HAL_TIM_Base_MspInit+0xa0>)
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
}
 800305e:	e010      	b.n	8003082 <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM5)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a0c      	ldr	r2, [pc, #48]	; (8003098 <HAL_TIM_Base_MspInit+0xac>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d10b      	bne.n	8003082 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800306a:	4b08      	ldr	r3, [pc, #32]	; (800308c <HAL_TIM_Base_MspInit+0xa0>)
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	4a07      	ldr	r2, [pc, #28]	; (800308c <HAL_TIM_Base_MspInit+0xa0>)
 8003070:	f043 0308 	orr.w	r3, r3, #8
 8003074:	6253      	str	r3, [r2, #36]	; 0x24
 8003076:	4b05      	ldr	r3, [pc, #20]	; (800308c <HAL_TIM_Base_MspInit+0xa0>)
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	68bb      	ldr	r3, [r7, #8]
}
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	40023800 	.word	0x40023800
 8003090:	40000400 	.word	0x40000400
 8003094:	40000800 	.word	0x40000800
 8003098:	40000c00 	.word	0x40000c00

0800309c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08e      	sub	sp, #56	; 0x38
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	60da      	str	r2, [r3, #12]
 80030b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030bc:	d13a      	bne.n	8003134 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030be:	4b60      	ldr	r3, [pc, #384]	; (8003240 <HAL_TIM_MspPostInit+0x1a4>)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	4a5f      	ldr	r2, [pc, #380]	; (8003240 <HAL_TIM_MspPostInit+0x1a4>)
 80030c4:	f043 0302 	orr.w	r3, r3, #2
 80030c8:	61d3      	str	r3, [r2, #28]
 80030ca:	4b5d      	ldr	r3, [pc, #372]	; (8003240 <HAL_TIM_MspPostInit+0x1a4>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	623b      	str	r3, [r7, #32]
 80030d4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d6:	4b5a      	ldr	r3, [pc, #360]	; (8003240 <HAL_TIM_MspPostInit+0x1a4>)
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	4a59      	ldr	r2, [pc, #356]	; (8003240 <HAL_TIM_MspPostInit+0x1a4>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	61d3      	str	r3, [r2, #28]
 80030e2:	4b57      	ldr	r3, [pc, #348]	; (8003240 <HAL_TIM_MspPostInit+0x1a4>)
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	61fb      	str	r3, [r7, #28]
 80030ec:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO_2_Pin;
 80030ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f4:	2302      	movs	r3, #2
 80030f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fc:	2300      	movs	r3, #0
 80030fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003100:	2301      	movs	r3, #1
 8003102:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SERVO_2_GPIO_Port, &GPIO_InitStruct);
 8003104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003108:	4619      	mov	r1, r3
 800310a:	484e      	ldr	r0, [pc, #312]	; (8003244 <HAL_TIM_MspPostInit+0x1a8>)
 800310c:	f000 faac 	bl	8003668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SERVO_1_Pin;
 8003110:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003116:	2302      	movs	r3, #2
 8003118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	2300      	movs	r3, #0
 800311c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311e:	2300      	movs	r3, #0
 8003120:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003122:	2301      	movs	r3, #1
 8003124:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SERVO_1_GPIO_Port, &GPIO_InitStruct);
 8003126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800312a:	4619      	mov	r1, r3
 800312c:	4846      	ldr	r0, [pc, #280]	; (8003248 <HAL_TIM_MspPostInit+0x1ac>)
 800312e:	f000 fa9b 	bl	8003668 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003132:	e081      	b.n	8003238 <HAL_TIM_MspPostInit+0x19c>
  else if(timHandle->Instance==TIM3)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a44      	ldr	r2, [pc, #272]	; (800324c <HAL_TIM_MspPostInit+0x1b0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d138      	bne.n	80031b0 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313e:	4b40      	ldr	r3, [pc, #256]	; (8003240 <HAL_TIM_MspPostInit+0x1a4>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	4a3f      	ldr	r2, [pc, #252]	; (8003240 <HAL_TIM_MspPostInit+0x1a4>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	61d3      	str	r3, [r2, #28]
 800314a:	4b3d      	ldr	r3, [pc, #244]	; (8003240 <HAL_TIM_MspPostInit+0x1a4>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	61bb      	str	r3, [r7, #24]
 8003154:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003156:	4b3a      	ldr	r3, [pc, #232]	; (8003240 <HAL_TIM_MspPostInit+0x1a4>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	4a39      	ldr	r2, [pc, #228]	; (8003240 <HAL_TIM_MspPostInit+0x1a4>)
 800315c:	f043 0302 	orr.w	r3, r3, #2
 8003160:	61d3      	str	r3, [r2, #28]
 8003162:	4b37      	ldr	r3, [pc, #220]	; (8003240 <HAL_TIM_MspPostInit+0x1a4>)
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Czlon4PWM_Pin|Czlon5PWM_Pin;
 800316e:	23c0      	movs	r3, #192	; 0xc0
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003172:	2302      	movs	r3, #2
 8003174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317a:	2300      	movs	r3, #0
 800317c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800317e:	2302      	movs	r3, #2
 8003180:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003186:	4619      	mov	r1, r3
 8003188:	482f      	ldr	r0, [pc, #188]	; (8003248 <HAL_TIM_MspPostInit+0x1ac>)
 800318a:	f000 fa6d 	bl	8003668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R_PWM_Pin;
 800318e:	2301      	movs	r3, #1
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003192:	2302      	movs	r3, #2
 8003194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319a:	2300      	movs	r3, #0
 800319c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800319e:	2302      	movs	r3, #2
 80031a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(R_PWM_GPIO_Port, &GPIO_InitStruct);
 80031a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031a6:	4619      	mov	r1, r3
 80031a8:	4826      	ldr	r0, [pc, #152]	; (8003244 <HAL_TIM_MspPostInit+0x1a8>)
 80031aa:	f000 fa5d 	bl	8003668 <HAL_GPIO_Init>
}
 80031ae:	e043      	b.n	8003238 <HAL_TIM_MspPostInit+0x19c>
  else if(timHandle->Instance==TIM4)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a26      	ldr	r2, [pc, #152]	; (8003250 <HAL_TIM_MspPostInit+0x1b4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d11d      	bne.n	80031f6 <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ba:	4b21      	ldr	r3, [pc, #132]	; (8003240 <HAL_TIM_MspPostInit+0x1a4>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	4a20      	ldr	r2, [pc, #128]	; (8003240 <HAL_TIM_MspPostInit+0x1a4>)
 80031c0:	f043 0302 	orr.w	r3, r3, #2
 80031c4:	61d3      	str	r3, [r2, #28]
 80031c6:	4b1e      	ldr	r3, [pc, #120]	; (8003240 <HAL_TIM_MspPostInit+0x1a4>)
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PodstawaPWM_Pin|Czlon1PWM_Pin|Czlon2PWM_Pin|Czlon3PWM_Pin;
 80031d2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d8:	2302      	movs	r3, #2
 80031da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e0:	2300      	movs	r3, #0
 80031e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031e4:	2302      	movs	r3, #2
 80031e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ec:	4619      	mov	r1, r3
 80031ee:	4815      	ldr	r0, [pc, #84]	; (8003244 <HAL_TIM_MspPostInit+0x1a8>)
 80031f0:	f000 fa3a 	bl	8003668 <HAL_GPIO_Init>
}
 80031f4:	e020      	b.n	8003238 <HAL_TIM_MspPostInit+0x19c>
  else if(timHandle->Instance==TIM5)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a16      	ldr	r2, [pc, #88]	; (8003254 <HAL_TIM_MspPostInit+0x1b8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d11b      	bne.n	8003238 <HAL_TIM_MspPostInit+0x19c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <HAL_TIM_MspPostInit+0x1a4>)
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	4a0e      	ldr	r2, [pc, #56]	; (8003240 <HAL_TIM_MspPostInit+0x1a4>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	61d3      	str	r3, [r2, #28]
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <HAL_TIM_MspPostInit+0x1a4>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = L_PWM_Pin;
 8003218:	2302      	movs	r3, #2
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321c:	2302      	movs	r3, #2
 800321e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003224:	2300      	movs	r3, #0
 8003226:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003228:	2302      	movs	r3, #2
 800322a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(L_PWM_GPIO_Port, &GPIO_InitStruct);
 800322c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003230:	4619      	mov	r1, r3
 8003232:	4805      	ldr	r0, [pc, #20]	; (8003248 <HAL_TIM_MspPostInit+0x1ac>)
 8003234:	f000 fa18 	bl	8003668 <HAL_GPIO_Init>
}
 8003238:	bf00      	nop
 800323a:	3738      	adds	r7, #56	; 0x38
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40023800 	.word	0x40023800
 8003244:	40020400 	.word	0x40020400
 8003248:	40020000 	.word	0x40020000
 800324c:	40000400 	.word	0x40000400
 8003250:	40000800 	.word	0x40000800
 8003254:	40000c00 	.word	0x40000c00

08003258 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800325c:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <MX_USART2_UART_Init+0x4c>)
 800325e:	4a12      	ldr	r2, [pc, #72]	; (80032a8 <MX_USART2_UART_Init+0x50>)
 8003260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003262:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <MX_USART2_UART_Init+0x4c>)
 8003264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800326a:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <MX_USART2_UART_Init+0x4c>)
 800326c:	2200      	movs	r2, #0
 800326e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <MX_USART2_UART_Init+0x4c>)
 8003272:	2200      	movs	r2, #0
 8003274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003276:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <MX_USART2_UART_Init+0x4c>)
 8003278:	2200      	movs	r2, #0
 800327a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800327c:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <MX_USART2_UART_Init+0x4c>)
 800327e:	220c      	movs	r2, #12
 8003280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003282:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <MX_USART2_UART_Init+0x4c>)
 8003284:	2200      	movs	r2, #0
 8003286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <MX_USART2_UART_Init+0x4c>)
 800328a:	2200      	movs	r2, #0
 800328c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800328e:	4805      	ldr	r0, [pc, #20]	; (80032a4 <MX_USART2_UART_Init+0x4c>)
 8003290:	f002 fc8c 	bl	8005bac <HAL_UART_Init>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800329a:	f7ff f819 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	200001f0 	.word	0x200001f0
 80032a8:	40004400 	.word	0x40004400

080032ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08a      	sub	sp, #40	; 0x28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b4:	f107 0314 	add.w	r3, r7, #20
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a17      	ldr	r2, [pc, #92]	; (8003328 <HAL_UART_MspInit+0x7c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d127      	bne.n	800331e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032ce:	4b17      	ldr	r3, [pc, #92]	; (800332c <HAL_UART_MspInit+0x80>)
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	4a16      	ldr	r2, [pc, #88]	; (800332c <HAL_UART_MspInit+0x80>)
 80032d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d8:	6253      	str	r3, [r2, #36]	; 0x24
 80032da:	4b14      	ldr	r3, [pc, #80]	; (800332c <HAL_UART_MspInit+0x80>)
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e6:	4b11      	ldr	r3, [pc, #68]	; (800332c <HAL_UART_MspInit+0x80>)
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	4a10      	ldr	r2, [pc, #64]	; (800332c <HAL_UART_MspInit+0x80>)
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	61d3      	str	r3, [r2, #28]
 80032f2:	4b0e      	ldr	r3, [pc, #56]	; (800332c <HAL_UART_MspInit+0x80>)
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80032fe:	230c      	movs	r3, #12
 8003300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003302:	2302      	movs	r3, #2
 8003304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800330a:	2303      	movs	r3, #3
 800330c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800330e:	2307      	movs	r3, #7
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003312:	f107 0314 	add.w	r3, r7, #20
 8003316:	4619      	mov	r1, r3
 8003318:	4805      	ldr	r0, [pc, #20]	; (8003330 <HAL_UART_MspInit+0x84>)
 800331a:	f000 f9a5 	bl	8003668 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800331e:	bf00      	nop
 8003320:	3728      	adds	r7, #40	; 0x28
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40004400 	.word	0x40004400
 800332c:	40023800 	.word	0x40023800
 8003330:	40020000 	.word	0x40020000

08003334 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8003334:	f7ff fc43 	bl	8002bbe <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003338:	480b      	ldr	r0, [pc, #44]	; (8003368 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800333a:	490c      	ldr	r1, [pc, #48]	; (800336c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800333c:	4a0c      	ldr	r2, [pc, #48]	; (8003370 <LoopFillZerobss+0x16>)
  movs r3, #0
 800333e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003340:	e002      	b.n	8003348 <LoopCopyDataInit>

08003342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003346:	3304      	adds	r3, #4

08003348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800334a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800334c:	d3f9      	bcc.n	8003342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800334e:	4a09      	ldr	r2, [pc, #36]	; (8003374 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003350:	4c09      	ldr	r4, [pc, #36]	; (8003378 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003354:	e001      	b.n	800335a <LoopFillZerobss>

08003356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003358:	3204      	adds	r2, #4

0800335a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800335a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800335c:	d3fb      	bcc.n	8003356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800335e:	f002 fedd 	bl	800611c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003362:	f7fd fb0f 	bl	8000984 <main>
  bx lr
 8003366:	4770      	bx	lr
  ldr r0, =_sdata
 8003368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800336c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8003370:	080061c8 	.word	0x080061c8
  ldr r2, =_sbss
 8003374:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8003378:	2000023c 	.word	0x2000023c

0800337c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800337c:	e7fe      	b.n	800337c <ADC1_IRQHandler>

0800337e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003388:	2003      	movs	r0, #3
 800338a:	f000 f939 	bl	8003600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800338e:	2000      	movs	r0, #0
 8003390:	f000 f80e 	bl	80033b0 <HAL_InitTick>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	71fb      	strb	r3, [r7, #7]
 800339e:	e001      	b.n	80033a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033a0:	f7ff fbb6 	bl	8002b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033a4:	79fb      	ldrb	r3, [r7, #7]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80033bc:	4b16      	ldr	r3, [pc, #88]	; (8003418 <HAL_InitTick+0x68>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d022      	beq.n	800340a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80033c4:	4b15      	ldr	r3, [pc, #84]	; (800341c <HAL_InitTick+0x6c>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4b13      	ldr	r3, [pc, #76]	; (8003418 <HAL_InitTick+0x68>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 f938 	bl	800364e <HAL_SYSTICK_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10f      	bne.n	8003404 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b0f      	cmp	r3, #15
 80033e8:	d809      	bhi.n	80033fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033ea:	2200      	movs	r2, #0
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	f04f 30ff 	mov.w	r0, #4294967295
 80033f2:	f000 f910 	bl	8003616 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033f6:	4a0a      	ldr	r2, [pc, #40]	; (8003420 <HAL_InitTick+0x70>)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6013      	str	r3, [r2, #0]
 80033fc:	e007      	b.n	800340e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	73fb      	strb	r3, [r7, #15]
 8003402:	e004      	b.n	800340e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	e001      	b.n	800340e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800340e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000010 	.word	0x20000010
 800341c:	20000008 	.word	0x20000008
 8003420:	2000000c 	.word	0x2000000c

08003424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_IncTick+0x1c>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_IncTick+0x20>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4413      	add	r3, r2
 8003432:	4a03      	ldr	r2, [pc, #12]	; (8003440 <HAL_IncTick+0x1c>)
 8003434:	6013      	str	r3, [r2, #0]
}
 8003436:	bf00      	nop
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	20000238 	.word	0x20000238
 8003444:	20000010 	.word	0x20000010

08003448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return uwTick;
 800344c:	4b02      	ldr	r3, [pc, #8]	; (8003458 <HAL_GetTick+0x10>)
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr
 8003458:	20000238 	.word	0x20000238

0800345c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003464:	f7ff fff0 	bl	8003448 <HAL_GetTick>
 8003468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d004      	beq.n	8003480 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003476:	4b09      	ldr	r3, [pc, #36]	; (800349c <HAL_Delay+0x40>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4413      	add	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003480:	bf00      	nop
 8003482:	f7ff ffe1 	bl	8003448 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	429a      	cmp	r2, r3
 8003490:	d8f7      	bhi.n	8003482 <HAL_Delay+0x26>
  {
  }
}
 8003492:	bf00      	nop
 8003494:	bf00      	nop
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	20000010 	.word	0x20000010

080034a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034b0:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <__NVIC_SetPriorityGrouping+0x44>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034bc:	4013      	ands	r3, r2
 80034be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034d2:	4a04      	ldr	r2, [pc, #16]	; (80034e4 <__NVIC_SetPriorityGrouping+0x44>)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	60d3      	str	r3, [r2, #12]
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034ec:	4b04      	ldr	r3, [pc, #16]	; (8003500 <__NVIC_GetPriorityGrouping+0x18>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	0a1b      	lsrs	r3, r3, #8
 80034f2:	f003 0307 	and.w	r3, r3, #7
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	6039      	str	r1, [r7, #0]
 800350e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003514:	2b00      	cmp	r3, #0
 8003516:	db0a      	blt.n	800352e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	b2da      	uxtb	r2, r3
 800351c:	490c      	ldr	r1, [pc, #48]	; (8003550 <__NVIC_SetPriority+0x4c>)
 800351e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003522:	0112      	lsls	r2, r2, #4
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	440b      	add	r3, r1
 8003528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800352c:	e00a      	b.n	8003544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	b2da      	uxtb	r2, r3
 8003532:	4908      	ldr	r1, [pc, #32]	; (8003554 <__NVIC_SetPriority+0x50>)
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	3b04      	subs	r3, #4
 800353c:	0112      	lsls	r2, r2, #4
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	440b      	add	r3, r1
 8003542:	761a      	strb	r2, [r3, #24]
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	e000e100 	.word	0xe000e100
 8003554:	e000ed00 	.word	0xe000ed00

08003558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003558:	b480      	push	{r7}
 800355a:	b089      	sub	sp, #36	; 0x24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f1c3 0307 	rsb	r3, r3, #7
 8003572:	2b04      	cmp	r3, #4
 8003574:	bf28      	it	cs
 8003576:	2304      	movcs	r3, #4
 8003578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	3304      	adds	r3, #4
 800357e:	2b06      	cmp	r3, #6
 8003580:	d902      	bls.n	8003588 <NVIC_EncodePriority+0x30>
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	3b03      	subs	r3, #3
 8003586:	e000      	b.n	800358a <NVIC_EncodePriority+0x32>
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800358c:	f04f 32ff 	mov.w	r2, #4294967295
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43da      	mvns	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	401a      	ands	r2, r3
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035a0:	f04f 31ff 	mov.w	r1, #4294967295
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	fa01 f303 	lsl.w	r3, r1, r3
 80035aa:	43d9      	mvns	r1, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b0:	4313      	orrs	r3, r2
         );
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3724      	adds	r7, #36	; 0x24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr

080035bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035cc:	d301      	bcc.n	80035d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035ce:	2301      	movs	r3, #1
 80035d0:	e00f      	b.n	80035f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035d2:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <SysTick_Config+0x40>)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035da:	210f      	movs	r1, #15
 80035dc:	f04f 30ff 	mov.w	r0, #4294967295
 80035e0:	f7ff ff90 	bl	8003504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <SysTick_Config+0x40>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ea:	4b04      	ldr	r3, [pc, #16]	; (80035fc <SysTick_Config+0x40>)
 80035ec:	2207      	movs	r2, #7
 80035ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	e000e010 	.word	0xe000e010

08003600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff ff49 	bl	80034a0 <__NVIC_SetPriorityGrouping>
}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af00      	add	r7, sp, #0
 800361c:	4603      	mov	r3, r0
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003628:	f7ff ff5e 	bl	80034e8 <__NVIC_GetPriorityGrouping>
 800362c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	6978      	ldr	r0, [r7, #20]
 8003634:	f7ff ff90 	bl	8003558 <NVIC_EncodePriority>
 8003638:	4602      	mov	r2, r0
 800363a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff ff5f 	bl	8003504 <__NVIC_SetPriority>
}
 8003646:	bf00      	nop
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff ffb0 	bl	80035bc <SysTick_Config>
 800365c:	4603      	mov	r3, r0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800367e:	e160      	b.n	8003942 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	2101      	movs	r1, #1
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	fa01 f303 	lsl.w	r3, r1, r3
 800368c:	4013      	ands	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8152 	beq.w	800393c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d005      	beq.n	80036b0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d130      	bne.n	8003712 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	2203      	movs	r2, #3
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4013      	ands	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80036e6:	2201      	movs	r2, #1
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	43db      	mvns	r3, r3
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4013      	ands	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	091b      	lsrs	r3, r3, #4
 80036fc:	f003 0201 	and.w	r2, r3, #1
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	2b03      	cmp	r3, #3
 800371c:	d017      	beq.n	800374e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	2203      	movs	r2, #3
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43db      	mvns	r3, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d123      	bne.n	80037a2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	08da      	lsrs	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3208      	adds	r2, #8
 8003762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003766:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	220f      	movs	r2, #15
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4013      	ands	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	08da      	lsrs	r2, r3, #3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3208      	adds	r2, #8
 800379c:	6939      	ldr	r1, [r7, #16]
 800379e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	2203      	movs	r2, #3
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4013      	ands	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 0203 	and.w	r2, r3, #3
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 80ac 	beq.w	800393c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e4:	4b5e      	ldr	r3, [pc, #376]	; (8003960 <HAL_GPIO_Init+0x2f8>)
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	4a5d      	ldr	r2, [pc, #372]	; (8003960 <HAL_GPIO_Init+0x2f8>)
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	6213      	str	r3, [r2, #32]
 80037f0:	4b5b      	ldr	r3, [pc, #364]	; (8003960 <HAL_GPIO_Init+0x2f8>)
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80037fc:	4a59      	ldr	r2, [pc, #356]	; (8003964 <HAL_GPIO_Init+0x2fc>)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	089b      	lsrs	r3, r3, #2
 8003802:	3302      	adds	r3, #2
 8003804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003808:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	220f      	movs	r2, #15
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a51      	ldr	r2, [pc, #324]	; (8003968 <HAL_GPIO_Init+0x300>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d025      	beq.n	8003874 <HAL_GPIO_Init+0x20c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a50      	ldr	r2, [pc, #320]	; (800396c <HAL_GPIO_Init+0x304>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d01f      	beq.n	8003870 <HAL_GPIO_Init+0x208>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a4f      	ldr	r2, [pc, #316]	; (8003970 <HAL_GPIO_Init+0x308>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d019      	beq.n	800386c <HAL_GPIO_Init+0x204>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a4e      	ldr	r2, [pc, #312]	; (8003974 <HAL_GPIO_Init+0x30c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d013      	beq.n	8003868 <HAL_GPIO_Init+0x200>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a4d      	ldr	r2, [pc, #308]	; (8003978 <HAL_GPIO_Init+0x310>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00d      	beq.n	8003864 <HAL_GPIO_Init+0x1fc>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a4c      	ldr	r2, [pc, #304]	; (800397c <HAL_GPIO_Init+0x314>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d007      	beq.n	8003860 <HAL_GPIO_Init+0x1f8>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a4b      	ldr	r2, [pc, #300]	; (8003980 <HAL_GPIO_Init+0x318>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d101      	bne.n	800385c <HAL_GPIO_Init+0x1f4>
 8003858:	2306      	movs	r3, #6
 800385a:	e00c      	b.n	8003876 <HAL_GPIO_Init+0x20e>
 800385c:	2307      	movs	r3, #7
 800385e:	e00a      	b.n	8003876 <HAL_GPIO_Init+0x20e>
 8003860:	2305      	movs	r3, #5
 8003862:	e008      	b.n	8003876 <HAL_GPIO_Init+0x20e>
 8003864:	2304      	movs	r3, #4
 8003866:	e006      	b.n	8003876 <HAL_GPIO_Init+0x20e>
 8003868:	2303      	movs	r3, #3
 800386a:	e004      	b.n	8003876 <HAL_GPIO_Init+0x20e>
 800386c:	2302      	movs	r3, #2
 800386e:	e002      	b.n	8003876 <HAL_GPIO_Init+0x20e>
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <HAL_GPIO_Init+0x20e>
 8003874:	2300      	movs	r3, #0
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	f002 0203 	and.w	r2, r2, #3
 800387c:	0092      	lsls	r2, r2, #2
 800387e:	4093      	lsls	r3, r2
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003886:	4937      	ldr	r1, [pc, #220]	; (8003964 <HAL_GPIO_Init+0x2fc>)
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	089b      	lsrs	r3, r3, #2
 800388c:	3302      	adds	r3, #2
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003894:	4b3b      	ldr	r3, [pc, #236]	; (8003984 <HAL_GPIO_Init+0x31c>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	43db      	mvns	r3, r3
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	4013      	ands	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80038b8:	4a32      	ldr	r2, [pc, #200]	; (8003984 <HAL_GPIO_Init+0x31c>)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038be:	4b31      	ldr	r3, [pc, #196]	; (8003984 <HAL_GPIO_Init+0x31c>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	43db      	mvns	r3, r3
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4013      	ands	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80038e2:	4a28      	ldr	r2, [pc, #160]	; (8003984 <HAL_GPIO_Init+0x31c>)
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038e8:	4b26      	ldr	r3, [pc, #152]	; (8003984 <HAL_GPIO_Init+0x31c>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	43db      	mvns	r3, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800390c:	4a1d      	ldr	r2, [pc, #116]	; (8003984 <HAL_GPIO_Init+0x31c>)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003912:	4b1c      	ldr	r3, [pc, #112]	; (8003984 <HAL_GPIO_Init+0x31c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	43db      	mvns	r3, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003936:	4a13      	ldr	r2, [pc, #76]	; (8003984 <HAL_GPIO_Init+0x31c>)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	3301      	adds	r3, #1
 8003940:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	f47f ae97 	bne.w	8003680 <HAL_GPIO_Init+0x18>
  }
}
 8003952:	bf00      	nop
 8003954:	bf00      	nop
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40023800 	.word	0x40023800
 8003964:	40010000 	.word	0x40010000
 8003968:	40020000 	.word	0x40020000
 800396c:	40020400 	.word	0x40020400
 8003970:	40020800 	.word	0x40020800
 8003974:	40020c00 	.word	0x40020c00
 8003978:	40021000 	.word	0x40021000
 800397c:	40021400 	.word	0x40021400
 8003980:	40021800 	.word	0x40021800
 8003984:	40010400 	.word	0x40010400

08003988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	807b      	strh	r3, [r7, #2]
 8003994:	4613      	mov	r3, r2
 8003996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003998:	787b      	ldrb	r3, [r7, #1]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800399e:	887a      	ldrh	r2, [r7, #2]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80039a4:	e003      	b.n	80039ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80039a6:	887b      	ldrh	r3, [r7, #2]
 80039a8:	041a      	lsls	r2, r3, #16
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	619a      	str	r2, [r3, #24]
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr

080039b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039ca:	887a      	ldrh	r2, [r7, #2]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4013      	ands	r3, r2
 80039d0:	041a      	lsls	r2, r3, #16
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	43d9      	mvns	r1, r3
 80039d6:	887b      	ldrh	r3, [r7, #2]
 80039d8:	400b      	ands	r3, r1
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	619a      	str	r2, [r3, #24]
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr
	...

080039ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e31d      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039fe:	4b94      	ldr	r3, [pc, #592]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a08:	4b91      	ldr	r3, [pc, #580]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a10:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d07b      	beq.n	8003b16 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d006      	beq.n	8003a32 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b0c      	cmp	r3, #12
 8003a28:	d10f      	bne.n	8003a4a <HAL_RCC_OscConfig+0x5e>
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a30:	d10b      	bne.n	8003a4a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a32:	4b87      	ldr	r3, [pc, #540]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d06a      	beq.n	8003b14 <HAL_RCC_OscConfig+0x128>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d166      	bne.n	8003b14 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e2f7      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d106      	bne.n	8003a60 <HAL_RCC_OscConfig+0x74>
 8003a52:	4b7f      	ldr	r3, [pc, #508]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a7e      	ldr	r2, [pc, #504]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e02d      	b.n	8003abc <HAL_RCC_OscConfig+0xd0>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10c      	bne.n	8003a82 <HAL_RCC_OscConfig+0x96>
 8003a68:	4b79      	ldr	r3, [pc, #484]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a78      	ldr	r2, [pc, #480]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	4b76      	ldr	r3, [pc, #472]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a75      	ldr	r2, [pc, #468]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	e01c      	b.n	8003abc <HAL_RCC_OscConfig+0xd0>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b05      	cmp	r3, #5
 8003a88:	d10c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0xb8>
 8003a8a:	4b71      	ldr	r3, [pc, #452]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a70      	ldr	r2, [pc, #448]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	4b6e      	ldr	r3, [pc, #440]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a6d      	ldr	r2, [pc, #436]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	e00b      	b.n	8003abc <HAL_RCC_OscConfig+0xd0>
 8003aa4:	4b6a      	ldr	r3, [pc, #424]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a69      	ldr	r2, [pc, #420]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	4b67      	ldr	r3, [pc, #412]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a66      	ldr	r2, [pc, #408]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d013      	beq.n	8003aec <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7ff fcc0 	bl	8003448 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003acc:	f7ff fcbc 	bl	8003448 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	; 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e2ad      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ade:	4b5c      	ldr	r3, [pc, #368]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0xe0>
 8003aea:	e014      	b.n	8003b16 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aec:	f7ff fcac 	bl	8003448 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af4:	f7ff fca8 	bl	8003448 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	; 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e299      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b06:	4b52      	ldr	r3, [pc, #328]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x108>
 8003b12:	e000      	b.n	8003b16 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d05a      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b0c      	cmp	r3, #12
 8003b2c:	d119      	bne.n	8003b62 <HAL_RCC_OscConfig+0x176>
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d116      	bne.n	8003b62 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b34:	4b46      	ldr	r3, [pc, #280]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <HAL_RCC_OscConfig+0x160>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d001      	beq.n	8003b4c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e276      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4c:	4b40      	ldr	r3, [pc, #256]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	021b      	lsls	r3, r3, #8
 8003b5a:	493d      	ldr	r1, [pc, #244]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b60:	e03a      	b.n	8003bd8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d020      	beq.n	8003bac <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b6a:	4b3a      	ldr	r3, [pc, #232]	; (8003c54 <HAL_RCC_OscConfig+0x268>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b70:	f7ff fc6a 	bl	8003448 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b78:	f7ff fc66 	bl	8003448 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e257      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b8a:	4b31      	ldr	r3, [pc, #196]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f0      	beq.n	8003b78 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b96:	4b2e      	ldr	r3, [pc, #184]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	021b      	lsls	r3, r3, #8
 8003ba4:	492a      	ldr	r1, [pc, #168]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	604b      	str	r3, [r1, #4]
 8003baa:	e015      	b.n	8003bd8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bac:	4b29      	ldr	r3, [pc, #164]	; (8003c54 <HAL_RCC_OscConfig+0x268>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb2:	f7ff fc49 	bl	8003448 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bba:	f7ff fc45 	bl	8003448 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e236      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bcc:	4b20      	ldr	r3, [pc, #128]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f0      	bne.n	8003bba <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80b8 	beq.w	8003d56 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d170      	bne.n	8003cce <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bec:	4b18      	ldr	r3, [pc, #96]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <HAL_RCC_OscConfig+0x218>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e21a      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1a      	ldr	r2, [r3, #32]
 8003c08:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d921      	bls.n	8003c58 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fc7d 	bl	8004518 <RCC_SetFlashLatencyFromMSIRange>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e208      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c28:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	4906      	ldr	r1, [pc, #24]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c3a:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	061b      	lsls	r3, r3, #24
 8003c48:	4901      	ldr	r1, [pc, #4]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	604b      	str	r3, [r1, #4]
 8003c4e:	e020      	b.n	8003c92 <HAL_RCC_OscConfig+0x2a6>
 8003c50:	40023800 	.word	0x40023800
 8003c54:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c58:	4b99      	ldr	r3, [pc, #612]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	4996      	ldr	r1, [pc, #600]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c6a:	4b95      	ldr	r3, [pc, #596]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	061b      	lsls	r3, r3, #24
 8003c78:	4991      	ldr	r1, [pc, #580]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fc48 	bl	8004518 <RCC_SetFlashLatencyFromMSIRange>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e1d3      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	0b5b      	lsrs	r3, r3, #13
 8003c98:	3301      	adds	r3, #1
 8003c9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003ca2:	4a87      	ldr	r2, [pc, #540]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003ca4:	6892      	ldr	r2, [r2, #8]
 8003ca6:	0912      	lsrs	r2, r2, #4
 8003ca8:	f002 020f 	and.w	r2, r2, #15
 8003cac:	4985      	ldr	r1, [pc, #532]	; (8003ec4 <HAL_RCC_OscConfig+0x4d8>)
 8003cae:	5c8a      	ldrb	r2, [r1, r2]
 8003cb0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003cb2:	4a85      	ldr	r2, [pc, #532]	; (8003ec8 <HAL_RCC_OscConfig+0x4dc>)
 8003cb4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cb6:	4b85      	ldr	r3, [pc, #532]	; (8003ecc <HAL_RCC_OscConfig+0x4e0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fb78 	bl	80033b0 <HAL_InitTick>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d045      	beq.n	8003d56 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	e1b5      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d029      	beq.n	8003d2a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cd6:	4b7e      	ldr	r3, [pc, #504]	; (8003ed0 <HAL_RCC_OscConfig+0x4e4>)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cdc:	f7ff fbb4 	bl	8003448 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ce4:	f7ff fbb0 	bl	8003448 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e1a1      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003cf6:	4b72      	ldr	r3, [pc, #456]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d02:	4b6f      	ldr	r3, [pc, #444]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	496c      	ldr	r1, [pc, #432]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d14:	4b6a      	ldr	r3, [pc, #424]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	061b      	lsls	r3, r3, #24
 8003d22:	4967      	ldr	r1, [pc, #412]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	604b      	str	r3, [r1, #4]
 8003d28:	e015      	b.n	8003d56 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d2a:	4b69      	ldr	r3, [pc, #420]	; (8003ed0 <HAL_RCC_OscConfig+0x4e4>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d30:	f7ff fb8a 	bl	8003448 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d38:	f7ff fb86 	bl	8003448 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e177      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d4a:	4b5d      	ldr	r3, [pc, #372]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d030      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d016      	beq.n	8003d98 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d6a:	4b5a      	ldr	r3, [pc, #360]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d70:	f7ff fb6a 	bl	8003448 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d78:	f7ff fb66 	bl	8003448 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e157      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d8a:	4b4d      	ldr	r3, [pc, #308]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x38c>
 8003d96:	e015      	b.n	8003dc4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d98:	4b4e      	ldr	r3, [pc, #312]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9e:	f7ff fb53 	bl	8003448 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da6:	f7ff fb4f 	bl	8003448 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e140      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003db8:	4b41      	ldr	r3, [pc, #260]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1f0      	bne.n	8003da6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80b5 	beq.w	8003f3c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd6:	4b3a      	ldr	r3, [pc, #232]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10d      	bne.n	8003dfe <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de2:	4b37      	ldr	r3, [pc, #220]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	4a36      	ldr	r2, [pc, #216]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dec:	6253      	str	r3, [r2, #36]	; 0x24
 8003dee:	4b34      	ldr	r3, [pc, #208]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfe:	4b36      	ldr	r3, [pc, #216]	; (8003ed8 <HAL_RCC_OscConfig+0x4ec>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d118      	bne.n	8003e3c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e0a:	4b33      	ldr	r3, [pc, #204]	; (8003ed8 <HAL_RCC_OscConfig+0x4ec>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a32      	ldr	r2, [pc, #200]	; (8003ed8 <HAL_RCC_OscConfig+0x4ec>)
 8003e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e16:	f7ff fb17 	bl	8003448 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e1e:	f7ff fb13 	bl	8003448 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b64      	cmp	r3, #100	; 0x64
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e104      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e30:	4b29      	ldr	r3, [pc, #164]	; (8003ed8 <HAL_RCC_OscConfig+0x4ec>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d106      	bne.n	8003e52 <HAL_RCC_OscConfig+0x466>
 8003e44:	4b1e      	ldr	r3, [pc, #120]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e48:	4a1d      	ldr	r2, [pc, #116]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e4e:	6353      	str	r3, [r2, #52]	; 0x34
 8003e50:	e02d      	b.n	8003eae <HAL_RCC_OscConfig+0x4c2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x488>
 8003e5a:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5e:	4a18      	ldr	r2, [pc, #96]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e64:	6353      	str	r3, [r2, #52]	; 0x34
 8003e66:	4b16      	ldr	r3, [pc, #88]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6a:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003e6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e70:	6353      	str	r3, [r2, #52]	; 0x34
 8003e72:	e01c      	b.n	8003eae <HAL_RCC_OscConfig+0x4c2>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b05      	cmp	r3, #5
 8003e7a:	d10c      	bne.n	8003e96 <HAL_RCC_OscConfig+0x4aa>
 8003e7c:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	4a0f      	ldr	r2, [pc, #60]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e86:	6353      	str	r3, [r2, #52]	; 0x34
 8003e88:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8c:	4a0c      	ldr	r2, [pc, #48]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e92:	6353      	str	r3, [r2, #52]	; 0x34
 8003e94:	e00b      	b.n	8003eae <HAL_RCC_OscConfig+0x4c2>
 8003e96:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9a:	4a09      	ldr	r2, [pc, #36]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ea0:	6353      	str	r3, [r2, #52]	; 0x34
 8003ea2:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea6:	4a06      	ldr	r2, [pc, #24]	; (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003ea8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eac:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d024      	beq.n	8003f00 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb6:	f7ff fac7 	bl	8003448 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ebc:	e019      	b.n	8003ef2 <HAL_RCC_OscConfig+0x506>
 8003ebe:	bf00      	nop
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	080061a0 	.word	0x080061a0
 8003ec8:	20000008 	.word	0x20000008
 8003ecc:	2000000c 	.word	0x2000000c
 8003ed0:	42470020 	.word	0x42470020
 8003ed4:	42470680 	.word	0x42470680
 8003ed8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003edc:	f7ff fab4 	bl	8003448 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e0a3      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ef2:	4b54      	ldr	r3, [pc, #336]	; (8004044 <HAL_RCC_OscConfig+0x658>)
 8003ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0ee      	beq.n	8003edc <HAL_RCC_OscConfig+0x4f0>
 8003efe:	e014      	b.n	8003f2a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f00:	f7ff faa2 	bl	8003448 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f06:	e00a      	b.n	8003f1e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f08:	f7ff fa9e 	bl	8003448 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e08d      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f1e:	4b49      	ldr	r3, [pc, #292]	; (8004044 <HAL_RCC_OscConfig+0x658>)
 8003f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1ee      	bne.n	8003f08 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f2a:	7ffb      	ldrb	r3, [r7, #31]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d105      	bne.n	8003f3c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f30:	4b44      	ldr	r3, [pc, #272]	; (8004044 <HAL_RCC_OscConfig+0x658>)
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	4a43      	ldr	r2, [pc, #268]	; (8004044 <HAL_RCC_OscConfig+0x658>)
 8003f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d079      	beq.n	8004038 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b0c      	cmp	r3, #12
 8003f48:	d056      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d13b      	bne.n	8003fca <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f52:	4b3d      	ldr	r3, [pc, #244]	; (8004048 <HAL_RCC_OscConfig+0x65c>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f58:	f7ff fa76 	bl	8003448 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f60:	f7ff fa72 	bl	8003448 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e063      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f72:	4b34      	ldr	r3, [pc, #208]	; (8004044 <HAL_RCC_OscConfig+0x658>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f7e:	4b31      	ldr	r3, [pc, #196]	; (8004044 <HAL_RCC_OscConfig+0x658>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	4319      	orrs	r1, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	430b      	orrs	r3, r1
 8003f96:	492b      	ldr	r1, [pc, #172]	; (8004044 <HAL_RCC_OscConfig+0x658>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f9c:	4b2a      	ldr	r3, [pc, #168]	; (8004048 <HAL_RCC_OscConfig+0x65c>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa2:	f7ff fa51 	bl	8003448 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003faa:	f7ff fa4d 	bl	8003448 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e03e      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fbc:	4b21      	ldr	r3, [pc, #132]	; (8004044 <HAL_RCC_OscConfig+0x658>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x5be>
 8003fc8:	e036      	b.n	8004038 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fca:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <HAL_RCC_OscConfig+0x65c>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd0:	f7ff fa3a 	bl	8003448 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7ff fa36 	bl	8003448 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e027      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fea:	4b16      	ldr	r3, [pc, #88]	; (8004044 <HAL_RCC_OscConfig+0x658>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x5ec>
 8003ff6:	e01f      	b.n	8004038 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e01a      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004004:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <HAL_RCC_OscConfig+0x658>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004014:	429a      	cmp	r2, r3
 8004016:	d10d      	bne.n	8004034 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004022:	429a      	cmp	r2, r3
 8004024:	d106      	bne.n	8004034 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004030:	429a      	cmp	r2, r3
 8004032:	d001      	beq.n	8004038 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3720      	adds	r7, #32
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40023800 	.word	0x40023800
 8004048:	42470060 	.word	0x42470060

0800404c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e11a      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004060:	4b8f      	ldr	r3, [pc, #572]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d919      	bls.n	80040a2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d105      	bne.n	8004080 <HAL_RCC_ClockConfig+0x34>
 8004074:	4b8a      	ldr	r3, [pc, #552]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a89      	ldr	r2, [pc, #548]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 800407a:	f043 0304 	orr.w	r3, r3, #4
 800407e:	6013      	str	r3, [r2, #0]
 8004080:	4b87      	ldr	r3, [pc, #540]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f023 0201 	bic.w	r2, r3, #1
 8004088:	4985      	ldr	r1, [pc, #532]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	4313      	orrs	r3, r2
 800408e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004090:	4b83      	ldr	r3, [pc, #524]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d001      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e0f9      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d008      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ae:	4b7d      	ldr	r3, [pc, #500]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	497a      	ldr	r1, [pc, #488]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 808e 	beq.w	80041ea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d107      	bne.n	80040e6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040d6:	4b73      	ldr	r3, [pc, #460]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d121      	bne.n	8004126 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e0d7      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d107      	bne.n	80040fe <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040ee:	4b6d      	ldr	r3, [pc, #436]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d115      	bne.n	8004126 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e0cb      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d107      	bne.n	8004116 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004106:	4b67      	ldr	r3, [pc, #412]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d109      	bne.n	8004126 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e0bf      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004116:	4b63      	ldr	r3, [pc, #396]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e0b7      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004126:	4b5f      	ldr	r3, [pc, #380]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f023 0203 	bic.w	r2, r3, #3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	495c      	ldr	r1, [pc, #368]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 8004134:	4313      	orrs	r3, r2
 8004136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004138:	f7ff f986 	bl	8003448 <HAL_GetTick>
 800413c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d112      	bne.n	800416c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004146:	e00a      	b.n	800415e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004148:	f7ff f97e 	bl	8003448 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	; 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e09b      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800415e:	4b51      	ldr	r3, [pc, #324]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	2b08      	cmp	r3, #8
 8004168:	d1ee      	bne.n	8004148 <HAL_RCC_ClockConfig+0xfc>
 800416a:	e03e      	b.n	80041ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b03      	cmp	r3, #3
 8004172:	d112      	bne.n	800419a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004174:	e00a      	b.n	800418c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004176:	f7ff f967 	bl	8003448 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	f241 3288 	movw	r2, #5000	; 0x1388
 8004184:	4293      	cmp	r3, r2
 8004186:	d901      	bls.n	800418c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e084      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800418c:	4b45      	ldr	r3, [pc, #276]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 030c 	and.w	r3, r3, #12
 8004194:	2b0c      	cmp	r3, #12
 8004196:	d1ee      	bne.n	8004176 <HAL_RCC_ClockConfig+0x12a>
 8004198:	e027      	b.n	80041ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d11d      	bne.n	80041de <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041a2:	e00a      	b.n	80041ba <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a4:	f7ff f950 	bl	8003448 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e06d      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041ba:	4b3a      	ldr	r3, [pc, #232]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d1ee      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x158>
 80041c6:	e010      	b.n	80041ea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c8:	f7ff f93e 	bl	8003448 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e05b      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80041de:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1ee      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041ea:	4b2d      	ldr	r3, [pc, #180]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d219      	bcs.n	800422c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d105      	bne.n	800420a <HAL_RCC_ClockConfig+0x1be>
 80041fe:	4b28      	ldr	r3, [pc, #160]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a27      	ldr	r2, [pc, #156]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 8004204:	f043 0304 	orr.w	r3, r3, #4
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	4b25      	ldr	r3, [pc, #148]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f023 0201 	bic.w	r2, r3, #1
 8004212:	4923      	ldr	r1, [pc, #140]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	4313      	orrs	r3, r2
 8004218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800421a:	4b21      	ldr	r3, [pc, #132]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d001      	beq.n	800422c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e034      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004238:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4917      	ldr	r1, [pc, #92]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d009      	beq.n	800426a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004256:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	490f      	ldr	r1, [pc, #60]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 8004266:	4313      	orrs	r3, r2
 8004268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800426a:	f000 f823 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 800426e:	4602      	mov	r2, r0
 8004270:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	091b      	lsrs	r3, r3, #4
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	490b      	ldr	r1, [pc, #44]	; (80042a8 <HAL_RCC_ClockConfig+0x25c>)
 800427c:	5ccb      	ldrb	r3, [r1, r3]
 800427e:	fa22 f303 	lsr.w	r3, r2, r3
 8004282:	4a0a      	ldr	r2, [pc, #40]	; (80042ac <HAL_RCC_ClockConfig+0x260>)
 8004284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004286:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <HAL_RCC_ClockConfig+0x264>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff f890 	bl	80033b0 <HAL_InitTick>
 8004290:	4603      	mov	r3, r0
 8004292:	72fb      	strb	r3, [r7, #11]

  return status;
 8004294:	7afb      	ldrb	r3, [r7, #11]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40023c00 	.word	0x40023c00
 80042a4:	40023800 	.word	0x40023800
 80042a8:	080061a0 	.word	0x080061a0
 80042ac:	20000008 	.word	0x20000008
 80042b0:	2000000c 	.word	0x2000000c

080042b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b8:	b092      	sub	sp, #72	; 0x48
 80042ba:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80042bc:	4b79      	ldr	r3, [pc, #484]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c4:	f003 030c 	and.w	r3, r3, #12
 80042c8:	2b0c      	cmp	r3, #12
 80042ca:	d00d      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x34>
 80042cc:	2b0c      	cmp	r3, #12
 80042ce:	f200 80d5 	bhi.w	800447c <HAL_RCC_GetSysClockFreq+0x1c8>
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d002      	beq.n	80042dc <HAL_RCC_GetSysClockFreq+0x28>
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d003      	beq.n	80042e2 <HAL_RCC_GetSysClockFreq+0x2e>
 80042da:	e0cf      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042dc:	4b72      	ldr	r3, [pc, #456]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80042de:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80042e0:	e0da      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042e2:	4b72      	ldr	r3, [pc, #456]	; (80044ac <HAL_RCC_GetSysClockFreq+0x1f8>)
 80042e4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80042e6:	e0d7      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80042e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ea:	0c9b      	lsrs	r3, r3, #18
 80042ec:	f003 020f 	and.w	r2, r3, #15
 80042f0:	4b6f      	ldr	r3, [pc, #444]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80042f2:	5c9b      	ldrb	r3, [r3, r2]
 80042f4:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80042f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f8:	0d9b      	lsrs	r3, r3, #22
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	3301      	adds	r3, #1
 8004300:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004302:	4b68      	ldr	r3, [pc, #416]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d05d      	beq.n	80043ca <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800430e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004310:	2200      	movs	r2, #0
 8004312:	4618      	mov	r0, r3
 8004314:	4611      	mov	r1, r2
 8004316:	4604      	mov	r4, r0
 8004318:	460d      	mov	r5, r1
 800431a:	4622      	mov	r2, r4
 800431c:	462b      	mov	r3, r5
 800431e:	f04f 0000 	mov.w	r0, #0
 8004322:	f04f 0100 	mov.w	r1, #0
 8004326:	0159      	lsls	r1, r3, #5
 8004328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800432c:	0150      	lsls	r0, r2, #5
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	4621      	mov	r1, r4
 8004334:	1a51      	subs	r1, r2, r1
 8004336:	6139      	str	r1, [r7, #16]
 8004338:	4629      	mov	r1, r5
 800433a:	eb63 0301 	sbc.w	r3, r3, r1
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800434c:	4659      	mov	r1, fp
 800434e:	018b      	lsls	r3, r1, #6
 8004350:	4651      	mov	r1, sl
 8004352:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004356:	4651      	mov	r1, sl
 8004358:	018a      	lsls	r2, r1, #6
 800435a:	46d4      	mov	ip, sl
 800435c:	ebb2 080c 	subs.w	r8, r2, ip
 8004360:	4659      	mov	r1, fp
 8004362:	eb63 0901 	sbc.w	r9, r3, r1
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004372:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004376:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800437a:	4690      	mov	r8, r2
 800437c:	4699      	mov	r9, r3
 800437e:	4623      	mov	r3, r4
 8004380:	eb18 0303 	adds.w	r3, r8, r3
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	462b      	mov	r3, r5
 8004388:	eb49 0303 	adc.w	r3, r9, r3
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800439a:	4629      	mov	r1, r5
 800439c:	024b      	lsls	r3, r1, #9
 800439e:	4620      	mov	r0, r4
 80043a0:	4629      	mov	r1, r5
 80043a2:	4604      	mov	r4, r0
 80043a4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80043a8:	4601      	mov	r1, r0
 80043aa:	024a      	lsls	r2, r1, #9
 80043ac:	4610      	mov	r0, r2
 80043ae:	4619      	mov	r1, r3
 80043b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b2:	2200      	movs	r2, #0
 80043b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043bc:	f7fc f8a8 	bl	8000510 <__aeabi_uldivmod>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4613      	mov	r3, r2
 80043c6:	647b      	str	r3, [r7, #68]	; 0x44
 80043c8:	e055      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80043ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043cc:	2200      	movs	r2, #0
 80043ce:	623b      	str	r3, [r7, #32]
 80043d0:	627a      	str	r2, [r7, #36]	; 0x24
 80043d2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043d6:	4642      	mov	r2, r8
 80043d8:	464b      	mov	r3, r9
 80043da:	f04f 0000 	mov.w	r0, #0
 80043de:	f04f 0100 	mov.w	r1, #0
 80043e2:	0159      	lsls	r1, r3, #5
 80043e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043e8:	0150      	lsls	r0, r2, #5
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	46c4      	mov	ip, r8
 80043f0:	ebb2 0a0c 	subs.w	sl, r2, ip
 80043f4:	4640      	mov	r0, r8
 80043f6:	4649      	mov	r1, r9
 80043f8:	468c      	mov	ip, r1
 80043fa:	eb63 0b0c 	sbc.w	fp, r3, ip
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800440a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800440e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004412:	ebb2 040a 	subs.w	r4, r2, sl
 8004416:	eb63 050b 	sbc.w	r5, r3, fp
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	00eb      	lsls	r3, r5, #3
 8004424:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004428:	00e2      	lsls	r2, r4, #3
 800442a:	4614      	mov	r4, r2
 800442c:	461d      	mov	r5, r3
 800442e:	4603      	mov	r3, r0
 8004430:	18e3      	adds	r3, r4, r3
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	460b      	mov	r3, r1
 8004436:	eb45 0303 	adc.w	r3, r5, r3
 800443a:	607b      	str	r3, [r7, #4]
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004448:	4629      	mov	r1, r5
 800444a:	028b      	lsls	r3, r1, #10
 800444c:	4620      	mov	r0, r4
 800444e:	4629      	mov	r1, r5
 8004450:	4604      	mov	r4, r0
 8004452:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004456:	4601      	mov	r1, r0
 8004458:	028a      	lsls	r2, r1, #10
 800445a:	4610      	mov	r0, r2
 800445c:	4619      	mov	r1, r3
 800445e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004460:	2200      	movs	r2, #0
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	61fa      	str	r2, [r7, #28]
 8004466:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800446a:	f7fc f851 	bl	8000510 <__aeabi_uldivmod>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4613      	mov	r3, r2
 8004474:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8004476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004478:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800447a:	e00d      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800447c:	4b09      	ldr	r3, [pc, #36]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	0b5b      	lsrs	r3, r3, #13
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448a:	3301      	adds	r3, #1
 800448c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004496:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800449a:	4618      	mov	r0, r3
 800449c:	3748      	adds	r7, #72	; 0x48
 800449e:	46bd      	mov	sp, r7
 80044a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044a4:	40023800 	.word	0x40023800
 80044a8:	00f42400 	.word	0x00f42400
 80044ac:	007a1200 	.word	0x007a1200
 80044b0:	08006194 	.word	0x08006194

080044b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044b8:	4b02      	ldr	r3, [pc, #8]	; (80044c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80044ba:	681b      	ldr	r3, [r3, #0]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr
 80044c4:	20000008 	.word	0x20000008

080044c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044cc:	f7ff fff2 	bl	80044b4 <HAL_RCC_GetHCLKFreq>
 80044d0:	4602      	mov	r2, r0
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	0a1b      	lsrs	r3, r3, #8
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	4903      	ldr	r1, [pc, #12]	; (80044ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80044de:	5ccb      	ldrb	r3, [r1, r3]
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40023800 	.word	0x40023800
 80044ec:	080061b0 	.word	0x080061b0

080044f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044f4:	f7ff ffde 	bl	80044b4 <HAL_RCC_GetHCLKFreq>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4b05      	ldr	r3, [pc, #20]	; (8004510 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	0adb      	lsrs	r3, r3, #11
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	4903      	ldr	r1, [pc, #12]	; (8004514 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004506:	5ccb      	ldrb	r3, [r1, r3]
 8004508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800450c:	4618      	mov	r0, r3
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40023800 	.word	0x40023800
 8004514:	080061b0 	.word	0x080061b0

08004518 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004520:	2300      	movs	r3, #0
 8004522:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004524:	4b29      	ldr	r3, [pc, #164]	; (80045cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d12c      	bne.n	800458a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004530:	4b26      	ldr	r3, [pc, #152]	; (80045cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800453c:	4b24      	ldr	r3, [pc, #144]	; (80045d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	e016      	b.n	8004576 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004548:	4b20      	ldr	r3, [pc, #128]	; (80045cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	4a1f      	ldr	r2, [pc, #124]	; (80045cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800454e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004552:	6253      	str	r3, [r2, #36]	; 0x24
 8004554:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004560:	4b1b      	ldr	r3, [pc, #108]	; (80045d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004568:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800456a:	4b18      	ldr	r3, [pc, #96]	; (80045cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	4a17      	ldr	r2, [pc, #92]	; (80045cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004574:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800457c:	d105      	bne.n	800458a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004584:	d101      	bne.n	800458a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004586:	2301      	movs	r3, #1
 8004588:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d105      	bne.n	800459c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004590:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a0f      	ldr	r2, [pc, #60]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004596:	f043 0304 	orr.w	r3, r3, #4
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	4b0d      	ldr	r3, [pc, #52]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f023 0201 	bic.w	r2, r3, #1
 80045a4:	490b      	ldr	r1, [pc, #44]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045ac:	4b09      	ldr	r3, [pc, #36]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d001      	beq.n	80045be <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40023800 	.word	0x40023800
 80045d0:	40007000 	.word	0x40007000
 80045d4:	40023c00 	.word	0x40023c00

080045d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e07b      	b.n	80046e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d108      	bne.n	8004604 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045fa:	d009      	beq.n	8004610 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	61da      	str	r2, [r3, #28]
 8004602:	e005      	b.n	8004610 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fe fa2c 	bl	8002a88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004646:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004694:	ea42 0103 	orr.w	r1, r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	0c1b      	lsrs	r3, r3, #16
 80046ae:	f003 0104 	and.w	r1, r3, #4
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	f003 0210 	and.w	r2, r3, #16
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b088      	sub	sp, #32
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	603b      	str	r3, [r7, #0]
 80046f6:	4613      	mov	r3, r2
 80046f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_SPI_Transmit+0x22>
 8004708:	2302      	movs	r3, #2
 800470a:	e12d      	b.n	8004968 <HAL_SPI_Transmit+0x27e>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004714:	f7fe fe98 	bl	8003448 <HAL_GetTick>
 8004718:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800471a:	88fb      	ldrh	r3, [r7, #6]
 800471c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b01      	cmp	r3, #1
 8004728:	d002      	beq.n	8004730 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800472a:	2302      	movs	r3, #2
 800472c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800472e:	e116      	b.n	800495e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <HAL_SPI_Transmit+0x52>
 8004736:	88fb      	ldrh	r3, [r7, #6]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d102      	bne.n	8004742 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004740:	e10d      	b.n	800495e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2203      	movs	r2, #3
 8004746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	88fa      	ldrh	r2, [r7, #6]
 800475a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	88fa      	ldrh	r2, [r7, #6]
 8004760:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004788:	d10f      	bne.n	80047aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004798:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b4:	2b40      	cmp	r3, #64	; 0x40
 80047b6:	d007      	beq.n	80047c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d0:	d14f      	bne.n	8004872 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_SPI_Transmit+0xf6>
 80047da:	8afb      	ldrh	r3, [r7, #22]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d142      	bne.n	8004866 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	881a      	ldrh	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	1c9a      	adds	r2, r3, #2
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004804:	e02f      	b.n	8004866 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b02      	cmp	r3, #2
 8004812:	d112      	bne.n	800483a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	881a      	ldrh	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	1c9a      	adds	r2, r3, #2
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	86da      	strh	r2, [r3, #54]	; 0x36
 8004838:	e015      	b.n	8004866 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800483a:	f7fe fe05 	bl	8003448 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d803      	bhi.n	8004852 <HAL_SPI_Transmit+0x168>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004850:	d102      	bne.n	8004858 <HAL_SPI_Transmit+0x16e>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d106      	bne.n	8004866 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004864:	e07b      	b.n	800495e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800486a:	b29b      	uxth	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1ca      	bne.n	8004806 <HAL_SPI_Transmit+0x11c>
 8004870:	e050      	b.n	8004914 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <HAL_SPI_Transmit+0x196>
 800487a:	8afb      	ldrh	r3, [r7, #22]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d144      	bne.n	800490a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	330c      	adds	r3, #12
 800488a:	7812      	ldrb	r2, [r2, #0]
 800488c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800489c:	b29b      	uxth	r3, r3
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048a6:	e030      	b.n	800490a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d113      	bne.n	80048de <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	330c      	adds	r3, #12
 80048c0:	7812      	ldrb	r2, [r2, #0]
 80048c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	86da      	strh	r2, [r3, #54]	; 0x36
 80048dc:	e015      	b.n	800490a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048de:	f7fe fdb3 	bl	8003448 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d803      	bhi.n	80048f6 <HAL_SPI_Transmit+0x20c>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f4:	d102      	bne.n	80048fc <HAL_SPI_Transmit+0x212>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d106      	bne.n	800490a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004908:	e029      	b.n	800495e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800490e:	b29b      	uxth	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1c9      	bne.n	80048a8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	6839      	ldr	r1, [r7, #0]
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 fbdf 	bl	80050dc <SPI_EndRxTxTransaction>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10a      	bne.n	8004948 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004932:	2300      	movs	r3, #0
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	77fb      	strb	r3, [r7, #31]
 8004954:	e003      	b.n	800495e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004966:	7ffb      	ldrb	r3, [r7, #31]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3720      	adds	r7, #32
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af02      	add	r7, sp, #8
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	4613      	mov	r3, r2
 800497e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b01      	cmp	r3, #1
 800498e:	d002      	beq.n	8004996 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004990:	2302      	movs	r3, #2
 8004992:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004994:	e0fb      	b.n	8004b8e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800499e:	d112      	bne.n	80049c6 <HAL_SPI_Receive+0x56>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10e      	bne.n	80049c6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2204      	movs	r2, #4
 80049ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80049b0:	88fa      	ldrh	r2, [r7, #6]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	4613      	mov	r3, r2
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	68b9      	ldr	r1, [r7, #8]
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f8ef 	bl	8004ba0 <HAL_SPI_TransmitReceive>
 80049c2:	4603      	mov	r3, r0
 80049c4:	e0e8      	b.n	8004b98 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_SPI_Receive+0x64>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e0e1      	b.n	8004b98 <HAL_SPI_Receive+0x228>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049dc:	f7fe fd34 	bl	8003448 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <HAL_SPI_Receive+0x7e>
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d102      	bne.n	80049f4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049f2:	e0cc      	b.n	8004b8e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2204      	movs	r2, #4
 80049f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	88fa      	ldrh	r2, [r7, #6]
 8004a0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	88fa      	ldrh	r2, [r7, #6]
 8004a12:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a3a:	d10f      	bne.n	8004a5c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a5a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a66:	2b40      	cmp	r3, #64	; 0x40
 8004a68:	d007      	beq.n	8004a7a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a78:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d16a      	bne.n	8004b58 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a82:	e032      	b.n	8004aea <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d115      	bne.n	8004abe <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f103 020c 	add.w	r2, r3, #12
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	7812      	ldrb	r2, [r2, #0]
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004abc:	e015      	b.n	8004aea <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004abe:	f7fe fcc3 	bl	8003448 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d803      	bhi.n	8004ad6 <HAL_SPI_Receive+0x166>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad4:	d102      	bne.n	8004adc <HAL_SPI_Receive+0x16c>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d106      	bne.n	8004aea <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004ae8:	e051      	b.n	8004b8e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1c7      	bne.n	8004a84 <HAL_SPI_Receive+0x114>
 8004af4:	e035      	b.n	8004b62 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d113      	bne.n	8004b2c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	b292      	uxth	r2, r2
 8004b10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	1c9a      	adds	r2, r3, #2
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b2a:	e015      	b.n	8004b58 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b2c:	f7fe fc8c 	bl	8003448 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d803      	bhi.n	8004b44 <HAL_SPI_Receive+0x1d4>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b42:	d102      	bne.n	8004b4a <HAL_SPI_Receive+0x1da>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004b56:	e01a      	b.n	8004b8e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1c9      	bne.n	8004af6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	6839      	ldr	r1, [r7, #0]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 fa52 	bl	8005010 <SPI_EndRxTransaction>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2220      	movs	r2, #32
 8004b76:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	75fb      	strb	r3, [r7, #23]
 8004b84:	e003      	b.n	8004b8e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08c      	sub	sp, #48	; 0x30
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d101      	bne.n	8004bc6 <HAL_SPI_TransmitReceive+0x26>
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	e198      	b.n	8004ef8 <HAL_SPI_TransmitReceive+0x358>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bce:	f7fe fc3b 	bl	8003448 <HAL_GetTick>
 8004bd2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004be4:	887b      	ldrh	r3, [r7, #2]
 8004be6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004be8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d00f      	beq.n	8004c10 <HAL_SPI_TransmitReceive+0x70>
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bf6:	d107      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d103      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x68>
 8004c00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	d003      	beq.n	8004c10 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c0e:	e16d      	b.n	8004eec <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d005      	beq.n	8004c22 <HAL_SPI_TransmitReceive+0x82>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <HAL_SPI_TransmitReceive+0x82>
 8004c1c:	887b      	ldrh	r3, [r7, #2]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d103      	bne.n	8004c2a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c28:	e160      	b.n	8004eec <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d003      	beq.n	8004c3e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2205      	movs	r2, #5
 8004c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	887a      	ldrh	r2, [r7, #2]
 8004c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	887a      	ldrh	r2, [r7, #2]
 8004c54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	887a      	ldrh	r2, [r7, #2]
 8004c60:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	887a      	ldrh	r2, [r7, #2]
 8004c66:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b40      	cmp	r3, #64	; 0x40
 8004c80:	d007      	beq.n	8004c92 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c9a:	d17c      	bne.n	8004d96 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <HAL_SPI_TransmitReceive+0x10a>
 8004ca4:	8b7b      	ldrh	r3, [r7, #26]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d16a      	bne.n	8004d80 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	881a      	ldrh	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cba:	1c9a      	adds	r2, r3, #2
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cce:	e057      	b.n	8004d80 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d11b      	bne.n	8004d16 <HAL_SPI_TransmitReceive+0x176>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d016      	beq.n	8004d16 <HAL_SPI_TransmitReceive+0x176>
 8004ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d113      	bne.n	8004d16 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf2:	881a      	ldrh	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	1c9a      	adds	r2, r3, #2
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d119      	bne.n	8004d58 <HAL_SPI_TransmitReceive+0x1b8>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d014      	beq.n	8004d58 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	b292      	uxth	r2, r2
 8004d3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	1c9a      	adds	r2, r3, #2
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d54:	2301      	movs	r3, #1
 8004d56:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d58:	f7fe fb76 	bl	8003448 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d80b      	bhi.n	8004d80 <HAL_SPI_TransmitReceive+0x1e0>
 8004d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6e:	d007      	beq.n	8004d80 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004d7e:	e0b5      	b.n	8004eec <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1a2      	bne.n	8004cd0 <HAL_SPI_TransmitReceive+0x130>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d19d      	bne.n	8004cd0 <HAL_SPI_TransmitReceive+0x130>
 8004d94:	e080      	b.n	8004e98 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <HAL_SPI_TransmitReceive+0x204>
 8004d9e:	8b7b      	ldrh	r3, [r7, #26]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d16f      	bne.n	8004e84 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	330c      	adds	r3, #12
 8004dae:	7812      	ldrb	r2, [r2, #0]
 8004db0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dca:	e05b      	b.n	8004e84 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d11c      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x274>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d017      	beq.n	8004e14 <HAL_SPI_TransmitReceive+0x274>
 8004de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d114      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	330c      	adds	r3, #12
 8004df4:	7812      	ldrb	r2, [r2, #0]
 8004df6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d119      	bne.n	8004e56 <HAL_SPI_TransmitReceive+0x2b6>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d014      	beq.n	8004e56 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e52:	2301      	movs	r3, #1
 8004e54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e56:	f7fe faf7 	bl	8003448 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d803      	bhi.n	8004e6e <HAL_SPI_TransmitReceive+0x2ce>
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6c:	d102      	bne.n	8004e74 <HAL_SPI_TransmitReceive+0x2d4>
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d107      	bne.n	8004e84 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004e82:	e033      	b.n	8004eec <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d19e      	bne.n	8004dcc <HAL_SPI_TransmitReceive+0x22c>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d199      	bne.n	8004dcc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 f91d 	bl	80050dc <SPI_EndRxTxTransaction>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d006      	beq.n	8004eb6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004eb4:	e01a      	b.n	8004eec <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10a      	bne.n	8004ed4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ee2:	e003      	b.n	8004eec <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ef4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3730      	adds	r7, #48	; 0x30
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b088      	sub	sp, #32
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f10:	f7fe fa9a 	bl	8003448 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f18:	1a9b      	subs	r3, r3, r2
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f20:	f7fe fa92 	bl	8003448 <HAL_GetTick>
 8004f24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f26:	4b39      	ldr	r3, [pc, #228]	; (800500c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	015b      	lsls	r3, r3, #5
 8004f2c:	0d1b      	lsrs	r3, r3, #20
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	fb02 f303 	mul.w	r3, r2, r3
 8004f34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f36:	e054      	b.n	8004fe2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3e:	d050      	beq.n	8004fe2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f40:	f7fe fa82 	bl	8003448 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	69fa      	ldr	r2, [r7, #28]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d902      	bls.n	8004f56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d13d      	bne.n	8004fd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f6e:	d111      	bne.n	8004f94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f78:	d004      	beq.n	8004f84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f82:	d107      	bne.n	8004f94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f9c:	d10f      	bne.n	8004fbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e017      	b.n	8005002 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4013      	ands	r3, r2
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	bf0c      	ite	eq
 8004ff2:	2301      	moveq	r3, #1
 8004ff4:	2300      	movne	r3, #0
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	79fb      	ldrb	r3, [r7, #7]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d19b      	bne.n	8004f38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3720      	adds	r7, #32
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20000008 	.word	0x20000008

08005010 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af02      	add	r7, sp, #8
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005024:	d111      	bne.n	800504a <SPI_EndRxTransaction+0x3a>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800502e:	d004      	beq.n	800503a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005038:	d107      	bne.n	800504a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005048:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005052:	d12a      	bne.n	80050aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800505c:	d012      	beq.n	8005084 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2200      	movs	r2, #0
 8005066:	2180      	movs	r1, #128	; 0x80
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f7ff ff49 	bl	8004f00 <SPI_WaitFlagStateUntilTimeout>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d02d      	beq.n	80050d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005078:	f043 0220 	orr.w	r2, r3, #32
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e026      	b.n	80050d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2200      	movs	r2, #0
 800508c:	2101      	movs	r1, #1
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f7ff ff36 	bl	8004f00 <SPI_WaitFlagStateUntilTimeout>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d01a      	beq.n	80050d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	f043 0220 	orr.w	r2, r3, #32
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e013      	b.n	80050d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2200      	movs	r2, #0
 80050b2:	2101      	movs	r1, #1
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f7ff ff23 	bl	8004f00 <SPI_WaitFlagStateUntilTimeout>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d007      	beq.n	80050d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c4:	f043 0220 	orr.w	r2, r3, #32
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e000      	b.n	80050d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80050e8:	4b1b      	ldr	r3, [pc, #108]	; (8005158 <SPI_EndRxTxTransaction+0x7c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1b      	ldr	r2, [pc, #108]	; (800515c <SPI_EndRxTxTransaction+0x80>)
 80050ee:	fba2 2303 	umull	r2, r3, r2, r3
 80050f2:	0d5b      	lsrs	r3, r3, #21
 80050f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050f8:	fb02 f303 	mul.w	r3, r2, r3
 80050fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005106:	d112      	bne.n	800512e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2200      	movs	r2, #0
 8005110:	2180      	movs	r1, #128	; 0x80
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f7ff fef4 	bl	8004f00 <SPI_WaitFlagStateUntilTimeout>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d016      	beq.n	800514c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005122:	f043 0220 	orr.w	r2, r3, #32
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e00f      	b.n	800514e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	3b01      	subs	r3, #1
 8005138:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005144:	2b80      	cmp	r3, #128	; 0x80
 8005146:	d0f2      	beq.n	800512e <SPI_EndRxTxTransaction+0x52>
 8005148:	e000      	b.n	800514c <SPI_EndRxTxTransaction+0x70>
        break;
 800514a:	bf00      	nop
  }

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20000008 	.word	0x20000008
 800515c:	165e9f81 	.word	0x165e9f81

08005160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e031      	b.n	80051d6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fd ff30 	bl	8002fec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3304      	adds	r3, #4
 800519c:	4619      	mov	r1, r3
 800519e:	4610      	mov	r0, r2
 80051a0:	f000 fa86 	bl	80056b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e031      	b.n	8005254 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d106      	bne.n	800520a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f829 	bl	800525c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2202      	movs	r2, #2
 800520e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3304      	adds	r3, #4
 800521a:	4619      	mov	r1, r3
 800521c:	4610      	mov	r0, r2
 800521e:	f000 fa47 	bl	80056b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	bc80      	pop	{r7}
 800526c:	4770      	bx	lr
	...

08005270 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d109      	bne.n	8005294 <HAL_TIM_PWM_Start+0x24>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b01      	cmp	r3, #1
 800528a:	bf14      	ite	ne
 800528c:	2301      	movne	r3, #1
 800528e:	2300      	moveq	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	e022      	b.n	80052da <HAL_TIM_PWM_Start+0x6a>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b04      	cmp	r3, #4
 8005298:	d109      	bne.n	80052ae <HAL_TIM_PWM_Start+0x3e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	bf14      	ite	ne
 80052a6:	2301      	movne	r3, #1
 80052a8:	2300      	moveq	r3, #0
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	e015      	b.n	80052da <HAL_TIM_PWM_Start+0x6a>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d109      	bne.n	80052c8 <HAL_TIM_PWM_Start+0x58>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b01      	cmp	r3, #1
 80052be:	bf14      	ite	ne
 80052c0:	2301      	movne	r3, #1
 80052c2:	2300      	moveq	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	e008      	b.n	80052da <HAL_TIM_PWM_Start+0x6a>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	bf14      	ite	ne
 80052d4:	2301      	movne	r3, #1
 80052d6:	2300      	moveq	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e051      	b.n	8005386 <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d104      	bne.n	80052f2 <HAL_TIM_PWM_Start+0x82>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80052f0:	e013      	b.n	800531a <HAL_TIM_PWM_Start+0xaa>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d104      	bne.n	8005302 <HAL_TIM_PWM_Start+0x92>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8005300:	e00b      	b.n	800531a <HAL_TIM_PWM_Start+0xaa>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b08      	cmp	r3, #8
 8005306:	d104      	bne.n	8005312 <HAL_TIM_PWM_Start+0xa2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005310:	e003      	b.n	800531a <HAL_TIM_PWM_Start+0xaa>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2202      	movs	r2, #2
 8005316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2201      	movs	r2, #1
 8005320:	6839      	ldr	r1, [r7, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fbbf 	bl	8005aa6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005330:	d00e      	beq.n	8005350 <HAL_TIM_PWM_Start+0xe0>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a16      	ldr	r2, [pc, #88]	; (8005390 <HAL_TIM_PWM_Start+0x120>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d009      	beq.n	8005350 <HAL_TIM_PWM_Start+0xe0>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a14      	ldr	r2, [pc, #80]	; (8005394 <HAL_TIM_PWM_Start+0x124>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d004      	beq.n	8005350 <HAL_TIM_PWM_Start+0xe0>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a13      	ldr	r2, [pc, #76]	; (8005398 <HAL_TIM_PWM_Start+0x128>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d111      	bne.n	8005374 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 0307 	and.w	r3, r3, #7
 800535a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b06      	cmp	r3, #6
 8005360:	d010      	beq.n	8005384 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 0201 	orr.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005372:	e007      	b.n	8005384 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0201 	orr.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	40000400 	.word	0x40000400
 8005394:	40000800 	.word	0x40000800
 8005398:	40010800 	.word	0x40010800

0800539c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053b6:	2302      	movs	r3, #2
 80053b8:	e0ae      	b.n	8005518 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b0c      	cmp	r3, #12
 80053c6:	f200 809f 	bhi.w	8005508 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053ca:	a201      	add	r2, pc, #4	; (adr r2, 80053d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d0:	08005405 	.word	0x08005405
 80053d4:	08005509 	.word	0x08005509
 80053d8:	08005509 	.word	0x08005509
 80053dc:	08005509 	.word	0x08005509
 80053e0:	08005445 	.word	0x08005445
 80053e4:	08005509 	.word	0x08005509
 80053e8:	08005509 	.word	0x08005509
 80053ec:	08005509 	.word	0x08005509
 80053f0:	08005487 	.word	0x08005487
 80053f4:	08005509 	.word	0x08005509
 80053f8:	08005509 	.word	0x08005509
 80053fc:	08005509 	.word	0x08005509
 8005400:	080054c7 	.word	0x080054c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	4618      	mov	r0, r3
 800540c:	f000 f9c0 	bl	8005790 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699a      	ldr	r2, [r3, #24]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0208 	orr.w	r2, r2, #8
 800541e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699a      	ldr	r2, [r3, #24]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0204 	bic.w	r2, r2, #4
 800542e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6999      	ldr	r1, [r3, #24]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	68da      	ldr	r2, [r3, #12]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	619a      	str	r2, [r3, #24]
      break;
 8005442:	e064      	b.n	800550e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 f9dc 	bl	8005808 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800545e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800546e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6999      	ldr	r1, [r3, #24]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	021a      	lsls	r2, r3, #8
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	619a      	str	r2, [r3, #24]
      break;
 8005484:	e043      	b.n	800550e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68b9      	ldr	r1, [r7, #8]
 800548c:	4618      	mov	r0, r3
 800548e:	f000 f9f9 	bl	8005884 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69da      	ldr	r2, [r3, #28]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f042 0208 	orr.w	r2, r2, #8
 80054a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69da      	ldr	r2, [r3, #28]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0204 	bic.w	r2, r2, #4
 80054b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	69d9      	ldr	r1, [r3, #28]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	68da      	ldr	r2, [r3, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	61da      	str	r2, [r3, #28]
      break;
 80054c4:	e023      	b.n	800550e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fa16 	bl	80058fe <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69d9      	ldr	r1, [r3, #28]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	021a      	lsls	r2, r3, #8
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	61da      	str	r2, [r3, #28]
      break;
 8005506:	e002      	b.n	800550e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	75fb      	strb	r3, [r7, #23]
      break;
 800550c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8005516:	7dfb      	ldrb	r3, [r7, #23]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800552a:	2300      	movs	r3, #0
 800552c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_TIM_ConfigClockSource+0x1c>
 8005538:	2302      	movs	r3, #2
 800553a:	e0b4      	b.n	80056a6 <HAL_TIM_ConfigClockSource+0x186>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800555a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005562:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005574:	d03e      	beq.n	80055f4 <HAL_TIM_ConfigClockSource+0xd4>
 8005576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800557a:	f200 8087 	bhi.w	800568c <HAL_TIM_ConfigClockSource+0x16c>
 800557e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005582:	f000 8086 	beq.w	8005692 <HAL_TIM_ConfigClockSource+0x172>
 8005586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800558a:	d87f      	bhi.n	800568c <HAL_TIM_ConfigClockSource+0x16c>
 800558c:	2b70      	cmp	r3, #112	; 0x70
 800558e:	d01a      	beq.n	80055c6 <HAL_TIM_ConfigClockSource+0xa6>
 8005590:	2b70      	cmp	r3, #112	; 0x70
 8005592:	d87b      	bhi.n	800568c <HAL_TIM_ConfigClockSource+0x16c>
 8005594:	2b60      	cmp	r3, #96	; 0x60
 8005596:	d050      	beq.n	800563a <HAL_TIM_ConfigClockSource+0x11a>
 8005598:	2b60      	cmp	r3, #96	; 0x60
 800559a:	d877      	bhi.n	800568c <HAL_TIM_ConfigClockSource+0x16c>
 800559c:	2b50      	cmp	r3, #80	; 0x50
 800559e:	d03c      	beq.n	800561a <HAL_TIM_ConfigClockSource+0xfa>
 80055a0:	2b50      	cmp	r3, #80	; 0x50
 80055a2:	d873      	bhi.n	800568c <HAL_TIM_ConfigClockSource+0x16c>
 80055a4:	2b40      	cmp	r3, #64	; 0x40
 80055a6:	d058      	beq.n	800565a <HAL_TIM_ConfigClockSource+0x13a>
 80055a8:	2b40      	cmp	r3, #64	; 0x40
 80055aa:	d86f      	bhi.n	800568c <HAL_TIM_ConfigClockSource+0x16c>
 80055ac:	2b30      	cmp	r3, #48	; 0x30
 80055ae:	d064      	beq.n	800567a <HAL_TIM_ConfigClockSource+0x15a>
 80055b0:	2b30      	cmp	r3, #48	; 0x30
 80055b2:	d86b      	bhi.n	800568c <HAL_TIM_ConfigClockSource+0x16c>
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d060      	beq.n	800567a <HAL_TIM_ConfigClockSource+0x15a>
 80055b8:	2b20      	cmp	r3, #32
 80055ba:	d867      	bhi.n	800568c <HAL_TIM_ConfigClockSource+0x16c>
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d05c      	beq.n	800567a <HAL_TIM_ConfigClockSource+0x15a>
 80055c0:	2b10      	cmp	r3, #16
 80055c2:	d05a      	beq.n	800567a <HAL_TIM_ConfigClockSource+0x15a>
 80055c4:	e062      	b.n	800568c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6818      	ldr	r0, [r3, #0]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	6899      	ldr	r1, [r3, #8]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f000 fa47 	bl	8005a68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	609a      	str	r2, [r3, #8]
      break;
 80055f2:	e04f      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6818      	ldr	r0, [r3, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	6899      	ldr	r1, [r3, #8]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f000 fa30 	bl	8005a68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689a      	ldr	r2, [r3, #8]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005616:	609a      	str	r2, [r3, #8]
      break;
 8005618:	e03c      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6818      	ldr	r0, [r3, #0]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	6859      	ldr	r1, [r3, #4]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	461a      	mov	r2, r3
 8005628:	f000 f9a7 	bl	800597a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2150      	movs	r1, #80	; 0x50
 8005632:	4618      	mov	r0, r3
 8005634:	f000 f9fe 	bl	8005a34 <TIM_ITRx_SetConfig>
      break;
 8005638:	e02c      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6818      	ldr	r0, [r3, #0]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	6859      	ldr	r1, [r3, #4]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	461a      	mov	r2, r3
 8005648:	f000 f9c5 	bl	80059d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2160      	movs	r1, #96	; 0x60
 8005652:	4618      	mov	r0, r3
 8005654:	f000 f9ee 	bl	8005a34 <TIM_ITRx_SetConfig>
      break;
 8005658:	e01c      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6818      	ldr	r0, [r3, #0]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	6859      	ldr	r1, [r3, #4]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	461a      	mov	r2, r3
 8005668:	f000 f987 	bl	800597a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2140      	movs	r1, #64	; 0x40
 8005672:	4618      	mov	r0, r3
 8005674:	f000 f9de 	bl	8005a34 <TIM_ITRx_SetConfig>
      break;
 8005678:	e00c      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4619      	mov	r1, r3
 8005684:	4610      	mov	r0, r2
 8005686:	f000 f9d5 	bl	8005a34 <TIM_ITRx_SetConfig>
      break;
 800568a:	e003      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	73fb      	strb	r3, [r7, #15]
      break;
 8005690:	e000      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005692:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c6:	d00f      	beq.n	80056e8 <TIM_Base_SetConfig+0x38>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a2b      	ldr	r2, [pc, #172]	; (8005778 <TIM_Base_SetConfig+0xc8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00b      	beq.n	80056e8 <TIM_Base_SetConfig+0x38>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a2a      	ldr	r2, [pc, #168]	; (800577c <TIM_Base_SetConfig+0xcc>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d007      	beq.n	80056e8 <TIM_Base_SetConfig+0x38>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a29      	ldr	r2, [pc, #164]	; (8005780 <TIM_Base_SetConfig+0xd0>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d003      	beq.n	80056e8 <TIM_Base_SetConfig+0x38>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a28      	ldr	r2, [pc, #160]	; (8005784 <TIM_Base_SetConfig+0xd4>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d108      	bne.n	80056fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005700:	d017      	beq.n	8005732 <TIM_Base_SetConfig+0x82>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a1c      	ldr	r2, [pc, #112]	; (8005778 <TIM_Base_SetConfig+0xc8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d013      	beq.n	8005732 <TIM_Base_SetConfig+0x82>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a1b      	ldr	r2, [pc, #108]	; (800577c <TIM_Base_SetConfig+0xcc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00f      	beq.n	8005732 <TIM_Base_SetConfig+0x82>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a1a      	ldr	r2, [pc, #104]	; (8005780 <TIM_Base_SetConfig+0xd0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00b      	beq.n	8005732 <TIM_Base_SetConfig+0x82>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a19      	ldr	r2, [pc, #100]	; (8005784 <TIM_Base_SetConfig+0xd4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d007      	beq.n	8005732 <TIM_Base_SetConfig+0x82>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a18      	ldr	r2, [pc, #96]	; (8005788 <TIM_Base_SetConfig+0xd8>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d003      	beq.n	8005732 <TIM_Base_SetConfig+0x82>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a17      	ldr	r2, [pc, #92]	; (800578c <TIM_Base_SetConfig+0xdc>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d108      	bne.n	8005744 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4313      	orrs	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	615a      	str	r2, [r3, #20]
}
 800576e:	bf00      	nop
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr
 8005778:	40000400 	.word	0x40000400
 800577c:	40000800 	.word	0x40000800
 8005780:	40000c00 	.word	0x40000c00
 8005784:	40010800 	.word	0x40010800
 8005788:	40010c00 	.word	0x40010c00
 800578c:	40011000 	.word	0x40011000

08005790 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	f023 0201 	bic.w	r2, r3, #1
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 0303 	bic.w	r3, r3, #3
 80057c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f023 0302 	bic.w	r3, r3, #2
 80057d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	621a      	str	r2, [r3, #32]
}
 80057fe:	bf00      	nop
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	bc80      	pop	{r7}
 8005806:	4770      	bx	lr

08005808 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	f023 0210 	bic.w	r2, r3, #16
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800583e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	021b      	lsls	r3, r3, #8
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	4313      	orrs	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f023 0320 	bic.w	r3, r3, #32
 8005852:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	4313      	orrs	r3, r2
 800585e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	621a      	str	r2, [r3, #32]
}
 800587a:	bf00      	nop
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	bc80      	pop	{r7}
 8005882:	4770      	bx	lr

08005884 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0303 	bic.w	r3, r3, #3
 80058ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	021b      	lsls	r3, r3, #8
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	621a      	str	r2, [r3, #32]
}
 80058f4:	bf00      	nop
 80058f6:	371c      	adds	r7, #28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc80      	pop	{r7}
 80058fc:	4770      	bx	lr

080058fe <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058fe:	b480      	push	{r7}
 8005900:	b087      	sub	sp, #28
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005934:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	021b      	lsls	r3, r3, #8
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	031b      	lsls	r3, r3, #12
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	4313      	orrs	r3, r2
 8005954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	621a      	str	r2, [r3, #32]
}
 8005970:	bf00      	nop
 8005972:	371c      	adds	r7, #28
 8005974:	46bd      	mov	sp, r7
 8005976:	bc80      	pop	{r7}
 8005978:	4770      	bx	lr

0800597a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800597a:	b480      	push	{r7}
 800597c:	b087      	sub	sp, #28
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	f023 0201 	bic.w	r2, r3, #1
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	011b      	lsls	r3, r3, #4
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f023 030a 	bic.w	r3, r3, #10
 80059b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	4313      	orrs	r3, r2
 80059be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	621a      	str	r2, [r3, #32]
}
 80059cc:	bf00      	nop
 80059ce:	371c      	adds	r7, #28
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr

080059d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b087      	sub	sp, #28
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	f023 0210 	bic.w	r2, r3, #16
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	031b      	lsls	r3, r3, #12
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr

08005a34 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	f043 0307 	orr.w	r3, r3, #7
 8005a56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	609a      	str	r2, [r3, #8]
}
 8005a5e:	bf00      	nop
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bc80      	pop	{r7}
 8005a66:	4770      	bx	lr

08005a68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
 8005a74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	021a      	lsls	r2, r3, #8
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	609a      	str	r2, [r3, #8]
}
 8005a9c:	bf00      	nop
 8005a9e:	371c      	adds	r7, #28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bc80      	pop	{r7}
 8005aa4:	4770      	bx	lr

08005aa6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b087      	sub	sp, #28
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	60f8      	str	r0, [r7, #12]
 8005aae:	60b9      	str	r1, [r7, #8]
 8005ab0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f003 031f 	and.w	r3, r3, #31
 8005ab8:	2201      	movs	r2, #1
 8005aba:	fa02 f303 	lsl.w	r3, r2, r3
 8005abe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6a1a      	ldr	r2, [r3, #32]
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	401a      	ands	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a1a      	ldr	r2, [r3, #32]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f003 031f 	and.w	r3, r3, #31
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	fa01 f303 	lsl.w	r3, r1, r3
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	621a      	str	r2, [r3, #32]
}
 8005ae4:	bf00      	nop
 8005ae6:	371c      	adds	r7, #28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bc80      	pop	{r7}
 8005aec:	4770      	bx	lr
	...

08005af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e046      	b.n	8005b96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4a:	d00e      	beq.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a13      	ldr	r2, [pc, #76]	; (8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d009      	beq.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a12      	ldr	r2, [pc, #72]	; (8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d004      	beq.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a10      	ldr	r2, [pc, #64]	; (8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d10c      	bne.n	8005b84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr
 8005ba0:	40000400 	.word	0x40000400
 8005ba4:	40000800 	.word	0x40000800
 8005ba8:	40010800 	.word	0x40010800

08005bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e042      	b.n	8005c44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d106      	bne.n	8005bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7fd fb6a 	bl	80032ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2224      	movs	r2, #36	; 0x24
 8005bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f9af 	bl	8005f54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	691a      	ldr	r2, [r3, #16]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695a      	ldr	r2, [r3, #20]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08a      	sub	sp, #40	; 0x28
 8005c50:	af02      	add	r7, sp, #8
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	603b      	str	r3, [r7, #0]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	d16d      	bne.n	8005d48 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <HAL_UART_Transmit+0x2c>
 8005c72:	88fb      	ldrh	r3, [r7, #6]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e066      	b.n	8005d4a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2221      	movs	r2, #33	; 0x21
 8005c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c8a:	f7fd fbdd 	bl	8003448 <HAL_GetTick>
 8005c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	88fa      	ldrh	r2, [r7, #6]
 8005c94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	88fa      	ldrh	r2, [r7, #6]
 8005c9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca4:	d108      	bne.n	8005cb8 <HAL_UART_Transmit+0x6c>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d104      	bne.n	8005cb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	61bb      	str	r3, [r7, #24]
 8005cb6:	e003      	b.n	8005cc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005cc0:	e02a      	b.n	8005d18 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	2180      	movs	r1, #128	; 0x80
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f8d2 	bl	8005e76 <UART_WaitOnFlagUntilTimeout>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e036      	b.n	8005d4a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10b      	bne.n	8005cfa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	3302      	adds	r3, #2
 8005cf6:	61bb      	str	r3, [r7, #24]
 8005cf8:	e007      	b.n	8005d0a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	781a      	ldrb	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	3301      	adds	r3, #1
 8005d08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	3b01      	subs	r3, #1
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1cf      	bne.n	8005cc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	2140      	movs	r1, #64	; 0x40
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f8a2 	bl	8005e76 <UART_WaitOnFlagUntilTimeout>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e006      	b.n	8005d4a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	e000      	b.n	8005d4a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005d48:	2302      	movs	r3, #2
  }
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3720      	adds	r7, #32
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b08a      	sub	sp, #40	; 0x28
 8005d56:	af02      	add	r7, sp, #8
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	603b      	str	r3, [r7, #0]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	d17c      	bne.n	8005e6c <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <HAL_UART_Receive+0x2c>
 8005d78:	88fb      	ldrh	r3, [r7, #6]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e075      	b.n	8005e6e <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2222      	movs	r2, #34	; 0x22
 8005d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d96:	f7fd fb57 	bl	8003448 <HAL_GetTick>
 8005d9a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	88fa      	ldrh	r2, [r7, #6]
 8005da0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	88fa      	ldrh	r2, [r7, #6]
 8005da6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db0:	d108      	bne.n	8005dc4 <HAL_UART_Receive+0x72>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d104      	bne.n	8005dc4 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	61bb      	str	r3, [r7, #24]
 8005dc2:	e003      	b.n	8005dcc <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005dcc:	e043      	b.n	8005e56 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2120      	movs	r1, #32
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 f84c 	bl	8005e76 <UART_WaitOnFlagUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e042      	b.n	8005e6e <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10c      	bne.n	8005e08 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	3302      	adds	r3, #2
 8005e04:	61bb      	str	r3, [r7, #24]
 8005e06:	e01f      	b.n	8005e48 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e10:	d007      	beq.n	8005e22 <HAL_UART_Receive+0xd0>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10a      	bne.n	8005e30 <HAL_UART_Receive+0xde>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d106      	bne.n	8005e30 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	e008      	b.n	8005e42 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	3301      	adds	r3, #1
 8005e46:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1b6      	bne.n	8005dce <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	e000      	b.n	8005e6e <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e6c:	2302      	movs	r3, #2
  }
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3720      	adds	r7, #32
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b090      	sub	sp, #64	; 0x40
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	603b      	str	r3, [r7, #0]
 8005e82:	4613      	mov	r3, r2
 8005e84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e86:	e050      	b.n	8005f2a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8e:	d04c      	beq.n	8005f2a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d007      	beq.n	8005ea6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e96:	f7fd fad7 	bl	8003448 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d241      	bcs.n	8005f2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	330c      	adds	r3, #12
 8005eac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	e853 3f00 	ldrex	r3, [r3]
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	330c      	adds	r3, #12
 8005ec4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ec6:	637a      	str	r2, [r7, #52]	; 0x34
 8005ec8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ece:	e841 2300 	strex	r3, r2, [r1]
 8005ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1e5      	bne.n	8005ea6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3314      	adds	r3, #20
 8005ee0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	e853 3f00 	ldrex	r3, [r3]
 8005ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f023 0301 	bic.w	r3, r3, #1
 8005ef0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3314      	adds	r3, #20
 8005ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005efa:	623a      	str	r2, [r7, #32]
 8005efc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efe:	69f9      	ldr	r1, [r7, #28]
 8005f00:	6a3a      	ldr	r2, [r7, #32]
 8005f02:	e841 2300 	strex	r3, r2, [r1]
 8005f06:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1e5      	bne.n	8005eda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2220      	movs	r2, #32
 8005f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e00f      	b.n	8005f4a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	4013      	ands	r3, r2
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	bf0c      	ite	eq
 8005f3a:	2301      	moveq	r3, #1
 8005f3c:	2300      	movne	r3, #0
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	461a      	mov	r2, r3
 8005f42:	79fb      	ldrb	r3, [r7, #7]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d09f      	beq.n	8005e88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3740      	adds	r7, #64	; 0x40
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	431a      	orrs	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005f94:	f023 030c 	bic.w	r3, r3, #12
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6812      	ldr	r2, [r2, #0]
 8005f9c:	68b9      	ldr	r1, [r7, #8]
 8005f9e:	430b      	orrs	r3, r1
 8005fa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	699a      	ldr	r2, [r3, #24]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a55      	ldr	r2, [pc, #340]	; (8006114 <UART_SetConfig+0x1c0>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d103      	bne.n	8005fca <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005fc2:	f7fe fa95 	bl	80044f0 <HAL_RCC_GetPCLK2Freq>
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	e002      	b.n	8005fd0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005fca:	f7fe fa7d 	bl	80044c8 <HAL_RCC_GetPCLK1Freq>
 8005fce:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fd8:	d14c      	bne.n	8006074 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	009a      	lsls	r2, r3, #2
 8005fe4:	441a      	add	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff0:	4a49      	ldr	r2, [pc, #292]	; (8006118 <UART_SetConfig+0x1c4>)
 8005ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	0119      	lsls	r1, r3, #4
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	009a      	lsls	r2, r3, #2
 8006004:	441a      	add	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	005b      	lsls	r3, r3, #1
 800600c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006010:	4b41      	ldr	r3, [pc, #260]	; (8006118 <UART_SetConfig+0x1c4>)
 8006012:	fba3 0302 	umull	r0, r3, r3, r2
 8006016:	095b      	lsrs	r3, r3, #5
 8006018:	2064      	movs	r0, #100	; 0x64
 800601a:	fb00 f303 	mul.w	r3, r0, r3
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	3332      	adds	r3, #50	; 0x32
 8006024:	4a3c      	ldr	r2, [pc, #240]	; (8006118 <UART_SetConfig+0x1c4>)
 8006026:	fba2 2303 	umull	r2, r3, r2, r3
 800602a:	095b      	lsrs	r3, r3, #5
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006032:	4419      	add	r1, r3
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4613      	mov	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	009a      	lsls	r2, r3, #2
 800603e:	441a      	add	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	fbb2 f2f3 	udiv	r2, r2, r3
 800604a:	4b33      	ldr	r3, [pc, #204]	; (8006118 <UART_SetConfig+0x1c4>)
 800604c:	fba3 0302 	umull	r0, r3, r3, r2
 8006050:	095b      	lsrs	r3, r3, #5
 8006052:	2064      	movs	r0, #100	; 0x64
 8006054:	fb00 f303 	mul.w	r3, r0, r3
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	3332      	adds	r3, #50	; 0x32
 800605e:	4a2e      	ldr	r2, [pc, #184]	; (8006118 <UART_SetConfig+0x1c4>)
 8006060:	fba2 2303 	umull	r2, r3, r2, r3
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	f003 0207 	and.w	r2, r3, #7
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	440a      	add	r2, r1
 8006070:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006072:	e04a      	b.n	800610a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	009a      	lsls	r2, r3, #2
 800607e:	441a      	add	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	fbb2 f3f3 	udiv	r3, r2, r3
 800608a:	4a23      	ldr	r2, [pc, #140]	; (8006118 <UART_SetConfig+0x1c4>)
 800608c:	fba2 2303 	umull	r2, r3, r2, r3
 8006090:	095b      	lsrs	r3, r3, #5
 8006092:	0119      	lsls	r1, r3, #4
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4613      	mov	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	009a      	lsls	r2, r3, #2
 800609e:	441a      	add	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80060aa:	4b1b      	ldr	r3, [pc, #108]	; (8006118 <UART_SetConfig+0x1c4>)
 80060ac:	fba3 0302 	umull	r0, r3, r3, r2
 80060b0:	095b      	lsrs	r3, r3, #5
 80060b2:	2064      	movs	r0, #100	; 0x64
 80060b4:	fb00 f303 	mul.w	r3, r0, r3
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	3332      	adds	r3, #50	; 0x32
 80060be:	4a16      	ldr	r2, [pc, #88]	; (8006118 <UART_SetConfig+0x1c4>)
 80060c0:	fba2 2303 	umull	r2, r3, r2, r3
 80060c4:	095b      	lsrs	r3, r3, #5
 80060c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060ca:	4419      	add	r1, r3
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4613      	mov	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	009a      	lsls	r2, r3, #2
 80060d6:	441a      	add	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	fbb2 f2f3 	udiv	r2, r2, r3
 80060e2:	4b0d      	ldr	r3, [pc, #52]	; (8006118 <UART_SetConfig+0x1c4>)
 80060e4:	fba3 0302 	umull	r0, r3, r3, r2
 80060e8:	095b      	lsrs	r3, r3, #5
 80060ea:	2064      	movs	r0, #100	; 0x64
 80060ec:	fb00 f303 	mul.w	r3, r0, r3
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	3332      	adds	r3, #50	; 0x32
 80060f6:	4a08      	ldr	r2, [pc, #32]	; (8006118 <UART_SetConfig+0x1c4>)
 80060f8:	fba2 2303 	umull	r2, r3, r2, r3
 80060fc:	095b      	lsrs	r3, r3, #5
 80060fe:	f003 020f 	and.w	r2, r3, #15
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	440a      	add	r2, r1
 8006108:	609a      	str	r2, [r3, #8]
}
 800610a:	bf00      	nop
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	40013800 	.word	0x40013800
 8006118:	51eb851f 	.word	0x51eb851f

0800611c <__libc_init_array>:
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	2600      	movs	r6, #0
 8006120:	4d0c      	ldr	r5, [pc, #48]	; (8006154 <__libc_init_array+0x38>)
 8006122:	4c0d      	ldr	r4, [pc, #52]	; (8006158 <__libc_init_array+0x3c>)
 8006124:	1b64      	subs	r4, r4, r5
 8006126:	10a4      	asrs	r4, r4, #2
 8006128:	42a6      	cmp	r6, r4
 800612a:	d109      	bne.n	8006140 <__libc_init_array+0x24>
 800612c:	f000 f822 	bl	8006174 <_init>
 8006130:	2600      	movs	r6, #0
 8006132:	4d0a      	ldr	r5, [pc, #40]	; (800615c <__libc_init_array+0x40>)
 8006134:	4c0a      	ldr	r4, [pc, #40]	; (8006160 <__libc_init_array+0x44>)
 8006136:	1b64      	subs	r4, r4, r5
 8006138:	10a4      	asrs	r4, r4, #2
 800613a:	42a6      	cmp	r6, r4
 800613c:	d105      	bne.n	800614a <__libc_init_array+0x2e>
 800613e:	bd70      	pop	{r4, r5, r6, pc}
 8006140:	f855 3b04 	ldr.w	r3, [r5], #4
 8006144:	4798      	blx	r3
 8006146:	3601      	adds	r6, #1
 8006148:	e7ee      	b.n	8006128 <__libc_init_array+0xc>
 800614a:	f855 3b04 	ldr.w	r3, [r5], #4
 800614e:	4798      	blx	r3
 8006150:	3601      	adds	r6, #1
 8006152:	e7f2      	b.n	800613a <__libc_init_array+0x1e>
 8006154:	080061c0 	.word	0x080061c0
 8006158:	080061c0 	.word	0x080061c0
 800615c:	080061c0 	.word	0x080061c0
 8006160:	080061c4 	.word	0x080061c4

08006164 <memset>:
 8006164:	4603      	mov	r3, r0
 8006166:	4402      	add	r2, r0
 8006168:	4293      	cmp	r3, r2
 800616a:	d100      	bne.n	800616e <memset+0xa>
 800616c:	4770      	bx	lr
 800616e:	f803 1b01 	strb.w	r1, [r3], #1
 8006172:	e7f9      	b.n	8006168 <memset+0x4>

08006174 <_init>:
 8006174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006176:	bf00      	nop
 8006178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617a:	bc08      	pop	{r3}
 800617c:	469e      	mov	lr, r3
 800617e:	4770      	bx	lr

08006180 <_fini>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	bf00      	nop
 8006184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006186:	bc08      	pop	{r3}
 8006188:	469e      	mov	lr, r3
 800618a:	4770      	bx	lr
