
nowyManipulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800602c  0800602c  0001602c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006058  08006058  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08006058  08006058  00016058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006060  08006060  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006060  08006060  00016060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006064  08006064  00016064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000018  08006080  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08006080  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec4d  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002261  00000000  00000000  0002ec8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00030ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00031db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d37  00000000  00000000  00032b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dae  00000000  00000000  000498bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e4f4  00000000  00000000  0005a66d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8b61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc0  00000000  00000000  000e8bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000018 	.word	0x20000018
 8000158:	00000000 	.word	0x00000000
 800015c:	08006014 	.word	0x08006014

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000001c 	.word	0x2000001c
 8000178:	08006014 	.word	0x08006014

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__gesf2>:
 8000398:	f04f 3cff 	mov.w	ip, #4294967295
 800039c:	e006      	b.n	80003ac <__cmpsf2+0x4>
 800039e:	bf00      	nop

080003a0 <__lesf2>:
 80003a0:	f04f 0c01 	mov.w	ip, #1
 80003a4:	e002      	b.n	80003ac <__cmpsf2+0x4>
 80003a6:	bf00      	nop

080003a8 <__cmpsf2>:
 80003a8:	f04f 0c01 	mov.w	ip, #1
 80003ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80003b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80003b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003bc:	bf18      	it	ne
 80003be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003c2:	d011      	beq.n	80003e8 <__cmpsf2+0x40>
 80003c4:	b001      	add	sp, #4
 80003c6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80003ca:	bf18      	it	ne
 80003cc:	ea90 0f01 	teqne	r0, r1
 80003d0:	bf58      	it	pl
 80003d2:	ebb2 0003 	subspl.w	r0, r2, r3
 80003d6:	bf88      	it	hi
 80003d8:	17c8      	asrhi	r0, r1, #31
 80003da:	bf38      	it	cc
 80003dc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80003e0:	bf18      	it	ne
 80003e2:	f040 0001 	orrne.w	r0, r0, #1
 80003e6:	4770      	bx	lr
 80003e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003ec:	d102      	bne.n	80003f4 <__cmpsf2+0x4c>
 80003ee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80003f2:	d105      	bne.n	8000400 <__cmpsf2+0x58>
 80003f4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80003f8:	d1e4      	bne.n	80003c4 <__cmpsf2+0x1c>
 80003fa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80003fe:	d0e1      	beq.n	80003c4 <__cmpsf2+0x1c>
 8000400:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop

08000408 <__aeabi_cfrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	4608      	mov	r0, r1
 800040c:	4661      	mov	r1, ip
 800040e:	e7ff      	b.n	8000410 <__aeabi_cfcmpeq>

08000410 <__aeabi_cfcmpeq>:
 8000410:	b50f      	push	{r0, r1, r2, r3, lr}
 8000412:	f7ff ffc9 	bl	80003a8 <__cmpsf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	bf48      	it	mi
 800041a:	f110 0f00 	cmnmi.w	r0, #0
 800041e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000420 <__aeabi_fcmpeq>:
 8000420:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000424:	f7ff fff4 	bl	8000410 <__aeabi_cfcmpeq>
 8000428:	bf0c      	ite	eq
 800042a:	2001      	moveq	r0, #1
 800042c:	2000      	movne	r0, #0
 800042e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000432:	bf00      	nop

08000434 <__aeabi_fcmplt>:
 8000434:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000438:	f7ff ffea 	bl	8000410 <__aeabi_cfcmpeq>
 800043c:	bf34      	ite	cc
 800043e:	2001      	movcc	r0, #1
 8000440:	2000      	movcs	r0, #0
 8000442:	f85d fb08 	ldr.w	pc, [sp], #8
 8000446:	bf00      	nop

08000448 <__aeabi_fcmple>:
 8000448:	f84d ed08 	str.w	lr, [sp, #-8]!
 800044c:	f7ff ffe0 	bl	8000410 <__aeabi_cfcmpeq>
 8000450:	bf94      	ite	ls
 8000452:	2001      	movls	r0, #1
 8000454:	2000      	movhi	r0, #0
 8000456:	f85d fb08 	ldr.w	pc, [sp], #8
 800045a:	bf00      	nop

0800045c <__aeabi_fcmpge>:
 800045c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000460:	f7ff ffd2 	bl	8000408 <__aeabi_cfrcmple>
 8000464:	bf94      	ite	ls
 8000466:	2001      	movls	r0, #1
 8000468:	2000      	movhi	r0, #0
 800046a:	f85d fb08 	ldr.w	pc, [sp], #8
 800046e:	bf00      	nop

08000470 <__aeabi_fcmpgt>:
 8000470:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000474:	f7ff ffc8 	bl	8000408 <__aeabi_cfrcmple>
 8000478:	bf34      	ite	cc
 800047a:	2001      	movcc	r0, #1
 800047c:	2000      	movcs	r0, #0
 800047e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000482:	bf00      	nop

08000484 <__aeabi_f2iz>:
 8000484:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000488:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800048c:	d30f      	bcc.n	80004ae <__aeabi_f2iz+0x2a>
 800048e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000492:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000496:	d90d      	bls.n	80004b4 <__aeabi_f2iz+0x30>
 8000498:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800049c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004a0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80004a4:	fa23 f002 	lsr.w	r0, r3, r2
 80004a8:	bf18      	it	ne
 80004aa:	4240      	negne	r0, r0
 80004ac:	4770      	bx	lr
 80004ae:	f04f 0000 	mov.w	r0, #0
 80004b2:	4770      	bx	lr
 80004b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004b8:	d101      	bne.n	80004be <__aeabi_f2iz+0x3a>
 80004ba:	0242      	lsls	r2, r0, #9
 80004bc:	d105      	bne.n	80004ca <__aeabi_f2iz+0x46>
 80004be:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80004c2:	bf08      	it	eq
 80004c4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80004c8:	4770      	bx	lr
 80004ca:	f04f 0000 	mov.w	r0, #0
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <__aeabi_uldivmod>:
 8000510:	b953      	cbnz	r3, 8000528 <__aeabi_uldivmod+0x18>
 8000512:	b94a      	cbnz	r2, 8000528 <__aeabi_uldivmod+0x18>
 8000514:	2900      	cmp	r1, #0
 8000516:	bf08      	it	eq
 8000518:	2800      	cmpeq	r0, #0
 800051a:	bf1c      	itt	ne
 800051c:	f04f 31ff 	movne.w	r1, #4294967295
 8000520:	f04f 30ff 	movne.w	r0, #4294967295
 8000524:	f000 b976 	b.w	8000814 <__aeabi_idiv0>
 8000528:	f1ad 0c08 	sub.w	ip, sp, #8
 800052c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000530:	f000 f806 	bl	8000540 <__udivmoddi4>
 8000534:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800053c:	b004      	add	sp, #16
 800053e:	4770      	bx	lr

08000540 <__udivmoddi4>:
 8000540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000544:	9e08      	ldr	r6, [sp, #32]
 8000546:	460d      	mov	r5, r1
 8000548:	4604      	mov	r4, r0
 800054a:	4688      	mov	r8, r1
 800054c:	2b00      	cmp	r3, #0
 800054e:	d14d      	bne.n	80005ec <__udivmoddi4+0xac>
 8000550:	428a      	cmp	r2, r1
 8000552:	4694      	mov	ip, r2
 8000554:	d968      	bls.n	8000628 <__udivmoddi4+0xe8>
 8000556:	fab2 f282 	clz	r2, r2
 800055a:	b152      	cbz	r2, 8000572 <__udivmoddi4+0x32>
 800055c:	fa01 f302 	lsl.w	r3, r1, r2
 8000560:	f1c2 0120 	rsb	r1, r2, #32
 8000564:	fa20 f101 	lsr.w	r1, r0, r1
 8000568:	fa0c fc02 	lsl.w	ip, ip, r2
 800056c:	ea41 0803 	orr.w	r8, r1, r3
 8000570:	4094      	lsls	r4, r2
 8000572:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000576:	fbb8 f7f1 	udiv	r7, r8, r1
 800057a:	fa1f fe8c 	uxth.w	lr, ip
 800057e:	fb01 8817 	mls	r8, r1, r7, r8
 8000582:	fb07 f00e 	mul.w	r0, r7, lr
 8000586:	0c23      	lsrs	r3, r4, #16
 8000588:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058c:	4298      	cmp	r0, r3
 800058e:	d90a      	bls.n	80005a6 <__udivmoddi4+0x66>
 8000590:	eb1c 0303 	adds.w	r3, ip, r3
 8000594:	f107 35ff 	add.w	r5, r7, #4294967295
 8000598:	f080 811e 	bcs.w	80007d8 <__udivmoddi4+0x298>
 800059c:	4298      	cmp	r0, r3
 800059e:	f240 811b 	bls.w	80007d8 <__udivmoddi4+0x298>
 80005a2:	3f02      	subs	r7, #2
 80005a4:	4463      	add	r3, ip
 80005a6:	1a1b      	subs	r3, r3, r0
 80005a8:	fbb3 f0f1 	udiv	r0, r3, r1
 80005ac:	fb01 3310 	mls	r3, r1, r0, r3
 80005b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80005b4:	b2a4      	uxth	r4, r4
 80005b6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ba:	45a6      	cmp	lr, r4
 80005bc:	d90a      	bls.n	80005d4 <__udivmoddi4+0x94>
 80005be:	eb1c 0404 	adds.w	r4, ip, r4
 80005c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80005c6:	f080 8109 	bcs.w	80007dc <__udivmoddi4+0x29c>
 80005ca:	45a6      	cmp	lr, r4
 80005cc:	f240 8106 	bls.w	80007dc <__udivmoddi4+0x29c>
 80005d0:	4464      	add	r4, ip
 80005d2:	3802      	subs	r0, #2
 80005d4:	2100      	movs	r1, #0
 80005d6:	eba4 040e 	sub.w	r4, r4, lr
 80005da:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80005de:	b11e      	cbz	r6, 80005e8 <__udivmoddi4+0xa8>
 80005e0:	2300      	movs	r3, #0
 80005e2:	40d4      	lsrs	r4, r2
 80005e4:	e9c6 4300 	strd	r4, r3, [r6]
 80005e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ec:	428b      	cmp	r3, r1
 80005ee:	d908      	bls.n	8000602 <__udivmoddi4+0xc2>
 80005f0:	2e00      	cmp	r6, #0
 80005f2:	f000 80ee 	beq.w	80007d2 <__udivmoddi4+0x292>
 80005f6:	2100      	movs	r1, #0
 80005f8:	e9c6 0500 	strd	r0, r5, [r6]
 80005fc:	4608      	mov	r0, r1
 80005fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000602:	fab3 f183 	clz	r1, r3
 8000606:	2900      	cmp	r1, #0
 8000608:	d14a      	bne.n	80006a0 <__udivmoddi4+0x160>
 800060a:	42ab      	cmp	r3, r5
 800060c:	d302      	bcc.n	8000614 <__udivmoddi4+0xd4>
 800060e:	4282      	cmp	r2, r0
 8000610:	f200 80fc 	bhi.w	800080c <__udivmoddi4+0x2cc>
 8000614:	1a84      	subs	r4, r0, r2
 8000616:	eb65 0303 	sbc.w	r3, r5, r3
 800061a:	2001      	movs	r0, #1
 800061c:	4698      	mov	r8, r3
 800061e:	2e00      	cmp	r6, #0
 8000620:	d0e2      	beq.n	80005e8 <__udivmoddi4+0xa8>
 8000622:	e9c6 4800 	strd	r4, r8, [r6]
 8000626:	e7df      	b.n	80005e8 <__udivmoddi4+0xa8>
 8000628:	b902      	cbnz	r2, 800062c <__udivmoddi4+0xec>
 800062a:	deff      	udf	#255	; 0xff
 800062c:	fab2 f282 	clz	r2, r2
 8000630:	2a00      	cmp	r2, #0
 8000632:	f040 8091 	bne.w	8000758 <__udivmoddi4+0x218>
 8000636:	eba1 000c 	sub.w	r0, r1, ip
 800063a:	2101      	movs	r1, #1
 800063c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000640:	fa1f fe8c 	uxth.w	lr, ip
 8000644:	fbb0 f3f7 	udiv	r3, r0, r7
 8000648:	fb07 0013 	mls	r0, r7, r3, r0
 800064c:	0c25      	lsrs	r5, r4, #16
 800064e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000652:	fb0e f003 	mul.w	r0, lr, r3
 8000656:	42a8      	cmp	r0, r5
 8000658:	d908      	bls.n	800066c <__udivmoddi4+0x12c>
 800065a:	eb1c 0505 	adds.w	r5, ip, r5
 800065e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000662:	d202      	bcs.n	800066a <__udivmoddi4+0x12a>
 8000664:	42a8      	cmp	r0, r5
 8000666:	f200 80ce 	bhi.w	8000806 <__udivmoddi4+0x2c6>
 800066a:	4643      	mov	r3, r8
 800066c:	1a2d      	subs	r5, r5, r0
 800066e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000672:	fb07 5510 	mls	r5, r7, r0, r5
 8000676:	fb0e fe00 	mul.w	lr, lr, r0
 800067a:	b2a4      	uxth	r4, r4
 800067c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000680:	45a6      	cmp	lr, r4
 8000682:	d908      	bls.n	8000696 <__udivmoddi4+0x156>
 8000684:	eb1c 0404 	adds.w	r4, ip, r4
 8000688:	f100 35ff 	add.w	r5, r0, #4294967295
 800068c:	d202      	bcs.n	8000694 <__udivmoddi4+0x154>
 800068e:	45a6      	cmp	lr, r4
 8000690:	f200 80b6 	bhi.w	8000800 <__udivmoddi4+0x2c0>
 8000694:	4628      	mov	r0, r5
 8000696:	eba4 040e 	sub.w	r4, r4, lr
 800069a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800069e:	e79e      	b.n	80005de <__udivmoddi4+0x9e>
 80006a0:	f1c1 0720 	rsb	r7, r1, #32
 80006a4:	408b      	lsls	r3, r1
 80006a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80006aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80006ae:	fa25 fa07 	lsr.w	sl, r5, r7
 80006b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006b6:	fbba f8f9 	udiv	r8, sl, r9
 80006ba:	fa20 f307 	lsr.w	r3, r0, r7
 80006be:	fb09 aa18 	mls	sl, r9, r8, sl
 80006c2:	408d      	lsls	r5, r1
 80006c4:	fa1f fe8c 	uxth.w	lr, ip
 80006c8:	431d      	orrs	r5, r3
 80006ca:	fa00 f301 	lsl.w	r3, r0, r1
 80006ce:	fb08 f00e 	mul.w	r0, r8, lr
 80006d2:	0c2c      	lsrs	r4, r5, #16
 80006d4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80006d8:	42a0      	cmp	r0, r4
 80006da:	fa02 f201 	lsl.w	r2, r2, r1
 80006de:	d90b      	bls.n	80006f8 <__udivmoddi4+0x1b8>
 80006e0:	eb1c 0404 	adds.w	r4, ip, r4
 80006e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80006e8:	f080 8088 	bcs.w	80007fc <__udivmoddi4+0x2bc>
 80006ec:	42a0      	cmp	r0, r4
 80006ee:	f240 8085 	bls.w	80007fc <__udivmoddi4+0x2bc>
 80006f2:	f1a8 0802 	sub.w	r8, r8, #2
 80006f6:	4464      	add	r4, ip
 80006f8:	1a24      	subs	r4, r4, r0
 80006fa:	fbb4 f0f9 	udiv	r0, r4, r9
 80006fe:	fb09 4410 	mls	r4, r9, r0, r4
 8000702:	fb00 fe0e 	mul.w	lr, r0, lr
 8000706:	b2ad      	uxth	r5, r5
 8000708:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800070c:	45a6      	cmp	lr, r4
 800070e:	d908      	bls.n	8000722 <__udivmoddi4+0x1e2>
 8000710:	eb1c 0404 	adds.w	r4, ip, r4
 8000714:	f100 35ff 	add.w	r5, r0, #4294967295
 8000718:	d26c      	bcs.n	80007f4 <__udivmoddi4+0x2b4>
 800071a:	45a6      	cmp	lr, r4
 800071c:	d96a      	bls.n	80007f4 <__udivmoddi4+0x2b4>
 800071e:	3802      	subs	r0, #2
 8000720:	4464      	add	r4, ip
 8000722:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000726:	fba0 9502 	umull	r9, r5, r0, r2
 800072a:	eba4 040e 	sub.w	r4, r4, lr
 800072e:	42ac      	cmp	r4, r5
 8000730:	46c8      	mov	r8, r9
 8000732:	46ae      	mov	lr, r5
 8000734:	d356      	bcc.n	80007e4 <__udivmoddi4+0x2a4>
 8000736:	d053      	beq.n	80007e0 <__udivmoddi4+0x2a0>
 8000738:	2e00      	cmp	r6, #0
 800073a:	d069      	beq.n	8000810 <__udivmoddi4+0x2d0>
 800073c:	ebb3 0208 	subs.w	r2, r3, r8
 8000740:	eb64 040e 	sbc.w	r4, r4, lr
 8000744:	fa22 f301 	lsr.w	r3, r2, r1
 8000748:	fa04 f707 	lsl.w	r7, r4, r7
 800074c:	431f      	orrs	r7, r3
 800074e:	40cc      	lsrs	r4, r1
 8000750:	e9c6 7400 	strd	r7, r4, [r6]
 8000754:	2100      	movs	r1, #0
 8000756:	e747      	b.n	80005e8 <__udivmoddi4+0xa8>
 8000758:	fa0c fc02 	lsl.w	ip, ip, r2
 800075c:	f1c2 0120 	rsb	r1, r2, #32
 8000760:	fa25 f301 	lsr.w	r3, r5, r1
 8000764:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000768:	fa20 f101 	lsr.w	r1, r0, r1
 800076c:	4095      	lsls	r5, r2
 800076e:	430d      	orrs	r5, r1
 8000770:	fbb3 f1f7 	udiv	r1, r3, r7
 8000774:	fb07 3311 	mls	r3, r7, r1, r3
 8000778:	fa1f fe8c 	uxth.w	lr, ip
 800077c:	0c28      	lsrs	r0, r5, #16
 800077e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000782:	fb01 f30e 	mul.w	r3, r1, lr
 8000786:	4283      	cmp	r3, r0
 8000788:	fa04 f402 	lsl.w	r4, r4, r2
 800078c:	d908      	bls.n	80007a0 <__udivmoddi4+0x260>
 800078e:	eb1c 0000 	adds.w	r0, ip, r0
 8000792:	f101 38ff 	add.w	r8, r1, #4294967295
 8000796:	d22f      	bcs.n	80007f8 <__udivmoddi4+0x2b8>
 8000798:	4283      	cmp	r3, r0
 800079a:	d92d      	bls.n	80007f8 <__udivmoddi4+0x2b8>
 800079c:	3902      	subs	r1, #2
 800079e:	4460      	add	r0, ip
 80007a0:	1ac0      	subs	r0, r0, r3
 80007a2:	fbb0 f3f7 	udiv	r3, r0, r7
 80007a6:	fb07 0013 	mls	r0, r7, r3, r0
 80007aa:	b2ad      	uxth	r5, r5
 80007ac:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80007b0:	fb03 f00e 	mul.w	r0, r3, lr
 80007b4:	42a8      	cmp	r0, r5
 80007b6:	d908      	bls.n	80007ca <__udivmoddi4+0x28a>
 80007b8:	eb1c 0505 	adds.w	r5, ip, r5
 80007bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80007c0:	d216      	bcs.n	80007f0 <__udivmoddi4+0x2b0>
 80007c2:	42a8      	cmp	r0, r5
 80007c4:	d914      	bls.n	80007f0 <__udivmoddi4+0x2b0>
 80007c6:	3b02      	subs	r3, #2
 80007c8:	4465      	add	r5, ip
 80007ca:	1a28      	subs	r0, r5, r0
 80007cc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80007d0:	e738      	b.n	8000644 <__udivmoddi4+0x104>
 80007d2:	4631      	mov	r1, r6
 80007d4:	4630      	mov	r0, r6
 80007d6:	e707      	b.n	80005e8 <__udivmoddi4+0xa8>
 80007d8:	462f      	mov	r7, r5
 80007da:	e6e4      	b.n	80005a6 <__udivmoddi4+0x66>
 80007dc:	4618      	mov	r0, r3
 80007de:	e6f9      	b.n	80005d4 <__udivmoddi4+0x94>
 80007e0:	454b      	cmp	r3, r9
 80007e2:	d2a9      	bcs.n	8000738 <__udivmoddi4+0x1f8>
 80007e4:	ebb9 0802 	subs.w	r8, r9, r2
 80007e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80007ec:	3801      	subs	r0, #1
 80007ee:	e7a3      	b.n	8000738 <__udivmoddi4+0x1f8>
 80007f0:	4643      	mov	r3, r8
 80007f2:	e7ea      	b.n	80007ca <__udivmoddi4+0x28a>
 80007f4:	4628      	mov	r0, r5
 80007f6:	e794      	b.n	8000722 <__udivmoddi4+0x1e2>
 80007f8:	4641      	mov	r1, r8
 80007fa:	e7d1      	b.n	80007a0 <__udivmoddi4+0x260>
 80007fc:	46d0      	mov	r8, sl
 80007fe:	e77b      	b.n	80006f8 <__udivmoddi4+0x1b8>
 8000800:	4464      	add	r4, ip
 8000802:	3802      	subs	r0, #2
 8000804:	e747      	b.n	8000696 <__udivmoddi4+0x156>
 8000806:	3b02      	subs	r3, #2
 8000808:	4465      	add	r5, ip
 800080a:	e72f      	b.n	800066c <__udivmoddi4+0x12c>
 800080c:	4608      	mov	r0, r1
 800080e:	e706      	b.n	800061e <__udivmoddi4+0xde>
 8000810:	4631      	mov	r1, r6
 8000812:	e6e9      	b.n	80005e8 <__udivmoddi4+0xa8>

08000814 <__aeabi_idiv0>:
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop

08000818 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	4b50      	ldr	r3, [pc, #320]	; (8000970 <MX_GPIO_Init+0x158>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	4a4f      	ldr	r2, [pc, #316]	; (8000970 <MX_GPIO_Init+0x158>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	61d3      	str	r3, [r2, #28]
 800083a:	4b4d      	ldr	r3, [pc, #308]	; (8000970 <MX_GPIO_Init+0x158>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	4b4a      	ldr	r3, [pc, #296]	; (8000970 <MX_GPIO_Init+0x158>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	4a49      	ldr	r2, [pc, #292]	; (8000970 <MX_GPIO_Init+0x158>)
 800084c:	f043 0320 	orr.w	r3, r3, #32
 8000850:	61d3      	str	r3, [r2, #28]
 8000852:	4b47      	ldr	r3, [pc, #284]	; (8000970 <MX_GPIO_Init+0x158>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f003 0320 	and.w	r3, r3, #32
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b44      	ldr	r3, [pc, #272]	; (8000970 <MX_GPIO_Init+0x158>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	4a43      	ldr	r2, [pc, #268]	; (8000970 <MX_GPIO_Init+0x158>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	61d3      	str	r3, [r2, #28]
 800086a:	4b41      	ldr	r3, [pc, #260]	; (8000970 <MX_GPIO_Init+0x158>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b3e      	ldr	r3, [pc, #248]	; (8000970 <MX_GPIO_Init+0x158>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	4a3d      	ldr	r2, [pc, #244]	; (8000970 <MX_GPIO_Init+0x158>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	61d3      	str	r3, [r2, #28]
 8000882:	4b3b      	ldr	r3, [pc, #236]	; (8000970 <MX_GPIO_Init+0x158>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	4b38      	ldr	r3, [pc, #224]	; (8000970 <MX_GPIO_Init+0x158>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	4a37      	ldr	r2, [pc, #220]	; (8000970 <MX_GPIO_Init+0x158>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	61d3      	str	r3, [r2, #28]
 800089a:	4b35      	ldr	r3, [pc, #212]	; (8000970 <MX_GPIO_Init+0x158>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_GREEN_Pin|L_D1_Pin|LED_YELLOW_Pin
 80008a6:	2200      	movs	r2, #0
 80008a8:	f241 51ef 	movw	r1, #5615	; 0x15ef
 80008ac:	4831      	ldr	r0, [pc, #196]	; (8000974 <MX_GPIO_Init+0x15c>)
 80008ae:	f002 ffbb 	bl	8003828 <HAL_GPIO_WritePin>
                          |Czlon4_D1_Pin|Czlon3_D2_Pin|Czlon2_D2_Pin|Czlon3_D1_Pin
                          |L_D2_Pin|R_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Czlon1_D2_Pin|Czlon2_D1_Pin|Czlon5_D1_Pin
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 80008b8:	482f      	ldr	r0, [pc, #188]	; (8000978 <MX_GPIO_Init+0x160>)
 80008ba:	f002 ffb5 	bl	8003828 <HAL_GPIO_WritePin>
                          |Czlon4_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|CSN_Pin|Czlon1_D1_Pin|Czlon5_D2_Pin
 80008be:	2200      	movs	r2, #0
 80008c0:	f241 4136 	movw	r1, #5174	; 0x1436
 80008c4:	482d      	ldr	r0, [pc, #180]	; (800097c <MX_GPIO_Init+0x164>)
 80008c6:	f002 ffaf 	bl	8003828 <HAL_GPIO_WritePin>
                          |Podstawa_D2_Pin|Podstawa_D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R_D1_GPIO_Port, R_D1_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2104      	movs	r1, #4
 80008ce:	482c      	ldr	r0, [pc, #176]	; (8000980 <MX_GPIO_Init+0x168>)
 80008d0:	f002 ffaa 	bl	8003828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	4822      	ldr	r0, [pc, #136]	; (8000974 <MX_GPIO_Init+0x15c>)
 80008ec:	f002 fe0c 	bl	8003508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|L_D1_Pin|LED_YELLOW_Pin
 80008f0:	f241 53ef 	movw	r3, #5615	; 0x15ef
 80008f4:	617b      	str	r3, [r7, #20]
                          |Czlon4_D1_Pin|Czlon3_D2_Pin|Czlon2_D2_Pin|Czlon3_D1_Pin
                          |L_D2_Pin|R_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	481a      	ldr	r0, [pc, #104]	; (8000974 <MX_GPIO_Init+0x15c>)
 800090a:	f002 fdfd 	bl	8003508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Czlon1_D2_Pin|Czlon2_D1_Pin|Czlon5_D1_Pin
 800090e:	f44f 53d9 	mov.w	r3, #6944	; 0x1b20
 8000912:	617b      	str	r3, [r7, #20]
                          |Czlon4_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	4814      	ldr	r0, [pc, #80]	; (8000978 <MX_GPIO_Init+0x160>)
 8000928:	f002 fdee 	bl	8003508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin|Czlon1_D1_Pin|Czlon5_D2_Pin
 800092c:	f241 4336 	movw	r3, #5174	; 0x1436
 8000930:	617b      	str	r3, [r7, #20]
                          |Podstawa_D2_Pin|Podstawa_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <MX_GPIO_Init+0x164>)
 8000946:	f002 fddf 	bl	8003508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = R_D1_Pin;
 800094a:	2304      	movs	r3, #4
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R_D1_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4807      	ldr	r0, [pc, #28]	; (8000980 <MX_GPIO_Init+0x168>)
 8000962:	f002 fdd1 	bl	8003508 <HAL_GPIO_Init>

}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	; 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40020800 	.word	0x40020800
 8000978:	40020000 	.word	0x40020000
 800097c:	40020400 	.word	0x40020400
 8000980:	40020c00 	.word	0x40020c00

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098a:	f002 fc48 	bl	800321e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098e:	f000 fe31 	bl	80015f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000992:	f7ff ff41 	bl	8000818 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000996:	f002 fbaf 	bl	80030f8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800099a:	f001 ff8f 	bl	80028bc <MX_SPI2_Init>
  MX_TIM3_Init();
 800099e:	f002 f8e3 	bl	8002b68 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009a2:	f002 f96b 	bl	8002c7c <MX_TIM4_Init>
  MX_TIM5_Init();
 80009a6:	f002 f9fd 	bl	8002da4 <MX_TIM5_Init>
  MX_TIM2_Init();
 80009aa:	f002 f85f 	bl	8002a6c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	//nRF initialize and settings
	nRF24_Init(&hspi2);
 80009ae:	48a7      	ldr	r0, [pc, #668]	; (8000c4c <main+0x2c8>)
 80009b0:	f001 ff3e 	bl	8002830 <nRF24_Init>
	nRF24_SetRXAddress(0, "Odb");
 80009b4:	49a6      	ldr	r1, [pc, #664]	; (8000c50 <main+0x2cc>)
 80009b6:	2000      	movs	r0, #0
 80009b8:	f001 fe7f 	bl	80026ba <nRF24_SetRXAddress>
	nRF24_SetTXAddress("Nad");
 80009bc:	48a5      	ldr	r0, [pc, #660]	; (8000c54 <main+0x2d0>)
 80009be:	f001 feb5 	bl	800272c <nRF24_SetTXAddress>
	nRF24_RX_Mode();
 80009c2:	f001 fcc9 	bl	8002358 <nRF24_RX_Mode>

	//Set timer 2 to PWM function

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80009c6:	2100      	movs	r1, #0
 80009c8:	48a3      	ldr	r0, [pc, #652]	; (8000c58 <main+0x2d4>)
 80009ca:	f004 fba1 	bl	8005110 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80009ce:	2104      	movs	r1, #4
 80009d0:	48a1      	ldr	r0, [pc, #644]	; (8000c58 <main+0x2d4>)
 80009d2:	f004 fb9d 	bl	8005110 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80009d6:	2108      	movs	r1, #8
 80009d8:	489f      	ldr	r0, [pc, #636]	; (8000c58 <main+0x2d4>)
 80009da:	f004 fb99 	bl	8005110 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80009de:	210c      	movs	r1, #12
 80009e0:	489d      	ldr	r0, [pc, #628]	; (8000c58 <main+0x2d4>)
 80009e2:	f004 fb95 	bl	8005110 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80009e6:	2100      	movs	r1, #0
 80009e8:	489c      	ldr	r0, [pc, #624]	; (8000c5c <main+0x2d8>)
 80009ea:	f004 fb91 	bl	8005110 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80009ee:	2104      	movs	r1, #4
 80009f0:	489a      	ldr	r0, [pc, #616]	; (8000c5c <main+0x2d8>)
 80009f2:	f004 fb8d 	bl	8005110 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80009f6:	2108      	movs	r1, #8
 80009f8:	4898      	ldr	r0, [pc, #608]	; (8000c5c <main+0x2d8>)
 80009fa:	f004 fb89 	bl	8005110 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80009fe:	2104      	movs	r1, #4
 8000a00:	4897      	ldr	r0, [pc, #604]	; (8000c60 <main+0x2dc>)
 8000a02:	f004 fb85 	bl	8005110 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a06:	2100      	movs	r1, #0
 8000a08:	4896      	ldr	r0, [pc, #600]	; (8000c64 <main+0x2e0>)
 8000a0a:	f004 fb81 	bl	8005110 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000a0e:	210c      	movs	r1, #12
 8000a10:	4894      	ldr	r0, [pc, #592]	; (8000c64 <main+0x2e0>)
 8000a12:	f004 fb7d 	bl	8005110 <HAL_TIM_PWM_Start>
	time = HAL_GetTick();
 8000a16:	f002 fc67 	bl	80032e8 <HAL_GetTick>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	4a92      	ldr	r2, [pc, #584]	; (8000c68 <main+0x2e4>)
 8000a1e:	6013      	str	r3, [r2, #0]
	timereset = HAL_GetTick();
 8000a20:	f002 fc62 	bl	80032e8 <HAL_GetTick>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4a91      	ldr	r2, [pc, #580]	; (8000c6c <main+0x2e8>)
 8000a28:	6013      	str	r3, [r2, #0]
	timeauto = HAL_GetTick();
 8000a2a:	f002 fc5d 	bl	80032e8 <HAL_GetTick>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	4a8f      	ldr	r2, [pc, #572]	; (8000c70 <main+0x2ec>)
 8000a32:	6013      	str	r3, [r2, #0]
	stoppodst();
 8000a34:	f000 fec4 	bl	80017c0 <stoppodst>
	stopczlon5();
 8000a38:	f000 fff8 	bl	8001a2c <stopczlon5>
	stopczlon1();
 8000a3c:	f000 fefc 	bl	8001838 <stopczlon1>
	stopczlon2();
 8000a40:	f000 ff3a 	bl	80018b8 <stopczlon2>
	stopczlon3();
 8000a44:	f000 ff74 	bl	8001930 <stopczlon3>
	stopczlon4();
 8000a48:	f000 ffb0 	bl	80019ac <stopczlon4>
	servox0();
 8000a4c:	f001 fa7e 	bl	8001f4c <servox0>
	servoy0();
 8000a50:	f001 fab4 	bl	8001fbc <servoy0>

	autoY[2] = ((autoY[0] + autoY[1]) & 0xFF);
 8000a54:	4b87      	ldr	r3, [pc, #540]	; (8000c74 <main+0x2f0>)
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	4b86      	ldr	r3, [pc, #536]	; (8000c74 <main+0x2f0>)
 8000a5a:	785b      	ldrb	r3, [r3, #1]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b84      	ldr	r3, [pc, #528]	; (8000c74 <main+0x2f0>)
 8000a62:	709a      	strb	r2, [r3, #2]
	autoN[2] = ((autoN[0] + autoN[1]) & 0xFF);
 8000a64:	4b84      	ldr	r3, [pc, #528]	; (8000c78 <main+0x2f4>)
 8000a66:	781a      	ldrb	r2, [r3, #0]
 8000a68:	4b83      	ldr	r3, [pc, #524]	; (8000c78 <main+0x2f4>)
 8000a6a:	785b      	ldrb	r3, [r3, #1]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	4b81      	ldr	r3, [pc, #516]	; (8000c78 <main+0x2f4>)
 8000a72:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN WHILE */
	while (1) {

		//Check if there is receive message

		if (nRF24_RXAvailible()) {
 8000a74:	f001 febc 	bl	80027f0 <nRF24_RXAvailible>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f000 8136 	beq.w	8000cec <main+0x368>
			//if working blink diode once per second
			if (HAL_GetTick() - time > 1000) {
 8000a80:	f002 fc32 	bl	80032e8 <HAL_GetTick>
 8000a84:	4602      	mov	r2, r0
 8000a86:	4b78      	ldr	r3, [pc, #480]	; (8000c68 <main+0x2e4>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a90:	d908      	bls.n	8000aa4 <main+0x120>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a92:	2120      	movs	r1, #32
 8000a94:	4879      	ldr	r0, [pc, #484]	; (8000c7c <main+0x2f8>)
 8000a96:	f002 fedf 	bl	8003858 <HAL_GPIO_TogglePin>
				time = HAL_GetTick();
 8000a9a:	f002 fc25 	bl	80032e8 <HAL_GetTick>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a71      	ldr	r2, [pc, #452]	; (8000c68 <main+0x2e4>)
 8000aa2:	6013      	str	r3, [r2, #0]
			}
			//read received data and save to nrfdata variable
			nRF24_ReadRXPaylaod(nrfdata);
 8000aa4:	4876      	ldr	r0, [pc, #472]	; (8000c80 <main+0x2fc>)
 8000aa6:	f001 fe87 	bl	80027b8 <nRF24_ReadRXPaylaod>
			timereset = HAL_GetTick();
 8000aaa:	f002 fc1d 	bl	80032e8 <HAL_GetTick>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4a6e      	ldr	r2, [pc, #440]	; (8000c6c <main+0x2e8>)
 8000ab2:	6013      	str	r3, [r2, #0]

			//byte 1
			button = nrfdata[0] & 0b00000001; // acsii 1 dec 49
 8000ab4:	4b72      	ldr	r3, [pc, #456]	; (8000c80 <main+0x2fc>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b71      	ldr	r3, [pc, #452]	; (8000c84 <main+0x300>)
 8000ac0:	701a      	strb	r2, [r3, #0]
			button01 = (nrfdata[0] & 0b00000010) >> 1; // ascii 2 dec 50
 8000ac2:	4b6f      	ldr	r3, [pc, #444]	; (8000c80 <main+0x2fc>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	105b      	asrs	r3, r3, #1
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b6d      	ldr	r3, [pc, #436]	; (8000c88 <main+0x304>)
 8000ad2:	701a      	strb	r2, [r3, #0]
			button1A = (nrfdata[0] & 0b00000100) >> 2; // ascii 3 dec 51
 8000ad4:	4b6a      	ldr	r3, [pc, #424]	; (8000c80 <main+0x2fc>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	109b      	asrs	r3, r3, #2
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4b6a      	ldr	r3, [pc, #424]	; (8000c8c <main+0x308>)
 8000ae4:	701a      	strb	r2, [r3, #0]
			button1B = (nrfdata[0] & 0b00001000) >> 3; // ascii 4 dec 52
 8000ae6:	4b66      	ldr	r3, [pc, #408]	; (8000c80 <main+0x2fc>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	10db      	asrs	r3, r3, #3
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4b66      	ldr	r3, [pc, #408]	; (8000c90 <main+0x30c>)
 8000af6:	701a      	strb	r2, [r3, #0]
			button2A = (nrfdata[0] & 0b00010000) >> 4; // ascii 5 dec 53
 8000af8:	4b61      	ldr	r3, [pc, #388]	; (8000c80 <main+0x2fc>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	111b      	asrs	r3, r3, #4
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b63      	ldr	r3, [pc, #396]	; (8000c94 <main+0x310>)
 8000b08:	701a      	strb	r2, [r3, #0]
			button2B = (nrfdata[0] & 0b00100000) >> 5; // ascii 6 dec 54
 8000b0a:	4b5d      	ldr	r3, [pc, #372]	; (8000c80 <main+0x2fc>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	115b      	asrs	r3, r3, #5
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b5f      	ldr	r3, [pc, #380]	; (8000c98 <main+0x314>)
 8000b1a:	701a      	strb	r2, [r3, #0]
			button3A = (nrfdata[0] & 0b01000000) >> 6; // ascii 7 dec 55 otw
 8000b1c:	4b58      	ldr	r3, [pc, #352]	; (8000c80 <main+0x2fc>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	119b      	asrs	r3, r3, #6
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b5c      	ldr	r3, [pc, #368]	; (8000c9c <main+0x318>)
 8000b2c:	701a      	strb	r2, [r3, #0]
			button3B = (nrfdata[0] & 0b10000000) >> 7; // ascii 8 dec 56 zamk
 8000b2e:	4b54      	ldr	r3, [pc, #336]	; (8000c80 <main+0x2fc>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	09db      	lsrs	r3, r3, #7
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4b5a      	ldr	r3, [pc, #360]	; (8000ca0 <main+0x31c>)
 8000b38:	701a      	strb	r2, [r3, #0]

			//byte 2
			button4A = (nrfdata[1] & 0b00000001); // acsii 9 dec 57
 8000b3a:	4b51      	ldr	r3, [pc, #324]	; (8000c80 <main+0x2fc>)
 8000b3c:	785b      	ldrb	r3, [r3, #1]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	4b57      	ldr	r3, [pc, #348]	; (8000ca4 <main+0x320>)
 8000b46:	701a      	strb	r2, [r3, #0]
			button4B = (nrfdata[1] & 0b00000010) >> 1; // ascii : dec 58
 8000b48:	4b4d      	ldr	r3, [pc, #308]	; (8000c80 <main+0x2fc>)
 8000b4a:	785b      	ldrb	r3, [r3, #1]
 8000b4c:	105b      	asrs	r3, r3, #1
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4b54      	ldr	r3, [pc, #336]	; (8000ca8 <main+0x324>)
 8000b58:	701a      	strb	r2, [r3, #0]
			moveA = (nrfdata[1] & 0b00000100) >> 2; // ascii ; dec 59
 8000b5a:	4b49      	ldr	r3, [pc, #292]	; (8000c80 <main+0x2fc>)
 8000b5c:	785b      	ldrb	r3, [r3, #1]
 8000b5e:	109b      	asrs	r3, r3, #2
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	4b50      	ldr	r3, [pc, #320]	; (8000cac <main+0x328>)
 8000b6a:	701a      	strb	r2, [r3, #0]
			moveB = (nrfdata[1] & 0b00001000) >> 3; // ascii < dec 60
 8000b6c:	4b44      	ldr	r3, [pc, #272]	; (8000c80 <main+0x2fc>)
 8000b6e:	785b      	ldrb	r3, [r3, #1]
 8000b70:	10db      	asrs	r3, r3, #3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4b4d      	ldr	r3, [pc, #308]	; (8000cb0 <main+0x32c>)
 8000b7c:	701a      	strb	r2, [r3, #0]
			rotateA = (nrfdata[1] & 0b00010000) >> 4; // ascii > dec 62
 8000b7e:	4b40      	ldr	r3, [pc, #256]	; (8000c80 <main+0x2fc>)
 8000b80:	785b      	ldrb	r3, [r3, #1]
 8000b82:	111b      	asrs	r3, r3, #4
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b49      	ldr	r3, [pc, #292]	; (8000cb4 <main+0x330>)
 8000b8e:	701a      	strb	r2, [r3, #0]
			rotateB = (nrfdata[1] & 0b00100000) >> 5; // ascii ? dec 63
 8000b90:	4b3b      	ldr	r3, [pc, #236]	; (8000c80 <main+0x2fc>)
 8000b92:	785b      	ldrb	r3, [r3, #1]
 8000b94:	115b      	asrs	r3, r3, #5
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b46      	ldr	r3, [pc, #280]	; (8000cb8 <main+0x334>)
 8000ba0:	701a      	strb	r2, [r3, #0]
			offcon = (nrfdata[1] & 0b01000000) >> 6; // ascii 7
 8000ba2:	4b37      	ldr	r3, [pc, #220]	; (8000c80 <main+0x2fc>)
 8000ba4:	785b      	ldrb	r3, [r3, #1]
 8000ba6:	119b      	asrs	r3, r3, #6
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	4b42      	ldr	r3, [pc, #264]	; (8000cbc <main+0x338>)
 8000bb2:	701a      	strb	r2, [r3, #0]
			autonomy = (nrfdata[1] & 0b10000000) >> 7; // ascii 8
 8000bb4:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <main+0x2fc>)
 8000bb6:	785b      	ldrb	r3, [r3, #1]
 8000bb8:	09db      	lsrs	r3, r3, #7
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b40      	ldr	r3, [pc, #256]	; (8000cc0 <main+0x33c>)
 8000bbe:	701a      	strb	r2, [r3, #0]

			byte1 = nrfdata[0];
 8000bc0:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <main+0x2fc>)
 8000bc2:	781a      	ldrb	r2, [r3, #0]
 8000bc4:	4b3f      	ldr	r3, [pc, #252]	; (8000cc4 <main+0x340>)
 8000bc6:	701a      	strb	r2, [r3, #0]
			byte2 = nrfdata[1];
 8000bc8:	4b2d      	ldr	r3, [pc, #180]	; (8000c80 <main+0x2fc>)
 8000bca:	785a      	ldrb	r2, [r3, #1]
 8000bcc:	4b3e      	ldr	r3, [pc, #248]	; (8000cc8 <main+0x344>)
 8000bce:	701a      	strb	r2, [r3, #0]
			byte3 = nrfdata[2];
 8000bd0:	4b2b      	ldr	r3, [pc, #172]	; (8000c80 <main+0x2fc>)
 8000bd2:	789a      	ldrb	r2, [r3, #2]
 8000bd4:	4b3d      	ldr	r3, [pc, #244]	; (8000ccc <main+0x348>)
 8000bd6:	701a      	strb	r2, [r3, #0]
			byte4 = nrfdata[3];
 8000bd8:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <main+0x2fc>)
 8000bda:	78da      	ldrb	r2, [r3, #3]
 8000bdc:	4b3c      	ldr	r3, [pc, #240]	; (8000cd0 <main+0x34c>)
 8000bde:	701a      	strb	r2, [r3, #0]
			byte5 = nrfdata[4];
 8000be0:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <main+0x2fc>)
 8000be2:	791a      	ldrb	r2, [r3, #4]
 8000be4:	4b3b      	ldr	r3, [pc, #236]	; (8000cd4 <main+0x350>)
 8000be6:	701a      	strb	r2, [r3, #0]
			byte6 = nrfdata[5];
 8000be8:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <main+0x2fc>)
 8000bea:	795a      	ldrb	r2, [r3, #5]
 8000bec:	4b3a      	ldr	r3, [pc, #232]	; (8000cd8 <main+0x354>)
 8000bee:	701a      	strb	r2, [r3, #0]
			byte7 = nrfdata[6]; // nrfdata6
 8000bf0:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <main+0x2fc>)
 8000bf2:	799a      	ldrb	r2, [r3, #6]
 8000bf4:	4b39      	ldr	r3, [pc, #228]	; (8000cdc <main+0x358>)
 8000bf6:	701a      	strb	r2, [r3, #0]
			byte8 = nrfdata[7]; // nrfdata7
 8000bf8:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <main+0x2fc>)
 8000bfa:	79da      	ldrb	r2, [r3, #7]
 8000bfc:	4b38      	ldr	r3, [pc, #224]	; (8000ce0 <main+0x35c>)
 8000bfe:	701a      	strb	r2, [r3, #0]

			chsm = nrfdata[8];
 8000c00:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <main+0x2fc>)
 8000c02:	7a1a      	ldrb	r2, [r3, #8]
 8000c04:	4b37      	ldr	r3, [pc, #220]	; (8000ce4 <main+0x360>)
 8000c06:	701a      	strb	r2, [r3, #0]
			sum = ((byte1 + byte2 + byte3 + byte4 + byte5 + byte6 + byte7
 8000c08:	4b2e      	ldr	r3, [pc, #184]	; (8000cc4 <main+0x340>)
 8000c0a:	781a      	ldrb	r2, [r3, #0]
 8000c0c:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <main+0x344>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4413      	add	r3, r2
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	4b2d      	ldr	r3, [pc, #180]	; (8000ccc <main+0x348>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4413      	add	r3, r2
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <main+0x34c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4413      	add	r3, r2
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <main+0x350>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	4413      	add	r3, r2
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <main+0x354>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4413      	add	r3, r2
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <main+0x358>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4413      	add	r3, r2
 8000c3a:	b2da      	uxtb	r2, r3
					+ byte8) & 0xFF);
 8000c3c:	4b28      	ldr	r3, [pc, #160]	; (8000ce0 <main+0x35c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4413      	add	r3, r2
 8000c42:	b2da      	uxtb	r2, r3
			sum = ((byte1 + byte2 + byte3 + byte4 + byte5 + byte6 + byte7
 8000c44:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <main+0x364>)
 8000c46:	701a      	strb	r2, [r3, #0]
 8000c48:	e050      	b.n	8000cec <main+0x368>
 8000c4a:	bf00      	nop
 8000c4c:	20000094 	.word	0x20000094
 8000c50:	0800602c 	.word	0x0800602c
 8000c54:	08006030 	.word	0x08006030
 8000c58:	2000016c 	.word	0x2000016c
 8000c5c:	2000012c 	.word	0x2000012c
 8000c60:	200001ac 	.word	0x200001ac
 8000c64:	200000ec 	.word	0x200000ec
 8000c68:	20000080 	.word	0x20000080
 8000c6c:	20000084 	.word	0x20000084
 8000c70:	20000088 	.word	0x20000088
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000004 	.word	0x20000004
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	20000034 	.word	0x20000034
 8000c84:	2000004d 	.word	0x2000004d
 8000c88:	2000004e 	.word	0x2000004e
 8000c8c:	2000004f 	.word	0x2000004f
 8000c90:	20000050 	.word	0x20000050
 8000c94:	20000051 	.word	0x20000051
 8000c98:	20000052 	.word	0x20000052
 8000c9c:	20000053 	.word	0x20000053
 8000ca0:	20000054 	.word	0x20000054
 8000ca4:	20000055 	.word	0x20000055
 8000ca8:	20000056 	.word	0x20000056
 8000cac:	20000057 	.word	0x20000057
 8000cb0:	20000058 	.word	0x20000058
 8000cb4:	20000059 	.word	0x20000059
 8000cb8:	2000005a 	.word	0x2000005a
 8000cbc:	2000005b 	.word	0x2000005b
 8000cc0:	2000005c 	.word	0x2000005c
 8000cc4:	2000005e 	.word	0x2000005e
 8000cc8:	2000005f 	.word	0x2000005f
 8000ccc:	20000060 	.word	0x20000060
 8000cd0:	20000061 	.word	0x20000061
 8000cd4:	20000062 	.word	0x20000062
 8000cd8:	20000063 	.word	0x20000063
 8000cdc:	20000064 	.word	0x20000064
 8000ce0:	20000065 	.word	0x20000065
 8000ce4:	20000066 	.word	0x20000066
 8000ce8:	2000005d 	.word	0x2000005d

		}

		//if there is no signal restart nRF24 and stop motor
		if (HAL_GetTick() - timereset > 400) {
 8000cec:	f002 fafc 	bl	80032e8 <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	4b8b      	ldr	r3, [pc, #556]	; (8000f20 <main+0x59c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000cfc:	f240 8248 	bls.w	8001190 <main+0x80c>
			if (HAL_UART_Receive(&huart2, start2, 1, 100) != 3 && start2[0] == 38)
 8000d00:	2364      	movs	r3, #100	; 0x64
 8000d02:	2201      	movs	r2, #1
 8000d04:	4987      	ldr	r1, [pc, #540]	; (8000f24 <main+0x5a0>)
 8000d06:	4888      	ldr	r0, [pc, #544]	; (8000f28 <main+0x5a4>)
 8000d08:	f004 ff73 	bl	8005bf2 <HAL_UART_Receive>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	f000 8168 	beq.w	8000fe4 <main+0x660>
 8000d14:	4b83      	ldr	r3, [pc, #524]	; (8000f24 <main+0x5a0>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b26      	cmp	r3, #38	; 0x26
 8000d1a:	f040 8163 	bne.w	8000fe4 <main+0x660>
					{
						//autonomia po braku anteny

						HAL_UART_Receive(&huart2, jetsondata4, 4, 100);
 8000d1e:	2364      	movs	r3, #100	; 0x64
 8000d20:	2204      	movs	r2, #4
 8000d22:	4982      	ldr	r1, [pc, #520]	; (8000f2c <main+0x5a8>)
 8000d24:	4880      	ldr	r0, [pc, #512]	; (8000f28 <main+0x5a4>)
 8000d26:	f004 ff64 	bl	8005bf2 <HAL_UART_Receive>
						if (jetsondata4[3] == ((jetsondata4[2]+jetsondata4[1] + jetsondata4[0] + start2[0]) & 0xFF))
 8000d2a:	4b80      	ldr	r3, [pc, #512]	; (8000f2c <main+0x5a8>)
 8000d2c:	78db      	ldrb	r3, [r3, #3]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4b7e      	ldr	r3, [pc, #504]	; (8000f2c <main+0x5a8>)
 8000d32:	789b      	ldrb	r3, [r3, #2]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b7d      	ldr	r3, [pc, #500]	; (8000f2c <main+0x5a8>)
 8000d38:	785b      	ldrb	r3, [r3, #1]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a7b      	ldr	r2, [pc, #492]	; (8000f2c <main+0x5a8>)
 8000d3e:	7812      	ldrb	r2, [r2, #0]
 8000d40:	4413      	add	r3, r2
 8000d42:	4a78      	ldr	r2, [pc, #480]	; (8000f24 <main+0x5a0>)
 8000d44:	7812      	ldrb	r2, [r2, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	4299      	cmp	r1, r3
 8000d4c:	f040 8446 	bne.w	80015dc <main+0xc58>
						{
						pwm1 = map(jetsondata4[0], 32, 127, 0, 1000);
 8000d50:	4b76      	ldr	r3, [pc, #472]	; (8000f2c <main+0x5a8>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b298      	uxth	r0, r3
 8000d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	227f      	movs	r2, #127	; 0x7f
 8000d60:	2120      	movs	r1, #32
 8000d62:	f000 fc95 	bl	8001690 <map>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fabd 	bl	80002e8 <__aeabi_ui2f>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	4a6f      	ldr	r2, [pc, #444]	; (8000f30 <main+0x5ac>)
 8000d72:	6013      	str	r3, [r2, #0]
												pwm1 = (pwm1 - 500) * 2;
 8000d74:	4b6e      	ldr	r3, [pc, #440]	; (8000f30 <main+0x5ac>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	496e      	ldr	r1, [pc, #440]	; (8000f34 <main+0x5b0>)
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fa02 	bl	8000184 <__aeabi_fsub>
 8000d80:	4603      	mov	r3, r0
 8000d82:	4619      	mov	r1, r3
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff f9ff 	bl	8000188 <__addsf3>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b68      	ldr	r3, [pc, #416]	; (8000f30 <main+0x5ac>)
 8000d90:	601a      	str	r2, [r3, #0]

												if (pwm1 > -200 && pwm1 < 200) {
 8000d92:	4b67      	ldr	r3, [pc, #412]	; (8000f30 <main+0x5ac>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4968      	ldr	r1, [pc, #416]	; (8000f38 <main+0x5b4>)
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fb69 	bl	8000470 <__aeabi_fcmpgt>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d00d      	beq.n	8000dc0 <main+0x43c>
 8000da4:	4b62      	ldr	r3, [pc, #392]	; (8000f30 <main+0x5ac>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4964      	ldr	r1, [pc, #400]	; (8000f3c <main+0x5b8>)
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fb42 	bl	8000434 <__aeabi_fcmplt>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d004      	beq.n	8000dc0 <main+0x43c>
													PWMval(6, 0);
 8000db6:	2100      	movs	r1, #0
 8000db8:	2006      	movs	r0, #6
 8000dba:	f000 fc8f 	bl	80016dc <PWMval>
 8000dbe:	e02e      	b.n	8000e1e <main+0x49a>
												}

												else if (pwm1 > pwmRight) {
 8000dc0:	4b5b      	ldr	r3, [pc, #364]	; (8000f30 <main+0x5ac>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a5e      	ldr	r2, [pc, #376]	; (8000f40 <main+0x5bc>)
 8000dc6:	6812      	ldr	r2, [r2, #0]
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fb50 	bl	8000470 <__aeabi_fcmpgt>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d00c      	beq.n	8000df0 <main+0x46c>
													pwmRight = pwmRight + step;
 8000dd6:	4b5a      	ldr	r3, [pc, #360]	; (8000f40 <main+0x5bc>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a5a      	ldr	r2, [pc, #360]	; (8000f44 <main+0x5c0>)
 8000ddc:	6812      	ldr	r2, [r2, #0]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff f9d1 	bl	8000188 <__addsf3>
 8000de6:	4603      	mov	r3, r0
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b55      	ldr	r3, [pc, #340]	; (8000f40 <main+0x5bc>)
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	e016      	b.n	8000e1e <main+0x49a>
												}
												else if (pwm1 < pwmRight) {
 8000df0:	4b4f      	ldr	r3, [pc, #316]	; (8000f30 <main+0x5ac>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a52      	ldr	r2, [pc, #328]	; (8000f40 <main+0x5bc>)
 8000df6:	6812      	ldr	r2, [r2, #0]
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fb1a 	bl	8000434 <__aeabi_fcmplt>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d00b      	beq.n	8000e1e <main+0x49a>
													pwmRight = pwmRight - step;
 8000e06:	4b4e      	ldr	r3, [pc, #312]	; (8000f40 <main+0x5bc>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a4e      	ldr	r2, [pc, #312]	; (8000f44 <main+0x5c0>)
 8000e0c:	6812      	ldr	r2, [r2, #0]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff f9b7 	bl	8000184 <__aeabi_fsub>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b49      	ldr	r3, [pc, #292]	; (8000f40 <main+0x5bc>)
 8000e1c:	601a      	str	r2, [r3, #0]
												}
												if (pwmRight > 0) {
 8000e1e:	4b48      	ldr	r3, [pc, #288]	; (8000f40 <main+0x5bc>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f04f 0100 	mov.w	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fb22 	bl	8000470 <__aeabi_fcmpgt>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d00d      	beq.n	8000e4e <main+0x4ca>
													RmotorF();
 8000e32:	f000 fe37 	bl	8001aa4 <RmotorF>
													PWMval(6, (int) pwmRight);
 8000e36:	4b42      	ldr	r3, [pc, #264]	; (8000f40 <main+0x5bc>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fb22 	bl	8000484 <__aeabi_f2iz>
 8000e40:	4603      	mov	r3, r0
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	4619      	mov	r1, r3
 8000e46:	2006      	movs	r0, #6
 8000e48:	f000 fc48 	bl	80016dc <PWMval>
 8000e4c:	e018      	b.n	8000e80 <main+0x4fc>
												}
												else if (pwmRight < 0) {
 8000e4e:	4b3c      	ldr	r3, [pc, #240]	; (8000f40 <main+0x5bc>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f04f 0100 	mov.w	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff faec 	bl	8000434 <__aeabi_fcmplt>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00e      	beq.n	8000e80 <main+0x4fc>
													RmotorB();
 8000e62:	f000 fe33 	bl	8001acc <RmotorB>
													PWMval(6, ((int) pwmRight) * -1);
 8000e66:	4b36      	ldr	r3, [pc, #216]	; (8000f40 <main+0x5bc>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fb0a 	bl	8000484 <__aeabi_f2iz>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	425b      	negs	r3, r3
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	4619      	mov	r1, r3
 8000e7a:	2006      	movs	r0, #6
 8000e7c:	f000 fc2e 	bl	80016dc <PWMval>
												}

												pwm2 = map(jetsondata4[1], 32, 127, 0, 1000);
 8000e80:	4b2a      	ldr	r3, [pc, #168]	; (8000f2c <main+0x5a8>)
 8000e82:	785b      	ldrb	r3, [r3, #1]
 8000e84:	b298      	uxth	r0, r3
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	227f      	movs	r2, #127	; 0x7f
 8000e90:	2120      	movs	r1, #32
 8000e92:	f000 fbfd 	bl	8001690 <map>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fa25 	bl	80002e8 <__aeabi_ui2f>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	4a29      	ldr	r2, [pc, #164]	; (8000f48 <main+0x5c4>)
 8000ea2:	6013      	str	r3, [r2, #0]
												pwm2 = (pwm2 - 500) * 2;
 8000ea4:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <main+0x5c4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4922      	ldr	r1, [pc, #136]	; (8000f34 <main+0x5b0>)
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff f96a 	bl	8000184 <__aeabi_fsub>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff f967 	bl	8000188 <__addsf3>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <main+0x5c4>)
 8000ec0:	601a      	str	r2, [r3, #0]
												if (pwm1 > -200 && pwm1 < 200) {
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <main+0x5ac>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	491c      	ldr	r1, [pc, #112]	; (8000f38 <main+0x5b4>)
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fad1 	bl	8000470 <__aeabi_fcmpgt>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d00d      	beq.n	8000ef0 <main+0x56c>
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <main+0x5ac>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4918      	ldr	r1, [pc, #96]	; (8000f3c <main+0x5b8>)
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff faaa 	bl	8000434 <__aeabi_fcmplt>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d004      	beq.n	8000ef0 <main+0x56c>
													PWMval(7, 0);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2007      	movs	r0, #7
 8000eea:	f000 fbf7 	bl	80016dc <PWMval>
 8000eee:	e046      	b.n	8000f7e <main+0x5fa>
												}
												else if (pwm2 > pwmLeft) {
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <main+0x5c4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <main+0x5c8>)
 8000ef6:	6812      	ldr	r2, [r2, #0]
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fab8 	bl	8000470 <__aeabi_fcmpgt>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d024      	beq.n	8000f50 <main+0x5cc>
													pwmLeft = pwmLeft + step;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <main+0x5c8>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <main+0x5c0>)
 8000f0c:	6812      	ldr	r2, [r2, #0]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff f939 	bl	8000188 <__addsf3>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <main+0x5c8>)
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	e02e      	b.n	8000f7e <main+0x5fa>
 8000f20:	20000084 	.word	0x20000084
 8000f24:	2000004c 	.word	0x2000004c
 8000f28:	200001ec 	.word	0x200001ec
 8000f2c:	20000044 	.word	0x20000044
 8000f30:	20000068 	.word	0x20000068
 8000f34:	43fa0000 	.word	0x43fa0000
 8000f38:	c3480000 	.word	0xc3480000
 8000f3c:	43480000 	.word	0x43480000
 8000f40:	20000070 	.word	0x20000070
 8000f44:	20000008 	.word	0x20000008
 8000f48:	2000006c 	.word	0x2000006c
 8000f4c:	20000074 	.word	0x20000074
												}
												else if (pwm2 < pwmLeft) {
 8000f50:	4ba7      	ldr	r3, [pc, #668]	; (80011f0 <main+0x86c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4aa7      	ldr	r2, [pc, #668]	; (80011f4 <main+0x870>)
 8000f56:	6812      	ldr	r2, [r2, #0]
 8000f58:	4611      	mov	r1, r2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fa6a 	bl	8000434 <__aeabi_fcmplt>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d00b      	beq.n	8000f7e <main+0x5fa>
													pwmLeft = pwmLeft - step;
 8000f66:	4ba3      	ldr	r3, [pc, #652]	; (80011f4 <main+0x870>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4aa3      	ldr	r2, [pc, #652]	; (80011f8 <main+0x874>)
 8000f6c:	6812      	ldr	r2, [r2, #0]
 8000f6e:	4611      	mov	r1, r2
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff f907 	bl	8000184 <__aeabi_fsub>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b9e      	ldr	r3, [pc, #632]	; (80011f4 <main+0x870>)
 8000f7c:	601a      	str	r2, [r3, #0]
												}
												if (pwmLeft > 0) {
 8000f7e:	4b9d      	ldr	r3, [pc, #628]	; (80011f4 <main+0x870>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f04f 0100 	mov.w	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fa72 	bl	8000470 <__aeabi_fcmpgt>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00d      	beq.n	8000fae <main+0x62a>
													LmotorF();
 8000f92:	f000 fd63 	bl	8001a5c <LmotorF>
													PWMval(7, (int) pwmLeft);
 8000f96:	4b97      	ldr	r3, [pc, #604]	; (80011f4 <main+0x870>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fa72 	bl	8000484 <__aeabi_f2iz>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	2007      	movs	r0, #7
 8000fa8:	f000 fb98 	bl	80016dc <PWMval>
						if (jetsondata4[3] == ((jetsondata4[2]+jetsondata4[1] + jetsondata4[0] + start2[0]) & 0xFF))
 8000fac:	e316      	b.n	80015dc <main+0xc58>
												}
												else if (pwmLeft < 0) {
 8000fae:	4b91      	ldr	r3, [pc, #580]	; (80011f4 <main+0x870>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f04f 0100 	mov.w	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fa3c 	bl	8000434 <__aeabi_fcmplt>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d100      	bne.n	8000fc4 <main+0x640>
						if (jetsondata4[3] == ((jetsondata4[2]+jetsondata4[1] + jetsondata4[0] + start2[0]) & 0xFF))
 8000fc2:	e30b      	b.n	80015dc <main+0xc58>
													LmotorB();
 8000fc4:	f000 fd5c 	bl	8001a80 <LmotorB>
													PWMval(7, ((int) pwmLeft) * -1);
 8000fc8:	4b8a      	ldr	r3, [pc, #552]	; (80011f4 <main+0x870>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fa59 	bl	8000484 <__aeabi_f2iz>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	425b      	negs	r3, r3
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	4619      	mov	r1, r3
 8000fdc:	2007      	movs	r0, #7
 8000fde:	f000 fb7d 	bl	80016dc <PWMval>
						if (jetsondata4[3] == ((jetsondata4[2]+jetsondata4[1] + jetsondata4[0] + start2[0]) & 0xFF))
 8000fe2:	e2fb      	b.n	80015dc <main+0xc58>
						}


					}
			else {
			nRF24_Init(&hspi2);
 8000fe4:	4885      	ldr	r0, [pc, #532]	; (80011fc <main+0x878>)
 8000fe6:	f001 fc23 	bl	8002830 <nRF24_Init>
			nRF24_SetRXAddress(0, "Odb");
 8000fea:	4985      	ldr	r1, [pc, #532]	; (8001200 <main+0x87c>)
 8000fec:	2000      	movs	r0, #0
 8000fee:	f001 fb64 	bl	80026ba <nRF24_SetRXAddress>
			nRF24_SetTXAddress("Nad");
 8000ff2:	4884      	ldr	r0, [pc, #528]	; (8001204 <main+0x880>)
 8000ff4:	f001 fb9a 	bl	800272c <nRF24_SetTXAddress>
			nRF24_RX_Mode();
 8000ff8:	f001 f9ae 	bl	8002358 <nRF24_RX_Mode>
			stoppodst();
 8000ffc:	f000 fbe0 	bl	80017c0 <stoppodst>
			stopczlon5();
 8001000:	f000 fd14 	bl	8001a2c <stopczlon5>
			stopczlon1();
 8001004:	f000 fc18 	bl	8001838 <stopczlon1>
			stopczlon2();
 8001008:	f000 fc56 	bl	80018b8 <stopczlon2>
			stopczlon3();
 800100c:	f000 fc90 	bl	8001930 <stopczlon3>
			stopczlon4();
 8001010:	f000 fccc 	bl	80019ac <stopczlon4>
			servox0();
 8001014:	f000 ff9a 	bl	8001f4c <servox0>
			servoy0();
 8001018:	f000 ffd0 	bl	8001fbc <servoy0>
			if (0 > pwmLeft) {
 800101c:	4b75      	ldr	r3, [pc, #468]	; (80011f4 <main+0x870>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f04f 0100 	mov.w	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fa05 	bl	8000434 <__aeabi_fcmplt>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d00b      	beq.n	8001048 <main+0x6c4>
				pwmLeft = pwmLeft + 2;
 8001030:	4b70      	ldr	r3, [pc, #448]	; (80011f4 <main+0x870>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff f8a5 	bl	8000188 <__addsf3>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	4b6c      	ldr	r3, [pc, #432]	; (80011f4 <main+0x870>)
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	e014      	b.n	8001072 <main+0x6ee>
			} else if (0 < pwmLeft) {
 8001048:	4b6a      	ldr	r3, [pc, #424]	; (80011f4 <main+0x870>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f04f 0100 	mov.w	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa0d 	bl	8000470 <__aeabi_fcmpgt>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d00a      	beq.n	8001072 <main+0x6ee>
				pwmLeft = pwmLeft - 2;
 800105c:	4b65      	ldr	r3, [pc, #404]	; (80011f4 <main+0x870>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff f88d 	bl	8000184 <__aeabi_fsub>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	4b61      	ldr	r3, [pc, #388]	; (80011f4 <main+0x870>)
 8001070:	601a      	str	r2, [r3, #0]
			}
			if (pwmLeft >= 0) {
 8001072:	4b60      	ldr	r3, [pc, #384]	; (80011f4 <main+0x870>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f04f 0100 	mov.w	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff f9ee 	bl	800045c <__aeabi_fcmpge>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00d      	beq.n	80010a2 <main+0x71e>
				LmotorF();
 8001086:	f000 fce9 	bl	8001a5c <LmotorF>
				PWMval(7, (int) pwmLeft);
 800108a:	4b5a      	ldr	r3, [pc, #360]	; (80011f4 <main+0x870>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff f9f8 	bl	8000484 <__aeabi_f2iz>
 8001094:	4603      	mov	r3, r0
 8001096:	b29b      	uxth	r3, r3
 8001098:	4619      	mov	r1, r3
 800109a:	2007      	movs	r0, #7
 800109c:	f000 fb1e 	bl	80016dc <PWMval>
 80010a0:	e018      	b.n	80010d4 <main+0x750>
			} else if (pwmLeft < 0) {
 80010a2:	4b54      	ldr	r3, [pc, #336]	; (80011f4 <main+0x870>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f04f 0100 	mov.w	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff f9c2 	bl	8000434 <__aeabi_fcmplt>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00e      	beq.n	80010d4 <main+0x750>
				LmotorB();
 80010b6:	f000 fce3 	bl	8001a80 <LmotorB>
				PWMval(7, ((int) pwmLeft) * -1);
 80010ba:	4b4e      	ldr	r3, [pc, #312]	; (80011f4 <main+0x870>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f9e0 	bl	8000484 <__aeabi_f2iz>
 80010c4:	4603      	mov	r3, r0
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	425b      	negs	r3, r3
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	4619      	mov	r1, r3
 80010ce:	2007      	movs	r0, #7
 80010d0:	f000 fb04 	bl	80016dc <PWMval>
			}
			if (0 > pwmRight) {
 80010d4:	4b4c      	ldr	r3, [pc, #304]	; (8001208 <main+0x884>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f04f 0100 	mov.w	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f9a9 	bl	8000434 <__aeabi_fcmplt>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00b      	beq.n	8001100 <main+0x77c>
				pwmRight = pwmRight + 2;
 80010e8:	4b47      	ldr	r3, [pc, #284]	; (8001208 <main+0x884>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff f849 	bl	8000188 <__addsf3>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b43      	ldr	r3, [pc, #268]	; (8001208 <main+0x884>)
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	e014      	b.n	800112a <main+0x7a6>
			} else if (0 < pwmRight) {
 8001100:	4b41      	ldr	r3, [pc, #260]	; (8001208 <main+0x884>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f04f 0100 	mov.w	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f9b1 	bl	8000470 <__aeabi_fcmpgt>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00a      	beq.n	800112a <main+0x7a6>
				pwmRight = pwmRight - 2;
 8001114:	4b3c      	ldr	r3, [pc, #240]	; (8001208 <main+0x884>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f831 	bl	8000184 <__aeabi_fsub>
 8001122:	4603      	mov	r3, r0
 8001124:	461a      	mov	r2, r3
 8001126:	4b38      	ldr	r3, [pc, #224]	; (8001208 <main+0x884>)
 8001128:	601a      	str	r2, [r3, #0]
			}
			if (pwmRight >= 0) {
 800112a:	4b37      	ldr	r3, [pc, #220]	; (8001208 <main+0x884>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f04f 0100 	mov.w	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f992 	bl	800045c <__aeabi_fcmpge>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00d      	beq.n	800115a <main+0x7d6>
				RmotorF();
 800113e:	f000 fcb1 	bl	8001aa4 <RmotorF>
				PWMval(6, (int) pwmRight);
 8001142:	4b31      	ldr	r3, [pc, #196]	; (8001208 <main+0x884>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f99c 	bl	8000484 <__aeabi_f2iz>
 800114c:	4603      	mov	r3, r0
 800114e:	b29b      	uxth	r3, r3
 8001150:	4619      	mov	r1, r3
 8001152:	2006      	movs	r0, #6
 8001154:	f000 fac2 	bl	80016dc <PWMval>
 8001158:	e48c      	b.n	8000a74 <main+0xf0>
			} else if (pwmRight < 0) {
 800115a:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <main+0x884>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f04f 0100 	mov.w	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f966 	bl	8000434 <__aeabi_fcmplt>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 8236 	beq.w	80015dc <main+0xc58>
				RmotorB();
 8001170:	f000 fcac 	bl	8001acc <RmotorB>
				PWMval(6, ((int) pwmRight) * -1);
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <main+0x884>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f983 	bl	8000484 <__aeabi_f2iz>
 800117e:	4603      	mov	r3, r0
 8001180:	b29b      	uxth	r3, r3
 8001182:	425b      	negs	r3, r3
 8001184:	b29b      	uxth	r3, r3
 8001186:	4619      	mov	r1, r3
 8001188:	2006      	movs	r0, #6
 800118a:	f000 faa7 	bl	80016dc <PWMval>
 800118e:	e471      	b.n	8000a74 <main+0xf0>
			}

		}
		}

		else if (sum == chsm) {
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <main+0x888>)
 8001192:	781a      	ldrb	r2, [r3, #0]
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <main+0x88c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	429a      	cmp	r2, r3
 800119a:	f47f ac6b 	bne.w	8000a74 <main+0xf0>
			if (offcon) {
 800119e:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <main+0x890>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d03a      	beq.n	800121c <main+0x898>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,
 80011a6:	2200      	movs	r2, #0
 80011a8:	2102      	movs	r1, #2
 80011aa:	481b      	ldr	r0, [pc, #108]	; (8001218 <main+0x894>)
 80011ac:	f002 fb3c 	bl	8003828 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin,
 80011b0:	2200      	movs	r2, #0
 80011b2:	2108      	movs	r1, #8
 80011b4:	4818      	ldr	r0, [pc, #96]	; (8001218 <main+0x894>)
 80011b6:	f002 fb37 	bl	8003828 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	2101      	movs	r1, #1
 80011be:	4816      	ldr	r0, [pc, #88]	; (8001218 <main+0x894>)
 80011c0:	f002 fb32 	bl	8003828 <HAL_GPIO_WritePin>
				stoppodst();
 80011c4:	f000 fafc 	bl	80017c0 <stoppodst>
				stopczlon5();
 80011c8:	f000 fc30 	bl	8001a2c <stopczlon5>
				stopczlon1();
 80011cc:	f000 fb34 	bl	8001838 <stopczlon1>
				stopczlon2();
 80011d0:	f000 fb72 	bl	80018b8 <stopczlon2>
				stopczlon3();
 80011d4:	f000 fbac 	bl	8001930 <stopczlon3>
				stopczlon4();
 80011d8:	f000 fbe8 	bl	80019ac <stopczlon4>
				stopjazdaR();
 80011dc:	f000 fc8a 	bl	8001af4 <stopjazdaR>
				stopjazdaL();
 80011e0:	f000 fcf0 	bl	8001bc4 <stopjazdaL>
				servox0();
 80011e4:	f000 feb2 	bl	8001f4c <servox0>
				servoy0();
 80011e8:	f000 fee8 	bl	8001fbc <servoy0>
 80011ec:	e442      	b.n	8000a74 <main+0xf0>
 80011ee:	bf00      	nop
 80011f0:	2000006c 	.word	0x2000006c
 80011f4:	20000074 	.word	0x20000074
 80011f8:	20000008 	.word	0x20000008
 80011fc:	20000094 	.word	0x20000094
 8001200:	0800602c 	.word	0x0800602c
 8001204:	08006030 	.word	0x08006030
 8001208:	20000070 	.word	0x20000070
 800120c:	2000005d 	.word	0x2000005d
 8001210:	20000066 	.word	0x20000066
 8001214:	2000005b 	.word	0x2000005b
 8001218:	40020800 	.word	0x40020800

			}
			else if (autonomy)
 800121c:	4b98      	ldr	r3, [pc, #608]	; (8001480 <main+0xafc>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 81b8 	beq.w	8001596 <main+0xc12>
			{
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin,
 8001226:	2200      	movs	r2, #0
 8001228:	2101      	movs	r1, #1
 800122a:	4896      	ldr	r0, [pc, #600]	; (8001484 <main+0xb00>)
 800122c:	f002 fafc 	bl	8003828 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,
 8001230:	2200      	movs	r2, #0
 8001232:	2102      	movs	r1, #2
 8001234:	4893      	ldr	r0, [pc, #588]	; (8001484 <main+0xb00>)
 8001236:	f002 faf7 	bl	8003828 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				//HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);

				HAL_UART_Transmit(&huart2, autoY, 3, 100);
 800123a:	2364      	movs	r3, #100	; 0x64
 800123c:	2203      	movs	r2, #3
 800123e:	4992      	ldr	r1, [pc, #584]	; (8001488 <main+0xb04>)
 8001240:	4892      	ldr	r0, [pc, #584]	; (800148c <main+0xb08>)
 8001242:	f004 fc53 	bl	8005aec <HAL_UART_Transmit>

				if (HAL_UART_Receive(&huart2, start, 1, 100) != 3 && start[0] == 58)
 8001246:	2364      	movs	r3, #100	; 0x64
 8001248:	2201      	movs	r2, #1
 800124a:	4991      	ldr	r1, [pc, #580]	; (8001490 <main+0xb0c>)
 800124c:	488f      	ldr	r0, [pc, #572]	; (800148c <main+0xb08>)
 800124e:	f004 fcd0 	bl	8005bf2 <HAL_UART_Receive>
 8001252:	4603      	mov	r3, r0
 8001254:	2b03      	cmp	r3, #3
 8001256:	f43f ac0d 	beq.w	8000a74 <main+0xf0>
 800125a:	4b8d      	ldr	r3, [pc, #564]	; (8001490 <main+0xb0c>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b3a      	cmp	r3, #58	; 0x3a
 8001260:	f47f ac08 	bne.w	8000a74 <main+0xf0>
				{

					HAL_UART_Receive(&huart2, jetsondata, 3, 100);
 8001264:	2364      	movs	r3, #100	; 0x64
 8001266:	2203      	movs	r2, #3
 8001268:	498a      	ldr	r1, [pc, #552]	; (8001494 <main+0xb10>)
 800126a:	4888      	ldr	r0, [pc, #544]	; (800148c <main+0xb08>)
 800126c:	f004 fcc1 	bl	8005bf2 <HAL_UART_Receive>

					if (jetsondata[2] == ((jetsondata[1] + jetsondata[0] + start[0]) & 0xFF))
 8001270:	4b88      	ldr	r3, [pc, #544]	; (8001494 <main+0xb10>)
 8001272:	789b      	ldrb	r3, [r3, #2]
 8001274:	4619      	mov	r1, r3
 8001276:	4b87      	ldr	r3, [pc, #540]	; (8001494 <main+0xb10>)
 8001278:	785b      	ldrb	r3, [r3, #1]
 800127a:	461a      	mov	r2, r3
 800127c:	4b85      	ldr	r3, [pc, #532]	; (8001494 <main+0xb10>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4413      	add	r3, r2
 8001282:	4a83      	ldr	r2, [pc, #524]	; (8001490 <main+0xb0c>)
 8001284:	7812      	ldrb	r2, [r2, #0]
 8001286:	4413      	add	r3, r2
 8001288:	b2db      	uxtb	r3, r3
 800128a:	4299      	cmp	r1, r3
 800128c:	f040 8171 	bne.w	8001572 <main+0xbee>
					{

						if (jetsondata[1] == 200 && jetsondata[2] == 200)
 8001290:	4b80      	ldr	r3, [pc, #512]	; (8001494 <main+0xb10>)
 8001292:	785b      	ldrb	r3, [r3, #1]
 8001294:	2bc8      	cmp	r3, #200	; 0xc8
 8001296:	d10b      	bne.n	80012b0 <main+0x92c>
 8001298:	4b7e      	ldr	r3, [pc, #504]	; (8001494 <main+0xb10>)
 800129a:	789b      	ldrb	r3, [r3, #2]
 800129c:	2bc8      	cmp	r3, #200	; 0xc8
 800129e:	d107      	bne.n	80012b0 <main+0x92c>
						{
							//otw chwytaka
							czlon2L();
 80012a0:	f000 faf6 	bl	8001890 <czlon2L>
							PWMval(2, 1000);
 80012a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012a8:	2002      	movs	r0, #2
 80012aa:	f000 fa17 	bl	80016dc <PWMval>
 80012ae:	e195      	b.n	80015dc <main+0xc58>
						}
						else
						{
						pwm1 = map(jetsondata[0], 32, 127, 0, 1000);
 80012b0:	4b78      	ldr	r3, [pc, #480]	; (8001494 <main+0xb10>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b298      	uxth	r0, r3
 80012b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2300      	movs	r3, #0
 80012be:	227f      	movs	r2, #127	; 0x7f
 80012c0:	2120      	movs	r1, #32
 80012c2:	f000 f9e5 	bl	8001690 <map>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f80d 	bl	80002e8 <__aeabi_ui2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a71      	ldr	r2, [pc, #452]	; (8001498 <main+0xb14>)
 80012d2:	6013      	str	r3, [r2, #0]
						pwm1 = (pwm1 - 500) * 2;
 80012d4:	4b70      	ldr	r3, [pc, #448]	; (8001498 <main+0xb14>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4970      	ldr	r1, [pc, #448]	; (800149c <main+0xb18>)
 80012da:	4618      	mov	r0, r3
 80012dc:	f7fe ff52 	bl	8000184 <__aeabi_fsub>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4619      	mov	r1, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7fe ff4f 	bl	8000188 <__addsf3>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b6a      	ldr	r3, [pc, #424]	; (8001498 <main+0xb14>)
 80012f0:	601a      	str	r2, [r3, #0]

						if (pwm1 > -200 && pwm1 < 200) {
 80012f2:	4b69      	ldr	r3, [pc, #420]	; (8001498 <main+0xb14>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	496a      	ldr	r1, [pc, #424]	; (80014a0 <main+0xb1c>)
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f8b9 	bl	8000470 <__aeabi_fcmpgt>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00d      	beq.n	8001320 <main+0x99c>
 8001304:	4b64      	ldr	r3, [pc, #400]	; (8001498 <main+0xb14>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4966      	ldr	r1, [pc, #408]	; (80014a4 <main+0xb20>)
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f892 	bl	8000434 <__aeabi_fcmplt>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d004      	beq.n	8001320 <main+0x99c>
							PWMval(6, 0);
 8001316:	2100      	movs	r1, #0
 8001318:	2006      	movs	r0, #6
 800131a:	f000 f9df 	bl	80016dc <PWMval>
 800131e:	e02e      	b.n	800137e <main+0x9fa>
						}

						else if (pwm1 > pwmRight) {
 8001320:	4b5d      	ldr	r3, [pc, #372]	; (8001498 <main+0xb14>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a60      	ldr	r2, [pc, #384]	; (80014a8 <main+0xb24>)
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	4611      	mov	r1, r2
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f8a0 	bl	8000470 <__aeabi_fcmpgt>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00c      	beq.n	8001350 <main+0x9cc>
							pwmRight = pwmRight + step;
 8001336:	4b5c      	ldr	r3, [pc, #368]	; (80014a8 <main+0xb24>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a5c      	ldr	r2, [pc, #368]	; (80014ac <main+0xb28>)
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7fe ff21 	bl	8000188 <__addsf3>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	4b57      	ldr	r3, [pc, #348]	; (80014a8 <main+0xb24>)
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	e016      	b.n	800137e <main+0x9fa>
						}
						else if (pwm1 < pwmRight) {
 8001350:	4b51      	ldr	r3, [pc, #324]	; (8001498 <main+0xb14>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a54      	ldr	r2, [pc, #336]	; (80014a8 <main+0xb24>)
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f86a 	bl	8000434 <__aeabi_fcmplt>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <main+0x9fa>
							pwmRight = pwmRight - step;
 8001366:	4b50      	ldr	r3, [pc, #320]	; (80014a8 <main+0xb24>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a50      	ldr	r2, [pc, #320]	; (80014ac <main+0xb28>)
 800136c:	6812      	ldr	r2, [r2, #0]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7fe ff07 	bl	8000184 <__aeabi_fsub>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	4b4b      	ldr	r3, [pc, #300]	; (80014a8 <main+0xb24>)
 800137c:	601a      	str	r2, [r3, #0]
						}
						if (pwmRight > 0) {
 800137e:	4b4a      	ldr	r3, [pc, #296]	; (80014a8 <main+0xb24>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f04f 0100 	mov.w	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f872 	bl	8000470 <__aeabi_fcmpgt>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00d      	beq.n	80013ae <main+0xa2a>
							RmotorF();
 8001392:	f000 fb87 	bl	8001aa4 <RmotorF>
							PWMval(6, (int) pwmRight);
 8001396:	4b44      	ldr	r3, [pc, #272]	; (80014a8 <main+0xb24>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f872 	bl	8000484 <__aeabi_f2iz>
 80013a0:	4603      	mov	r3, r0
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	2006      	movs	r0, #6
 80013a8:	f000 f998 	bl	80016dc <PWMval>
 80013ac:	e018      	b.n	80013e0 <main+0xa5c>
						}
						else if (pwmRight < 0) {
 80013ae:	4b3e      	ldr	r3, [pc, #248]	; (80014a8 <main+0xb24>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f04f 0100 	mov.w	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f83c 	bl	8000434 <__aeabi_fcmplt>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00e      	beq.n	80013e0 <main+0xa5c>
							RmotorB();
 80013c2:	f000 fb83 	bl	8001acc <RmotorB>
							PWMval(6, ((int) pwmRight) * -1);
 80013c6:	4b38      	ldr	r3, [pc, #224]	; (80014a8 <main+0xb24>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f85a 	bl	8000484 <__aeabi_f2iz>
 80013d0:	4603      	mov	r3, r0
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	425b      	negs	r3, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4619      	mov	r1, r3
 80013da:	2006      	movs	r0, #6
 80013dc:	f000 f97e 	bl	80016dc <PWMval>
						}

						pwm2 = map(jetsondata[1], 32, 127, 0, 1000);
 80013e0:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <main+0xb10>)
 80013e2:	785b      	ldrb	r3, [r3, #1]
 80013e4:	b298      	uxth	r0, r3
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2300      	movs	r3, #0
 80013ee:	227f      	movs	r2, #127	; 0x7f
 80013f0:	2120      	movs	r1, #32
 80013f2:	f000 f94d 	bl	8001690 <map>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7fe ff75 	bl	80002e8 <__aeabi_ui2f>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a2b      	ldr	r2, [pc, #172]	; (80014b0 <main+0xb2c>)
 8001402:	6013      	str	r3, [r2, #0]
						pwm2 = (pwm2 - 500) * 2;
 8001404:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <main+0xb2c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4924      	ldr	r1, [pc, #144]	; (800149c <main+0xb18>)
 800140a:	4618      	mov	r0, r3
 800140c:	f7fe feba 	bl	8000184 <__aeabi_fsub>
 8001410:	4603      	mov	r3, r0
 8001412:	4619      	mov	r1, r3
 8001414:	4618      	mov	r0, r3
 8001416:	f7fe feb7 	bl	8000188 <__addsf3>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <main+0xb2c>)
 8001420:	601a      	str	r2, [r3, #0]
						if (pwm1 > -200 && pwm1 < 200) {
 8001422:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <main+0xb14>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	491e      	ldr	r1, [pc, #120]	; (80014a0 <main+0xb1c>)
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f821 	bl	8000470 <__aeabi_fcmpgt>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00d      	beq.n	8001450 <main+0xacc>
 8001434:	4b18      	ldr	r3, [pc, #96]	; (8001498 <main+0xb14>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	491a      	ldr	r1, [pc, #104]	; (80014a4 <main+0xb20>)
 800143a:	4618      	mov	r0, r3
 800143c:	f7fe fffa 	bl	8000434 <__aeabi_fcmplt>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d004      	beq.n	8001450 <main+0xacc>
							PWMval(7, 0);
 8001446:	2100      	movs	r1, #0
 8001448:	2007      	movs	r0, #7
 800144a:	f000 f947 	bl	80016dc <PWMval>
 800144e:	e04a      	b.n	80014e6 <main+0xb62>
						}
						else if (pwm2 > pwmLeft) {
 8001450:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <main+0xb2c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <main+0xb30>)
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f808 	bl	8000470 <__aeabi_fcmpgt>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d028      	beq.n	80014b8 <main+0xb34>
							pwmLeft = pwmLeft + step;
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <main+0xb30>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a10      	ldr	r2, [pc, #64]	; (80014ac <main+0xb28>)
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f7fe fe89 	bl	8000188 <__addsf3>
 8001476:	4603      	mov	r3, r0
 8001478:	461a      	mov	r2, r3
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <main+0xb30>)
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	e032      	b.n	80014e6 <main+0xb62>
 8001480:	2000005c 	.word	0x2000005c
 8001484:	40020800 	.word	0x40020800
 8001488:	20000000 	.word	0x20000000
 800148c:	200001ec 	.word	0x200001ec
 8001490:	20000048 	.word	0x20000048
 8001494:	20000040 	.word	0x20000040
 8001498:	20000068 	.word	0x20000068
 800149c:	43fa0000 	.word	0x43fa0000
 80014a0:	c3480000 	.word	0xc3480000
 80014a4:	43480000 	.word	0x43480000
 80014a8:	20000070 	.word	0x20000070
 80014ac:	20000008 	.word	0x20000008
 80014b0:	2000006c 	.word	0x2000006c
 80014b4:	20000074 	.word	0x20000074
						}
						else if (pwm2 < pwmLeft) {
 80014b8:	4b49      	ldr	r3, [pc, #292]	; (80015e0 <main+0xc5c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a49      	ldr	r2, [pc, #292]	; (80015e4 <main+0xc60>)
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe ffb6 	bl	8000434 <__aeabi_fcmplt>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00b      	beq.n	80014e6 <main+0xb62>
							pwmLeft = pwmLeft - step;
 80014ce:	4b45      	ldr	r3, [pc, #276]	; (80015e4 <main+0xc60>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a45      	ldr	r2, [pc, #276]	; (80015e8 <main+0xc64>)
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe fe53 	bl	8000184 <__aeabi_fsub>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b40      	ldr	r3, [pc, #256]	; (80015e4 <main+0xc60>)
 80014e4:	601a      	str	r2, [r3, #0]
						}
						if (pwmLeft > 0) {
 80014e6:	4b3f      	ldr	r3, [pc, #252]	; (80015e4 <main+0xc60>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f04f 0100 	mov.w	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe ffbe 	bl	8000470 <__aeabi_fcmpgt>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00d      	beq.n	8001516 <main+0xb92>
							LmotorF();
 80014fa:	f000 faaf 	bl	8001a5c <LmotorF>
							PWMval(7, (int) pwmLeft);
 80014fe:	4b39      	ldr	r3, [pc, #228]	; (80015e4 <main+0xc60>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe ffbe 	bl	8000484 <__aeabi_f2iz>
 8001508:	4603      	mov	r3, r0
 800150a:	b29b      	uxth	r3, r3
 800150c:	4619      	mov	r1, r3
 800150e:	2007      	movs	r0, #7
 8001510:	f000 f8e4 	bl	80016dc <PWMval>
 8001514:	e018      	b.n	8001548 <main+0xbc4>
						}
						else if (pwmLeft < 0) {
 8001516:	4b33      	ldr	r3, [pc, #204]	; (80015e4 <main+0xc60>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f04f 0100 	mov.w	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f7fe ff88 	bl	8000434 <__aeabi_fcmplt>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00e      	beq.n	8001548 <main+0xbc4>
							LmotorB();
 800152a:	f000 faa9 	bl	8001a80 <LmotorB>
							PWMval(7, ((int) pwmLeft) * -1);
 800152e:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <main+0xc60>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe ffa6 	bl	8000484 <__aeabi_f2iz>
 8001538:	4603      	mov	r3, r0
 800153a:	b29b      	uxth	r3, r3
 800153c:	425b      	negs	r3, r3
 800153e:	b29b      	uxth	r3, r3
 8001540:	4619      	mov	r1, r3
 8001542:	2007      	movs	r0, #7
 8001544:	f000 f8ca 	bl	80016dc <PWMval>
						}

						if (HAL_GetTick() - timeauto > 1000) {
 8001548:	f001 fece 	bl	80032e8 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	4b27      	ldr	r3, [pc, #156]	; (80015ec <main+0xc68>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001558:	f67f aa8c 	bls.w	8000a74 <main+0xf0>
							HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port,
 800155c:	2108      	movs	r1, #8
 800155e:	4824      	ldr	r0, [pc, #144]	; (80015f0 <main+0xc6c>)
 8001560:	f002 f97a 	bl	8003858 <HAL_GPIO_TogglePin>
									LED_YELLOW_Pin);
							timeauto = HAL_GetTick();
 8001564:	f001 fec0 	bl	80032e8 <HAL_GetTick>
 8001568:	4603      	mov	r3, r0
 800156a:	4a20      	ldr	r2, [pc, #128]	; (80015ec <main+0xc68>)
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	f7ff ba81 	b.w	8000a74 <main+0xf0>
						}
						}

					}
					else {
						stoppodst();
 8001572:	f000 f925 	bl	80017c0 <stoppodst>
						stopczlon5();
 8001576:	f000 fa59 	bl	8001a2c <stopczlon5>
						stopczlon1();
 800157a:	f000 f95d 	bl	8001838 <stopczlon1>
						stopczlon2();
 800157e:	f000 f99b 	bl	80018b8 <stopczlon2>
						stopczlon3();
 8001582:	f000 f9d5 	bl	8001930 <stopczlon3>
						stopczlon4();
 8001586:	f000 fa11 	bl	80019ac <stopczlon4>
						stopjazdaR();
 800158a:	f000 fab3 	bl	8001af4 <stopjazdaR>
						stopjazdaL();
 800158e:	f000 fb19 	bl	8001bc4 <stopjazdaL>
 8001592:	f7ff ba6f 	b.w	8000a74 <main+0xf0>
				}

			}
			else {
				// triggergripper();
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin,
 8001596:	2200      	movs	r2, #0
 8001598:	2108      	movs	r1, #8
 800159a:	4815      	ldr	r0, [pc, #84]	; (80015f0 <main+0xc6c>)
 800159c:	f002 f944 	bl	8003828 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin,
 80015a0:	2200      	movs	r2, #0
 80015a2:	2101      	movs	r1, #1
 80015a4:	4812      	ldr	r0, [pc, #72]	; (80015f0 <main+0xc6c>)
 80015a6:	f002 f93f 	bl	8003828 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,
 80015aa:	2201      	movs	r2, #1
 80015ac:	2102      	movs	r1, #2
 80015ae:	4810      	ldr	r0, [pc, #64]	; (80015f0 <main+0xc6c>)
 80015b0:	f002 f93a 	bl	8003828 <HAL_GPIO_WritePin>
						GPIO_PIN_SET);

				rightside();
 80015b4:	f000 fb6e 	bl	8001c94 <rightside>
				leftside();
 80015b8:	f000 fbfa 	bl	8001db0 <leftside>
				motor5control();
 80015bc:	f000 fdb6 	bl	800212c <motor5control>
				motor4control();
 80015c0:	f000 fd92 	bl	80020e8 <motor4control>
				motor3control();
 80015c4:	f000 fd6e 	bl	80020a4 <motor3control>
				motor2control();
 80015c8:	f000 fd4a 	bl	8002060 <motor2control>
				motor1control();
 80015cc:	f000 fd26 	bl	800201c <motor1control>
				motor0control();
 80015d0:	f000 fd02 	bl	8001fd8 <motor0control>
				servox();
 80015d4:	f000 fc7a 	bl	8001ecc <servox>
				servoy();
 80015d8:	f000 fcc6 	bl	8001f68 <servoy>
		if (nRF24_RXAvailible()) {
 80015dc:	f7ff ba4a 	b.w	8000a74 <main+0xf0>
 80015e0:	2000006c 	.word	0x2000006c
 80015e4:	20000074 	.word	0x20000074
 80015e8:	20000008 	.word	0x20000008
 80015ec:	20000088 	.word	0x20000088
 80015f0:	40020800 	.word	0x40020800

080015f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b092      	sub	sp, #72	; 0x48
 80015f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	2234      	movs	r2, #52	; 0x34
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f004 fcfe 	bl	8006004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001608:	463b      	mov	r3, r7
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <SystemClock_Config+0x98>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800161e:	4a1b      	ldr	r2, [pc, #108]	; (800168c <SystemClock_Config+0x98>)
 8001620:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001624:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001626:	2302      	movs	r3, #2
 8001628:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800162a:	2301      	movs	r3, #1
 800162c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800162e:	2310      	movs	r3, #16
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001632:	2302      	movs	r3, #2
 8001634:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001636:	2300      	movs	r3, #0
 8001638:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800163a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800163e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001640:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001644:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4618      	mov	r0, r3
 800164c:	f002 f91e 	bl	800388c <HAL_RCC_OscConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001656:	f000 fd8b 	bl	8002170 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165a:	230f      	movs	r3, #15
 800165c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800165e:	2303      	movs	r3, #3
 8001660:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800166e:	463b      	mov	r3, r7
 8001670:	2101      	movs	r1, #1
 8001672:	4618      	mov	r0, r3
 8001674:	f002 fc3a 	bl	8003eec <HAL_RCC_ClockConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800167e:	f000 fd77 	bl	8002170 <Error_Handler>
  }
}
 8001682:	bf00      	nop
 8001684:	3748      	adds	r7, #72	; 0x48
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40007000 	.word	0x40007000

08001690 <map>:

/* USER CODE BEGIN 4 */

uint16_t map(uint16_t input_value, uint16_t minRange, uint16_t maxRange,
		uint16_t New_minRange, uint16_t New_maxRange) {
 8001690:	b490      	push	{r4, r7}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	4604      	mov	r4, r0
 8001698:	4608      	mov	r0, r1
 800169a:	4611      	mov	r1, r2
 800169c:	461a      	mov	r2, r3
 800169e:	4623      	mov	r3, r4
 80016a0:	80fb      	strh	r3, [r7, #6]
 80016a2:	4603      	mov	r3, r0
 80016a4:	80bb      	strh	r3, [r7, #4]
 80016a6:	460b      	mov	r3, r1
 80016a8:	807b      	strh	r3, [r7, #2]
 80016aa:	4613      	mov	r3, r2
 80016ac:	803b      	strh	r3, [r7, #0]
	return (((input_value - minRange) * (New_maxRange - New_minRange))
 80016ae:	88fa      	ldrh	r2, [r7, #6]
 80016b0:	88bb      	ldrh	r3, [r7, #4]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	8a39      	ldrh	r1, [r7, #16]
 80016b6:	883a      	ldrh	r2, [r7, #0]
 80016b8:	1a8a      	subs	r2, r1, r2
 80016ba:	fb03 f202 	mul.w	r2, r3, r2
			/ (maxRange - minRange) + New_minRange);
 80016be:	8879      	ldrh	r1, [r7, #2]
 80016c0:	88bb      	ldrh	r3, [r7, #4]
 80016c2:	1acb      	subs	r3, r1, r3
 80016c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	883b      	ldrh	r3, [r7, #0]
 80016cc:	4413      	add	r3, r2
 80016ce:	b29b      	uxth	r3, r3
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc90      	pop	{r4, r7}
 80016d8:	4770      	bx	lr
	...

080016dc <PWMval>:
void PWMval(uint8_t ch, uint16_t val) {
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	460a      	mov	r2, r1
 80016e6:	71fb      	strb	r3, [r7, #7]
 80016e8:	4613      	mov	r3, r2
 80016ea:	80bb      	strh	r3, [r7, #4]
	switch (ch) {
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	2b07      	cmp	r3, #7
 80016f0:	d83a      	bhi.n	8001768 <PWMval+0x8c>
 80016f2:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <PWMval+0x1c>)
 80016f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f8:	08001719 	.word	0x08001719
 80016fc:	08001723 	.word	0x08001723
 8001700:	0800172d 	.word	0x0800172d
 8001704:	08001737 	.word	0x08001737
 8001708:	08001741 	.word	0x08001741
 800170c:	0800174b 	.word	0x0800174b
 8001710:	08001755 	.word	0x08001755
 8001714:	0800175f 	.word	0x0800175f
	case 0:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, val);
 8001718:	4b16      	ldr	r3, [pc, #88]	; (8001774 <PWMval+0x98>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	88ba      	ldrh	r2, [r7, #4]
 800171e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001720:	e022      	b.n	8001768 <PWMval+0x8c>
	case 1:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, val);
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <PWMval+0x98>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	88ba      	ldrh	r2, [r7, #4]
 8001728:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800172a:	e01d      	b.n	8001768 <PWMval+0x8c>
	case 2:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, val);
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <PWMval+0x98>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	88ba      	ldrh	r2, [r7, #4]
 8001732:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8001734:	e018      	b.n	8001768 <PWMval+0x8c>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, val);
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <PWMval+0x98>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	88ba      	ldrh	r2, [r7, #4]
 800173c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800173e:	e013      	b.n	8001768 <PWMval+0x8c>
	case 4:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, val);
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <PWMval+0x9c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	88ba      	ldrh	r2, [r7, #4]
 8001746:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001748:	e00e      	b.n	8001768 <PWMval+0x8c>
	case 5:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, val);
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <PWMval+0x9c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	88ba      	ldrh	r2, [r7, #4]
 8001750:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001752:	e009      	b.n	8001768 <PWMval+0x8c>
	case 6:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, val);
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <PWMval+0x9c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	88ba      	ldrh	r2, [r7, #4]
 800175a:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800175c:	e004      	b.n	8001768 <PWMval+0x8c>
	case 7:
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, val);
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <PWMval+0xa0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	88ba      	ldrh	r2, [r7, #4]
 8001764:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001766:	bf00      	nop
	}
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	2000016c 	.word	0x2000016c
 8001778:	2000012c 	.word	0x2000012c
 800177c:	200001ac 	.word	0x200001ac

08001780 <podstR>:
void podstR() {
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Podstawa_D1_GPIO_Port, Podstawa_D1_Pin, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	2120      	movs	r1, #32
 8001788:	4804      	ldr	r0, [pc, #16]	; (800179c <podstR+0x1c>)
 800178a:	f002 f84d 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Podstawa_D2_GPIO_Port, Podstawa_D2_Pin, GPIO_PIN_SET);
 800178e:	2201      	movs	r2, #1
 8001790:	2110      	movs	r1, #16
 8001792:	4802      	ldr	r0, [pc, #8]	; (800179c <podstR+0x1c>)
 8001794:	f002 f848 	bl	8003828 <HAL_GPIO_WritePin>

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40020400 	.word	0x40020400

080017a0 <podstL>:
void podstL() {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Podstawa_D2_GPIO_Port, Podstawa_D2_Pin, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2110      	movs	r1, #16
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <podstL+0x1c>)
 80017aa:	f002 f83d 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Podstawa_D1_GPIO_Port, Podstawa_D1_Pin, GPIO_PIN_SET);
 80017ae:	2201      	movs	r2, #1
 80017b0:	2120      	movs	r1, #32
 80017b2:	4802      	ldr	r0, [pc, #8]	; (80017bc <podstL+0x1c>)
 80017b4:	f002 f838 	bl	8003828 <HAL_GPIO_WritePin>
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40020400 	.word	0x40020400

080017c0 <stoppodst>:

void stoppodst() {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Podstawa_D1_GPIO_Port, Podstawa_D1_Pin, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2120      	movs	r1, #32
 80017c8:	4806      	ldr	r0, [pc, #24]	; (80017e4 <stoppodst+0x24>)
 80017ca:	f002 f82d 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Podstawa_D2_GPIO_Port, Podstawa_D2_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2110      	movs	r1, #16
 80017d2:	4804      	ldr	r0, [pc, #16]	; (80017e4 <stoppodst+0x24>)
 80017d4:	f002 f828 	bl	8003828 <HAL_GPIO_WritePin>
	PWMval(0, 0);
 80017d8:	2100      	movs	r1, #0
 80017da:	2000      	movs	r0, #0
 80017dc:	f7ff ff7e 	bl	80016dc <PWMval>
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40020400 	.word	0x40020400

080017e8 <czlon1R>:

void czlon1R() {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon1_D1_GPIO_Port, Czlon1_D1_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <czlon1R+0x20>)
 80017f4:	f002 f818 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon1_D2_GPIO_Port, Czlon1_D2_Pin, GPIO_PIN_SET);
 80017f8:	2201      	movs	r2, #1
 80017fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017fe:	4803      	ldr	r0, [pc, #12]	; (800180c <czlon1R+0x24>)
 8001800:	f002 f812 	bl	8003828 <HAL_GPIO_WritePin>
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40020400 	.word	0x40020400
 800180c:	40020000 	.word	0x40020000

08001810 <czlon1L>:
void czlon1L() {
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon1_D1_GPIO_Port, Czlon1_D1_Pin, GPIO_PIN_SET);
 8001814:	2201      	movs	r2, #1
 8001816:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <czlon1L+0x20>)
 800181c:	f002 f804 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon1_D2_GPIO_Port, Czlon1_D2_Pin, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001826:	4803      	ldr	r0, [pc, #12]	; (8001834 <czlon1L+0x24>)
 8001828:	f001 fffe 	bl	8003828 <HAL_GPIO_WritePin>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40020400 	.word	0x40020400
 8001834:	40020000 	.word	0x40020000

08001838 <stopczlon1>:
void stopczlon1() {
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon1_D1_GPIO_Port, Czlon1_D1_Pin, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001842:	4807      	ldr	r0, [pc, #28]	; (8001860 <stopczlon1+0x28>)
 8001844:	f001 fff0 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon1_D2_GPIO_Port, Czlon1_D2_Pin, GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <stopczlon1+0x2c>)
 8001850:	f001 ffea 	bl	8003828 <HAL_GPIO_WritePin>
	PWMval(1, 0);
 8001854:	2100      	movs	r1, #0
 8001856:	2001      	movs	r0, #1
 8001858:	f7ff ff40 	bl	80016dc <PWMval>
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40020400 	.word	0x40020400
 8001864:	40020000 	.word	0x40020000

08001868 <czlon2R>:

void czlon2R() {
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon2_D1_GPIO_Port, Czlon2_D1_Pin, GPIO_PIN_RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <czlon2R+0x20>)
 8001874:	f001 ffd8 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon2_D2_GPIO_Port, Czlon2_D2_Pin, GPIO_PIN_SET);
 8001878:	2201      	movs	r2, #1
 800187a:	2180      	movs	r1, #128	; 0x80
 800187c:	4803      	ldr	r0, [pc, #12]	; (800188c <czlon2R+0x24>)
 800187e:	f001 ffd3 	bl	8003828 <HAL_GPIO_WritePin>
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40020000 	.word	0x40020000
 800188c:	40020800 	.word	0x40020800

08001890 <czlon2L>:
void czlon2L() {
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon2_D1_GPIO_Port, Czlon2_D1_Pin, GPIO_PIN_SET);
 8001894:	2201      	movs	r2, #1
 8001896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <czlon2L+0x20>)
 800189c:	f001 ffc4 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon2_D2_GPIO_Port, Czlon2_D2_Pin, GPIO_PIN_RESET);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2180      	movs	r1, #128	; 0x80
 80018a4:	4803      	ldr	r0, [pc, #12]	; (80018b4 <czlon2L+0x24>)
 80018a6:	f001 ffbf 	bl	8003828 <HAL_GPIO_WritePin>
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40020000 	.word	0x40020000
 80018b4:	40020800 	.word	0x40020800

080018b8 <stopczlon2>:
void stopczlon2() {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon2_D1_GPIO_Port, Czlon2_D1_Pin, GPIO_PIN_RESET);
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c2:	4807      	ldr	r0, [pc, #28]	; (80018e0 <stopczlon2+0x28>)
 80018c4:	f001 ffb0 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon2_D2_GPIO_Port, Czlon2_D2_Pin, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	4805      	ldr	r0, [pc, #20]	; (80018e4 <stopczlon2+0x2c>)
 80018ce:	f001 ffab 	bl	8003828 <HAL_GPIO_WritePin>
	PWMval(2, 0);
 80018d2:	2100      	movs	r1, #0
 80018d4:	2002      	movs	r0, #2
 80018d6:	f7ff ff01 	bl	80016dc <PWMval>
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020800 	.word	0x40020800

080018e8 <czlon3R>:

void czlon3R() {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon3_D1_GPIO_Port, Czlon3_D1_Pin, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <czlon3R+0x20>)
 80018f4:	f001 ff98 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon3_D2_GPIO_Port, Czlon3_D2_Pin, GPIO_PIN_SET);
 80018f8:	2201      	movs	r2, #1
 80018fa:	2140      	movs	r1, #64	; 0x40
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <czlon3R+0x20>)
 80018fe:	f001 ff93 	bl	8003828 <HAL_GPIO_WritePin>
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40020800 	.word	0x40020800

0800190c <czlon3L>:
void czlon3L() {
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon3_D1_GPIO_Port, Czlon3_D1_Pin, GPIO_PIN_SET);
 8001910:	2201      	movs	r2, #1
 8001912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001916:	4805      	ldr	r0, [pc, #20]	; (800192c <czlon3L+0x20>)
 8001918:	f001 ff86 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon3_D2_GPIO_Port, Czlon3_D2_Pin, GPIO_PIN_RESET);
 800191c:	2200      	movs	r2, #0
 800191e:	2140      	movs	r1, #64	; 0x40
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <czlon3L+0x20>)
 8001922:	f001 ff81 	bl	8003828 <HAL_GPIO_WritePin>
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40020800 	.word	0x40020800

08001930 <stopczlon3>:
void stopczlon3() {
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon3_D1_GPIO_Port, Czlon3_D1_Pin, GPIO_PIN_RESET);
 8001934:	2200      	movs	r2, #0
 8001936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800193a:	4807      	ldr	r0, [pc, #28]	; (8001958 <stopczlon3+0x28>)
 800193c:	f001 ff74 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon3_D2_GPIO_Port, Czlon3_D2_Pin, GPIO_PIN_RESET);
 8001940:	2200      	movs	r2, #0
 8001942:	2140      	movs	r1, #64	; 0x40
 8001944:	4804      	ldr	r0, [pc, #16]	; (8001958 <stopczlon3+0x28>)
 8001946:	f001 ff6f 	bl	8003828 <HAL_GPIO_WritePin>
	PWMval(3, 0);
 800194a:	2100      	movs	r1, #0
 800194c:	2003      	movs	r0, #3
 800194e:	f7ff fec5 	bl	80016dc <PWMval>
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40020800 	.word	0x40020800

0800195c <czlon4R>:

void czlon4R() {
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon4_D1_GPIO_Port, Czlon4_D1_Pin, GPIO_PIN_RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	2120      	movs	r1, #32
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <czlon4R+0x20>)
 8001966:	f001 ff5f 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon4_D2_GPIO_Port, Czlon4_D2_Pin, GPIO_PIN_SET);
 800196a:	2201      	movs	r2, #1
 800196c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001970:	4803      	ldr	r0, [pc, #12]	; (8001980 <czlon4R+0x24>)
 8001972:	f001 ff59 	bl	8003828 <HAL_GPIO_WritePin>
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40020800 	.word	0x40020800
 8001980:	40020000 	.word	0x40020000

08001984 <czlon4L>:
void czlon4L() {
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon4_D1_GPIO_Port, Czlon4_D1_Pin, GPIO_PIN_SET);
 8001988:	2201      	movs	r2, #1
 800198a:	2120      	movs	r1, #32
 800198c:	4805      	ldr	r0, [pc, #20]	; (80019a4 <czlon4L+0x20>)
 800198e:	f001 ff4b 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon4_D2_GPIO_Port, Czlon4_D2_Pin, GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001998:	4803      	ldr	r0, [pc, #12]	; (80019a8 <czlon4L+0x24>)
 800199a:	f001 ff45 	bl	8003828 <HAL_GPIO_WritePin>
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40020000 	.word	0x40020000

080019ac <stopczlon4>:
void stopczlon4() {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon4_D1_GPIO_Port, Czlon4_D1_Pin, GPIO_PIN_RESET);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2120      	movs	r1, #32
 80019b4:	4807      	ldr	r0, [pc, #28]	; (80019d4 <stopczlon4+0x28>)
 80019b6:	f001 ff37 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon4_D2_GPIO_Port, Czlon4_D2_Pin, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019c0:	4805      	ldr	r0, [pc, #20]	; (80019d8 <stopczlon4+0x2c>)
 80019c2:	f001 ff31 	bl	8003828 <HAL_GPIO_WritePin>
	PWMval(4, 0);
 80019c6:	2100      	movs	r1, #0
 80019c8:	2004      	movs	r0, #4
 80019ca:	f7ff fe87 	bl	80016dc <PWMval>
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40020800 	.word	0x40020800
 80019d8:	40020000 	.word	0x40020000

080019dc <czlon5R>:

void czlon5R() {
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon5_D1_GPIO_Port, Czlon5_D1_Pin, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019e6:	4805      	ldr	r0, [pc, #20]	; (80019fc <czlon5R+0x20>)
 80019e8:	f001 ff1e 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon5_D2_GPIO_Port, Czlon5_D2_Pin, GPIO_PIN_SET);
 80019ec:	2201      	movs	r2, #1
 80019ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f2:	4803      	ldr	r0, [pc, #12]	; (8001a00 <czlon5R+0x24>)
 80019f4:	f001 ff18 	bl	8003828 <HAL_GPIO_WritePin>
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40020000 	.word	0x40020000
 8001a00:	40020400 	.word	0x40020400

08001a04 <czlon5L>:
void czlon5L() {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon5_D1_GPIO_Port, Czlon5_D1_Pin, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <czlon5L+0x20>)
 8001a10:	f001 ff0a 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon5_D2_GPIO_Port, Czlon5_D2_Pin, GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a1a:	4803      	ldr	r0, [pc, #12]	; (8001a28 <czlon5L+0x24>)
 8001a1c:	f001 ff04 	bl	8003828 <HAL_GPIO_WritePin>
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40020000 	.word	0x40020000
 8001a28:	40020400 	.word	0x40020400

08001a2c <stopczlon5>:
void stopczlon5() {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon5_D1_GPIO_Port, Czlon5_D1_Pin, GPIO_PIN_RESET);
 8001a30:	2200      	movs	r2, #0
 8001a32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a36:	4807      	ldr	r0, [pc, #28]	; (8001a54 <stopczlon5+0x28>)
 8001a38:	f001 fef6 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon5_D2_GPIO_Port, Czlon5_D2_Pin, GPIO_PIN_RESET);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <stopczlon5+0x2c>)
 8001a44:	f001 fef0 	bl	8003828 <HAL_GPIO_WritePin>
	PWMval(5, 0);
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2005      	movs	r0, #5
 8001a4c:	f7ff fe46 	bl	80016dc <PWMval>
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40020000 	.word	0x40020000
 8001a58:	40020400 	.word	0x40020400

08001a5c <LmotorF>:

void LmotorF() {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L_D1_GPIO_Port, L_D1_Pin, GPIO_PIN_RESET);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2104      	movs	r1, #4
 8001a64:	4805      	ldr	r0, [pc, #20]	; (8001a7c <LmotorF+0x20>)
 8001a66:	f001 fedf 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_D2_GPIO_Port, L_D2_Pin, GPIO_PIN_SET);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <LmotorF+0x20>)
 8001a72:	f001 fed9 	bl	8003828 <HAL_GPIO_WritePin>
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40020800 	.word	0x40020800

08001a80 <LmotorB>:
void LmotorB() {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L_D2_GPIO_Port, L_D2_Pin, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <LmotorB+0x20>)
 8001a8c:	f001 fecc 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_D1_GPIO_Port, L_D1_Pin, GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	2104      	movs	r1, #4
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <LmotorB+0x20>)
 8001a96:	f001 fec7 	bl	8003828 <HAL_GPIO_WritePin>
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40020800 	.word	0x40020800

08001aa4 <RmotorF>:

void RmotorF() {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R_D1_GPIO_Port, R_D1_Pin, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2104      	movs	r1, #4
 8001aac:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <RmotorF+0x20>)
 8001aae:	f001 febb 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_D2_GPIO_Port, R_D2_Pin, GPIO_PIN_SET);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ab8:	4803      	ldr	r0, [pc, #12]	; (8001ac8 <RmotorF+0x24>)
 8001aba:	f001 feb5 	bl	8003828 <HAL_GPIO_WritePin>
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40020c00 	.word	0x40020c00
 8001ac8:	40020800 	.word	0x40020800

08001acc <RmotorB>:
void RmotorB() {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R_D2_GPIO_Port, R_D2_Pin, GPIO_PIN_RESET);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <RmotorB+0x20>)
 8001ad8:	f001 fea6 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_D1_GPIO_Port, R_D1_Pin, GPIO_PIN_SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	2104      	movs	r1, #4
 8001ae0:	4803      	ldr	r0, [pc, #12]	; (8001af0 <RmotorB+0x24>)
 8001ae2:	f001 fea1 	bl	8003828 <HAL_GPIO_WritePin>
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40020800 	.word	0x40020800
 8001af0:	40020c00 	.word	0x40020c00

08001af4 <stopjazdaR>:

void stopjazdaR() {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	if (0 > pwmRight) {
 8001af8:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <stopjazdaR+0xc8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f04f 0100 	mov.w	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fc97 	bl	8000434 <__aeabi_fcmplt>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00c      	beq.n	8001b26 <stopjazdaR+0x32>
		pwmRight = pwmRight + step;
 8001b0c:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <stopjazdaR+0xc8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a2b      	ldr	r2, [pc, #172]	; (8001bc0 <stopjazdaR+0xcc>)
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fb36 	bl	8000188 <__addsf3>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <stopjazdaR+0xc8>)
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	e015      	b.n	8001b52 <stopjazdaR+0x5e>
	} else if (0 < pwmRight) {
 8001b26:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <stopjazdaR+0xc8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f04f 0100 	mov.w	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fc9e 	bl	8000470 <__aeabi_fcmpgt>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00b      	beq.n	8001b52 <stopjazdaR+0x5e>
		pwmRight = pwmRight - step;
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <stopjazdaR+0xc8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a20      	ldr	r2, [pc, #128]	; (8001bc0 <stopjazdaR+0xcc>)
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fb1d 	bl	8000184 <__aeabi_fsub>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <stopjazdaR+0xc8>)
 8001b50:	601a      	str	r2, [r3, #0]
	}
	if (pwmRight >= 0) {
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <stopjazdaR+0xc8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f04f 0100 	mov.w	r1, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fc7e 	bl	800045c <__aeabi_fcmpge>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00d      	beq.n	8001b82 <stopjazdaR+0x8e>
		RmotorF();
 8001b66:	f7ff ff9d 	bl	8001aa4 <RmotorF>
		PWMval(6, (int) pwmRight);
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <stopjazdaR+0xc8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fc88 	bl	8000484 <__aeabi_f2iz>
 8001b74:	4603      	mov	r3, r0
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	4619      	mov	r1, r3
 8001b7a:	2006      	movs	r0, #6
 8001b7c:	f7ff fdae 	bl	80016dc <PWMval>
	} else if (pwmRight < 0) {
		RmotorB();
		PWMval(6, ((int) pwmRight) * -1);
	}

}
 8001b80:	e019      	b.n	8001bb6 <stopjazdaR+0xc2>
	} else if (pwmRight < 0) {
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <stopjazdaR+0xc8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f04f 0100 	mov.w	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fc52 	bl	8000434 <__aeabi_fcmplt>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d100      	bne.n	8001b98 <stopjazdaR+0xa4>
}
 8001b96:	e00e      	b.n	8001bb6 <stopjazdaR+0xc2>
		RmotorB();
 8001b98:	f7ff ff98 	bl	8001acc <RmotorB>
		PWMval(6, ((int) pwmRight) * -1);
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <stopjazdaR+0xc8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fc6f 	bl	8000484 <__aeabi_f2iz>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	425b      	negs	r3, r3
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	4619      	mov	r1, r3
 8001bb0:	2006      	movs	r0, #6
 8001bb2:	f7ff fd93 	bl	80016dc <PWMval>
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000070 	.word	0x20000070
 8001bc0:	20000008 	.word	0x20000008

08001bc4 <stopjazdaL>:
void stopjazdaL() {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	if (0 > pwmLeft) {
 8001bc8:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <stopjazdaL+0xc8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f04f 0100 	mov.w	r1, #0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fc2f 	bl	8000434 <__aeabi_fcmplt>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00c      	beq.n	8001bf6 <stopjazdaL+0x32>
		pwmLeft = pwmLeft + step;
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <stopjazdaL+0xc8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a2b      	ldr	r2, [pc, #172]	; (8001c90 <stopjazdaL+0xcc>)
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	4611      	mov	r1, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe face 	bl	8000188 <__addsf3>
 8001bec:	4603      	mov	r3, r0
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <stopjazdaL+0xc8>)
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	e015      	b.n	8001c22 <stopjazdaL+0x5e>
	} else if (0 < pwmLeft) {
 8001bf6:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <stopjazdaL+0xc8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f04f 0100 	mov.w	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fc36 	bl	8000470 <__aeabi_fcmpgt>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00b      	beq.n	8001c22 <stopjazdaL+0x5e>
		pwmLeft = pwmLeft - step;
 8001c0a:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <stopjazdaL+0xc8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a20      	ldr	r2, [pc, #128]	; (8001c90 <stopjazdaL+0xcc>)
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fab5 	bl	8000184 <__aeabi_fsub>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <stopjazdaL+0xc8>)
 8001c20:	601a      	str	r2, [r3, #0]
	}
	if (pwmLeft >= 0) {
 8001c22:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <stopjazdaL+0xc8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f04f 0100 	mov.w	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fc16 	bl	800045c <__aeabi_fcmpge>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00d      	beq.n	8001c52 <stopjazdaL+0x8e>
		LmotorF();
 8001c36:	f7ff ff11 	bl	8001a5c <LmotorF>
		PWMval(7, (int) pwmLeft);
 8001c3a:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <stopjazdaL+0xc8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc20 	bl	8000484 <__aeabi_f2iz>
 8001c44:	4603      	mov	r3, r0
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	4619      	mov	r1, r3
 8001c4a:	2007      	movs	r0, #7
 8001c4c:	f7ff fd46 	bl	80016dc <PWMval>
	} else if (pwmLeft < 0) {
		LmotorB();
		PWMval(7, ((int) pwmLeft) * -1);
	}

}
 8001c50:	e019      	b.n	8001c86 <stopjazdaL+0xc2>
	} else if (pwmLeft < 0) {
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <stopjazdaL+0xc8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f04f 0100 	mov.w	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fbea 	bl	8000434 <__aeabi_fcmplt>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d100      	bne.n	8001c68 <stopjazdaL+0xa4>
}
 8001c66:	e00e      	b.n	8001c86 <stopjazdaL+0xc2>
		LmotorB();
 8001c68:	f7ff ff0a 	bl	8001a80 <LmotorB>
		PWMval(7, ((int) pwmLeft) * -1);
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <stopjazdaL+0xc8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc07 	bl	8000484 <__aeabi_f2iz>
 8001c76:	4603      	mov	r3, r0
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	425b      	negs	r3, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	4619      	mov	r1, r3
 8001c80:	2007      	movs	r0, #7
 8001c82:	f7ff fd2b 	bl	80016dc <PWMval>
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000074 	.word	0x20000074
 8001c90:	20000008 	.word	0x20000008

08001c94 <rightside>:
void rightside() {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af02      	add	r7, sp, #8
	pwm1 = map(byte7, 32, 127, 0, 1000);
 8001c9a:	4b40      	ldr	r3, [pc, #256]	; (8001d9c <rightside+0x108>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	b298      	uxth	r0, r3
 8001ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	227f      	movs	r2, #127	; 0x7f
 8001caa:	2120      	movs	r1, #32
 8001cac:	f7ff fcf0 	bl	8001690 <map>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fb18 	bl	80002e8 <__aeabi_ui2f>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4a39      	ldr	r2, [pc, #228]	; (8001da0 <rightside+0x10c>)
 8001cbc:	6013      	str	r3, [r2, #0]
	if (button) {
 8001cbe:	4b39      	ldr	r3, [pc, #228]	; (8001da4 <rightside+0x110>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <rightside+0x3e>
		pwm1 = pwm1 * -1;
 8001cc6:	4b36      	ldr	r3, [pc, #216]	; (8001da0 <rightside+0x10c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001cce:	4a34      	ldr	r2, [pc, #208]	; (8001da0 <rightside+0x10c>)
 8001cd0:	6013      	str	r3, [r2, #0]
	}

	if (pwm1 > pwmRight) {
 8001cd2:	4b33      	ldr	r3, [pc, #204]	; (8001da0 <rightside+0x10c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a34      	ldr	r2, [pc, #208]	; (8001da8 <rightside+0x114>)
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fbc7 	bl	8000470 <__aeabi_fcmpgt>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00c      	beq.n	8001d02 <rightside+0x6e>
		pwmRight = pwmRight + step;
 8001ce8:	4b2f      	ldr	r3, [pc, #188]	; (8001da8 <rightside+0x114>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a2f      	ldr	r2, [pc, #188]	; (8001dac <rightside+0x118>)
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fa48 	bl	8000188 <__addsf3>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <rightside+0x114>)
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	e016      	b.n	8001d30 <rightside+0x9c>
	} else if (pwm1 < pwmRight) {
 8001d02:	4b27      	ldr	r3, [pc, #156]	; (8001da0 <rightside+0x10c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a28      	ldr	r2, [pc, #160]	; (8001da8 <rightside+0x114>)
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fb91 	bl	8000434 <__aeabi_fcmplt>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00b      	beq.n	8001d30 <rightside+0x9c>
		pwmRight = pwmRight - step;
 8001d18:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <rightside+0x114>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a23      	ldr	r2, [pc, #140]	; (8001dac <rightside+0x118>)
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fa2e 	bl	8000184 <__aeabi_fsub>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <rightside+0x114>)
 8001d2e:	601a      	str	r2, [r3, #0]
	}
	if (pwmRight >= 0) {
 8001d30:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <rightside+0x114>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f04f 0100 	mov.w	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fb8f 	bl	800045c <__aeabi_fcmpge>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00d      	beq.n	8001d60 <rightside+0xcc>
		RmotorF();
 8001d44:	f7ff feae 	bl	8001aa4 <RmotorF>
		PWMval(6, (int) pwmRight);
 8001d48:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <rightside+0x114>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fb99 	bl	8000484 <__aeabi_f2iz>
 8001d52:	4603      	mov	r3, r0
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	4619      	mov	r1, r3
 8001d58:	2006      	movs	r0, #6
 8001d5a:	f7ff fcbf 	bl	80016dc <PWMval>
	} else if (pwmRight < 0) {
		RmotorB();
		PWMval(6, ((int) pwmRight) * -1);
	}

}
 8001d5e:	e019      	b.n	8001d94 <rightside+0x100>
	} else if (pwmRight < 0) {
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <rightside+0x114>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f04f 0100 	mov.w	r1, #0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fb63 	bl	8000434 <__aeabi_fcmplt>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d100      	bne.n	8001d76 <rightside+0xe2>
}
 8001d74:	e00e      	b.n	8001d94 <rightside+0x100>
		RmotorB();
 8001d76:	f7ff fea9 	bl	8001acc <RmotorB>
		PWMval(6, ((int) pwmRight) * -1);
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <rightside+0x114>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fb80 	bl	8000484 <__aeabi_f2iz>
 8001d84:	4603      	mov	r3, r0
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	425b      	negs	r3, r3
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	2006      	movs	r0, #6
 8001d90:	f7ff fca4 	bl	80016dc <PWMval>
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000064 	.word	0x20000064
 8001da0:	20000068 	.word	0x20000068
 8001da4:	2000004d 	.word	0x2000004d
 8001da8:	20000070 	.word	0x20000070
 8001dac:	20000008 	.word	0x20000008

08001db0 <leftside>:
void leftside() {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af02      	add	r7, sp, #8

	pwm2 = map(byte8, 32, 127, 0, 1000);
 8001db6:	4b40      	ldr	r3, [pc, #256]	; (8001eb8 <leftside+0x108>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	b298      	uxth	r0, r3
 8001dbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	227f      	movs	r2, #127	; 0x7f
 8001dc6:	2120      	movs	r1, #32
 8001dc8:	f7ff fc62 	bl	8001690 <map>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fa8a 	bl	80002e8 <__aeabi_ui2f>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4a39      	ldr	r2, [pc, #228]	; (8001ebc <leftside+0x10c>)
 8001dd8:	6013      	str	r3, [r2, #0]

	if (button01) {
 8001dda:	4b39      	ldr	r3, [pc, #228]	; (8001ec0 <leftside+0x110>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <leftside+0x3e>
		pwm2 = pwm2 * -1;
 8001de2:	4b36      	ldr	r3, [pc, #216]	; (8001ebc <leftside+0x10c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001dea:	4a34      	ldr	r2, [pc, #208]	; (8001ebc <leftside+0x10c>)
 8001dec:	6013      	str	r3, [r2, #0]
	}

	if (pwm2 > pwmLeft) {
 8001dee:	4b33      	ldr	r3, [pc, #204]	; (8001ebc <leftside+0x10c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a34      	ldr	r2, [pc, #208]	; (8001ec4 <leftside+0x114>)
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fb39 	bl	8000470 <__aeabi_fcmpgt>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00c      	beq.n	8001e1e <leftside+0x6e>
		pwmLeft = pwmLeft + step;
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <leftside+0x114>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a2f      	ldr	r2, [pc, #188]	; (8001ec8 <leftside+0x118>)
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe f9ba 	bl	8000188 <__addsf3>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461a      	mov	r2, r3
 8001e18:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <leftside+0x114>)
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e016      	b.n	8001e4c <leftside+0x9c>
	} else if (pwm2 < pwmLeft) {
 8001e1e:	4b27      	ldr	r3, [pc, #156]	; (8001ebc <leftside+0x10c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a28      	ldr	r2, [pc, #160]	; (8001ec4 <leftside+0x114>)
 8001e24:	6812      	ldr	r2, [r2, #0]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fb03 	bl	8000434 <__aeabi_fcmplt>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00b      	beq.n	8001e4c <leftside+0x9c>
		pwmLeft = pwmLeft - step;
 8001e34:	4b23      	ldr	r3, [pc, #140]	; (8001ec4 <leftside+0x114>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a23      	ldr	r2, [pc, #140]	; (8001ec8 <leftside+0x118>)
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe f9a0 	bl	8000184 <__aeabi_fsub>
 8001e44:	4603      	mov	r3, r0
 8001e46:	461a      	mov	r2, r3
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <leftside+0x114>)
 8001e4a:	601a      	str	r2, [r3, #0]
	}
	if (pwmLeft >= 0) {
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <leftside+0x114>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f04f 0100 	mov.w	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fb01 	bl	800045c <__aeabi_fcmpge>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00d      	beq.n	8001e7c <leftside+0xcc>
		LmotorF();
 8001e60:	f7ff fdfc 	bl	8001a5c <LmotorF>
		PWMval(7, (int) pwmLeft);
 8001e64:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <leftside+0x114>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fb0b 	bl	8000484 <__aeabi_f2iz>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	4619      	mov	r1, r3
 8001e74:	2007      	movs	r0, #7
 8001e76:	f7ff fc31 	bl	80016dc <PWMval>
	} else if (pwmLeft < 0) {
		LmotorB();
		PWMval(7, ((int) pwmLeft) * -1);
	}

}
 8001e7a:	e019      	b.n	8001eb0 <leftside+0x100>
	} else if (pwmLeft < 0) {
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <leftside+0x114>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f04f 0100 	mov.w	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fad5 	bl	8000434 <__aeabi_fcmplt>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d100      	bne.n	8001e92 <leftside+0xe2>
}
 8001e90:	e00e      	b.n	8001eb0 <leftside+0x100>
		LmotorB();
 8001e92:	f7ff fdf5 	bl	8001a80 <LmotorB>
		PWMval(7, ((int) pwmLeft) * -1);
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <leftside+0x114>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe faf2 	bl	8000484 <__aeabi_f2iz>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	425b      	negs	r3, r3
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	2007      	movs	r0, #7
 8001eac:	f7ff fc16 	bl	80016dc <PWMval>
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000065 	.word	0x20000065
 8001ebc:	2000006c 	.word	0x2000006c
 8001ec0:	2000004e 	.word	0x2000004e
 8001ec4:	20000074 	.word	0x20000074
 8001ec8:	20000008 	.word	0x20000008

08001ecc <servox>:

void servox() {
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af02      	add	r7, sp, #8

	sx = map(byte5, 32, 127, 1250,1750);
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <servox+0x70>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	b298      	uxth	r0, r3
 8001ed8:	f240 63d6 	movw	r3, #1750	; 0x6d6
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8001ee2:	227f      	movs	r2, #127	; 0x7f
 8001ee4:	2120      	movs	r1, #32
 8001ee6:	f7ff fbd3 	bl	8001690 <map>
 8001eea:	4603      	mov	r3, r0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe f9fb 	bl	80002e8 <__aeabi_ui2f>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <servox+0x74>)
 8001ef6:	6013      	str	r3, [r2, #0]
	if(byte5 < 90 && byte5 > 70)
 8001ef8:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <servox+0x70>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b59      	cmp	r3, #89	; 0x59
 8001efe:	d80f      	bhi.n	8001f20 <servox+0x54>
 8001f00:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <servox+0x70>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b46      	cmp	r3, #70	; 0x46
 8001f06:	d90b      	bls.n	8001f20 <servox+0x54>
	{
		sx = 1500;
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <servox+0x74>)
 8001f0a:	4a0e      	ldr	r2, [pc, #56]	; (8001f44 <servox+0x78>)
 8001f0c:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, sx);
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <servox+0x74>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a0d      	ldr	r2, [pc, #52]	; (8001f48 <servox+0x7c>)
 8001f14:	6814      	ldr	r4, [r2, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fada 	bl	80004d0 <__aeabi_f2uiz>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	6363      	str	r3, [r4, #52]	; 0x34
	}

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, sx);
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <servox+0x74>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <servox+0x7c>)
 8001f26:	6814      	ldr	r4, [r2, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fad1 	bl	80004d0 <__aeabi_f2uiz>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	6363      	str	r3, [r4, #52]	; 0x34


}
 8001f32:	bf00      	nop
 8001f34:	3704      	adds	r7, #4
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd90      	pop	{r4, r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000062 	.word	0x20000062
 8001f40:	20000078 	.word	0x20000078
 8001f44:	44bb8000 	.word	0x44bb8000
 8001f48:	200000ec 	.word	0x200000ec

08001f4c <servox0>:
void servox0() {
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <servox0+0x18>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001f58:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	200000ec 	.word	0x200000ec

08001f68 <servoy>:
void servoy() {
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af02      	add	r7, sp, #8

	sy = map(byte6, 32, 127, 1000, 2000);
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <servoy+0x48>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	b298      	uxth	r0, r3
 8001f74:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7e:	227f      	movs	r2, #127	; 0x7f
 8001f80:	2120      	movs	r1, #32
 8001f82:	f7ff fb85 	bl	8001690 <map>
 8001f86:	4603      	mov	r3, r0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe f9ad 	bl	80002e8 <__aeabi_ui2f>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4a08      	ldr	r2, [pc, #32]	; (8001fb4 <servoy+0x4c>)
 8001f92:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, sy);
 8001f94:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <servoy+0x4c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <servoy+0x50>)
 8001f9a:	6814      	ldr	r4, [r2, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fa97 	bl	80004d0 <__aeabi_f2uiz>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	6423      	str	r3, [r4, #64]	; 0x40

}
 8001fa6:	bf00      	nop
 8001fa8:	3704      	adds	r7, #4
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd90      	pop	{r4, r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000063 	.word	0x20000063
 8001fb4:	2000007c 	.word	0x2000007c
 8001fb8:	200000ec 	.word	0x200000ec

08001fbc <servoy0>:
void servoy0(){
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1500);
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <servoy0+0x18>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40

}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	200000ec 	.word	0x200000ec

08001fd8 <motor0control>:

void motor0control() {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
	if (button1A) {
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <motor0control+0x3c>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d007      	beq.n	8001ff4 <motor0control+0x1c>
		podstL();
 8001fe4:	f7ff fbdc 	bl	80017a0 <podstL>
		PWMval(0, 1000);
 8001fe8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7ff fb75 	bl	80016dc <PWMval>
		podstR();
		PWMval(0, 1000);
	} else {
		stoppodst();
	}
}
 8001ff2:	e00d      	b.n	8002010 <motor0control+0x38>
	} else if (button1B) {
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <motor0control+0x40>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d007      	beq.n	800200c <motor0control+0x34>
		podstR();
 8001ffc:	f7ff fbc0 	bl	8001780 <podstR>
		PWMval(0, 1000);
 8002000:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002004:	2000      	movs	r0, #0
 8002006:	f7ff fb69 	bl	80016dc <PWMval>
}
 800200a:	e001      	b.n	8002010 <motor0control+0x38>
		stoppodst();
 800200c:	f7ff fbd8 	bl	80017c0 <stoppodst>
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}
 8002014:	2000004f 	.word	0x2000004f
 8002018:	20000050 	.word	0x20000050

0800201c <motor1control>:

void motor1control() {
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
	if (button2A) {
 8002020:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <motor1control+0x3c>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <motor1control+0x1c>
		czlon1L();
 8002028:	f7ff fbf2 	bl	8001810 <czlon1L>
		PWMval(1, 1000);
 800202c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002030:	2001      	movs	r0, #1
 8002032:	f7ff fb53 	bl	80016dc <PWMval>
		czlon1R();
		PWMval(1, 1000);
	} else {
		stopczlon1();
	}
}
 8002036:	e00d      	b.n	8002054 <motor1control+0x38>
	} else if (button2B) {
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <motor1control+0x40>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d007      	beq.n	8002050 <motor1control+0x34>
		czlon1R();
 8002040:	f7ff fbd2 	bl	80017e8 <czlon1R>
		PWMval(1, 1000);
 8002044:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002048:	2001      	movs	r0, #1
 800204a:	f7ff fb47 	bl	80016dc <PWMval>
}
 800204e:	e001      	b.n	8002054 <motor1control+0x38>
		stopczlon1();
 8002050:	f7ff fbf2 	bl	8001838 <stopczlon1>
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000051 	.word	0x20000051
 800205c:	20000052 	.word	0x20000052

08002060 <motor2control>:

void motor2control() {
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
	if (button3A) {
 8002064:	4b0d      	ldr	r3, [pc, #52]	; (800209c <motor2control+0x3c>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d007      	beq.n	800207c <motor2control+0x1c>
		czlon2L();
 800206c:	f7ff fc10 	bl	8001890 <czlon2L>
		PWMval(2, 1000);
 8002070:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002074:	2002      	movs	r0, #2
 8002076:	f7ff fb31 	bl	80016dc <PWMval>
		czlon2R();
		PWMval(2, 1000);
	} else {
		stopczlon2();
	}
}
 800207a:	e00d      	b.n	8002098 <motor2control+0x38>
	} else if (button3B) {
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <motor2control+0x40>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d007      	beq.n	8002094 <motor2control+0x34>
		czlon2R();
 8002084:	f7ff fbf0 	bl	8001868 <czlon2R>
		PWMval(2, 1000);
 8002088:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800208c:	2002      	movs	r0, #2
 800208e:	f7ff fb25 	bl	80016dc <PWMval>
}
 8002092:	e001      	b.n	8002098 <motor2control+0x38>
		stopczlon2();
 8002094:	f7ff fc10 	bl	80018b8 <stopczlon2>
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000053 	.word	0x20000053
 80020a0:	20000054 	.word	0x20000054

080020a4 <motor3control>:

void motor3control() {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
	if (button4A) {
 80020a8:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <motor3control+0x3c>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d007      	beq.n	80020c0 <motor3control+0x1c>
		czlon3L();
 80020b0:	f7ff fc2c 	bl	800190c <czlon3L>
		PWMval(3, 1000);
 80020b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020b8:	2003      	movs	r0, #3
 80020ba:	f7ff fb0f 	bl	80016dc <PWMval>
		czlon3R();
		PWMval(3, 1000);
	} else {
		stopczlon3();
	}
}
 80020be:	e00d      	b.n	80020dc <motor3control+0x38>
	} else if (button4B) {
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <motor3control+0x40>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d007      	beq.n	80020d8 <motor3control+0x34>
		czlon3R();
 80020c8:	f7ff fc0e 	bl	80018e8 <czlon3R>
		PWMval(3, 1000);
 80020cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020d0:	2003      	movs	r0, #3
 80020d2:	f7ff fb03 	bl	80016dc <PWMval>
}
 80020d6:	e001      	b.n	80020dc <motor3control+0x38>
		stopczlon3();
 80020d8:	f7ff fc2a 	bl	8001930 <stopczlon3>
}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000055 	.word	0x20000055
 80020e4:	20000056 	.word	0x20000056

080020e8 <motor4control>:

void motor4control() {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	if (moveA) {
 80020ec:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <motor4control+0x3c>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d007      	beq.n	8002104 <motor4control+0x1c>
		czlon4L();
 80020f4:	f7ff fc46 	bl	8001984 <czlon4L>
		PWMval(4, 1000);
 80020f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020fc:	2004      	movs	r0, #4
 80020fe:	f7ff faed 	bl	80016dc <PWMval>
		czlon4R();
		PWMval(4, 1000);
	} else {
		stopczlon4();
	}
}
 8002102:	e00d      	b.n	8002120 <motor4control+0x38>
	} else if (moveB) {
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <motor4control+0x40>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d007      	beq.n	800211c <motor4control+0x34>
		czlon4R();
 800210c:	f7ff fc26 	bl	800195c <czlon4R>
		PWMval(4, 1000);
 8002110:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002114:	2004      	movs	r0, #4
 8002116:	f7ff fae1 	bl	80016dc <PWMval>
}
 800211a:	e001      	b.n	8002120 <motor4control+0x38>
		stopczlon4();
 800211c:	f7ff fc46 	bl	80019ac <stopczlon4>
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000057 	.word	0x20000057
 8002128:	20000058 	.word	0x20000058

0800212c <motor5control>:

void motor5control() {
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	if (rotateA) {
 8002130:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <motor5control+0x3c>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <motor5control+0x1c>
		czlon5L();
 8002138:	f7ff fc64 	bl	8001a04 <czlon5L>
		PWMval(5, 1000);
 800213c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002140:	2005      	movs	r0, #5
 8002142:	f7ff facb 	bl	80016dc <PWMval>
		czlon5R();
		PWMval(5, 1000);
	} else {
		stopczlon5();
	}
}
 8002146:	e00d      	b.n	8002164 <motor5control+0x38>
	} else if (rotateB) {
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <motor5control+0x40>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d007      	beq.n	8002160 <motor5control+0x34>
		czlon5R();
 8002150:	f7ff fc44 	bl	80019dc <czlon5R>
		PWMval(5, 1000);
 8002154:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002158:	2005      	movs	r0, #5
 800215a:	f7ff fabf 	bl	80016dc <PWMval>
}
 800215e:	e001      	b.n	8002164 <motor5control+0x38>
		stopczlon5();
 8002160:	f7ff fc64 	bl	8001a2c <stopczlon5>
}
 8002164:	bf00      	nop
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000059 	.word	0x20000059
 800216c:	2000005a 	.word	0x2000005a

08002170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002174:	b672      	cpsid	i
}
 8002176:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002178:	e7fe      	b.n	8002178 <Error_Handler+0x8>
	...

0800217c <nRF24_SendSpi>:
#define NRF24_CE_LOW		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET)

// Spi send and read

static void nRF24_SendSpi(uint8_t *Data, uint8_t length)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, length, 1000);
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <nRF24_SendSpi+0x28>)
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	b29a      	uxth	r2, r3
 8002190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	f002 f9f8 	bl	800458a <HAL_SPI_Transmit>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000008c 	.word	0x2000008c

080021a8 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t length)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, length, 1000);
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <nRF24_ReadSpi+0x28>)
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	f002 fb25 	bl	8004810 <HAL_SPI_Receive>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	2000008c 	.word	0x2000008c

080021d4 <nRF24_ReadRegister>:

//Reading register

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80021e2:	2200      	movs	r2, #0
 80021e4:	2104      	movs	r1, #4
 80021e6:	480c      	ldr	r0, [pc, #48]	; (8002218 <nRF24_ReadRegister+0x44>)
 80021e8:	f001 fb1e 	bl	8003828 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 80021ec:	1dfb      	adds	r3, r7, #7
 80021ee:	2101      	movs	r1, #1
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ffc3 	bl	800217c <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 80021f6:	f107 030f 	add.w	r3, r7, #15
 80021fa:	2101      	movs	r1, #1
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ffd3 	bl	80021a8 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8002202:	2201      	movs	r2, #1
 8002204:	2104      	movs	r1, #4
 8002206:	4804      	ldr	r0, [pc, #16]	; (8002218 <nRF24_ReadRegister+0x44>)
 8002208:	f001 fb0e 	bl	8003828 <HAL_GPIO_WritePin>

	return result;
 800220c:	7bfb      	ldrb	r3, [r7, #15]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40020400 	.word	0x40020400

0800221c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* result, uint8_t lenght)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	71fb      	strb	r3, [r7, #7]
 8002228:	4613      	mov	r3, r2
 800222a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002230:	2200      	movs	r2, #0
 8002232:	2104      	movs	r1, #4
 8002234:	480a      	ldr	r0, [pc, #40]	; (8002260 <nRF24_ReadRegisters+0x44>)
 8002236:	f001 faf7 	bl	8003828 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 800223a:	1dfb      	adds	r3, r7, #7
 800223c:	2101      	movs	r1, #1
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ff9c 	bl	800217c <nRF24_SendSpi>
	nRF24_ReadSpi(result, lenght);
 8002244:	79bb      	ldrb	r3, [r7, #6]
 8002246:	4619      	mov	r1, r3
 8002248:	6838      	ldr	r0, [r7, #0]
 800224a:	f7ff ffad 	bl	80021a8 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 800224e:	2201      	movs	r2, #1
 8002250:	2104      	movs	r1, #4
 8002252:	4803      	ldr	r0, [pc, #12]	; (8002260 <nRF24_ReadRegisters+0x44>)
 8002254:	f001 fae8 	bl	8003828 <HAL_GPIO_WritePin>
}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40020400 	.word	0x40020400

08002264 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t value)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	460a      	mov	r2, r1
 800226e:	71fb      	strb	r3, [r7, #7]
 8002270:	4613      	mov	r3, r2
 8002272:	71bb      	strb	r3, [r7, #6]
	uint8_t list[2];

	list[0] = NRF24_CMD_W_REGISTER | reg;
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	f043 0320 	orr.w	r3, r3, #32
 800227a:	b2db      	uxtb	r3, r3
 800227c:	733b      	strb	r3, [r7, #12]
	list[1] = value;
 800227e:	79bb      	ldrb	r3, [r7, #6]
 8002280:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8002282:	2200      	movs	r2, #0
 8002284:	2104      	movs	r1, #4
 8002286:	4809      	ldr	r0, [pc, #36]	; (80022ac <nRF24_WriteRegister+0x48>)
 8002288:	f001 face 	bl	8003828 <HAL_GPIO_WritePin>

	nRF24_SendSpi(list, 2);
 800228c:	f107 030c 	add.w	r3, r7, #12
 8002290:	2102      	movs	r1, #2
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff ff72 	bl	800217c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8002298:	2201      	movs	r2, #1
 800229a:	2104      	movs	r1, #4
 800229c:	4803      	ldr	r0, [pc, #12]	; (80022ac <nRF24_WriteRegister+0x48>)
 800229e:	f001 fac3 	bl	8003828 <HAL_GPIO_WritePin>
}
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40020400 	.word	0x40020400

080022b0 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* result, uint8_t lenght)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	6039      	str	r1, [r7, #0]
 80022ba:	71fb      	strb	r3, [r7, #7]
 80022bc:	4613      	mov	r3, r2
 80022be:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	f043 0320 	orr.w	r3, r3, #32
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80022ca:	2200      	movs	r2, #0
 80022cc:	2104      	movs	r1, #4
 80022ce:	480b      	ldr	r0, [pc, #44]	; (80022fc <nRF24_WriteRegisters+0x4c>)
 80022d0:	f001 faaa 	bl	8003828 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80022d4:	1dfb      	adds	r3, r7, #7
 80022d6:	2101      	movs	r1, #1
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff4f 	bl	800217c <nRF24_SendSpi>
	nRF24_SendSpi(result, lenght);
 80022de:	79bb      	ldrb	r3, [r7, #6]
 80022e0:	4619      	mov	r1, r3
 80022e2:	6838      	ldr	r0, [r7, #0]
 80022e4:	f7ff ff4a 	bl	800217c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80022e8:	2201      	movs	r2, #1
 80022ea:	2104      	movs	r1, #4
 80022ec:	4803      	ldr	r0, [pc, #12]	; (80022fc <nRF24_WriteRegisters+0x4c>)
 80022ee:	f001 fa9b 	bl	8003828 <HAL_GPIO_WritePin>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40020400 	.word	0x40020400

08002300 <nRF24_ReadConfig>:

uint8_t nRF24_ReadConfig(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8002304:	2000      	movs	r0, #0
 8002306:	f7ff ff65 	bl	80021d4 <nRF24_ReadRegister>
 800230a:	4603      	mov	r3, r0
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd80      	pop	{r7, pc}

08002310 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t config)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, config);
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	4619      	mov	r1, r3
 800231e:	2000      	movs	r0, #0
 8002320:	f7ff ffa0 	bl	8002264 <nRF24_WriteRegister>
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8002330:	2007      	movs	r0, #7
 8002332:	f7ff ff4f 	bl	80021d4 <nRF24_ReadRegister>
 8002336:	4603      	mov	r3, r0
}
 8002338:	4618      	mov	r0, r3
 800233a:	bd80      	pop	{r7, pc}

0800233c <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	4619      	mov	r1, r3
 800234a:	2007      	movs	r0, #7
 800234c:	f7ff ff8a 	bl	8002264 <nRF24_WriteRegister>
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 800235e:	f7ff ffcf 	bl	8002300 <nRF24_ReadConfig>
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8002366:	4911      	ldr	r1, [pc, #68]	; (80023ac <nRF24_RX_Mode+0x54>)
 8002368:	2000      	movs	r0, #0
 800236a:	f000 f9a6 	bl	80026ba <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	f043 0302 	orr.w	r3, r3, #2
 8002374:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ffc5 	bl	8002310 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8002386:	2070      	movs	r0, #112	; 0x70
 8002388:	f7ff ffd8 	bl	800233c <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 800238c:	f000 f858 	bl	8002440 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8002390:	f000 f870 	bl	8002474 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8002394:	2201      	movs	r2, #1
 8002396:	2102      	movs	r1, #2
 8002398:	4805      	ldr	r0, [pc, #20]	; (80023b0 <nRF24_RX_Mode+0x58>)
 800239a:	f001 fa45 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800239e:	2001      	movs	r0, #1
 80023a0:	f000 ffac 	bl	80032fc <HAL_Delay>
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000090 	.word	0x20000090
 80023b0:	40020400 	.word	0x40020400

080023b4 <nRF24_SetPALevel>:




void nRF24_SetPALevel(uint8_t lev)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80023be:	2006      	movs	r0, #6
 80023c0:	f7ff ff08 	bl	80021d4 <nRF24_ReadRegister>
 80023c4:	4603      	mov	r3, r0
 80023c6:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	f023 0307 	bic.w	r3, r3, #7
 80023ce:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	b25a      	sxtb	r2, r3
 80023d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023da:	4313      	orrs	r3, r2
 80023dc:	b25b      	sxtb	r3, r3
 80023de:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	4619      	mov	r1, r3
 80023e4:	2006      	movs	r0, #6
 80023e6:	f7ff ff3d 	bl	8002264 <nRF24_WriteRegister>
}
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80023fc:	2006      	movs	r0, #6
 80023fe:	f7ff fee9 	bl	80021d4 <nRF24_ReadRegister>
 8002402:	4603      	mov	r3, r0
 8002404:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800240c:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d104      	bne.n	800241e <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	f043 0320 	orr.w	r3, r3, #32
 800241a:	73fb      	strb	r3, [r7, #15]
 800241c:	e006      	b.n	800242c <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d103      	bne.n	800242c <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	f043 0308 	orr.w	r3, r3, #8
 800242a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	4619      	mov	r1, r3
 8002430:	2006      	movs	r0, #6
 8002432:	f7ff ff17 	bl	8002264 <nRF24_WriteRegister>
}
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <nRF24_FlushRX>:



void nRF24_FlushRX(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8002446:	23e2      	movs	r3, #226	; 0xe2
 8002448:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800244a:	2200      	movs	r2, #0
 800244c:	2104      	movs	r1, #4
 800244e:	4808      	ldr	r0, [pc, #32]	; (8002470 <nRF24_FlushRX+0x30>)
 8002450:	f001 f9ea 	bl	8003828 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002454:	1dfb      	adds	r3, r7, #7
 8002456:	2101      	movs	r1, #1
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fe8f 	bl	800217c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800245e:	2201      	movs	r2, #1
 8002460:	2104      	movs	r1, #4
 8002462:	4803      	ldr	r0, [pc, #12]	; (8002470 <nRF24_FlushRX+0x30>)
 8002464:	f001 f9e0 	bl	8003828 <HAL_GPIO_WritePin>
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40020400 	.word	0x40020400

08002474 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 800247a:	23e1      	movs	r3, #225	; 0xe1
 800247c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800247e:	2200      	movs	r2, #0
 8002480:	2104      	movs	r1, #4
 8002482:	4808      	ldr	r0, [pc, #32]	; (80024a4 <nRF24_FlushTX+0x30>)
 8002484:	f001 f9d0 	bl	8003828 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002488:	1dfb      	adds	r3, r7, #7
 800248a:	2101      	movs	r1, #1
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fe75 	bl	800217c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8002492:	2201      	movs	r2, #1
 8002494:	2104      	movs	r1, #4
 8002496:	4803      	ldr	r0, [pc, #12]	; (80024a4 <nRF24_FlushTX+0x30>)
 8002498:	f001 f9c6 	bl	8003828 <HAL_GPIO_WritePin>
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40020400 	.word	0x40020400

080024a8 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024b2:	f7ff ff25 	bl	8002300 <nRF24_ReadConfig>
 80024b6:	4603      	mov	r3, r0
 80024b8:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d004      	beq.n	80024ca <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	f043 0308 	orr.w	r3, r3, #8
 80024c6:	73fb      	strb	r3, [r7, #15]
 80024c8:	e003      	b.n	80024d2 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	f023 0308 	bic.w	r3, r3, #8
 80024d0:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff1b 	bl	8002310 <nRF24_WriteConfig>
}
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024ec:	f7ff ff08 	bl	8002300 <nRF24_ReadConfig>
 80024f0:	4603      	mov	r3, r0
 80024f2:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d104      	bne.n	8002504 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	f043 0304 	orr.w	r3, r3, #4
 8002500:	73fb      	strb	r3, [r7, #15]
 8002502:	e003      	b.n	800250c <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	f023 0304 	bic.w	r3, r3, #4
 800250a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fefe 	bl	8002310 <nRF24_WriteConfig>
}
 8002514:	bf00      	nop
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	460a      	mov	r2, r1
 8002526:	71fb      	strb	r3, [r7, #7]
 8002528:	4613      	mov	r3, r2
 800252a:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	b25a      	sxtb	r2, r3
 8002532:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	b25b      	sxtb	r3, r3
 800253c:	4313      	orrs	r3, r2
 800253e:	b25b      	sxtb	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	4619      	mov	r1, r3
 8002544:	2004      	movs	r0, #4
 8002546:	f7ff fe8d 	bl	8002264 <nRF24_WriteRegister>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002562:	b2db      	uxtb	r3, r3
 8002564:	4619      	mov	r1, r3
 8002566:	2005      	movs	r0, #5
 8002568:	f7ff fe7c 	bl	8002264 <nRF24_WriteRegister>
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	460a      	mov	r2, r1
 800257e:	71fb      	strb	r3, [r7, #7]
 8002580:	4613      	mov	r3, r2
 8002582:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	2b05      	cmp	r3, #5
 8002588:	d901      	bls.n	800258e <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 800258a:	2305      	movs	r3, #5
 800258c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	3311      	adds	r3, #17
 8002592:	b2da      	uxtb	r2, r3
 8002594:	79bb      	ldrb	r3, [r7, #6]
 8002596:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800259a:	b2db      	uxtb	r3, r3
 800259c:	4619      	mov	r1, r3
 800259e:	4610      	mov	r0, r2
 80025a0:	f7ff fe60 	bl	8002264 <nRF24_WriteRegister>
}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	460a      	mov	r2, r1
 80025b6:	71fb      	strb	r3, [r7, #7]
 80025b8:	4613      	mov	r3, r2
 80025ba:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	2b05      	cmp	r3, #5
 80025c0:	d901      	bls.n	80025c6 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 80025c2:	2305      	movs	r3, #5
 80025c4:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 80025c6:	2002      	movs	r0, #2
 80025c8:	f7ff fe04 	bl	80021d4 <nRF24_ReadRegister>
 80025cc:	4603      	mov	r3, r0
 80025ce:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80025d0:	79bb      	ldrb	r3, [r7, #6]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d10a      	bne.n	80025ec <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	2201      	movs	r2, #1
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	b25a      	sxtb	r2, r3
 80025e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	b25b      	sxtb	r3, r3
 80025e8:	73fb      	strb	r3, [r7, #15]
 80025ea:	e00b      	b.n	8002604 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	2201      	movs	r2, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	b25b      	sxtb	r3, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	b25a      	sxtb	r2, r3
 80025fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025fe:	4013      	ands	r3, r2
 8002600:	b25b      	sxtb	r3, r3
 8002602:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	4619      	mov	r1, r3
 8002608:	2002      	movs	r0, #2
 800260a:	f7ff fe2b 	bl	8002264 <nRF24_WriteRegister>
}
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b084      	sub	sp, #16
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	460a      	mov	r2, r1
 8002620:	71fb      	strb	r3, [r7, #7]
 8002622:	4613      	mov	r3, r2
 8002624:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	2b05      	cmp	r3, #5
 800262a:	d901      	bls.n	8002630 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 800262c:	2305      	movs	r3, #5
 800262e:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002630:	2001      	movs	r0, #1
 8002632:	f7ff fdcf 	bl	80021d4 <nRF24_ReadRegister>
 8002636:	4603      	mov	r3, r0
 8002638:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 800263a:	79bb      	ldrb	r3, [r7, #6]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d10a      	bne.n	8002656 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	2201      	movs	r2, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	b25a      	sxtb	r2, r3
 800264a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264e:	4313      	orrs	r3, r2
 8002650:	b25b      	sxtb	r3, r3
 8002652:	73fb      	strb	r3, [r7, #15]
 8002654:	e00b      	b.n	800266e <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	2201      	movs	r2, #1
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	b25b      	sxtb	r3, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	b25a      	sxtb	r2, r3
 8002664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002668:	4013      	ands	r3, r2
 800266a:	b25b      	sxtb	r3, r3
 800266c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	4619      	mov	r1, r3
 8002672:	2001      	movs	r0, #1
 8002674:	f7ff fdf6 	bl	8002264 <nRF24_WriteRegister>
}
 8002678:	bf00      	nop
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	2b05      	cmp	r3, #5
 800268e:	d901      	bls.n	8002694 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8002690:	2305      	movs	r3, #5
 8002692:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d801      	bhi.n	800269e <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 800269a:	2303      	movs	r3, #3
 800269c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	3b02      	subs	r3, #2
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	4619      	mov	r1, r3
 80026ac:	2003      	movs	r0, #3
 80026ae:	f7ff fdd9 	bl	8002264 <nRF24_WriteRegister>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	6039      	str	r1, [r7, #0]
 80026c4:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <nRF24_SetRXAddress+0x18>
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d11d      	bne.n	800270e <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	73fb      	strb	r3, [r7, #15]
 80026d6:	e00d      	b.n	80026f4 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	441a      	add	r2, r3
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	f1c3 0302 	rsb	r3, r3, #2
 80026e4:	7812      	ldrb	r2, [r2, #0]
 80026e6:	3310      	adds	r3, #16
 80026e8:	443b      	add	r3, r7
 80026ea:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	3301      	adds	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d9ee      	bls.n	80026d8 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	330a      	adds	r3, #10
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	f107 010c 	add.w	r1, r7, #12
 8002704:	2203      	movs	r2, #3
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fdd2 	bl	80022b0 <nRF24_WriteRegisters>
	{
 800270c:	e00a      	b.n	8002724 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	330a      	adds	r3, #10
 8002712:	b2da      	uxtb	r2, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	3302      	adds	r3, #2
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	4619      	mov	r1, r3
 800271c:	4610      	mov	r0, r2
 800271e:	f7ff fda1 	bl	8002264 <nRF24_WriteRegister>
}
 8002722:	bf00      	nop
 8002724:	bf00      	nop
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8002734:	f107 030c 	add.w	r3, r7, #12
 8002738:	2203      	movs	r2, #3
 800273a:	4619      	mov	r1, r3
 800273c:	200a      	movs	r0, #10
 800273e:	f7ff fd6d 	bl	800221c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002742:	2300      	movs	r3, #0
 8002744:	73fb      	strb	r3, [r7, #15]
 8002746:	e00c      	b.n	8002762 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8002748:	7bfa      	ldrb	r2, [r7, #15]
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	f1c3 0302 	rsb	r3, r3, #2
 8002750:	3210      	adds	r2, #16
 8002752:	443a      	add	r2, r7
 8002754:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8002758:	4a16      	ldr	r2, [pc, #88]	; (80027b4 <nRF24_SetTXAddress+0x88>)
 800275a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	3301      	adds	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d9ef      	bls.n	8002748 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e00d      	b.n	800278a <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	441a      	add	r2, r3
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	f1c3 0302 	rsb	r3, r3, #2
 800277a:	7812      	ldrb	r2, [r2, #0]
 800277c:	3310      	adds	r3, #16
 800277e:	443b      	add	r3, r7
 8002780:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	3301      	adds	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d9ee      	bls.n	800276e <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8002790:	f107 030c 	add.w	r3, r7, #12
 8002794:	2203      	movs	r2, #3
 8002796:	4619      	mov	r1, r3
 8002798:	200a      	movs	r0, #10
 800279a:	f7ff fd89 	bl	80022b0 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 800279e:	f107 030c 	add.w	r3, r7, #12
 80027a2:	2203      	movs	r2, #3
 80027a4:	4619      	mov	r1, r3
 80027a6:	2010      	movs	r0, #16
 80027a8:	f7ff fd82 	bl	80022b0 <nRF24_WriteRegisters>

}
 80027ac:	bf00      	nop
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000090 	.word	0x20000090

080027b8 <nRF24_ReadRXPaylaod>:
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));

}

void nRF24_ReadRXPaylaod(uint8_t *data)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80027c0:	2209      	movs	r2, #9
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	2061      	movs	r0, #97	; 0x61
 80027c6:	f7ff fd29 	bl	800221c <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 80027ca:	2101      	movs	r1, #1
 80027cc:	2007      	movs	r0, #7
 80027ce:	f7ff fd49 	bl	8002264 <nRF24_WriteRegister>
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
 80027d2:	f7ff fdab 	bl	800232c <nRF24_ReadStatus>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 80027e0:	2120      	movs	r1, #32
 80027e2:	2007      	movs	r0, #7
 80027e4:	f7ff fd3e 	bl	8002264 <nRF24_WriteRegister>
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <nRF24_RXAvailible>:


uint8_t nRF24_RXAvailible(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 80027f6:	f7ff fd99 	bl	800232c <nRF24_ReadStatus>
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]

	// RX FIFO Interrupt
	if ((status & (1 << 6)))
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00c      	beq.n	8002822 <nRF24_RXAvailible+0x32>
	{
		nrf24_rx_flag = 1;
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <nRF24_RXAvailible+0x3c>)
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
		status |= (1<<6); // Interrupt flag clear
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002814:	71fb      	strb	r3, [r7, #7]
		nRF24_WriteStatus(status);
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fd8f 	bl	800233c <nRF24_WriteStatus>
		return 1;
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <nRF24_RXAvailible+0x34>
	}
	return 0;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000093 	.word	0x20000093

08002830 <nRF24_Init>:

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8002838:	4a1e      	ldr	r2, [pc, #120]	; (80028b4 <nRF24_Init+0x84>)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 800283e:	2200      	movs	r2, #0
 8002840:	2102      	movs	r1, #2
 8002842:	481d      	ldr	r0, [pc, #116]	; (80028b8 <nRF24_Init+0x88>)
 8002844:	f000 fff0 	bl	8003828 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8002848:	2201      	movs	r2, #1
 800284a:	2104      	movs	r1, #4
 800284c:	481a      	ldr	r0, [pc, #104]	; (80028b8 <nRF24_Init+0x88>)
 800284e:	f000 ffeb 	bl	8003828 <HAL_GPIO_WritePin>

	HAL_Delay(5);
 8002852:	2005      	movs	r0, #5
 8002854:	f000 fd52 	bl	80032fc <HAL_Delay>

	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8002858:	2002      	movs	r0, #2
 800285a:	f7ff fdca 	bl	80023f2 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 800285e:	2001      	movs	r0, #1
 8002860:	f7ff fe22 	bl	80024a8 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8002864:	2000      	movs	r0, #0
 8002866:	f7ff fe3c 	bl	80024e2 <nRF24_SetCRCLength>
	nRF24_SetPALevel(NRF24_PA_PWR_0dBM);
 800286a:	2003      	movs	r0, #3
 800286c:	f7ff fda2 	bl	80023b4 <nRF24_SetPALevel>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8002870:	2107      	movs	r1, #7
 8002872:	2004      	movs	r0, #4
 8002874:	f7ff fe52 	bl	800251c <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8002878:	2100      	movs	r1, #0
 800287a:	201c      	movs	r0, #28
 800287c:	f7ff fcf2 	bl	8002264 <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8002880:	200a      	movs	r0, #10
 8002882:	f7ff fe66 	bl	8002552 <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8002886:	2109      	movs	r1, #9
 8002888:	2000      	movs	r0, #0
 800288a:	f7ff fe73 	bl	8002574 <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 800288e:	2101      	movs	r1, #1
 8002890:	2000      	movs	r0, #0
 8002892:	f7ff fe8b 	bl	80025ac <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8002896:	2101      	movs	r1, #1
 8002898:	2000      	movs	r0, #0
 800289a:	f7ff febc 	bl	8002616 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 800289e:	2003      	movs	r0, #3
 80028a0:	f7ff feee 	bl	8002680 <nRF24_SetAddressWidth>

	HAL_Delay(20);
 80028a4:	2014      	movs	r0, #20
 80028a6:	f000 fd29 	bl	80032fc <HAL_Delay>

}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	2000008c 	.word	0x2000008c
 80028b8:	40020400 	.word	0x40020400

080028bc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80028c0:	4b17      	ldr	r3, [pc, #92]	; (8002920 <MX_SPI2_Init+0x64>)
 80028c2:	4a18      	ldr	r2, [pc, #96]	; (8002924 <MX_SPI2_Init+0x68>)
 80028c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028c6:	4b16      	ldr	r3, [pc, #88]	; (8002920 <MX_SPI2_Init+0x64>)
 80028c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028ce:	4b14      	ldr	r3, [pc, #80]	; (8002920 <MX_SPI2_Init+0x64>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <MX_SPI2_Init+0x64>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <MX_SPI2_Init+0x64>)
 80028dc:	2200      	movs	r2, #0
 80028de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <MX_SPI2_Init+0x64>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <MX_SPI2_Init+0x64>)
 80028e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80028ee:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <MX_SPI2_Init+0x64>)
 80028f0:	2210      	movs	r2, #16
 80028f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028f4:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <MX_SPI2_Init+0x64>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80028fa:	4b09      	ldr	r3, [pc, #36]	; (8002920 <MX_SPI2_Init+0x64>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002900:	4b07      	ldr	r3, [pc, #28]	; (8002920 <MX_SPI2_Init+0x64>)
 8002902:	2200      	movs	r2, #0
 8002904:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002906:	4b06      	ldr	r3, [pc, #24]	; (8002920 <MX_SPI2_Init+0x64>)
 8002908:	220a      	movs	r2, #10
 800290a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800290c:	4804      	ldr	r0, [pc, #16]	; (8002920 <MX_SPI2_Init+0x64>)
 800290e:	f001 fdb3 	bl	8004478 <HAL_SPI_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002918:	f7ff fc2a 	bl	8002170 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20000094 	.word	0x20000094
 8002924:	40003800 	.word	0x40003800

08002928 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a17      	ldr	r2, [pc, #92]	; (80029a4 <HAL_SPI_MspInit+0x7c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d128      	bne.n	800299c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800294a:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <HAL_SPI_MspInit+0x80>)
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	4a16      	ldr	r2, [pc, #88]	; (80029a8 <HAL_SPI_MspInit+0x80>)
 8002950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002954:	6253      	str	r3, [r2, #36]	; 0x24
 8002956:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <HAL_SPI_MspInit+0x80>)
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002962:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <HAL_SPI_MspInit+0x80>)
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	4a10      	ldr	r2, [pc, #64]	; (80029a8 <HAL_SPI_MspInit+0x80>)
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	61d3      	str	r3, [r2, #28]
 800296e:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <HAL_SPI_MspInit+0x80>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800297a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800297e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002980:	2302      	movs	r3, #2
 8002982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002988:	2303      	movs	r3, #3
 800298a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800298c:	2305      	movs	r3, #5
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	4619      	mov	r1, r3
 8002996:	4805      	ldr	r0, [pc, #20]	; (80029ac <HAL_SPI_MspInit+0x84>)
 8002998:	f000 fdb6 	bl	8003508 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800299c:	bf00      	nop
 800299e:	3728      	adds	r7, #40	; 0x28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40003800 	.word	0x40003800
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40020400 	.word	0x40020400

080029b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80029b6:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <HAL_MspInit+0x5c>)
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	4a14      	ldr	r2, [pc, #80]	; (8002a0c <HAL_MspInit+0x5c>)
 80029bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029c0:	6253      	str	r3, [r2, #36]	; 0x24
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_MspInit+0x5c>)
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ce:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <HAL_MspInit+0x5c>)
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <HAL_MspInit+0x5c>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6213      	str	r3, [r2, #32]
 80029da:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <HAL_MspInit+0x5c>)
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <HAL_MspInit+0x5c>)
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	4a08      	ldr	r2, [pc, #32]	; (8002a0c <HAL_MspInit+0x5c>)
 80029ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f0:	6253      	str	r3, [r2, #36]	; 0x24
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_MspInit+0x5c>)
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fa:	607b      	str	r3, [r7, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80029fe:	2007      	movs	r0, #7
 8002a00:	f000 fd4e 	bl	80034a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a04:	bf00      	nop
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40023800 	.word	0x40023800

08002a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a14:	e7fe      	b.n	8002a14 <NMI_Handler+0x4>

08002a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a1a:	e7fe      	b.n	8002a1a <HardFault_Handler+0x4>

08002a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a20:	e7fe      	b.n	8002a20 <MemManage_Handler+0x4>

08002a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a26:	e7fe      	b.n	8002a26 <BusFault_Handler+0x4>

08002a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a2c:	e7fe      	b.n	8002a2c <UsageFault_Handler+0x4>

08002a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a56:	f000 fc35 	bl	80032c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a62:	bf00      	nop
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
	...

08002a6c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	; 0x28
 8002a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a72:	f107 0318 	add.w	r3, r7, #24
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a80:	f107 0310 	add.w	r3, r7, #16
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a8a:	463b      	mov	r3, r7
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a96:	4b33      	ldr	r3, [pc, #204]	; (8002b64 <MX_TIM2_Init+0xf8>)
 8002a98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 30-1;
 8002a9e:	4b31      	ldr	r3, [pc, #196]	; (8002b64 <MX_TIM2_Init+0xf8>)
 8002aa0:	221d      	movs	r2, #29
 8002aa2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa4:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <MX_TIM2_Init+0xf8>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8002aaa:	4b2e      	ldr	r3, [pc, #184]	; (8002b64 <MX_TIM2_Init+0xf8>)
 8002aac:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002ab0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab2:	4b2c      	ldr	r3, [pc, #176]	; (8002b64 <MX_TIM2_Init+0xf8>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab8:	4b2a      	ldr	r3, [pc, #168]	; (8002b64 <MX_TIM2_Init+0xf8>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002abe:	4829      	ldr	r0, [pc, #164]	; (8002b64 <MX_TIM2_Init+0xf8>)
 8002ac0:	f002 fa9e 	bl	8005000 <HAL_TIM_Base_Init>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002aca:	f7ff fb51 	bl	8002170 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ad4:	f107 0318 	add.w	r3, r7, #24
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4822      	ldr	r0, [pc, #136]	; (8002b64 <MX_TIM2_Init+0xf8>)
 8002adc:	f002 fc70 	bl	80053c0 <HAL_TIM_ConfigClockSource>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002ae6:	f7ff fb43 	bl	8002170 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002aea:	481e      	ldr	r0, [pc, #120]	; (8002b64 <MX_TIM2_Init+0xf8>)
 8002aec:	f002 fac7 	bl	800507e <HAL_TIM_PWM_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002af6:	f7ff fb3b 	bl	8002170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002afa:	2300      	movs	r3, #0
 8002afc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b02:	f107 0310 	add.w	r3, r7, #16
 8002b06:	4619      	mov	r1, r3
 8002b08:	4816      	ldr	r0, [pc, #88]	; (8002b64 <MX_TIM2_Init+0xf8>)
 8002b0a:	f002 ff41 	bl	8005990 <HAL_TIMEx_MasterConfigSynchronization>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002b14:	f7ff fb2c 	bl	8002170 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b18:	2360      	movs	r3, #96	; 0x60
 8002b1a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8002b1c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002b20:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b2a:	463b      	mov	r3, r7
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	4619      	mov	r1, r3
 8002b30:	480c      	ldr	r0, [pc, #48]	; (8002b64 <MX_TIM2_Init+0xf8>)
 8002b32:	f002 fb83 	bl	800523c <HAL_TIM_PWM_ConfigChannel>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8002b3c:	f7ff fb18 	bl	8002170 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b40:	463b      	mov	r3, r7
 8002b42:	220c      	movs	r2, #12
 8002b44:	4619      	mov	r1, r3
 8002b46:	4807      	ldr	r0, [pc, #28]	; (8002b64 <MX_TIM2_Init+0xf8>)
 8002b48:	f002 fb78 	bl	800523c <HAL_TIM_PWM_ConfigChannel>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8002b52:	f7ff fb0d 	bl	8002170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b56:	4803      	ldr	r0, [pc, #12]	; (8002b64 <MX_TIM2_Init+0xf8>)
 8002b58:	f000 f9f0 	bl	8002f3c <HAL_TIM_MspPostInit>

}
 8002b5c:	bf00      	nop
 8002b5e:	3728      	adds	r7, #40	; 0x28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	200000ec 	.word	0x200000ec

08002b68 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b6e:	f107 0318 	add.w	r3, r7, #24
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b7c:	f107 0310 	add.w	r3, r7, #16
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b86:	463b      	mov	r3, r7
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b92:	4b38      	ldr	r3, [pc, #224]	; (8002c74 <MX_TIM3_Init+0x10c>)
 8002b94:	4a38      	ldr	r2, [pc, #224]	; (8002c78 <MX_TIM3_Init+0x110>)
 8002b96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8002b98:	4b36      	ldr	r3, [pc, #216]	; (8002c74 <MX_TIM3_Init+0x10c>)
 8002b9a:	220f      	movs	r2, #15
 8002b9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b9e:	4b35      	ldr	r3, [pc, #212]	; (8002c74 <MX_TIM3_Init+0x10c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002ba4:	4b33      	ldr	r3, [pc, #204]	; (8002c74 <MX_TIM3_Init+0x10c>)
 8002ba6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002baa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bac:	4b31      	ldr	r3, [pc, #196]	; (8002c74 <MX_TIM3_Init+0x10c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb2:	4b30      	ldr	r3, [pc, #192]	; (8002c74 <MX_TIM3_Init+0x10c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bb8:	482e      	ldr	r0, [pc, #184]	; (8002c74 <MX_TIM3_Init+0x10c>)
 8002bba:	f002 fa21 	bl	8005000 <HAL_TIM_Base_Init>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002bc4:	f7ff fad4 	bl	8002170 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bcc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bce:	f107 0318 	add.w	r3, r7, #24
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4827      	ldr	r0, [pc, #156]	; (8002c74 <MX_TIM3_Init+0x10c>)
 8002bd6:	f002 fbf3 	bl	80053c0 <HAL_TIM_ConfigClockSource>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002be0:	f7ff fac6 	bl	8002170 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002be4:	4823      	ldr	r0, [pc, #140]	; (8002c74 <MX_TIM3_Init+0x10c>)
 8002be6:	f002 fa4a 	bl	800507e <HAL_TIM_PWM_Init>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002bf0:	f7ff fabe 	bl	8002170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bfc:	f107 0310 	add.w	r3, r7, #16
 8002c00:	4619      	mov	r1, r3
 8002c02:	481c      	ldr	r0, [pc, #112]	; (8002c74 <MX_TIM3_Init+0x10c>)
 8002c04:	f002 fec4 	bl	8005990 <HAL_TIMEx_MasterConfigSynchronization>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002c0e:	f7ff faaf 	bl	8002170 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c12:	2360      	movs	r3, #96	; 0x60
 8002c14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c22:	463b      	mov	r3, r7
 8002c24:	2200      	movs	r2, #0
 8002c26:	4619      	mov	r1, r3
 8002c28:	4812      	ldr	r0, [pc, #72]	; (8002c74 <MX_TIM3_Init+0x10c>)
 8002c2a:	f002 fb07 	bl	800523c <HAL_TIM_PWM_ConfigChannel>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002c34:	f7ff fa9c 	bl	8002170 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c38:	463b      	mov	r3, r7
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	480d      	ldr	r0, [pc, #52]	; (8002c74 <MX_TIM3_Init+0x10c>)
 8002c40:	f002 fafc 	bl	800523c <HAL_TIM_PWM_ConfigChannel>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8002c4a:	f7ff fa91 	bl	8002170 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c4e:	463b      	mov	r3, r7
 8002c50:	2208      	movs	r2, #8
 8002c52:	4619      	mov	r1, r3
 8002c54:	4807      	ldr	r0, [pc, #28]	; (8002c74 <MX_TIM3_Init+0x10c>)
 8002c56:	f002 faf1 	bl	800523c <HAL_TIM_PWM_ConfigChannel>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8002c60:	f7ff fa86 	bl	8002170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c64:	4803      	ldr	r0, [pc, #12]	; (8002c74 <MX_TIM3_Init+0x10c>)
 8002c66:	f000 f969 	bl	8002f3c <HAL_TIM_MspPostInit>

}
 8002c6a:	bf00      	nop
 8002c6c:	3728      	adds	r7, #40	; 0x28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	2000012c 	.word	0x2000012c
 8002c78:	40000400 	.word	0x40000400

08002c7c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	; 0x28
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c82:	f107 0318 	add.w	r3, r7, #24
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	605a      	str	r2, [r3, #4]
 8002c8c:	609a      	str	r2, [r3, #8]
 8002c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c90:	f107 0310 	add.w	r3, r7, #16
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c9a:	463b      	mov	r3, r7
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ca6:	4b3d      	ldr	r3, [pc, #244]	; (8002d9c <MX_TIM4_Init+0x120>)
 8002ca8:	4a3d      	ldr	r2, [pc, #244]	; (8002da0 <MX_TIM4_Init+0x124>)
 8002caa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8002cac:	4b3b      	ldr	r3, [pc, #236]	; (8002d9c <MX_TIM4_Init+0x120>)
 8002cae:	220f      	movs	r2, #15
 8002cb0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb2:	4b3a      	ldr	r3, [pc, #232]	; (8002d9c <MX_TIM4_Init+0x120>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002cb8:	4b38      	ldr	r3, [pc, #224]	; (8002d9c <MX_TIM4_Init+0x120>)
 8002cba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cbe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc0:	4b36      	ldr	r3, [pc, #216]	; (8002d9c <MX_TIM4_Init+0x120>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc6:	4b35      	ldr	r3, [pc, #212]	; (8002d9c <MX_TIM4_Init+0x120>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ccc:	4833      	ldr	r0, [pc, #204]	; (8002d9c <MX_TIM4_Init+0x120>)
 8002cce:	f002 f997 	bl	8005000 <HAL_TIM_Base_Init>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002cd8:	f7ff fa4a 	bl	8002170 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ce2:	f107 0318 	add.w	r3, r7, #24
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	482c      	ldr	r0, [pc, #176]	; (8002d9c <MX_TIM4_Init+0x120>)
 8002cea:	f002 fb69 	bl	80053c0 <HAL_TIM_ConfigClockSource>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002cf4:	f7ff fa3c 	bl	8002170 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002cf8:	4828      	ldr	r0, [pc, #160]	; (8002d9c <MX_TIM4_Init+0x120>)
 8002cfa:	f002 f9c0 	bl	800507e <HAL_TIM_PWM_Init>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002d04:	f7ff fa34 	bl	8002170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d10:	f107 0310 	add.w	r3, r7, #16
 8002d14:	4619      	mov	r1, r3
 8002d16:	4821      	ldr	r0, [pc, #132]	; (8002d9c <MX_TIM4_Init+0x120>)
 8002d18:	f002 fe3a 	bl	8005990 <HAL_TIMEx_MasterConfigSynchronization>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8002d22:	f7ff fa25 	bl	8002170 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d26:	2360      	movs	r3, #96	; 0x60
 8002d28:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d36:	463b      	mov	r3, r7
 8002d38:	2200      	movs	r2, #0
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4817      	ldr	r0, [pc, #92]	; (8002d9c <MX_TIM4_Init+0x120>)
 8002d3e:	f002 fa7d 	bl	800523c <HAL_TIM_PWM_ConfigChannel>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002d48:	f7ff fa12 	bl	8002170 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d4c:	463b      	mov	r3, r7
 8002d4e:	2204      	movs	r2, #4
 8002d50:	4619      	mov	r1, r3
 8002d52:	4812      	ldr	r0, [pc, #72]	; (8002d9c <MX_TIM4_Init+0x120>)
 8002d54:	f002 fa72 	bl	800523c <HAL_TIM_PWM_ConfigChannel>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8002d5e:	f7ff fa07 	bl	8002170 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d62:	463b      	mov	r3, r7
 8002d64:	2208      	movs	r2, #8
 8002d66:	4619      	mov	r1, r3
 8002d68:	480c      	ldr	r0, [pc, #48]	; (8002d9c <MX_TIM4_Init+0x120>)
 8002d6a:	f002 fa67 	bl	800523c <HAL_TIM_PWM_ConfigChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM4_Init+0xfc>
  {
    Error_Handler();
 8002d74:	f7ff f9fc 	bl	8002170 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d78:	463b      	mov	r3, r7
 8002d7a:	220c      	movs	r2, #12
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4807      	ldr	r0, [pc, #28]	; (8002d9c <MX_TIM4_Init+0x120>)
 8002d80:	f002 fa5c 	bl	800523c <HAL_TIM_PWM_ConfigChannel>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 8002d8a:	f7ff f9f1 	bl	8002170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002d8e:	4803      	ldr	r0, [pc, #12]	; (8002d9c <MX_TIM4_Init+0x120>)
 8002d90:	f000 f8d4 	bl	8002f3c <HAL_TIM_MspPostInit>

}
 8002d94:	bf00      	nop
 8002d96:	3728      	adds	r7, #40	; 0x28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	2000016c 	.word	0x2000016c
 8002da0:	40000800 	.word	0x40000800

08002da4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	; 0x28
 8002da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002daa:	f107 0318 	add.w	r3, r7, #24
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	605a      	str	r2, [r3, #4]
 8002db4:	609a      	str	r2, [r3, #8]
 8002db6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002db8:	f107 0310 	add.w	r3, r7, #16
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dc2:	463b      	mov	r3, r7
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002dce:	4b2d      	ldr	r3, [pc, #180]	; (8002e84 <MX_TIM5_Init+0xe0>)
 8002dd0:	4a2d      	ldr	r2, [pc, #180]	; (8002e88 <MX_TIM5_Init+0xe4>)
 8002dd2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 8002dd4:	4b2b      	ldr	r3, [pc, #172]	; (8002e84 <MX_TIM5_Init+0xe0>)
 8002dd6:	220f      	movs	r2, #15
 8002dd8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dda:	4b2a      	ldr	r3, [pc, #168]	; (8002e84 <MX_TIM5_Init+0xe0>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8002de0:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <MX_TIM5_Init+0xe0>)
 8002de2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002de6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de8:	4b26      	ldr	r3, [pc, #152]	; (8002e84 <MX_TIM5_Init+0xe0>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dee:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <MX_TIM5_Init+0xe0>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002df4:	4823      	ldr	r0, [pc, #140]	; (8002e84 <MX_TIM5_Init+0xe0>)
 8002df6:	f002 f903 	bl	8005000 <HAL_TIM_Base_Init>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8002e00:	f7ff f9b6 	bl	8002170 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e08:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002e0a:	f107 0318 	add.w	r3, r7, #24
 8002e0e:	4619      	mov	r1, r3
 8002e10:	481c      	ldr	r0, [pc, #112]	; (8002e84 <MX_TIM5_Init+0xe0>)
 8002e12:	f002 fad5 	bl	80053c0 <HAL_TIM_ConfigClockSource>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002e1c:	f7ff f9a8 	bl	8002170 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002e20:	4818      	ldr	r0, [pc, #96]	; (8002e84 <MX_TIM5_Init+0xe0>)
 8002e22:	f002 f92c 	bl	800507e <HAL_TIM_PWM_Init>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002e2c:	f7ff f9a0 	bl	8002170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e38:	f107 0310 	add.w	r3, r7, #16
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4811      	ldr	r0, [pc, #68]	; (8002e84 <MX_TIM5_Init+0xe0>)
 8002e40:	f002 fda6 	bl	8005990 <HAL_TIMEx_MasterConfigSynchronization>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8002e4a:	f7ff f991 	bl	8002170 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e4e:	2360      	movs	r3, #96	; 0x60
 8002e50:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e5e:	463b      	mov	r3, r7
 8002e60:	2204      	movs	r2, #4
 8002e62:	4619      	mov	r1, r3
 8002e64:	4807      	ldr	r0, [pc, #28]	; (8002e84 <MX_TIM5_Init+0xe0>)
 8002e66:	f002 f9e9 	bl	800523c <HAL_TIM_PWM_ConfigChannel>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8002e70:	f7ff f97e 	bl	8002170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002e74:	4803      	ldr	r0, [pc, #12]	; (8002e84 <MX_TIM5_Init+0xe0>)
 8002e76:	f000 f861 	bl	8002f3c <HAL_TIM_MspPostInit>

}
 8002e7a:	bf00      	nop
 8002e7c:	3728      	adds	r7, #40	; 0x28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	200001ac 	.word	0x200001ac
 8002e88:	40000c00 	.word	0x40000c00

08002e8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e9e:	4b23      	ldr	r3, [pc, #140]	; (8002f2c <HAL_TIM_Base_MspInit+0xa0>)
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <HAL_TIM_Base_MspInit+0xa0>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	6253      	str	r3, [r2, #36]	; 0x24
 8002eaa:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <HAL_TIM_Base_MspInit+0xa0>)
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002eb6:	e034      	b.n	8002f22 <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM3)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a1c      	ldr	r2, [pc, #112]	; (8002f30 <HAL_TIM_Base_MspInit+0xa4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d10c      	bne.n	8002edc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ec2:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <HAL_TIM_Base_MspInit+0xa0>)
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <HAL_TIM_Base_MspInit+0xa0>)
 8002ec8:	f043 0302 	orr.w	r3, r3, #2
 8002ecc:	6253      	str	r3, [r2, #36]	; 0x24
 8002ece:	4b17      	ldr	r3, [pc, #92]	; (8002f2c <HAL_TIM_Base_MspInit+0xa0>)
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	693b      	ldr	r3, [r7, #16]
}
 8002eda:	e022      	b.n	8002f22 <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM4)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a14      	ldr	r2, [pc, #80]	; (8002f34 <HAL_TIM_Base_MspInit+0xa8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d10c      	bne.n	8002f00 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ee6:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <HAL_TIM_Base_MspInit+0xa0>)
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	4a10      	ldr	r2, [pc, #64]	; (8002f2c <HAL_TIM_Base_MspInit+0xa0>)
 8002eec:	f043 0304 	orr.w	r3, r3, #4
 8002ef0:	6253      	str	r3, [r2, #36]	; 0x24
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <HAL_TIM_Base_MspInit+0xa0>)
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]
}
 8002efe:	e010      	b.n	8002f22 <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM5)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a0c      	ldr	r2, [pc, #48]	; (8002f38 <HAL_TIM_Base_MspInit+0xac>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d10b      	bne.n	8002f22 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <HAL_TIM_Base_MspInit+0xa0>)
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	4a07      	ldr	r2, [pc, #28]	; (8002f2c <HAL_TIM_Base_MspInit+0xa0>)
 8002f10:	f043 0308 	orr.w	r3, r3, #8
 8002f14:	6253      	str	r3, [r2, #36]	; 0x24
 8002f16:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <HAL_TIM_Base_MspInit+0xa0>)
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	68bb      	ldr	r3, [r7, #8]
}
 8002f22:	bf00      	nop
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40000400 	.word	0x40000400
 8002f34:	40000800 	.word	0x40000800
 8002f38:	40000c00 	.word	0x40000c00

08002f3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08e      	sub	sp, #56	; 0x38
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5c:	d13a      	bne.n	8002fd4 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f5e:	4b60      	ldr	r3, [pc, #384]	; (80030e0 <HAL_TIM_MspPostInit+0x1a4>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	4a5f      	ldr	r2, [pc, #380]	; (80030e0 <HAL_TIM_MspPostInit+0x1a4>)
 8002f64:	f043 0302 	orr.w	r3, r3, #2
 8002f68:	61d3      	str	r3, [r2, #28]
 8002f6a:	4b5d      	ldr	r3, [pc, #372]	; (80030e0 <HAL_TIM_MspPostInit+0x1a4>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	623b      	str	r3, [r7, #32]
 8002f74:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f76:	4b5a      	ldr	r3, [pc, #360]	; (80030e0 <HAL_TIM_MspPostInit+0x1a4>)
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	4a59      	ldr	r2, [pc, #356]	; (80030e0 <HAL_TIM_MspPostInit+0x1a4>)
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	61d3      	str	r3, [r2, #28]
 8002f82:	4b57      	ldr	r3, [pc, #348]	; (80030e0 <HAL_TIM_MspPostInit+0x1a4>)
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	61fb      	str	r3, [r7, #28]
 8002f8c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO_2_Pin;
 8002f8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f94:	2302      	movs	r3, #2
 8002f96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SERVO_2_GPIO_Port, &GPIO_InitStruct);
 8002fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fa8:	4619      	mov	r1, r3
 8002faa:	484e      	ldr	r0, [pc, #312]	; (80030e4 <HAL_TIM_MspPostInit+0x1a8>)
 8002fac:	f000 faac 	bl	8003508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SERVO_1_Pin;
 8002fb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SERVO_1_GPIO_Port, &GPIO_InitStruct);
 8002fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4846      	ldr	r0, [pc, #280]	; (80030e8 <HAL_TIM_MspPostInit+0x1ac>)
 8002fce:	f000 fa9b 	bl	8003508 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002fd2:	e081      	b.n	80030d8 <HAL_TIM_MspPostInit+0x19c>
  else if(timHandle->Instance==TIM3)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a44      	ldr	r2, [pc, #272]	; (80030ec <HAL_TIM_MspPostInit+0x1b0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d138      	bne.n	8003050 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fde:	4b40      	ldr	r3, [pc, #256]	; (80030e0 <HAL_TIM_MspPostInit+0x1a4>)
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	4a3f      	ldr	r2, [pc, #252]	; (80030e0 <HAL_TIM_MspPostInit+0x1a4>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	61d3      	str	r3, [r2, #28]
 8002fea:	4b3d      	ldr	r3, [pc, #244]	; (80030e0 <HAL_TIM_MspPostInit+0x1a4>)
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	61bb      	str	r3, [r7, #24]
 8002ff4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff6:	4b3a      	ldr	r3, [pc, #232]	; (80030e0 <HAL_TIM_MspPostInit+0x1a4>)
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	4a39      	ldr	r2, [pc, #228]	; (80030e0 <HAL_TIM_MspPostInit+0x1a4>)
 8002ffc:	f043 0302 	orr.w	r3, r3, #2
 8003000:	61d3      	str	r3, [r2, #28]
 8003002:	4b37      	ldr	r3, [pc, #220]	; (80030e0 <HAL_TIM_MspPostInit+0x1a4>)
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Czlon4PWM_Pin|Czlon5PWM_Pin;
 800300e:	23c0      	movs	r3, #192	; 0xc0
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003012:	2302      	movs	r3, #2
 8003014:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301a:	2300      	movs	r3, #0
 800301c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800301e:	2302      	movs	r3, #2
 8003020:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003026:	4619      	mov	r1, r3
 8003028:	482f      	ldr	r0, [pc, #188]	; (80030e8 <HAL_TIM_MspPostInit+0x1ac>)
 800302a:	f000 fa6d 	bl	8003508 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R_PWM_Pin;
 800302e:	2301      	movs	r3, #1
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003032:	2302      	movs	r3, #2
 8003034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303a:	2300      	movs	r3, #0
 800303c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800303e:	2302      	movs	r3, #2
 8003040:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(R_PWM_GPIO_Port, &GPIO_InitStruct);
 8003042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003046:	4619      	mov	r1, r3
 8003048:	4826      	ldr	r0, [pc, #152]	; (80030e4 <HAL_TIM_MspPostInit+0x1a8>)
 800304a:	f000 fa5d 	bl	8003508 <HAL_GPIO_Init>
}
 800304e:	e043      	b.n	80030d8 <HAL_TIM_MspPostInit+0x19c>
  else if(timHandle->Instance==TIM4)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a26      	ldr	r2, [pc, #152]	; (80030f0 <HAL_TIM_MspPostInit+0x1b4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d11d      	bne.n	8003096 <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800305a:	4b21      	ldr	r3, [pc, #132]	; (80030e0 <HAL_TIM_MspPostInit+0x1a4>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	4a20      	ldr	r2, [pc, #128]	; (80030e0 <HAL_TIM_MspPostInit+0x1a4>)
 8003060:	f043 0302 	orr.w	r3, r3, #2
 8003064:	61d3      	str	r3, [r2, #28]
 8003066:	4b1e      	ldr	r3, [pc, #120]	; (80030e0 <HAL_TIM_MspPostInit+0x1a4>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PodstawaPWM_Pin|Czlon1PWM_Pin|Czlon2PWM_Pin|Czlon3PWM_Pin;
 8003072:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003078:	2302      	movs	r3, #2
 800307a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003080:	2300      	movs	r3, #0
 8003082:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003084:	2302      	movs	r3, #2
 8003086:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800308c:	4619      	mov	r1, r3
 800308e:	4815      	ldr	r0, [pc, #84]	; (80030e4 <HAL_TIM_MspPostInit+0x1a8>)
 8003090:	f000 fa3a 	bl	8003508 <HAL_GPIO_Init>
}
 8003094:	e020      	b.n	80030d8 <HAL_TIM_MspPostInit+0x19c>
  else if(timHandle->Instance==TIM5)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a16      	ldr	r2, [pc, #88]	; (80030f4 <HAL_TIM_MspPostInit+0x1b8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d11b      	bne.n	80030d8 <HAL_TIM_MspPostInit+0x19c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <HAL_TIM_MspPostInit+0x1a4>)
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	4a0e      	ldr	r2, [pc, #56]	; (80030e0 <HAL_TIM_MspPostInit+0x1a4>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	61d3      	str	r3, [r2, #28]
 80030ac:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <HAL_TIM_MspPostInit+0x1a4>)
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = L_PWM_Pin;
 80030b8:	2302      	movs	r3, #2
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030bc:	2302      	movs	r3, #2
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c4:	2300      	movs	r3, #0
 80030c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80030c8:	2302      	movs	r3, #2
 80030ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(L_PWM_GPIO_Port, &GPIO_InitStruct);
 80030cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d0:	4619      	mov	r1, r3
 80030d2:	4805      	ldr	r0, [pc, #20]	; (80030e8 <HAL_TIM_MspPostInit+0x1ac>)
 80030d4:	f000 fa18 	bl	8003508 <HAL_GPIO_Init>
}
 80030d8:	bf00      	nop
 80030da:	3738      	adds	r7, #56	; 0x38
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40020400 	.word	0x40020400
 80030e8:	40020000 	.word	0x40020000
 80030ec:	40000400 	.word	0x40000400
 80030f0:	40000800 	.word	0x40000800
 80030f4:	40000c00 	.word	0x40000c00

080030f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030fc:	4b11      	ldr	r3, [pc, #68]	; (8003144 <MX_USART2_UART_Init+0x4c>)
 80030fe:	4a12      	ldr	r2, [pc, #72]	; (8003148 <MX_USART2_UART_Init+0x50>)
 8003100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <MX_USART2_UART_Init+0x4c>)
 8003104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800310a:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <MX_USART2_UART_Init+0x4c>)
 800310c:	2200      	movs	r2, #0
 800310e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <MX_USART2_UART_Init+0x4c>)
 8003112:	2200      	movs	r2, #0
 8003114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003116:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <MX_USART2_UART_Init+0x4c>)
 8003118:	2200      	movs	r2, #0
 800311a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800311c:	4b09      	ldr	r3, [pc, #36]	; (8003144 <MX_USART2_UART_Init+0x4c>)
 800311e:	220c      	movs	r2, #12
 8003120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <MX_USART2_UART_Init+0x4c>)
 8003124:	2200      	movs	r2, #0
 8003126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <MX_USART2_UART_Init+0x4c>)
 800312a:	2200      	movs	r2, #0
 800312c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800312e:	4805      	ldr	r0, [pc, #20]	; (8003144 <MX_USART2_UART_Init+0x4c>)
 8003130:	f002 fc8c 	bl	8005a4c <HAL_UART_Init>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800313a:	f7ff f819 	bl	8002170 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	200001ec 	.word	0x200001ec
 8003148:	40004400 	.word	0x40004400

0800314c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08a      	sub	sp, #40	; 0x28
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	60da      	str	r2, [r3, #12]
 8003162:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a17      	ldr	r2, [pc, #92]	; (80031c8 <HAL_UART_MspInit+0x7c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d127      	bne.n	80031be <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800316e:	4b17      	ldr	r3, [pc, #92]	; (80031cc <HAL_UART_MspInit+0x80>)
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	4a16      	ldr	r2, [pc, #88]	; (80031cc <HAL_UART_MspInit+0x80>)
 8003174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003178:	6253      	str	r3, [r2, #36]	; 0x24
 800317a:	4b14      	ldr	r3, [pc, #80]	; (80031cc <HAL_UART_MspInit+0x80>)
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003186:	4b11      	ldr	r3, [pc, #68]	; (80031cc <HAL_UART_MspInit+0x80>)
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	4a10      	ldr	r2, [pc, #64]	; (80031cc <HAL_UART_MspInit+0x80>)
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	61d3      	str	r3, [r2, #28]
 8003192:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <HAL_UART_MspInit+0x80>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800319e:	230c      	movs	r3, #12
 80031a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a2:	2302      	movs	r3, #2
 80031a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031aa:	2303      	movs	r3, #3
 80031ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031ae:	2307      	movs	r3, #7
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b2:	f107 0314 	add.w	r3, r7, #20
 80031b6:	4619      	mov	r1, r3
 80031b8:	4805      	ldr	r0, [pc, #20]	; (80031d0 <HAL_UART_MspInit+0x84>)
 80031ba:	f000 f9a5 	bl	8003508 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80031be:	bf00      	nop
 80031c0:	3728      	adds	r7, #40	; 0x28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40004400 	.word	0x40004400
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40020000 	.word	0x40020000

080031d4 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80031d4:	f7ff fc43 	bl	8002a5e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031d8:	480b      	ldr	r0, [pc, #44]	; (8003208 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80031da:	490c      	ldr	r1, [pc, #48]	; (800320c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80031dc:	4a0c      	ldr	r2, [pc, #48]	; (8003210 <LoopFillZerobss+0x16>)
  movs r3, #0
 80031de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031e0:	e002      	b.n	80031e8 <LoopCopyDataInit>

080031e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031e6:	3304      	adds	r3, #4

080031e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031ec:	d3f9      	bcc.n	80031e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ee:	4a09      	ldr	r2, [pc, #36]	; (8003214 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80031f0:	4c09      	ldr	r4, [pc, #36]	; (8003218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031f4:	e001      	b.n	80031fa <LoopFillZerobss>

080031f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f8:	3204      	adds	r2, #4

080031fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031fc:	d3fb      	bcc.n	80031f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031fe:	f002 fedd 	bl	8005fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003202:	f7fd fbbf 	bl	8000984 <main>
  bx lr
 8003206:	4770      	bx	lr
  ldr r0, =_sdata
 8003208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800320c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8003210:	08006068 	.word	0x08006068
  ldr r2, =_sbss
 8003214:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8003218:	20000238 	.word	0x20000238

0800321c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800321c:	e7fe      	b.n	800321c <ADC1_IRQHandler>

0800321e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b082      	sub	sp, #8
 8003222:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003228:	2003      	movs	r0, #3
 800322a:	f000 f939 	bl	80034a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800322e:	2000      	movs	r0, #0
 8003230:	f000 f80e 	bl	8003250 <HAL_InitTick>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	71fb      	strb	r3, [r7, #7]
 800323e:	e001      	b.n	8003244 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003240:	f7ff fbb6 	bl	80029b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003244:	79fb      	ldrb	r3, [r7, #7]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800325c:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <HAL_InitTick+0x68>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d022      	beq.n	80032aa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003264:	4b15      	ldr	r3, [pc, #84]	; (80032bc <HAL_InitTick+0x6c>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <HAL_InitTick+0x68>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003270:	fbb1 f3f3 	udiv	r3, r1, r3
 8003274:	fbb2 f3f3 	udiv	r3, r2, r3
 8003278:	4618      	mov	r0, r3
 800327a:	f000 f938 	bl	80034ee <HAL_SYSTICK_Config>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10f      	bne.n	80032a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b0f      	cmp	r3, #15
 8003288:	d809      	bhi.n	800329e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800328a:	2200      	movs	r2, #0
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	f04f 30ff 	mov.w	r0, #4294967295
 8003292:	f000 f910 	bl	80034b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003296:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <HAL_InitTick+0x70>)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	e007      	b.n	80032ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	73fb      	strb	r3, [r7, #15]
 80032a2:	e004      	b.n	80032ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
 80032a8:	e001      	b.n	80032ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	20000014 	.word	0x20000014
 80032bc:	2000000c 	.word	0x2000000c
 80032c0:	20000010 	.word	0x20000010

080032c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <HAL_IncTick+0x1c>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_IncTick+0x20>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4413      	add	r3, r2
 80032d2:	4a03      	ldr	r2, [pc, #12]	; (80032e0 <HAL_IncTick+0x1c>)
 80032d4:	6013      	str	r3, [r2, #0]
}
 80032d6:	bf00      	nop
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000234 	.word	0x20000234
 80032e4:	20000014 	.word	0x20000014

080032e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return uwTick;
 80032ec:	4b02      	ldr	r3, [pc, #8]	; (80032f8 <HAL_GetTick+0x10>)
 80032ee:	681b      	ldr	r3, [r3, #0]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr
 80032f8:	20000234 	.word	0x20000234

080032fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003304:	f7ff fff0 	bl	80032e8 <HAL_GetTick>
 8003308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d004      	beq.n	8003320 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003316:	4b09      	ldr	r3, [pc, #36]	; (800333c <HAL_Delay+0x40>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4413      	add	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003320:	bf00      	nop
 8003322:	f7ff ffe1 	bl	80032e8 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	429a      	cmp	r2, r3
 8003330:	d8f7      	bhi.n	8003322 <HAL_Delay+0x26>
  {
  }
}
 8003332:	bf00      	nop
 8003334:	bf00      	nop
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20000014 	.word	0x20000014

08003340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003350:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800335c:	4013      	ands	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800336c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003372:	4a04      	ldr	r2, [pc, #16]	; (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	60d3      	str	r3, [r2, #12]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <__NVIC_GetPriorityGrouping+0x18>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	0a1b      	lsrs	r3, r3, #8
 8003392:	f003 0307 	and.w	r3, r3, #7
}
 8003396:	4618      	mov	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	6039      	str	r1, [r7, #0]
 80033ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	db0a      	blt.n	80033ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	490c      	ldr	r1, [pc, #48]	; (80033f0 <__NVIC_SetPriority+0x4c>)
 80033be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c2:	0112      	lsls	r2, r2, #4
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	440b      	add	r3, r1
 80033c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033cc:	e00a      	b.n	80033e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	4908      	ldr	r1, [pc, #32]	; (80033f4 <__NVIC_SetPriority+0x50>)
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	3b04      	subs	r3, #4
 80033dc:	0112      	lsls	r2, r2, #4
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	440b      	add	r3, r1
 80033e2:	761a      	strb	r2, [r3, #24]
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	e000e100 	.word	0xe000e100
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b089      	sub	sp, #36	; 0x24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f1c3 0307 	rsb	r3, r3, #7
 8003412:	2b04      	cmp	r3, #4
 8003414:	bf28      	it	cs
 8003416:	2304      	movcs	r3, #4
 8003418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3304      	adds	r3, #4
 800341e:	2b06      	cmp	r3, #6
 8003420:	d902      	bls.n	8003428 <NVIC_EncodePriority+0x30>
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3b03      	subs	r3, #3
 8003426:	e000      	b.n	800342a <NVIC_EncodePriority+0x32>
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800342c:	f04f 32ff 	mov.w	r2, #4294967295
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43da      	mvns	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	401a      	ands	r2, r3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003440:	f04f 31ff 	mov.w	r1, #4294967295
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	fa01 f303 	lsl.w	r3, r1, r3
 800344a:	43d9      	mvns	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003450:	4313      	orrs	r3, r2
         );
}
 8003452:	4618      	mov	r0, r3
 8003454:	3724      	adds	r7, #36	; 0x24
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3b01      	subs	r3, #1
 8003468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800346c:	d301      	bcc.n	8003472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800346e:	2301      	movs	r3, #1
 8003470:	e00f      	b.n	8003492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003472:	4a0a      	ldr	r2, [pc, #40]	; (800349c <SysTick_Config+0x40>)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3b01      	subs	r3, #1
 8003478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800347a:	210f      	movs	r1, #15
 800347c:	f04f 30ff 	mov.w	r0, #4294967295
 8003480:	f7ff ff90 	bl	80033a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003484:	4b05      	ldr	r3, [pc, #20]	; (800349c <SysTick_Config+0x40>)
 8003486:	2200      	movs	r2, #0
 8003488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800348a:	4b04      	ldr	r3, [pc, #16]	; (800349c <SysTick_Config+0x40>)
 800348c:	2207      	movs	r2, #7
 800348e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	e000e010 	.word	0xe000e010

080034a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ff49 	bl	8003340 <__NVIC_SetPriorityGrouping>
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b086      	sub	sp, #24
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	4603      	mov	r3, r0
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034c8:	f7ff ff5e 	bl	8003388 <__NVIC_GetPriorityGrouping>
 80034cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	6978      	ldr	r0, [r7, #20]
 80034d4:	f7ff ff90 	bl	80033f8 <NVIC_EncodePriority>
 80034d8:	4602      	mov	r2, r0
 80034da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff ff5f 	bl	80033a4 <__NVIC_SetPriority>
}
 80034e6:	bf00      	nop
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ffb0 	bl	800345c <SysTick_Config>
 80034fc:	4603      	mov	r3, r0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800351a:	2300      	movs	r3, #0
 800351c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800351e:	e160      	b.n	80037e2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	2101      	movs	r1, #1
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	fa01 f303 	lsl.w	r3, r1, r3
 800352c:	4013      	ands	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 8152 	beq.w	80037dc <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	2b01      	cmp	r3, #1
 8003542:	d005      	beq.n	8003550 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800354c:	2b02      	cmp	r3, #2
 800354e:	d130      	bne.n	80035b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	2203      	movs	r2, #3
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4013      	ands	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003586:	2201      	movs	r2, #1
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4013      	ands	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	f003 0201 	and.w	r2, r3, #1
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d017      	beq.n	80035ee <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	2203      	movs	r2, #3
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4013      	ands	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d123      	bne.n	8003642 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	08da      	lsrs	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3208      	adds	r2, #8
 8003602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003606:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	220f      	movs	r2, #15
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4013      	ands	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	691a      	ldr	r2, [r3, #16]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	08da      	lsrs	r2, r3, #3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3208      	adds	r2, #8
 800363c:	6939      	ldr	r1, [r7, #16]
 800363e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	2203      	movs	r2, #3
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 0203 	and.w	r2, r3, #3
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 80ac 	beq.w	80037dc <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003684:	4b5e      	ldr	r3, [pc, #376]	; (8003800 <HAL_GPIO_Init+0x2f8>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	4a5d      	ldr	r2, [pc, #372]	; (8003800 <HAL_GPIO_Init+0x2f8>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6213      	str	r3, [r2, #32]
 8003690:	4b5b      	ldr	r3, [pc, #364]	; (8003800 <HAL_GPIO_Init+0x2f8>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800369c:	4a59      	ldr	r2, [pc, #356]	; (8003804 <HAL_GPIO_Init+0x2fc>)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	089b      	lsrs	r3, r3, #2
 80036a2:	3302      	adds	r3, #2
 80036a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	220f      	movs	r2, #15
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a51      	ldr	r2, [pc, #324]	; (8003808 <HAL_GPIO_Init+0x300>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d025      	beq.n	8003714 <HAL_GPIO_Init+0x20c>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a50      	ldr	r2, [pc, #320]	; (800380c <HAL_GPIO_Init+0x304>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d01f      	beq.n	8003710 <HAL_GPIO_Init+0x208>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a4f      	ldr	r2, [pc, #316]	; (8003810 <HAL_GPIO_Init+0x308>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d019      	beq.n	800370c <HAL_GPIO_Init+0x204>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a4e      	ldr	r2, [pc, #312]	; (8003814 <HAL_GPIO_Init+0x30c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d013      	beq.n	8003708 <HAL_GPIO_Init+0x200>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a4d      	ldr	r2, [pc, #308]	; (8003818 <HAL_GPIO_Init+0x310>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00d      	beq.n	8003704 <HAL_GPIO_Init+0x1fc>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a4c      	ldr	r2, [pc, #304]	; (800381c <HAL_GPIO_Init+0x314>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d007      	beq.n	8003700 <HAL_GPIO_Init+0x1f8>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a4b      	ldr	r2, [pc, #300]	; (8003820 <HAL_GPIO_Init+0x318>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d101      	bne.n	80036fc <HAL_GPIO_Init+0x1f4>
 80036f8:	2306      	movs	r3, #6
 80036fa:	e00c      	b.n	8003716 <HAL_GPIO_Init+0x20e>
 80036fc:	2307      	movs	r3, #7
 80036fe:	e00a      	b.n	8003716 <HAL_GPIO_Init+0x20e>
 8003700:	2305      	movs	r3, #5
 8003702:	e008      	b.n	8003716 <HAL_GPIO_Init+0x20e>
 8003704:	2304      	movs	r3, #4
 8003706:	e006      	b.n	8003716 <HAL_GPIO_Init+0x20e>
 8003708:	2303      	movs	r3, #3
 800370a:	e004      	b.n	8003716 <HAL_GPIO_Init+0x20e>
 800370c:	2302      	movs	r3, #2
 800370e:	e002      	b.n	8003716 <HAL_GPIO_Init+0x20e>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <HAL_GPIO_Init+0x20e>
 8003714:	2300      	movs	r3, #0
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	f002 0203 	and.w	r2, r2, #3
 800371c:	0092      	lsls	r2, r2, #2
 800371e:	4093      	lsls	r3, r2
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003726:	4937      	ldr	r1, [pc, #220]	; (8003804 <HAL_GPIO_Init+0x2fc>)
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	089b      	lsrs	r3, r3, #2
 800372c:	3302      	adds	r3, #2
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003734:	4b3b      	ldr	r3, [pc, #236]	; (8003824 <HAL_GPIO_Init+0x31c>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	43db      	mvns	r3, r3
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4013      	ands	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003758:	4a32      	ldr	r2, [pc, #200]	; (8003824 <HAL_GPIO_Init+0x31c>)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800375e:	4b31      	ldr	r3, [pc, #196]	; (8003824 <HAL_GPIO_Init+0x31c>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	43db      	mvns	r3, r3
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4013      	ands	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003782:	4a28      	ldr	r2, [pc, #160]	; (8003824 <HAL_GPIO_Init+0x31c>)
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003788:	4b26      	ldr	r3, [pc, #152]	; (8003824 <HAL_GPIO_Init+0x31c>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	43db      	mvns	r3, r3
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4013      	ands	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80037ac:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <HAL_GPIO_Init+0x31c>)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037b2:	4b1c      	ldr	r3, [pc, #112]	; (8003824 <HAL_GPIO_Init+0x31c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	43db      	mvns	r3, r3
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4013      	ands	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037d6:	4a13      	ldr	r2, [pc, #76]	; (8003824 <HAL_GPIO_Init+0x31c>)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	3301      	adds	r3, #1
 80037e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f47f ae97 	bne.w	8003520 <HAL_GPIO_Init+0x18>
  }
}
 80037f2:	bf00      	nop
 80037f4:	bf00      	nop
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40023800 	.word	0x40023800
 8003804:	40010000 	.word	0x40010000
 8003808:	40020000 	.word	0x40020000
 800380c:	40020400 	.word	0x40020400
 8003810:	40020800 	.word	0x40020800
 8003814:	40020c00 	.word	0x40020c00
 8003818:	40021000 	.word	0x40021000
 800381c:	40021400 	.word	0x40021400
 8003820:	40021800 	.word	0x40021800
 8003824:	40010400 	.word	0x40010400

08003828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	807b      	strh	r3, [r7, #2]
 8003834:	4613      	mov	r3, r2
 8003836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003838:	787b      	ldrb	r3, [r7, #1]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800383e:	887a      	ldrh	r2, [r7, #2]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8003844:	e003      	b.n	800384e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8003846:	887b      	ldrh	r3, [r7, #2]
 8003848:	041a      	lsls	r2, r3, #16
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	619a      	str	r2, [r3, #24]
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr

08003858 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800386a:	887a      	ldrh	r2, [r7, #2]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4013      	ands	r3, r2
 8003870:	041a      	lsls	r2, r3, #16
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	43d9      	mvns	r1, r3
 8003876:	887b      	ldrh	r3, [r7, #2]
 8003878:	400b      	ands	r3, r1
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	619a      	str	r2, [r3, #24]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
	...

0800388c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e31d      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800389e:	4b94      	ldr	r3, [pc, #592]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038a8:	4b91      	ldr	r3, [pc, #580]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d07b      	beq.n	80039b6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d006      	beq.n	80038d2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2b0c      	cmp	r3, #12
 80038c8:	d10f      	bne.n	80038ea <HAL_RCC_OscConfig+0x5e>
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d0:	d10b      	bne.n	80038ea <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d2:	4b87      	ldr	r3, [pc, #540]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d06a      	beq.n	80039b4 <HAL_RCC_OscConfig+0x128>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d166      	bne.n	80039b4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e2f7      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d106      	bne.n	8003900 <HAL_RCC_OscConfig+0x74>
 80038f2:	4b7f      	ldr	r3, [pc, #508]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a7e      	ldr	r2, [pc, #504]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 80038f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e02d      	b.n	800395c <HAL_RCC_OscConfig+0xd0>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10c      	bne.n	8003922 <HAL_RCC_OscConfig+0x96>
 8003908:	4b79      	ldr	r3, [pc, #484]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a78      	ldr	r2, [pc, #480]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 800390e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	4b76      	ldr	r3, [pc, #472]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a75      	ldr	r2, [pc, #468]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 800391a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800391e:	6013      	str	r3, [r2, #0]
 8003920:	e01c      	b.n	800395c <HAL_RCC_OscConfig+0xd0>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b05      	cmp	r3, #5
 8003928:	d10c      	bne.n	8003944 <HAL_RCC_OscConfig+0xb8>
 800392a:	4b71      	ldr	r3, [pc, #452]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a70      	ldr	r2, [pc, #448]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 8003930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4b6e      	ldr	r3, [pc, #440]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a6d      	ldr	r2, [pc, #436]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 800393c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e00b      	b.n	800395c <HAL_RCC_OscConfig+0xd0>
 8003944:	4b6a      	ldr	r3, [pc, #424]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a69      	ldr	r2, [pc, #420]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 800394a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	4b67      	ldr	r3, [pc, #412]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a66      	ldr	r2, [pc, #408]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 8003956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800395a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d013      	beq.n	800398c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003964:	f7ff fcc0 	bl	80032e8 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800396c:	f7ff fcbc 	bl	80032e8 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b64      	cmp	r3, #100	; 0x64
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e2ad      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800397e:	4b5c      	ldr	r3, [pc, #368]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0xe0>
 800398a:	e014      	b.n	80039b6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398c:	f7ff fcac 	bl	80032e8 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003994:	f7ff fca8 	bl	80032e8 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b64      	cmp	r3, #100	; 0x64
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e299      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039a6:	4b52      	ldr	r3, [pc, #328]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x108>
 80039b2:	e000      	b.n	80039b6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d05a      	beq.n	8003a78 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2b0c      	cmp	r3, #12
 80039cc:	d119      	bne.n	8003a02 <HAL_RCC_OscConfig+0x176>
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d116      	bne.n	8003a02 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039d4:	4b46      	ldr	r3, [pc, #280]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_RCC_OscConfig+0x160>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e276      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ec:	4b40      	ldr	r3, [pc, #256]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	493d      	ldr	r1, [pc, #244]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a00:	e03a      	b.n	8003a78 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d020      	beq.n	8003a4c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a0a:	4b3a      	ldr	r3, [pc, #232]	; (8003af4 <HAL_RCC_OscConfig+0x268>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a10:	f7ff fc6a 	bl	80032e8 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a18:	f7ff fc66 	bl	80032e8 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e257      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a2a:	4b31      	ldr	r3, [pc, #196]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a36:	4b2e      	ldr	r3, [pc, #184]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	021b      	lsls	r3, r3, #8
 8003a44:	492a      	ldr	r1, [pc, #168]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	604b      	str	r3, [r1, #4]
 8003a4a:	e015      	b.n	8003a78 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a4c:	4b29      	ldr	r3, [pc, #164]	; (8003af4 <HAL_RCC_OscConfig+0x268>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a52:	f7ff fc49 	bl	80032e8 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a5a:	f7ff fc45 	bl	80032e8 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e236      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a6c:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f0      	bne.n	8003a5a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 80b8 	beq.w	8003bf6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d170      	bne.n	8003b6e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a8c:	4b18      	ldr	r3, [pc, #96]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x218>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e21a      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1a      	ldr	r2, [r3, #32]
 8003aa8:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d921      	bls.n	8003af8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fc7d 	bl	80043b8 <RCC_SetFlashLatencyFromMSIRange>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e208      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	4906      	ldr	r1, [pc, #24]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	061b      	lsls	r3, r3, #24
 8003ae8:	4901      	ldr	r1, [pc, #4]	; (8003af0 <HAL_RCC_OscConfig+0x264>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]
 8003aee:	e020      	b.n	8003b32 <HAL_RCC_OscConfig+0x2a6>
 8003af0:	40023800 	.word	0x40023800
 8003af4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003af8:	4b99      	ldr	r3, [pc, #612]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	4996      	ldr	r1, [pc, #600]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b0a:	4b95      	ldr	r3, [pc, #596]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	061b      	lsls	r3, r3, #24
 8003b18:	4991      	ldr	r1, [pc, #580]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fc48 	bl	80043b8 <RCC_SetFlashLatencyFromMSIRange>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e1d3      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	0b5b      	lsrs	r3, r3, #13
 8003b38:	3301      	adds	r3, #1
 8003b3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003b42:	4a87      	ldr	r2, [pc, #540]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003b44:	6892      	ldr	r2, [r2, #8]
 8003b46:	0912      	lsrs	r2, r2, #4
 8003b48:	f002 020f 	and.w	r2, r2, #15
 8003b4c:	4985      	ldr	r1, [pc, #532]	; (8003d64 <HAL_RCC_OscConfig+0x4d8>)
 8003b4e:	5c8a      	ldrb	r2, [r1, r2]
 8003b50:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003b52:	4a85      	ldr	r2, [pc, #532]	; (8003d68 <HAL_RCC_OscConfig+0x4dc>)
 8003b54:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b56:	4b85      	ldr	r3, [pc, #532]	; (8003d6c <HAL_RCC_OscConfig+0x4e0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff fb78 	bl	8003250 <HAL_InitTick>
 8003b60:	4603      	mov	r3, r0
 8003b62:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d045      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	e1b5      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d029      	beq.n	8003bca <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b76:	4b7e      	ldr	r3, [pc, #504]	; (8003d70 <HAL_RCC_OscConfig+0x4e4>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7c:	f7ff fbb4 	bl	80032e8 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b84:	f7ff fbb0 	bl	80032e8 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e1a1      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b96:	4b72      	ldr	r3, [pc, #456]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ba2:	4b6f      	ldr	r3, [pc, #444]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	496c      	ldr	r1, [pc, #432]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bb4:	4b6a      	ldr	r3, [pc, #424]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	061b      	lsls	r3, r3, #24
 8003bc2:	4967      	ldr	r1, [pc, #412]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
 8003bc8:	e015      	b.n	8003bf6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003bca:	4b69      	ldr	r3, [pc, #420]	; (8003d70 <HAL_RCC_OscConfig+0x4e4>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7ff fb8a 	bl	80032e8 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bd8:	f7ff fb86 	bl	80032e8 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e177      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003bea:	4b5d      	ldr	r3, [pc, #372]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d030      	beq.n	8003c64 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d016      	beq.n	8003c38 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c0a:	4b5a      	ldr	r3, [pc, #360]	; (8003d74 <HAL_RCC_OscConfig+0x4e8>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c10:	f7ff fb6a 	bl	80032e8 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c18:	f7ff fb66 	bl	80032e8 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e157      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c2a:	4b4d      	ldr	r3, [pc, #308]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x38c>
 8003c36:	e015      	b.n	8003c64 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c38:	4b4e      	ldr	r3, [pc, #312]	; (8003d74 <HAL_RCC_OscConfig+0x4e8>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c3e:	f7ff fb53 	bl	80032e8 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c46:	f7ff fb4f 	bl	80032e8 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e140      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c58:	4b41      	ldr	r3, [pc, #260]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1f0      	bne.n	8003c46 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80b5 	beq.w	8003ddc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c72:	2300      	movs	r3, #0
 8003c74:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c76:	4b3a      	ldr	r3, [pc, #232]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10d      	bne.n	8003c9e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c82:	4b37      	ldr	r3, [pc, #220]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	4a36      	ldr	r2, [pc, #216]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	6253      	str	r3, [r2, #36]	; 0x24
 8003c8e:	4b34      	ldr	r3, [pc, #208]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9e:	4b36      	ldr	r3, [pc, #216]	; (8003d78 <HAL_RCC_OscConfig+0x4ec>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d118      	bne.n	8003cdc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003caa:	4b33      	ldr	r3, [pc, #204]	; (8003d78 <HAL_RCC_OscConfig+0x4ec>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a32      	ldr	r2, [pc, #200]	; (8003d78 <HAL_RCC_OscConfig+0x4ec>)
 8003cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb6:	f7ff fb17 	bl	80032e8 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cbe:	f7ff fb13 	bl	80032e8 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b64      	cmp	r3, #100	; 0x64
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e104      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd0:	4b29      	ldr	r3, [pc, #164]	; (8003d78 <HAL_RCC_OscConfig+0x4ec>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d106      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x466>
 8003ce4:	4b1e      	ldr	r3, [pc, #120]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce8:	4a1d      	ldr	r2, [pc, #116]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cee:	6353      	str	r3, [r2, #52]	; 0x34
 8003cf0:	e02d      	b.n	8003d4e <HAL_RCC_OscConfig+0x4c2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x488>
 8003cfa:	4b19      	ldr	r3, [pc, #100]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfe:	4a18      	ldr	r2, [pc, #96]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d04:	6353      	str	r3, [r2, #52]	; 0x34
 8003d06:	4b16      	ldr	r3, [pc, #88]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0a:	4a15      	ldr	r2, [pc, #84]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003d0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d10:	6353      	str	r3, [r2, #52]	; 0x34
 8003d12:	e01c      	b.n	8003d4e <HAL_RCC_OscConfig+0x4c2>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b05      	cmp	r3, #5
 8003d1a:	d10c      	bne.n	8003d36 <HAL_RCC_OscConfig+0x4aa>
 8003d1c:	4b10      	ldr	r3, [pc, #64]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d20:	4a0f      	ldr	r2, [pc, #60]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d26:	6353      	str	r3, [r2, #52]	; 0x34
 8003d28:	4b0d      	ldr	r3, [pc, #52]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2c:	4a0c      	ldr	r2, [pc, #48]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d32:	6353      	str	r3, [r2, #52]	; 0x34
 8003d34:	e00b      	b.n	8003d4e <HAL_RCC_OscConfig+0x4c2>
 8003d36:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3a:	4a09      	ldr	r2, [pc, #36]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d40:	6353      	str	r3, [r2, #52]	; 0x34
 8003d42:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d46:	4a06      	ldr	r2, [pc, #24]	; (8003d60 <HAL_RCC_OscConfig+0x4d4>)
 8003d48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d4c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d024      	beq.n	8003da0 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d56:	f7ff fac7 	bl	80032e8 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d5c:	e019      	b.n	8003d92 <HAL_RCC_OscConfig+0x506>
 8003d5e:	bf00      	nop
 8003d60:	40023800 	.word	0x40023800
 8003d64:	08006040 	.word	0x08006040
 8003d68:	2000000c 	.word	0x2000000c
 8003d6c:	20000010 	.word	0x20000010
 8003d70:	42470020 	.word	0x42470020
 8003d74:	42470680 	.word	0x42470680
 8003d78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d7c:	f7ff fab4 	bl	80032e8 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e0a3      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d92:	4b54      	ldr	r3, [pc, #336]	; (8003ee4 <HAL_RCC_OscConfig+0x658>)
 8003d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0ee      	beq.n	8003d7c <HAL_RCC_OscConfig+0x4f0>
 8003d9e:	e014      	b.n	8003dca <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da0:	f7ff faa2 	bl	80032e8 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003da6:	e00a      	b.n	8003dbe <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da8:	f7ff fa9e 	bl	80032e8 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e08d      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003dbe:	4b49      	ldr	r3, [pc, #292]	; (8003ee4 <HAL_RCC_OscConfig+0x658>)
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1ee      	bne.n	8003da8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dca:	7ffb      	ldrb	r3, [r7, #31]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d105      	bne.n	8003ddc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd0:	4b44      	ldr	r3, [pc, #272]	; (8003ee4 <HAL_RCC_OscConfig+0x658>)
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	4a43      	ldr	r2, [pc, #268]	; (8003ee4 <HAL_RCC_OscConfig+0x658>)
 8003dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dda:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d079      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	2b0c      	cmp	r3, #12
 8003de8:	d056      	beq.n	8003e98 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d13b      	bne.n	8003e6a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df2:	4b3d      	ldr	r3, [pc, #244]	; (8003ee8 <HAL_RCC_OscConfig+0x65c>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df8:	f7ff fa76 	bl	80032e8 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e00:	f7ff fa72 	bl	80032e8 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e063      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e12:	4b34      	ldr	r3, [pc, #208]	; (8003ee4 <HAL_RCC_OscConfig+0x658>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e1e:	4b31      	ldr	r3, [pc, #196]	; (8003ee4 <HAL_RCC_OscConfig+0x658>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	4319      	orrs	r1, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	430b      	orrs	r3, r1
 8003e36:	492b      	ldr	r1, [pc, #172]	; (8003ee4 <HAL_RCC_OscConfig+0x658>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e3c:	4b2a      	ldr	r3, [pc, #168]	; (8003ee8 <HAL_RCC_OscConfig+0x65c>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e42:	f7ff fa51 	bl	80032e8 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4a:	f7ff fa4d 	bl	80032e8 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e03e      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e5c:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <HAL_RCC_OscConfig+0x658>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCC_OscConfig+0x5be>
 8003e68:	e036      	b.n	8003ed8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ee8 <HAL_RCC_OscConfig+0x65c>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e70:	f7ff fa3a 	bl	80032e8 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e78:	f7ff fa36 	bl	80032e8 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e027      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e8a:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <HAL_RCC_OscConfig+0x658>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x5ec>
 8003e96:	e01f      	b.n	8003ed8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e01a      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <HAL_RCC_OscConfig+0x658>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d10d      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d106      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d001      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3720      	adds	r7, #32
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	42470060 	.word	0x42470060

08003eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e11a      	b.n	8004136 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f00:	4b8f      	ldr	r3, [pc, #572]	; (8004140 <HAL_RCC_ClockConfig+0x254>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d919      	bls.n	8003f42 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d105      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x34>
 8003f14:	4b8a      	ldr	r3, [pc, #552]	; (8004140 <HAL_RCC_ClockConfig+0x254>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a89      	ldr	r2, [pc, #548]	; (8004140 <HAL_RCC_ClockConfig+0x254>)
 8003f1a:	f043 0304 	orr.w	r3, r3, #4
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	4b87      	ldr	r3, [pc, #540]	; (8004140 <HAL_RCC_ClockConfig+0x254>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f023 0201 	bic.w	r2, r3, #1
 8003f28:	4985      	ldr	r1, [pc, #532]	; (8004140 <HAL_RCC_ClockConfig+0x254>)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f30:	4b83      	ldr	r3, [pc, #524]	; (8004140 <HAL_RCC_ClockConfig+0x254>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d001      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e0f9      	b.n	8004136 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d008      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4e:	4b7d      	ldr	r3, [pc, #500]	; (8004144 <HAL_RCC_ClockConfig+0x258>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	497a      	ldr	r1, [pc, #488]	; (8004144 <HAL_RCC_ClockConfig+0x258>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 808e 	beq.w	800408a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d107      	bne.n	8003f86 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f76:	4b73      	ldr	r3, [pc, #460]	; (8004144 <HAL_RCC_ClockConfig+0x258>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d121      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e0d7      	b.n	8004136 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b03      	cmp	r3, #3
 8003f8c:	d107      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f8e:	4b6d      	ldr	r3, [pc, #436]	; (8004144 <HAL_RCC_ClockConfig+0x258>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d115      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e0cb      	b.n	8004136 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d107      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fa6:	4b67      	ldr	r3, [pc, #412]	; (8004144 <HAL_RCC_ClockConfig+0x258>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d109      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e0bf      	b.n	8004136 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003fb6:	4b63      	ldr	r3, [pc, #396]	; (8004144 <HAL_RCC_ClockConfig+0x258>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e0b7      	b.n	8004136 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fc6:	4b5f      	ldr	r3, [pc, #380]	; (8004144 <HAL_RCC_ClockConfig+0x258>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f023 0203 	bic.w	r2, r3, #3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	495c      	ldr	r1, [pc, #368]	; (8004144 <HAL_RCC_ClockConfig+0x258>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fd8:	f7ff f986 	bl	80032e8 <HAL_GetTick>
 8003fdc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d112      	bne.n	800400c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fe6:	e00a      	b.n	8003ffe <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe8:	f7ff f97e 	bl	80032e8 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e09b      	b.n	8004136 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ffe:	4b51      	ldr	r3, [pc, #324]	; (8004144 <HAL_RCC_ClockConfig+0x258>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	2b08      	cmp	r3, #8
 8004008:	d1ee      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0xfc>
 800400a:	e03e      	b.n	800408a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b03      	cmp	r3, #3
 8004012:	d112      	bne.n	800403a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004014:	e00a      	b.n	800402c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004016:	f7ff f967 	bl	80032e8 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	f241 3288 	movw	r2, #5000	; 0x1388
 8004024:	4293      	cmp	r3, r2
 8004026:	d901      	bls.n	800402c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e084      	b.n	8004136 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800402c:	4b45      	ldr	r3, [pc, #276]	; (8004144 <HAL_RCC_ClockConfig+0x258>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 030c 	and.w	r3, r3, #12
 8004034:	2b0c      	cmp	r3, #12
 8004036:	d1ee      	bne.n	8004016 <HAL_RCC_ClockConfig+0x12a>
 8004038:	e027      	b.n	800408a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d11d      	bne.n	800407e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004042:	e00a      	b.n	800405a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004044:	f7ff f950 	bl	80032e8 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004052:	4293      	cmp	r3, r2
 8004054:	d901      	bls.n	800405a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e06d      	b.n	8004136 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800405a:	4b3a      	ldr	r3, [pc, #232]	; (8004144 <HAL_RCC_ClockConfig+0x258>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 030c 	and.w	r3, r3, #12
 8004062:	2b04      	cmp	r3, #4
 8004064:	d1ee      	bne.n	8004044 <HAL_RCC_ClockConfig+0x158>
 8004066:	e010      	b.n	800408a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004068:	f7ff f93e 	bl	80032e8 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f241 3288 	movw	r2, #5000	; 0x1388
 8004076:	4293      	cmp	r3, r2
 8004078:	d901      	bls.n	800407e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e05b      	b.n	8004136 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800407e:	4b31      	ldr	r3, [pc, #196]	; (8004144 <HAL_RCC_ClockConfig+0x258>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 030c 	and.w	r3, r3, #12
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1ee      	bne.n	8004068 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800408a:	4b2d      	ldr	r3, [pc, #180]	; (8004140 <HAL_RCC_ClockConfig+0x254>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d219      	bcs.n	80040cc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d105      	bne.n	80040aa <HAL_RCC_ClockConfig+0x1be>
 800409e:	4b28      	ldr	r3, [pc, #160]	; (8004140 <HAL_RCC_ClockConfig+0x254>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a27      	ldr	r2, [pc, #156]	; (8004140 <HAL_RCC_ClockConfig+0x254>)
 80040a4:	f043 0304 	orr.w	r3, r3, #4
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	4b25      	ldr	r3, [pc, #148]	; (8004140 <HAL_RCC_ClockConfig+0x254>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f023 0201 	bic.w	r2, r3, #1
 80040b2:	4923      	ldr	r1, [pc, #140]	; (8004140 <HAL_RCC_ClockConfig+0x254>)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ba:	4b21      	ldr	r3, [pc, #132]	; (8004140 <HAL_RCC_ClockConfig+0x254>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d001      	beq.n	80040cc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e034      	b.n	8004136 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d8:	4b1a      	ldr	r3, [pc, #104]	; (8004144 <HAL_RCC_ClockConfig+0x258>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4917      	ldr	r1, [pc, #92]	; (8004144 <HAL_RCC_ClockConfig+0x258>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d009      	beq.n	800410a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040f6:	4b13      	ldr	r3, [pc, #76]	; (8004144 <HAL_RCC_ClockConfig+0x258>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	490f      	ldr	r1, [pc, #60]	; (8004144 <HAL_RCC_ClockConfig+0x258>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800410a:	f000 f823 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 800410e:	4602      	mov	r2, r0
 8004110:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <HAL_RCC_ClockConfig+0x258>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	091b      	lsrs	r3, r3, #4
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	490b      	ldr	r1, [pc, #44]	; (8004148 <HAL_RCC_ClockConfig+0x25c>)
 800411c:	5ccb      	ldrb	r3, [r1, r3]
 800411e:	fa22 f303 	lsr.w	r3, r2, r3
 8004122:	4a0a      	ldr	r2, [pc, #40]	; (800414c <HAL_RCC_ClockConfig+0x260>)
 8004124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004126:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <HAL_RCC_ClockConfig+0x264>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff f890 	bl	8003250 <HAL_InitTick>
 8004130:	4603      	mov	r3, r0
 8004132:	72fb      	strb	r3, [r7, #11]

  return status;
 8004134:	7afb      	ldrb	r3, [r7, #11]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40023c00 	.word	0x40023c00
 8004144:	40023800 	.word	0x40023800
 8004148:	08006040 	.word	0x08006040
 800414c:	2000000c 	.word	0x2000000c
 8004150:	20000010 	.word	0x20000010

08004154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004158:	b092      	sub	sp, #72	; 0x48
 800415a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800415c:	4b79      	ldr	r3, [pc, #484]	; (8004344 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004164:	f003 030c 	and.w	r3, r3, #12
 8004168:	2b0c      	cmp	r3, #12
 800416a:	d00d      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x34>
 800416c:	2b0c      	cmp	r3, #12
 800416e:	f200 80d5 	bhi.w	800431c <HAL_RCC_GetSysClockFreq+0x1c8>
 8004172:	2b04      	cmp	r3, #4
 8004174:	d002      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x28>
 8004176:	2b08      	cmp	r3, #8
 8004178:	d003      	beq.n	8004182 <HAL_RCC_GetSysClockFreq+0x2e>
 800417a:	e0cf      	b.n	800431c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800417c:	4b72      	ldr	r3, [pc, #456]	; (8004348 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800417e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004180:	e0da      	b.n	8004338 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004182:	4b72      	ldr	r3, [pc, #456]	; (800434c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004184:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004186:	e0d7      	b.n	8004338 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800418a:	0c9b      	lsrs	r3, r3, #18
 800418c:	f003 020f 	and.w	r2, r3, #15
 8004190:	4b6f      	ldr	r3, [pc, #444]	; (8004350 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004192:	5c9b      	ldrb	r3, [r3, r2]
 8004194:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004198:	0d9b      	lsrs	r3, r3, #22
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	3301      	adds	r3, #1
 80041a0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041a2:	4b68      	ldr	r3, [pc, #416]	; (8004344 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d05d      	beq.n	800426a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80041ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b0:	2200      	movs	r2, #0
 80041b2:	4618      	mov	r0, r3
 80041b4:	4611      	mov	r1, r2
 80041b6:	4604      	mov	r4, r0
 80041b8:	460d      	mov	r5, r1
 80041ba:	4622      	mov	r2, r4
 80041bc:	462b      	mov	r3, r5
 80041be:	f04f 0000 	mov.w	r0, #0
 80041c2:	f04f 0100 	mov.w	r1, #0
 80041c6:	0159      	lsls	r1, r3, #5
 80041c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041cc:	0150      	lsls	r0, r2, #5
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4621      	mov	r1, r4
 80041d4:	1a51      	subs	r1, r2, r1
 80041d6:	6139      	str	r1, [r7, #16]
 80041d8:	4629      	mov	r1, r5
 80041da:	eb63 0301 	sbc.w	r3, r3, r1
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041ec:	4659      	mov	r1, fp
 80041ee:	018b      	lsls	r3, r1, #6
 80041f0:	4651      	mov	r1, sl
 80041f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041f6:	4651      	mov	r1, sl
 80041f8:	018a      	lsls	r2, r1, #6
 80041fa:	46d4      	mov	ip, sl
 80041fc:	ebb2 080c 	subs.w	r8, r2, ip
 8004200:	4659      	mov	r1, fp
 8004202:	eb63 0901 	sbc.w	r9, r3, r1
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	f04f 0300 	mov.w	r3, #0
 800420e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004212:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004216:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800421a:	4690      	mov	r8, r2
 800421c:	4699      	mov	r9, r3
 800421e:	4623      	mov	r3, r4
 8004220:	eb18 0303 	adds.w	r3, r8, r3
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	462b      	mov	r3, r5
 8004228:	eb49 0303 	adc.w	r3, r9, r3
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800423a:	4629      	mov	r1, r5
 800423c:	024b      	lsls	r3, r1, #9
 800423e:	4620      	mov	r0, r4
 8004240:	4629      	mov	r1, r5
 8004242:	4604      	mov	r4, r0
 8004244:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004248:	4601      	mov	r1, r0
 800424a:	024a      	lsls	r2, r1, #9
 800424c:	4610      	mov	r0, r2
 800424e:	4619      	mov	r1, r3
 8004250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004252:	2200      	movs	r2, #0
 8004254:	62bb      	str	r3, [r7, #40]	; 0x28
 8004256:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004258:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800425c:	f7fc f958 	bl	8000510 <__aeabi_uldivmod>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4613      	mov	r3, r2
 8004266:	647b      	str	r3, [r7, #68]	; 0x44
 8004268:	e055      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	2200      	movs	r2, #0
 800426e:	623b      	str	r3, [r7, #32]
 8004270:	627a      	str	r2, [r7, #36]	; 0x24
 8004272:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004276:	4642      	mov	r2, r8
 8004278:	464b      	mov	r3, r9
 800427a:	f04f 0000 	mov.w	r0, #0
 800427e:	f04f 0100 	mov.w	r1, #0
 8004282:	0159      	lsls	r1, r3, #5
 8004284:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004288:	0150      	lsls	r0, r2, #5
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	46c4      	mov	ip, r8
 8004290:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004294:	4640      	mov	r0, r8
 8004296:	4649      	mov	r1, r9
 8004298:	468c      	mov	ip, r1
 800429a:	eb63 0b0c 	sbc.w	fp, r3, ip
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042aa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042ae:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042b2:	ebb2 040a 	subs.w	r4, r2, sl
 80042b6:	eb63 050b 	sbc.w	r5, r3, fp
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	00eb      	lsls	r3, r5, #3
 80042c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042c8:	00e2      	lsls	r2, r4, #3
 80042ca:	4614      	mov	r4, r2
 80042cc:	461d      	mov	r5, r3
 80042ce:	4603      	mov	r3, r0
 80042d0:	18e3      	adds	r3, r4, r3
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	460b      	mov	r3, r1
 80042d6:	eb45 0303 	adc.w	r3, r5, r3
 80042da:	607b      	str	r3, [r7, #4]
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042e8:	4629      	mov	r1, r5
 80042ea:	028b      	lsls	r3, r1, #10
 80042ec:	4620      	mov	r0, r4
 80042ee:	4629      	mov	r1, r5
 80042f0:	4604      	mov	r4, r0
 80042f2:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80042f6:	4601      	mov	r1, r0
 80042f8:	028a      	lsls	r2, r1, #10
 80042fa:	4610      	mov	r0, r2
 80042fc:	4619      	mov	r1, r3
 80042fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004300:	2200      	movs	r2, #0
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	61fa      	str	r2, [r7, #28]
 8004306:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800430a:	f7fc f901 	bl	8000510 <__aeabi_uldivmod>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4613      	mov	r3, r2
 8004314:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8004316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004318:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800431a:	e00d      	b.n	8004338 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800431c:	4b09      	ldr	r3, [pc, #36]	; (8004344 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	0b5b      	lsrs	r3, r3, #13
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	3301      	adds	r3, #1
 800432c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004336:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800433a:	4618      	mov	r0, r3
 800433c:	3748      	adds	r7, #72	; 0x48
 800433e:	46bd      	mov	sp, r7
 8004340:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004344:	40023800 	.word	0x40023800
 8004348:	00f42400 	.word	0x00f42400
 800434c:	007a1200 	.word	0x007a1200
 8004350:	08006034 	.word	0x08006034

08004354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004358:	4b02      	ldr	r3, [pc, #8]	; (8004364 <HAL_RCC_GetHCLKFreq+0x10>)
 800435a:	681b      	ldr	r3, [r3, #0]
}
 800435c:	4618      	mov	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr
 8004364:	2000000c 	.word	0x2000000c

08004368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800436c:	f7ff fff2 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 8004370:	4602      	mov	r2, r0
 8004372:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	0a1b      	lsrs	r3, r3, #8
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	4903      	ldr	r1, [pc, #12]	; (800438c <HAL_RCC_GetPCLK1Freq+0x24>)
 800437e:	5ccb      	ldrb	r3, [r1, r3]
 8004380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004384:	4618      	mov	r0, r3
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40023800 	.word	0x40023800
 800438c:	08006050 	.word	0x08006050

08004390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004394:	f7ff ffde 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 8004398:	4602      	mov	r2, r0
 800439a:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	0adb      	lsrs	r3, r3, #11
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	4903      	ldr	r1, [pc, #12]	; (80043b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043a6:	5ccb      	ldrb	r3, [r1, r3]
 80043a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40023800 	.word	0x40023800
 80043b4:	08006050 	.word	0x08006050

080043b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043c0:	2300      	movs	r3, #0
 80043c2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80043c4:	4b29      	ldr	r3, [pc, #164]	; (800446c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d12c      	bne.n	800442a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043d0:	4b26      	ldr	r3, [pc, #152]	; (800446c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80043dc:	4b24      	ldr	r3, [pc, #144]	; (8004470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	e016      	b.n	8004416 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e8:	4b20      	ldr	r3, [pc, #128]	; (800446c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	4a1f      	ldr	r2, [pc, #124]	; (800446c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80043ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f2:	6253      	str	r3, [r2, #36]	; 0x24
 80043f4:	4b1d      	ldr	r3, [pc, #116]	; (800446c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004400:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004408:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800440a:	4b18      	ldr	r3, [pc, #96]	; (800446c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	4a17      	ldr	r2, [pc, #92]	; (800446c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004414:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800441c:	d105      	bne.n	800442a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004424:	d101      	bne.n	800442a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004426:	2301      	movs	r3, #1
 8004428:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d105      	bne.n	800443c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004430:	4b10      	ldr	r3, [pc, #64]	; (8004474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a0f      	ldr	r2, [pc, #60]	; (8004474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004436:	f043 0304 	orr.w	r3, r3, #4
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	4b0d      	ldr	r3, [pc, #52]	; (8004474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f023 0201 	bic.w	r2, r3, #1
 8004444:	490b      	ldr	r1, [pc, #44]	; (8004474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800444c:	4b09      	ldr	r3, [pc, #36]	; (8004474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	429a      	cmp	r2, r3
 8004458:	d001      	beq.n	800445e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	371c      	adds	r7, #28
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	40023800 	.word	0x40023800
 8004470:	40007000 	.word	0x40007000
 8004474:	40023c00 	.word	0x40023c00

08004478 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e07b      	b.n	8004582 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	2b00      	cmp	r3, #0
 8004490:	d108      	bne.n	80044a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800449a:	d009      	beq.n	80044b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	61da      	str	r2, [r3, #28]
 80044a2:	e005      	b.n	80044b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fe fa2c 	bl	8002928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004534:	ea42 0103 	orr.w	r1, r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	0c1b      	lsrs	r3, r3, #16
 800454e:	f003 0104 	and.w	r1, r3, #4
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	f003 0210 	and.w	r2, r3, #16
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69da      	ldr	r2, [r3, #28]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004570:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b088      	sub	sp, #32
 800458e:	af00      	add	r7, sp, #0
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	603b      	str	r3, [r7, #0]
 8004596:	4613      	mov	r3, r2
 8004598:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_SPI_Transmit+0x22>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e12d      	b.n	8004808 <HAL_SPI_Transmit+0x27e>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045b4:	f7fe fe98 	bl	80032e8 <HAL_GetTick>
 80045b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d002      	beq.n	80045d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045ca:	2302      	movs	r3, #2
 80045cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045ce:	e116      	b.n	80047fe <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <HAL_SPI_Transmit+0x52>
 80045d6:	88fb      	ldrh	r3, [r7, #6]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d102      	bne.n	80045e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045e0:	e10d      	b.n	80047fe <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2203      	movs	r2, #3
 80045e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	88fa      	ldrh	r2, [r7, #6]
 80045fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	88fa      	ldrh	r2, [r7, #6]
 8004600:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004628:	d10f      	bne.n	800464a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004638:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004648:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004654:	2b40      	cmp	r3, #64	; 0x40
 8004656:	d007      	beq.n	8004668 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004666:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004670:	d14f      	bne.n	8004712 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <HAL_SPI_Transmit+0xf6>
 800467a:	8afb      	ldrh	r3, [r7, #22]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d142      	bne.n	8004706 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	881a      	ldrh	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	1c9a      	adds	r2, r3, #2
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046a4:	e02f      	b.n	8004706 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d112      	bne.n	80046da <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	881a      	ldrh	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	1c9a      	adds	r2, r3, #2
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80046d8:	e015      	b.n	8004706 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046da:	f7fe fe05 	bl	80032e8 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d803      	bhi.n	80046f2 <HAL_SPI_Transmit+0x168>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f0:	d102      	bne.n	80046f8 <HAL_SPI_Transmit+0x16e>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d106      	bne.n	8004706 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004704:	e07b      	b.n	80047fe <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1ca      	bne.n	80046a6 <HAL_SPI_Transmit+0x11c>
 8004710:	e050      	b.n	80047b4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <HAL_SPI_Transmit+0x196>
 800471a:	8afb      	ldrh	r3, [r7, #22]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d144      	bne.n	80047aa <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	7812      	ldrb	r2, [r2, #0]
 800472c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004746:	e030      	b.n	80047aa <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b02      	cmp	r3, #2
 8004754:	d113      	bne.n	800477e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	7812      	ldrb	r2, [r2, #0]
 8004762:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	86da      	strh	r2, [r3, #54]	; 0x36
 800477c:	e015      	b.n	80047aa <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800477e:	f7fe fdb3 	bl	80032e8 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d803      	bhi.n	8004796 <HAL_SPI_Transmit+0x20c>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004794:	d102      	bne.n	800479c <HAL_SPI_Transmit+0x212>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d106      	bne.n	80047aa <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80047a8:	e029      	b.n	80047fe <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1c9      	bne.n	8004748 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	6839      	ldr	r1, [r7, #0]
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 fbdf 	bl	8004f7c <SPI_EndRxTxTransaction>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10a      	bne.n	80047e8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047d2:	2300      	movs	r3, #0
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	77fb      	strb	r3, [r7, #31]
 80047f4:	e003      	b.n	80047fe <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004806:	7ffb      	ldrb	r3, [r7, #31]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3720      	adds	r7, #32
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af02      	add	r7, sp, #8
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	603b      	str	r3, [r7, #0]
 800481c:	4613      	mov	r3, r2
 800481e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004820:	2300      	movs	r3, #0
 8004822:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b01      	cmp	r3, #1
 800482e:	d002      	beq.n	8004836 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004830:	2302      	movs	r3, #2
 8004832:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004834:	e0fb      	b.n	8004a2e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800483e:	d112      	bne.n	8004866 <HAL_SPI_Receive+0x56>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10e      	bne.n	8004866 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2204      	movs	r2, #4
 800484c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004850:	88fa      	ldrh	r2, [r7, #6]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	4613      	mov	r3, r2
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 f8ef 	bl	8004a40 <HAL_SPI_TransmitReceive>
 8004862:	4603      	mov	r3, r0
 8004864:	e0e8      	b.n	8004a38 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_SPI_Receive+0x64>
 8004870:	2302      	movs	r3, #2
 8004872:	e0e1      	b.n	8004a38 <HAL_SPI_Receive+0x228>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800487c:	f7fe fd34 	bl	80032e8 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <HAL_SPI_Receive+0x7e>
 8004888:	88fb      	ldrh	r3, [r7, #6]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d102      	bne.n	8004894 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004892:	e0cc      	b.n	8004a2e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2204      	movs	r2, #4
 8004898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	88fa      	ldrh	r2, [r7, #6]
 80048ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	88fa      	ldrh	r2, [r7, #6]
 80048b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048da:	d10f      	bne.n	80048fc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048fa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004906:	2b40      	cmp	r3, #64	; 0x40
 8004908:	d007      	beq.n	800491a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004918:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d16a      	bne.n	80049f8 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004922:	e032      	b.n	800498a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b01      	cmp	r3, #1
 8004930:	d115      	bne.n	800495e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f103 020c 	add.w	r2, r3, #12
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	7812      	ldrb	r2, [r2, #0]
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800495c:	e015      	b.n	800498a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800495e:	f7fe fcc3 	bl	80032e8 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d803      	bhi.n	8004976 <HAL_SPI_Receive+0x166>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d102      	bne.n	800497c <HAL_SPI_Receive+0x16c>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d106      	bne.n	800498a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004988:	e051      	b.n	8004a2e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800498e:	b29b      	uxth	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1c7      	bne.n	8004924 <HAL_SPI_Receive+0x114>
 8004994:	e035      	b.n	8004a02 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d113      	bne.n	80049cc <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ae:	b292      	uxth	r2, r2
 80049b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b6:	1c9a      	adds	r2, r3, #2
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049ca:	e015      	b.n	80049f8 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049cc:	f7fe fc8c 	bl	80032e8 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d803      	bhi.n	80049e4 <HAL_SPI_Receive+0x1d4>
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e2:	d102      	bne.n	80049ea <HAL_SPI_Receive+0x1da>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d106      	bne.n	80049f8 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80049f6:	e01a      	b.n	8004a2e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1c9      	bne.n	8004996 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	6839      	ldr	r1, [r7, #0]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 fa52 	bl	8004eb0 <SPI_EndRxTransaction>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	75fb      	strb	r3, [r7, #23]
 8004a24:	e003      	b.n	8004a2e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3718      	adds	r7, #24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08c      	sub	sp, #48	; 0x30
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_SPI_TransmitReceive+0x26>
 8004a62:	2302      	movs	r3, #2
 8004a64:	e198      	b.n	8004d98 <HAL_SPI_TransmitReceive+0x358>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a6e:	f7fe fc3b 	bl	80032e8 <HAL_GetTick>
 8004a72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a84:	887b      	ldrh	r3, [r7, #2]
 8004a86:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d00f      	beq.n	8004ab0 <HAL_SPI_TransmitReceive+0x70>
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a96:	d107      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d103      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x68>
 8004aa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d003      	beq.n	8004ab0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004aae:	e16d      	b.n	8004d8c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d005      	beq.n	8004ac2 <HAL_SPI_TransmitReceive+0x82>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <HAL_SPI_TransmitReceive+0x82>
 8004abc:	887b      	ldrh	r3, [r7, #2]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d103      	bne.n	8004aca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ac8:	e160      	b.n	8004d8c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d003      	beq.n	8004ade <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2205      	movs	r2, #5
 8004ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	887a      	ldrh	r2, [r7, #2]
 8004aee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	887a      	ldrh	r2, [r7, #2]
 8004af4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	887a      	ldrh	r2, [r7, #2]
 8004b00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	887a      	ldrh	r2, [r7, #2]
 8004b06:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1e:	2b40      	cmp	r3, #64	; 0x40
 8004b20:	d007      	beq.n	8004b32 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b3a:	d17c      	bne.n	8004c36 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <HAL_SPI_TransmitReceive+0x10a>
 8004b44:	8b7b      	ldrh	r3, [r7, #26]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d16a      	bne.n	8004c20 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	881a      	ldrh	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5a:	1c9a      	adds	r2, r3, #2
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b6e:	e057      	b.n	8004c20 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d11b      	bne.n	8004bb6 <HAL_SPI_TransmitReceive+0x176>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d016      	beq.n	8004bb6 <HAL_SPI_TransmitReceive+0x176>
 8004b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d113      	bne.n	8004bb6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	881a      	ldrh	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9e:	1c9a      	adds	r2, r3, #2
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d119      	bne.n	8004bf8 <HAL_SPI_TransmitReceive+0x1b8>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d014      	beq.n	8004bf8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	b292      	uxth	r2, r2
 8004bda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	1c9a      	adds	r2, r3, #2
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bf8:	f7fe fb76 	bl	80032e8 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d80b      	bhi.n	8004c20 <HAL_SPI_TransmitReceive+0x1e0>
 8004c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0e:	d007      	beq.n	8004c20 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004c1e:	e0b5      	b.n	8004d8c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1a2      	bne.n	8004b70 <HAL_SPI_TransmitReceive+0x130>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d19d      	bne.n	8004b70 <HAL_SPI_TransmitReceive+0x130>
 8004c34:	e080      	b.n	8004d38 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_SPI_TransmitReceive+0x204>
 8004c3e:	8b7b      	ldrh	r3, [r7, #26]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d16f      	bne.n	8004d24 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	330c      	adds	r3, #12
 8004c4e:	7812      	ldrb	r2, [r2, #0]
 8004c50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c6a:	e05b      	b.n	8004d24 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d11c      	bne.n	8004cb4 <HAL_SPI_TransmitReceive+0x274>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d017      	beq.n	8004cb4 <HAL_SPI_TransmitReceive+0x274>
 8004c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d114      	bne.n	8004cb4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	330c      	adds	r3, #12
 8004c94:	7812      	ldrb	r2, [r2, #0]
 8004c96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d119      	bne.n	8004cf6 <HAL_SPI_TransmitReceive+0x2b6>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d014      	beq.n	8004cf6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cf6:	f7fe faf7 	bl	80032e8 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d803      	bhi.n	8004d0e <HAL_SPI_TransmitReceive+0x2ce>
 8004d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0c:	d102      	bne.n	8004d14 <HAL_SPI_TransmitReceive+0x2d4>
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d107      	bne.n	8004d24 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004d22:	e033      	b.n	8004d8c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d19e      	bne.n	8004c6c <HAL_SPI_TransmitReceive+0x22c>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d199      	bne.n	8004c6c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f91d 	bl	8004f7c <SPI_EndRxTxTransaction>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d006      	beq.n	8004d56 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2220      	movs	r2, #32
 8004d52:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004d54:	e01a      	b.n	8004d8c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10a      	bne.n	8004d74 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d82:	e003      	b.n	8004d8c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3730      	adds	r7, #48	; 0x30
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	603b      	str	r3, [r7, #0]
 8004dac:	4613      	mov	r3, r2
 8004dae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004db0:	f7fe fa9a 	bl	80032e8 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004dc0:	f7fe fa92 	bl	80032e8 <HAL_GetTick>
 8004dc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dc6:	4b39      	ldr	r3, [pc, #228]	; (8004eac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	015b      	lsls	r3, r3, #5
 8004dcc:	0d1b      	lsrs	r3, r3, #20
 8004dce:	69fa      	ldr	r2, [r7, #28]
 8004dd0:	fb02 f303 	mul.w	r3, r2, r3
 8004dd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dd6:	e054      	b.n	8004e82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dde:	d050      	beq.n	8004e82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004de0:	f7fe fa82 	bl	80032e8 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d902      	bls.n	8004df6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d13d      	bne.n	8004e72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e0e:	d111      	bne.n	8004e34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e18:	d004      	beq.n	8004e24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e22:	d107      	bne.n	8004e34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e3c:	d10f      	bne.n	8004e5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e017      	b.n	8004ea2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	bf0c      	ite	eq
 8004e92:	2301      	moveq	r3, #1
 8004e94:	2300      	movne	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d19b      	bne.n	8004dd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3720      	adds	r7, #32
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	2000000c 	.word	0x2000000c

08004eb0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ec4:	d111      	bne.n	8004eea <SPI_EndRxTransaction+0x3a>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ece:	d004      	beq.n	8004eda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed8:	d107      	bne.n	8004eea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ee8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ef2:	d12a      	bne.n	8004f4a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004efc:	d012      	beq.n	8004f24 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2200      	movs	r2, #0
 8004f06:	2180      	movs	r1, #128	; 0x80
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f7ff ff49 	bl	8004da0 <SPI_WaitFlagStateUntilTimeout>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d02d      	beq.n	8004f70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f18:	f043 0220 	orr.w	r2, r3, #32
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e026      	b.n	8004f72 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f7ff ff36 	bl	8004da0 <SPI_WaitFlagStateUntilTimeout>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d01a      	beq.n	8004f70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3e:	f043 0220 	orr.w	r2, r3, #32
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e013      	b.n	8004f72 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2200      	movs	r2, #0
 8004f52:	2101      	movs	r1, #1
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f7ff ff23 	bl	8004da0 <SPI_WaitFlagStateUntilTimeout>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d007      	beq.n	8004f70 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f64:	f043 0220 	orr.w	r2, r3, #32
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e000      	b.n	8004f72 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f88:	4b1b      	ldr	r3, [pc, #108]	; (8004ff8 <SPI_EndRxTxTransaction+0x7c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1b      	ldr	r2, [pc, #108]	; (8004ffc <SPI_EndRxTxTransaction+0x80>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	0d5b      	lsrs	r3, r3, #21
 8004f94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f98:	fb02 f303 	mul.w	r3, r2, r3
 8004f9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fa6:	d112      	bne.n	8004fce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2180      	movs	r1, #128	; 0x80
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f7ff fef4 	bl	8004da0 <SPI_WaitFlagStateUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d016      	beq.n	8004fec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	f043 0220 	orr.w	r2, r3, #32
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e00f      	b.n	8004fee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe4:	2b80      	cmp	r3, #128	; 0x80
 8004fe6:	d0f2      	beq.n	8004fce <SPI_EndRxTxTransaction+0x52>
 8004fe8:	e000      	b.n	8004fec <SPI_EndRxTxTransaction+0x70>
        break;
 8004fea:	bf00      	nop
  }

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	2000000c 	.word	0x2000000c
 8004ffc:	165e9f81 	.word	0x165e9f81

08005000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e031      	b.n	8005076 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fd ff30 	bl	8002e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3304      	adds	r3, #4
 800503c:	4619      	mov	r1, r3
 800503e:	4610      	mov	r0, r2
 8005040:	f000 fa86 	bl	8005550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b082      	sub	sp, #8
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e031      	b.n	80050f4 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d106      	bne.n	80050aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f829 	bl	80050fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2202      	movs	r2, #2
 80050ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	3304      	adds	r3, #4
 80050ba:	4619      	mov	r1, r3
 80050bc:	4610      	mov	r0, r2
 80050be:	f000 fa47 	bl	8005550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	bc80      	pop	{r7}
 800510c:	4770      	bx	lr
	...

08005110 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d109      	bne.n	8005134 <HAL_TIM_PWM_Start+0x24>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b01      	cmp	r3, #1
 800512a:	bf14      	ite	ne
 800512c:	2301      	movne	r3, #1
 800512e:	2300      	moveq	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	e022      	b.n	800517a <HAL_TIM_PWM_Start+0x6a>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2b04      	cmp	r3, #4
 8005138:	d109      	bne.n	800514e <HAL_TIM_PWM_Start+0x3e>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b01      	cmp	r3, #1
 8005144:	bf14      	ite	ne
 8005146:	2301      	movne	r3, #1
 8005148:	2300      	moveq	r3, #0
 800514a:	b2db      	uxtb	r3, r3
 800514c:	e015      	b.n	800517a <HAL_TIM_PWM_Start+0x6a>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b08      	cmp	r3, #8
 8005152:	d109      	bne.n	8005168 <HAL_TIM_PWM_Start+0x58>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b01      	cmp	r3, #1
 800515e:	bf14      	ite	ne
 8005160:	2301      	movne	r3, #1
 8005162:	2300      	moveq	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	e008      	b.n	800517a <HAL_TIM_PWM_Start+0x6a>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b01      	cmp	r3, #1
 8005172:	bf14      	ite	ne
 8005174:	2301      	movne	r3, #1
 8005176:	2300      	moveq	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e051      	b.n	8005226 <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d104      	bne.n	8005192 <HAL_TIM_PWM_Start+0x82>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005190:	e013      	b.n	80051ba <HAL_TIM_PWM_Start+0xaa>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b04      	cmp	r3, #4
 8005196:	d104      	bne.n	80051a2 <HAL_TIM_PWM_Start+0x92>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80051a0:	e00b      	b.n	80051ba <HAL_TIM_PWM_Start+0xaa>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d104      	bne.n	80051b2 <HAL_TIM_PWM_Start+0xa2>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80051b0:	e003      	b.n	80051ba <HAL_TIM_PWM_Start+0xaa>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2202      	movs	r2, #2
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2201      	movs	r2, #1
 80051c0:	6839      	ldr	r1, [r7, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fbbf 	bl	8005946 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d0:	d00e      	beq.n	80051f0 <HAL_TIM_PWM_Start+0xe0>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a16      	ldr	r2, [pc, #88]	; (8005230 <HAL_TIM_PWM_Start+0x120>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d009      	beq.n	80051f0 <HAL_TIM_PWM_Start+0xe0>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a14      	ldr	r2, [pc, #80]	; (8005234 <HAL_TIM_PWM_Start+0x124>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d004      	beq.n	80051f0 <HAL_TIM_PWM_Start+0xe0>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a13      	ldr	r2, [pc, #76]	; (8005238 <HAL_TIM_PWM_Start+0x128>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d111      	bne.n	8005214 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b06      	cmp	r3, #6
 8005200:	d010      	beq.n	8005224 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0201 	orr.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005212:	e007      	b.n	8005224 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40000400 	.word	0x40000400
 8005234:	40000800 	.word	0x40000800
 8005238:	40010800 	.word	0x40010800

0800523c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005256:	2302      	movs	r3, #2
 8005258:	e0ae      	b.n	80053b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b0c      	cmp	r3, #12
 8005266:	f200 809f 	bhi.w	80053a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800526a:	a201      	add	r2, pc, #4	; (adr r2, 8005270 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800526c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005270:	080052a5 	.word	0x080052a5
 8005274:	080053a9 	.word	0x080053a9
 8005278:	080053a9 	.word	0x080053a9
 800527c:	080053a9 	.word	0x080053a9
 8005280:	080052e5 	.word	0x080052e5
 8005284:	080053a9 	.word	0x080053a9
 8005288:	080053a9 	.word	0x080053a9
 800528c:	080053a9 	.word	0x080053a9
 8005290:	08005327 	.word	0x08005327
 8005294:	080053a9 	.word	0x080053a9
 8005298:	080053a9 	.word	0x080053a9
 800529c:	080053a9 	.word	0x080053a9
 80052a0:	08005367 	.word	0x08005367
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 f9c0 	bl	8005630 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0208 	orr.w	r2, r2, #8
 80052be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699a      	ldr	r2, [r3, #24]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0204 	bic.w	r2, r2, #4
 80052ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6999      	ldr	r1, [r3, #24]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	619a      	str	r2, [r3, #24]
      break;
 80052e2:	e064      	b.n	80053ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68b9      	ldr	r1, [r7, #8]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 f9dc 	bl	80056a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699a      	ldr	r2, [r3, #24]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800530e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6999      	ldr	r1, [r3, #24]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	021a      	lsls	r2, r3, #8
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	619a      	str	r2, [r3, #24]
      break;
 8005324:	e043      	b.n	80053ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68b9      	ldr	r1, [r7, #8]
 800532c:	4618      	mov	r0, r3
 800532e:	f000 f9f9 	bl	8005724 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69da      	ldr	r2, [r3, #28]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f042 0208 	orr.w	r2, r2, #8
 8005340:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69da      	ldr	r2, [r3, #28]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0204 	bic.w	r2, r2, #4
 8005350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69d9      	ldr	r1, [r3, #28]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	61da      	str	r2, [r3, #28]
      break;
 8005364:	e023      	b.n	80053ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68b9      	ldr	r1, [r7, #8]
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fa16 	bl	800579e <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69da      	ldr	r2, [r3, #28]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	69d9      	ldr	r1, [r3, #28]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	021a      	lsls	r2, r3, #8
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	61da      	str	r2, [r3, #28]
      break;
 80053a6:	e002      	b.n	80053ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	75fb      	strb	r3, [r7, #23]
      break;
 80053ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80053b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <HAL_TIM_ConfigClockSource+0x1c>
 80053d8:	2302      	movs	r3, #2
 80053da:	e0b4      	b.n	8005546 <HAL_TIM_ConfigClockSource+0x186>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005402:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005414:	d03e      	beq.n	8005494 <HAL_TIM_ConfigClockSource+0xd4>
 8005416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800541a:	f200 8087 	bhi.w	800552c <HAL_TIM_ConfigClockSource+0x16c>
 800541e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005422:	f000 8086 	beq.w	8005532 <HAL_TIM_ConfigClockSource+0x172>
 8005426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542a:	d87f      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x16c>
 800542c:	2b70      	cmp	r3, #112	; 0x70
 800542e:	d01a      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0xa6>
 8005430:	2b70      	cmp	r3, #112	; 0x70
 8005432:	d87b      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x16c>
 8005434:	2b60      	cmp	r3, #96	; 0x60
 8005436:	d050      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x11a>
 8005438:	2b60      	cmp	r3, #96	; 0x60
 800543a:	d877      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x16c>
 800543c:	2b50      	cmp	r3, #80	; 0x50
 800543e:	d03c      	beq.n	80054ba <HAL_TIM_ConfigClockSource+0xfa>
 8005440:	2b50      	cmp	r3, #80	; 0x50
 8005442:	d873      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x16c>
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d058      	beq.n	80054fa <HAL_TIM_ConfigClockSource+0x13a>
 8005448:	2b40      	cmp	r3, #64	; 0x40
 800544a:	d86f      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x16c>
 800544c:	2b30      	cmp	r3, #48	; 0x30
 800544e:	d064      	beq.n	800551a <HAL_TIM_ConfigClockSource+0x15a>
 8005450:	2b30      	cmp	r3, #48	; 0x30
 8005452:	d86b      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x16c>
 8005454:	2b20      	cmp	r3, #32
 8005456:	d060      	beq.n	800551a <HAL_TIM_ConfigClockSource+0x15a>
 8005458:	2b20      	cmp	r3, #32
 800545a:	d867      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x16c>
 800545c:	2b00      	cmp	r3, #0
 800545e:	d05c      	beq.n	800551a <HAL_TIM_ConfigClockSource+0x15a>
 8005460:	2b10      	cmp	r3, #16
 8005462:	d05a      	beq.n	800551a <HAL_TIM_ConfigClockSource+0x15a>
 8005464:	e062      	b.n	800552c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6899      	ldr	r1, [r3, #8]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f000 fa47 	bl	8005908 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005488:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	609a      	str	r2, [r3, #8]
      break;
 8005492:	e04f      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6818      	ldr	r0, [r3, #0]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	6899      	ldr	r1, [r3, #8]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f000 fa30 	bl	8005908 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689a      	ldr	r2, [r3, #8]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054b6:	609a      	str	r2, [r3, #8]
      break;
 80054b8:	e03c      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6818      	ldr	r0, [r3, #0]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	6859      	ldr	r1, [r3, #4]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	461a      	mov	r2, r3
 80054c8:	f000 f9a7 	bl	800581a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2150      	movs	r1, #80	; 0x50
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 f9fe 	bl	80058d4 <TIM_ITRx_SetConfig>
      break;
 80054d8:	e02c      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6818      	ldr	r0, [r3, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6859      	ldr	r1, [r3, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	461a      	mov	r2, r3
 80054e8:	f000 f9c5 	bl	8005876 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2160      	movs	r1, #96	; 0x60
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 f9ee 	bl	80058d4 <TIM_ITRx_SetConfig>
      break;
 80054f8:	e01c      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6818      	ldr	r0, [r3, #0]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	6859      	ldr	r1, [r3, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	461a      	mov	r2, r3
 8005508:	f000 f987 	bl	800581a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2140      	movs	r1, #64	; 0x40
 8005512:	4618      	mov	r0, r3
 8005514:	f000 f9de 	bl	80058d4 <TIM_ITRx_SetConfig>
      break;
 8005518:	e00c      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4619      	mov	r1, r3
 8005524:	4610      	mov	r0, r2
 8005526:	f000 f9d5 	bl	80058d4 <TIM_ITRx_SetConfig>
      break;
 800552a:	e003      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
      break;
 8005530:	e000      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005532:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8005544:	7bfb      	ldrb	r3, [r7, #15]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005566:	d00f      	beq.n	8005588 <TIM_Base_SetConfig+0x38>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a2b      	ldr	r2, [pc, #172]	; (8005618 <TIM_Base_SetConfig+0xc8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00b      	beq.n	8005588 <TIM_Base_SetConfig+0x38>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a2a      	ldr	r2, [pc, #168]	; (800561c <TIM_Base_SetConfig+0xcc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d007      	beq.n	8005588 <TIM_Base_SetConfig+0x38>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a29      	ldr	r2, [pc, #164]	; (8005620 <TIM_Base_SetConfig+0xd0>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d003      	beq.n	8005588 <TIM_Base_SetConfig+0x38>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a28      	ldr	r2, [pc, #160]	; (8005624 <TIM_Base_SetConfig+0xd4>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d108      	bne.n	800559a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a0:	d017      	beq.n	80055d2 <TIM_Base_SetConfig+0x82>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a1c      	ldr	r2, [pc, #112]	; (8005618 <TIM_Base_SetConfig+0xc8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <TIM_Base_SetConfig+0x82>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a1b      	ldr	r2, [pc, #108]	; (800561c <TIM_Base_SetConfig+0xcc>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00f      	beq.n	80055d2 <TIM_Base_SetConfig+0x82>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a1a      	ldr	r2, [pc, #104]	; (8005620 <TIM_Base_SetConfig+0xd0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00b      	beq.n	80055d2 <TIM_Base_SetConfig+0x82>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a19      	ldr	r2, [pc, #100]	; (8005624 <TIM_Base_SetConfig+0xd4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d007      	beq.n	80055d2 <TIM_Base_SetConfig+0x82>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a18      	ldr	r2, [pc, #96]	; (8005628 <TIM_Base_SetConfig+0xd8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d003      	beq.n	80055d2 <TIM_Base_SetConfig+0x82>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a17      	ldr	r2, [pc, #92]	; (800562c <TIM_Base_SetConfig+0xdc>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d108      	bne.n	80055e4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	615a      	str	r2, [r3, #20]
}
 800560e:	bf00      	nop
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800
 8005620:	40000c00 	.word	0x40000c00
 8005624:	40010800 	.word	0x40010800
 8005628:	40010c00 	.word	0x40010c00
 800562c:	40011000 	.word	0x40011000

08005630 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	f023 0201 	bic.w	r2, r3, #1
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0303 	bic.w	r3, r3, #3
 8005666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f023 0302 	bic.w	r3, r3, #2
 8005678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr

080056a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	f023 0210 	bic.w	r2, r3, #16
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	021b      	lsls	r3, r3, #8
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f023 0320 	bic.w	r3, r3, #32
 80056f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	621a      	str	r2, [r3, #32]
}
 800571a:	bf00      	nop
 800571c:	371c      	adds	r7, #28
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr

08005724 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 0303 	bic.w	r3, r3, #3
 800575a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800576c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	021b      	lsls	r3, r3, #8
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	621a      	str	r2, [r3, #32]
}
 8005794:	bf00      	nop
 8005796:	371c      	adds	r7, #28
 8005798:	46bd      	mov	sp, r7
 800579a:	bc80      	pop	{r7}
 800579c:	4770      	bx	lr

0800579e <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800579e:	b480      	push	{r7}
 80057a0:	b087      	sub	sp, #28
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	021b      	lsls	r3, r3, #8
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	031b      	lsls	r3, r3, #12
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	621a      	str	r2, [r3, #32]
}
 8005810:	bf00      	nop
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	bc80      	pop	{r7}
 8005818:	4770      	bx	lr

0800581a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800581a:	b480      	push	{r7}
 800581c:	b087      	sub	sp, #28
 800581e:	af00      	add	r7, sp, #0
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	f023 0201 	bic.w	r2, r3, #1
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005844:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f023 030a 	bic.w	r3, r3, #10
 8005856:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	4313      	orrs	r3, r2
 800585e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	621a      	str	r2, [r3, #32]
}
 800586c:	bf00      	nop
 800586e:	371c      	adds	r7, #28
 8005870:	46bd      	mov	sp, r7
 8005872:	bc80      	pop	{r7}
 8005874:	4770      	bx	lr

08005876 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005876:	b480      	push	{r7}
 8005878:	b087      	sub	sp, #28
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	f023 0210 	bic.w	r2, r3, #16
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	031b      	lsls	r3, r3, #12
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	621a      	str	r2, [r3, #32]
}
 80058ca:	bf00      	nop
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr

080058d4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f043 0307 	orr.w	r3, r3, #7
 80058f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	609a      	str	r2, [r3, #8]
}
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr

08005908 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005922:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	021a      	lsls	r2, r3, #8
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	431a      	orrs	r2, r3
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	4313      	orrs	r3, r2
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	609a      	str	r2, [r3, #8]
}
 800593c:	bf00      	nop
 800593e:	371c      	adds	r7, #28
 8005940:	46bd      	mov	sp, r7
 8005942:	bc80      	pop	{r7}
 8005944:	4770      	bx	lr

08005946 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005946:	b480      	push	{r7}
 8005948:	b087      	sub	sp, #28
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f003 031f 	and.w	r3, r3, #31
 8005958:	2201      	movs	r2, #1
 800595a:	fa02 f303 	lsl.w	r3, r2, r3
 800595e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a1a      	ldr	r2, [r3, #32]
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	43db      	mvns	r3, r3
 8005968:	401a      	ands	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a1a      	ldr	r2, [r3, #32]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f003 031f 	and.w	r3, r3, #31
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	fa01 f303 	lsl.w	r3, r1, r3
 800597e:	431a      	orrs	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	621a      	str	r2, [r3, #32]
}
 8005984:	bf00      	nop
 8005986:	371c      	adds	r7, #28
 8005988:	46bd      	mov	sp, r7
 800598a:	bc80      	pop	{r7}
 800598c:	4770      	bx	lr
	...

08005990 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e046      	b.n	8005a36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ea:	d00e      	beq.n	8005a0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a13      	ldr	r2, [pc, #76]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d009      	beq.n	8005a0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a12      	ldr	r2, [pc, #72]	; (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d004      	beq.n	8005a0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a10      	ldr	r2, [pc, #64]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d10c      	bne.n	8005a24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bc80      	pop	{r7}
 8005a3e:	4770      	bx	lr
 8005a40:	40000400 	.word	0x40000400
 8005a44:	40000800 	.word	0x40000800
 8005a48:	40010800 	.word	0x40010800

08005a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e042      	b.n	8005ae4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7fd fb6a 	bl	800314c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2224      	movs	r2, #36	; 0x24
 8005a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f9af 	bl	8005df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695a      	ldr	r2, [r3, #20]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3708      	adds	r7, #8
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08a      	sub	sp, #40	; 0x28
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	603b      	str	r3, [r7, #0]
 8005af8:	4613      	mov	r3, r2
 8005afa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	d16d      	bne.n	8005be8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <HAL_UART_Transmit+0x2c>
 8005b12:	88fb      	ldrh	r3, [r7, #6]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e066      	b.n	8005bea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2221      	movs	r2, #33	; 0x21
 8005b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b2a:	f7fd fbdd 	bl	80032e8 <HAL_GetTick>
 8005b2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	88fa      	ldrh	r2, [r7, #6]
 8005b34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	88fa      	ldrh	r2, [r7, #6]
 8005b3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b44:	d108      	bne.n	8005b58 <HAL_UART_Transmit+0x6c>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d104      	bne.n	8005b58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	61bb      	str	r3, [r7, #24]
 8005b56:	e003      	b.n	8005b60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b60:	e02a      	b.n	8005bb8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	2180      	movs	r1, #128	; 0x80
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 f8d2 	bl	8005d16 <UART_WaitOnFlagUntilTimeout>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e036      	b.n	8005bea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10b      	bne.n	8005b9a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	3302      	adds	r3, #2
 8005b96:	61bb      	str	r3, [r7, #24]
 8005b98:	e007      	b.n	8005baa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	781a      	ldrb	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1cf      	bne.n	8005b62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2140      	movs	r1, #64	; 0x40
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f8a2 	bl	8005d16 <UART_WaitOnFlagUntilTimeout>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e006      	b.n	8005bea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	e000      	b.n	8005bea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005be8:	2302      	movs	r3, #2
  }
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3720      	adds	r7, #32
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b08a      	sub	sp, #40	; 0x28
 8005bf6:	af02      	add	r7, sp, #8
 8005bf8:	60f8      	str	r0, [r7, #12]
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	603b      	str	r3, [r7, #0]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b20      	cmp	r3, #32
 8005c10:	d17c      	bne.n	8005d0c <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <HAL_UART_Receive+0x2c>
 8005c18:	88fb      	ldrh	r3, [r7, #6]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e075      	b.n	8005d0e <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2222      	movs	r2, #34	; 0x22
 8005c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c36:	f7fd fb57 	bl	80032e8 <HAL_GetTick>
 8005c3a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	88fa      	ldrh	r2, [r7, #6]
 8005c40:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	88fa      	ldrh	r2, [r7, #6]
 8005c46:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c50:	d108      	bne.n	8005c64 <HAL_UART_Receive+0x72>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d104      	bne.n	8005c64 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	61bb      	str	r3, [r7, #24]
 8005c62:	e003      	b.n	8005c6c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005c6c:	e043      	b.n	8005cf6 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2200      	movs	r2, #0
 8005c76:	2120      	movs	r1, #32
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 f84c 	bl	8005d16 <UART_WaitOnFlagUntilTimeout>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e042      	b.n	8005d0e <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10c      	bne.n	8005ca8 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	3302      	adds	r3, #2
 8005ca4:	61bb      	str	r3, [r7, #24]
 8005ca6:	e01f      	b.n	8005ce8 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb0:	d007      	beq.n	8005cc2 <HAL_UART_Receive+0xd0>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10a      	bne.n	8005cd0 <HAL_UART_Receive+0xde>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d106      	bne.n	8005cd0 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	701a      	strb	r2, [r3, #0]
 8005cce:	e008      	b.n	8005ce2 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1b6      	bne.n	8005c6e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e000      	b.n	8005d0e <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005d0c:	2302      	movs	r3, #2
  }
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3720      	adds	r7, #32
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b090      	sub	sp, #64	; 0x40
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	603b      	str	r3, [r7, #0]
 8005d22:	4613      	mov	r3, r2
 8005d24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d26:	e050      	b.n	8005dca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2e:	d04c      	beq.n	8005dca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d007      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d36:	f7fd fad7 	bl	80032e8 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d241      	bcs.n	8005dca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	330c      	adds	r3, #12
 8005d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	e853 3f00 	ldrex	r3, [r3]
 8005d54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	330c      	adds	r3, #12
 8005d64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d66:	637a      	str	r2, [r7, #52]	; 0x34
 8005d68:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e5      	bne.n	8005d46 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3314      	adds	r3, #20
 8005d80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	e853 3f00 	ldrex	r3, [r3]
 8005d88:	613b      	str	r3, [r7, #16]
   return(result);
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f023 0301 	bic.w	r3, r3, #1
 8005d90:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3314      	adds	r3, #20
 8005d98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d9a:	623a      	str	r2, [r7, #32]
 8005d9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9e:	69f9      	ldr	r1, [r7, #28]
 8005da0:	6a3a      	ldr	r2, [r7, #32]
 8005da2:	e841 2300 	strex	r3, r2, [r1]
 8005da6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e5      	bne.n	8005d7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2220      	movs	r2, #32
 8005db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e00f      	b.n	8005dea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	bf0c      	ite	eq
 8005dda:	2301      	moveq	r3, #1
 8005ddc:	2300      	movne	r3, #0
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	461a      	mov	r2, r3
 8005de2:	79fb      	ldrb	r3, [r7, #7]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d09f      	beq.n	8005d28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3740      	adds	r7, #64	; 0x40
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	431a      	orrs	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005e34:	f023 030c 	bic.w	r3, r3, #12
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	6812      	ldr	r2, [r2, #0]
 8005e3c:	68b9      	ldr	r1, [r7, #8]
 8005e3e:	430b      	orrs	r3, r1
 8005e40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	699a      	ldr	r2, [r3, #24]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a55      	ldr	r2, [pc, #340]	; (8005fb4 <UART_SetConfig+0x1c0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d103      	bne.n	8005e6a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005e62:	f7fe fa95 	bl	8004390 <HAL_RCC_GetPCLK2Freq>
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	e002      	b.n	8005e70 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e6a:	f7fe fa7d 	bl	8004368 <HAL_RCC_GetPCLK1Freq>
 8005e6e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e78:	d14c      	bne.n	8005f14 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	009a      	lsls	r2, r3, #2
 8005e84:	441a      	add	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e90:	4a49      	ldr	r2, [pc, #292]	; (8005fb8 <UART_SetConfig+0x1c4>)
 8005e92:	fba2 2303 	umull	r2, r3, r2, r3
 8005e96:	095b      	lsrs	r3, r3, #5
 8005e98:	0119      	lsls	r1, r3, #4
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009a      	lsls	r2, r3, #2
 8005ea4:	441a      	add	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	fbb2 f2f3 	udiv	r2, r2, r3
 8005eb0:	4b41      	ldr	r3, [pc, #260]	; (8005fb8 <UART_SetConfig+0x1c4>)
 8005eb2:	fba3 0302 	umull	r0, r3, r3, r2
 8005eb6:	095b      	lsrs	r3, r3, #5
 8005eb8:	2064      	movs	r0, #100	; 0x64
 8005eba:	fb00 f303 	mul.w	r3, r0, r3
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	3332      	adds	r3, #50	; 0x32
 8005ec4:	4a3c      	ldr	r2, [pc, #240]	; (8005fb8 <UART_SetConfig+0x1c4>)
 8005ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eca:	095b      	lsrs	r3, r3, #5
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ed2:	4419      	add	r1, r3
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	009a      	lsls	r2, r3, #2
 8005ede:	441a      	add	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	fbb2 f2f3 	udiv	r2, r2, r3
 8005eea:	4b33      	ldr	r3, [pc, #204]	; (8005fb8 <UART_SetConfig+0x1c4>)
 8005eec:	fba3 0302 	umull	r0, r3, r3, r2
 8005ef0:	095b      	lsrs	r3, r3, #5
 8005ef2:	2064      	movs	r0, #100	; 0x64
 8005ef4:	fb00 f303 	mul.w	r3, r0, r3
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	3332      	adds	r3, #50	; 0x32
 8005efe:	4a2e      	ldr	r2, [pc, #184]	; (8005fb8 <UART_SetConfig+0x1c4>)
 8005f00:	fba2 2303 	umull	r2, r3, r2, r3
 8005f04:	095b      	lsrs	r3, r3, #5
 8005f06:	f003 0207 	and.w	r2, r3, #7
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	440a      	add	r2, r1
 8005f10:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f12:	e04a      	b.n	8005faa <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4613      	mov	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009a      	lsls	r2, r3, #2
 8005f1e:	441a      	add	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2a:	4a23      	ldr	r2, [pc, #140]	; (8005fb8 <UART_SetConfig+0x1c4>)
 8005f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f30:	095b      	lsrs	r3, r3, #5
 8005f32:	0119      	lsls	r1, r3, #4
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4613      	mov	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	009a      	lsls	r2, r3, #2
 8005f3e:	441a      	add	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f4a:	4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <UART_SetConfig+0x1c4>)
 8005f4c:	fba3 0302 	umull	r0, r3, r3, r2
 8005f50:	095b      	lsrs	r3, r3, #5
 8005f52:	2064      	movs	r0, #100	; 0x64
 8005f54:	fb00 f303 	mul.w	r3, r0, r3
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	3332      	adds	r3, #50	; 0x32
 8005f5e:	4a16      	ldr	r2, [pc, #88]	; (8005fb8 <UART_SetConfig+0x1c4>)
 8005f60:	fba2 2303 	umull	r2, r3, r2, r3
 8005f64:	095b      	lsrs	r3, r3, #5
 8005f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f6a:	4419      	add	r1, r3
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	009a      	lsls	r2, r3, #2
 8005f76:	441a      	add	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f82:	4b0d      	ldr	r3, [pc, #52]	; (8005fb8 <UART_SetConfig+0x1c4>)
 8005f84:	fba3 0302 	umull	r0, r3, r3, r2
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	2064      	movs	r0, #100	; 0x64
 8005f8c:	fb00 f303 	mul.w	r3, r0, r3
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	3332      	adds	r3, #50	; 0x32
 8005f96:	4a08      	ldr	r2, [pc, #32]	; (8005fb8 <UART_SetConfig+0x1c4>)
 8005f98:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9c:	095b      	lsrs	r3, r3, #5
 8005f9e:	f003 020f 	and.w	r2, r3, #15
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	609a      	str	r2, [r3, #8]
}
 8005faa:	bf00      	nop
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	40013800 	.word	0x40013800
 8005fb8:	51eb851f 	.word	0x51eb851f

08005fbc <__libc_init_array>:
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	2600      	movs	r6, #0
 8005fc0:	4d0c      	ldr	r5, [pc, #48]	; (8005ff4 <__libc_init_array+0x38>)
 8005fc2:	4c0d      	ldr	r4, [pc, #52]	; (8005ff8 <__libc_init_array+0x3c>)
 8005fc4:	1b64      	subs	r4, r4, r5
 8005fc6:	10a4      	asrs	r4, r4, #2
 8005fc8:	42a6      	cmp	r6, r4
 8005fca:	d109      	bne.n	8005fe0 <__libc_init_array+0x24>
 8005fcc:	f000 f822 	bl	8006014 <_init>
 8005fd0:	2600      	movs	r6, #0
 8005fd2:	4d0a      	ldr	r5, [pc, #40]	; (8005ffc <__libc_init_array+0x40>)
 8005fd4:	4c0a      	ldr	r4, [pc, #40]	; (8006000 <__libc_init_array+0x44>)
 8005fd6:	1b64      	subs	r4, r4, r5
 8005fd8:	10a4      	asrs	r4, r4, #2
 8005fda:	42a6      	cmp	r6, r4
 8005fdc:	d105      	bne.n	8005fea <__libc_init_array+0x2e>
 8005fde:	bd70      	pop	{r4, r5, r6, pc}
 8005fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fe4:	4798      	blx	r3
 8005fe6:	3601      	adds	r6, #1
 8005fe8:	e7ee      	b.n	8005fc8 <__libc_init_array+0xc>
 8005fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fee:	4798      	blx	r3
 8005ff0:	3601      	adds	r6, #1
 8005ff2:	e7f2      	b.n	8005fda <__libc_init_array+0x1e>
 8005ff4:	08006060 	.word	0x08006060
 8005ff8:	08006060 	.word	0x08006060
 8005ffc:	08006060 	.word	0x08006060
 8006000:	08006064 	.word	0x08006064

08006004 <memset>:
 8006004:	4603      	mov	r3, r0
 8006006:	4402      	add	r2, r0
 8006008:	4293      	cmp	r3, r2
 800600a:	d100      	bne.n	800600e <memset+0xa>
 800600c:	4770      	bx	lr
 800600e:	f803 1b01 	strb.w	r1, [r3], #1
 8006012:	e7f9      	b.n	8006008 <memset+0x4>

08006014 <_init>:
 8006014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006016:	bf00      	nop
 8006018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601a:	bc08      	pop	{r3}
 800601c:	469e      	mov	lr, r3
 800601e:	4770      	bx	lr

08006020 <_fini>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	bf00      	nop
 8006024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006026:	bc08      	pop	{r3}
 8006028:	469e      	mov	lr, r3
 800602a:	4770      	bx	lr
