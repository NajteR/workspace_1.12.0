
nowyManipulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eb8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004ff4  08004ff4  00014ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005020  08005020  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005020  08005020  00015020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005028  08005028  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005028  08005028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000014  08005044  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08005044  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ecb0  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002255  00000000  00000000  0002eced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00030f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00031e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d37  00000000  00000000  00032be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b19  00000000  00000000  00049917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e52d  00000000  00000000  0005a430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e895d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d9c  00000000  00000000  000e89b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08004fdc 	.word	0x08004fdc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08004fdc 	.word	0x08004fdc

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__gesf2>:
 8000398:	f04f 3cff 	mov.w	ip, #4294967295
 800039c:	e006      	b.n	80003ac <__cmpsf2+0x4>
 800039e:	bf00      	nop

080003a0 <__lesf2>:
 80003a0:	f04f 0c01 	mov.w	ip, #1
 80003a4:	e002      	b.n	80003ac <__cmpsf2+0x4>
 80003a6:	bf00      	nop

080003a8 <__cmpsf2>:
 80003a8:	f04f 0c01 	mov.w	ip, #1
 80003ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80003b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80003b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003bc:	bf18      	it	ne
 80003be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003c2:	d011      	beq.n	80003e8 <__cmpsf2+0x40>
 80003c4:	b001      	add	sp, #4
 80003c6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80003ca:	bf18      	it	ne
 80003cc:	ea90 0f01 	teqne	r0, r1
 80003d0:	bf58      	it	pl
 80003d2:	ebb2 0003 	subspl.w	r0, r2, r3
 80003d6:	bf88      	it	hi
 80003d8:	17c8      	asrhi	r0, r1, #31
 80003da:	bf38      	it	cc
 80003dc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80003e0:	bf18      	it	ne
 80003e2:	f040 0001 	orrne.w	r0, r0, #1
 80003e6:	4770      	bx	lr
 80003e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003ec:	d102      	bne.n	80003f4 <__cmpsf2+0x4c>
 80003ee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80003f2:	d105      	bne.n	8000400 <__cmpsf2+0x58>
 80003f4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80003f8:	d1e4      	bne.n	80003c4 <__cmpsf2+0x1c>
 80003fa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80003fe:	d0e1      	beq.n	80003c4 <__cmpsf2+0x1c>
 8000400:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop

08000408 <__aeabi_cfrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	4608      	mov	r0, r1
 800040c:	4661      	mov	r1, ip
 800040e:	e7ff      	b.n	8000410 <__aeabi_cfcmpeq>

08000410 <__aeabi_cfcmpeq>:
 8000410:	b50f      	push	{r0, r1, r2, r3, lr}
 8000412:	f7ff ffc9 	bl	80003a8 <__cmpsf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	bf48      	it	mi
 800041a:	f110 0f00 	cmnmi.w	r0, #0
 800041e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000420 <__aeabi_fcmpeq>:
 8000420:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000424:	f7ff fff4 	bl	8000410 <__aeabi_cfcmpeq>
 8000428:	bf0c      	ite	eq
 800042a:	2001      	moveq	r0, #1
 800042c:	2000      	movne	r0, #0
 800042e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000432:	bf00      	nop

08000434 <__aeabi_fcmplt>:
 8000434:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000438:	f7ff ffea 	bl	8000410 <__aeabi_cfcmpeq>
 800043c:	bf34      	ite	cc
 800043e:	2001      	movcc	r0, #1
 8000440:	2000      	movcs	r0, #0
 8000442:	f85d fb08 	ldr.w	pc, [sp], #8
 8000446:	bf00      	nop

08000448 <__aeabi_fcmple>:
 8000448:	f84d ed08 	str.w	lr, [sp, #-8]!
 800044c:	f7ff ffe0 	bl	8000410 <__aeabi_cfcmpeq>
 8000450:	bf94      	ite	ls
 8000452:	2001      	movls	r0, #1
 8000454:	2000      	movhi	r0, #0
 8000456:	f85d fb08 	ldr.w	pc, [sp], #8
 800045a:	bf00      	nop

0800045c <__aeabi_fcmpge>:
 800045c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000460:	f7ff ffd2 	bl	8000408 <__aeabi_cfrcmple>
 8000464:	bf94      	ite	ls
 8000466:	2001      	movls	r0, #1
 8000468:	2000      	movhi	r0, #0
 800046a:	f85d fb08 	ldr.w	pc, [sp], #8
 800046e:	bf00      	nop

08000470 <__aeabi_fcmpgt>:
 8000470:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000474:	f7ff ffc8 	bl	8000408 <__aeabi_cfrcmple>
 8000478:	bf34      	ite	cc
 800047a:	2001      	movcc	r0, #1
 800047c:	2000      	movcs	r0, #0
 800047e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000482:	bf00      	nop

08000484 <__aeabi_f2iz>:
 8000484:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000488:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800048c:	d30f      	bcc.n	80004ae <__aeabi_f2iz+0x2a>
 800048e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000492:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000496:	d90d      	bls.n	80004b4 <__aeabi_f2iz+0x30>
 8000498:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800049c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004a0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80004a4:	fa23 f002 	lsr.w	r0, r3, r2
 80004a8:	bf18      	it	ne
 80004aa:	4240      	negne	r0, r0
 80004ac:	4770      	bx	lr
 80004ae:	f04f 0000 	mov.w	r0, #0
 80004b2:	4770      	bx	lr
 80004b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004b8:	d101      	bne.n	80004be <__aeabi_f2iz+0x3a>
 80004ba:	0242      	lsls	r2, r0, #9
 80004bc:	d105      	bne.n	80004ca <__aeabi_f2iz+0x46>
 80004be:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80004c2:	bf08      	it	eq
 80004c4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80004c8:	4770      	bx	lr
 80004ca:	f04f 0000 	mov.w	r0, #0
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_uldivmod>:
 80004d0:	b953      	cbnz	r3, 80004e8 <__aeabi_uldivmod+0x18>
 80004d2:	b94a      	cbnz	r2, 80004e8 <__aeabi_uldivmod+0x18>
 80004d4:	2900      	cmp	r1, #0
 80004d6:	bf08      	it	eq
 80004d8:	2800      	cmpeq	r0, #0
 80004da:	bf1c      	itt	ne
 80004dc:	f04f 31ff 	movne.w	r1, #4294967295
 80004e0:	f04f 30ff 	movne.w	r0, #4294967295
 80004e4:	f000 b976 	b.w	80007d4 <__aeabi_idiv0>
 80004e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004f0:	f000 f806 	bl	8000500 <__udivmoddi4>
 80004f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004fc:	b004      	add	sp, #16
 80004fe:	4770      	bx	lr

08000500 <__udivmoddi4>:
 8000500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000504:	9e08      	ldr	r6, [sp, #32]
 8000506:	460d      	mov	r5, r1
 8000508:	4604      	mov	r4, r0
 800050a:	4688      	mov	r8, r1
 800050c:	2b00      	cmp	r3, #0
 800050e:	d14d      	bne.n	80005ac <__udivmoddi4+0xac>
 8000510:	428a      	cmp	r2, r1
 8000512:	4694      	mov	ip, r2
 8000514:	d968      	bls.n	80005e8 <__udivmoddi4+0xe8>
 8000516:	fab2 f282 	clz	r2, r2
 800051a:	b152      	cbz	r2, 8000532 <__udivmoddi4+0x32>
 800051c:	fa01 f302 	lsl.w	r3, r1, r2
 8000520:	f1c2 0120 	rsb	r1, r2, #32
 8000524:	fa20 f101 	lsr.w	r1, r0, r1
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	ea41 0803 	orr.w	r8, r1, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000536:	fbb8 f7f1 	udiv	r7, r8, r1
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb01 8817 	mls	r8, r1, r7, r8
 8000542:	fb07 f00e 	mul.w	r0, r7, lr
 8000546:	0c23      	lsrs	r3, r4, #16
 8000548:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800054c:	4298      	cmp	r0, r3
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x66>
 8000550:	eb1c 0303 	adds.w	r3, ip, r3
 8000554:	f107 35ff 	add.w	r5, r7, #4294967295
 8000558:	f080 811e 	bcs.w	8000798 <__udivmoddi4+0x298>
 800055c:	4298      	cmp	r0, r3
 800055e:	f240 811b 	bls.w	8000798 <__udivmoddi4+0x298>
 8000562:	3f02      	subs	r7, #2
 8000564:	4463      	add	r3, ip
 8000566:	1a1b      	subs	r3, r3, r0
 8000568:	fbb3 f0f1 	udiv	r0, r3, r1
 800056c:	fb01 3310 	mls	r3, r1, r0, r3
 8000570:	fb00 fe0e 	mul.w	lr, r0, lr
 8000574:	b2a4      	uxth	r4, r4
 8000576:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057a:	45a6      	cmp	lr, r4
 800057c:	d90a      	bls.n	8000594 <__udivmoddi4+0x94>
 800057e:	eb1c 0404 	adds.w	r4, ip, r4
 8000582:	f100 33ff 	add.w	r3, r0, #4294967295
 8000586:	f080 8109 	bcs.w	800079c <__udivmoddi4+0x29c>
 800058a:	45a6      	cmp	lr, r4
 800058c:	f240 8106 	bls.w	800079c <__udivmoddi4+0x29c>
 8000590:	4464      	add	r4, ip
 8000592:	3802      	subs	r0, #2
 8000594:	2100      	movs	r1, #0
 8000596:	eba4 040e 	sub.w	r4, r4, lr
 800059a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800059e:	b11e      	cbz	r6, 80005a8 <__udivmoddi4+0xa8>
 80005a0:	2300      	movs	r3, #0
 80005a2:	40d4      	lsrs	r4, r2
 80005a4:	e9c6 4300 	strd	r4, r3, [r6]
 80005a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0xc2>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	f000 80ee 	beq.w	8000792 <__udivmoddi4+0x292>
 80005b6:	2100      	movs	r1, #0
 80005b8:	e9c6 0500 	strd	r0, r5, [r6]
 80005bc:	4608      	mov	r0, r1
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	fab3 f183 	clz	r1, r3
 80005c6:	2900      	cmp	r1, #0
 80005c8:	d14a      	bne.n	8000660 <__udivmoddi4+0x160>
 80005ca:	42ab      	cmp	r3, r5
 80005cc:	d302      	bcc.n	80005d4 <__udivmoddi4+0xd4>
 80005ce:	4282      	cmp	r2, r0
 80005d0:	f200 80fc 	bhi.w	80007cc <__udivmoddi4+0x2cc>
 80005d4:	1a84      	subs	r4, r0, r2
 80005d6:	eb65 0303 	sbc.w	r3, r5, r3
 80005da:	2001      	movs	r0, #1
 80005dc:	4698      	mov	r8, r3
 80005de:	2e00      	cmp	r6, #0
 80005e0:	d0e2      	beq.n	80005a8 <__udivmoddi4+0xa8>
 80005e2:	e9c6 4800 	strd	r4, r8, [r6]
 80005e6:	e7df      	b.n	80005a8 <__udivmoddi4+0xa8>
 80005e8:	b902      	cbnz	r2, 80005ec <__udivmoddi4+0xec>
 80005ea:	deff      	udf	#255	; 0xff
 80005ec:	fab2 f282 	clz	r2, r2
 80005f0:	2a00      	cmp	r2, #0
 80005f2:	f040 8091 	bne.w	8000718 <__udivmoddi4+0x218>
 80005f6:	eba1 000c 	sub.w	r0, r1, ip
 80005fa:	2101      	movs	r1, #1
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb0 f3f7 	udiv	r3, r0, r7
 8000608:	fb07 0013 	mls	r0, r7, r3, r0
 800060c:	0c25      	lsrs	r5, r4, #16
 800060e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000612:	fb0e f003 	mul.w	r0, lr, r3
 8000616:	42a8      	cmp	r0, r5
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x12c>
 800061a:	eb1c 0505 	adds.w	r5, ip, r5
 800061e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000622:	d202      	bcs.n	800062a <__udivmoddi4+0x12a>
 8000624:	42a8      	cmp	r0, r5
 8000626:	f200 80ce 	bhi.w	80007c6 <__udivmoddi4+0x2c6>
 800062a:	4643      	mov	r3, r8
 800062c:	1a2d      	subs	r5, r5, r0
 800062e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000632:	fb07 5510 	mls	r5, r7, r0, r5
 8000636:	fb0e fe00 	mul.w	lr, lr, r0
 800063a:	b2a4      	uxth	r4, r4
 800063c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000640:	45a6      	cmp	lr, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x156>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f100 35ff 	add.w	r5, r0, #4294967295
 800064c:	d202      	bcs.n	8000654 <__udivmoddi4+0x154>
 800064e:	45a6      	cmp	lr, r4
 8000650:	f200 80b6 	bhi.w	80007c0 <__udivmoddi4+0x2c0>
 8000654:	4628      	mov	r0, r5
 8000656:	eba4 040e 	sub.w	r4, r4, lr
 800065a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800065e:	e79e      	b.n	800059e <__udivmoddi4+0x9e>
 8000660:	f1c1 0720 	rsb	r7, r1, #32
 8000664:	408b      	lsls	r3, r1
 8000666:	fa22 fc07 	lsr.w	ip, r2, r7
 800066a:	ea4c 0c03 	orr.w	ip, ip, r3
 800066e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000672:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000676:	fbba f8f9 	udiv	r8, sl, r9
 800067a:	fa20 f307 	lsr.w	r3, r0, r7
 800067e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000682:	408d      	lsls	r5, r1
 8000684:	fa1f fe8c 	uxth.w	lr, ip
 8000688:	431d      	orrs	r5, r3
 800068a:	fa00 f301 	lsl.w	r3, r0, r1
 800068e:	fb08 f00e 	mul.w	r0, r8, lr
 8000692:	0c2c      	lsrs	r4, r5, #16
 8000694:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000698:	42a0      	cmp	r0, r4
 800069a:	fa02 f201 	lsl.w	r2, r2, r1
 800069e:	d90b      	bls.n	80006b8 <__udivmoddi4+0x1b8>
 80006a0:	eb1c 0404 	adds.w	r4, ip, r4
 80006a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80006a8:	f080 8088 	bcs.w	80007bc <__udivmoddi4+0x2bc>
 80006ac:	42a0      	cmp	r0, r4
 80006ae:	f240 8085 	bls.w	80007bc <__udivmoddi4+0x2bc>
 80006b2:	f1a8 0802 	sub.w	r8, r8, #2
 80006b6:	4464      	add	r4, ip
 80006b8:	1a24      	subs	r4, r4, r0
 80006ba:	fbb4 f0f9 	udiv	r0, r4, r9
 80006be:	fb09 4410 	mls	r4, r9, r0, r4
 80006c2:	fb00 fe0e 	mul.w	lr, r0, lr
 80006c6:	b2ad      	uxth	r5, r5
 80006c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80006cc:	45a6      	cmp	lr, r4
 80006ce:	d908      	bls.n	80006e2 <__udivmoddi4+0x1e2>
 80006d0:	eb1c 0404 	adds.w	r4, ip, r4
 80006d4:	f100 35ff 	add.w	r5, r0, #4294967295
 80006d8:	d26c      	bcs.n	80007b4 <__udivmoddi4+0x2b4>
 80006da:	45a6      	cmp	lr, r4
 80006dc:	d96a      	bls.n	80007b4 <__udivmoddi4+0x2b4>
 80006de:	3802      	subs	r0, #2
 80006e0:	4464      	add	r4, ip
 80006e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006e6:	fba0 9502 	umull	r9, r5, r0, r2
 80006ea:	eba4 040e 	sub.w	r4, r4, lr
 80006ee:	42ac      	cmp	r4, r5
 80006f0:	46c8      	mov	r8, r9
 80006f2:	46ae      	mov	lr, r5
 80006f4:	d356      	bcc.n	80007a4 <__udivmoddi4+0x2a4>
 80006f6:	d053      	beq.n	80007a0 <__udivmoddi4+0x2a0>
 80006f8:	2e00      	cmp	r6, #0
 80006fa:	d069      	beq.n	80007d0 <__udivmoddi4+0x2d0>
 80006fc:	ebb3 0208 	subs.w	r2, r3, r8
 8000700:	eb64 040e 	sbc.w	r4, r4, lr
 8000704:	fa22 f301 	lsr.w	r3, r2, r1
 8000708:	fa04 f707 	lsl.w	r7, r4, r7
 800070c:	431f      	orrs	r7, r3
 800070e:	40cc      	lsrs	r4, r1
 8000710:	e9c6 7400 	strd	r7, r4, [r6]
 8000714:	2100      	movs	r1, #0
 8000716:	e747      	b.n	80005a8 <__udivmoddi4+0xa8>
 8000718:	fa0c fc02 	lsl.w	ip, ip, r2
 800071c:	f1c2 0120 	rsb	r1, r2, #32
 8000720:	fa25 f301 	lsr.w	r3, r5, r1
 8000724:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000728:	fa20 f101 	lsr.w	r1, r0, r1
 800072c:	4095      	lsls	r5, r2
 800072e:	430d      	orrs	r5, r1
 8000730:	fbb3 f1f7 	udiv	r1, r3, r7
 8000734:	fb07 3311 	mls	r3, r7, r1, r3
 8000738:	fa1f fe8c 	uxth.w	lr, ip
 800073c:	0c28      	lsrs	r0, r5, #16
 800073e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000742:	fb01 f30e 	mul.w	r3, r1, lr
 8000746:	4283      	cmp	r3, r0
 8000748:	fa04 f402 	lsl.w	r4, r4, r2
 800074c:	d908      	bls.n	8000760 <__udivmoddi4+0x260>
 800074e:	eb1c 0000 	adds.w	r0, ip, r0
 8000752:	f101 38ff 	add.w	r8, r1, #4294967295
 8000756:	d22f      	bcs.n	80007b8 <__udivmoddi4+0x2b8>
 8000758:	4283      	cmp	r3, r0
 800075a:	d92d      	bls.n	80007b8 <__udivmoddi4+0x2b8>
 800075c:	3902      	subs	r1, #2
 800075e:	4460      	add	r0, ip
 8000760:	1ac0      	subs	r0, r0, r3
 8000762:	fbb0 f3f7 	udiv	r3, r0, r7
 8000766:	fb07 0013 	mls	r0, r7, r3, r0
 800076a:	b2ad      	uxth	r5, r5
 800076c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000770:	fb03 f00e 	mul.w	r0, r3, lr
 8000774:	42a8      	cmp	r0, r5
 8000776:	d908      	bls.n	800078a <__udivmoddi4+0x28a>
 8000778:	eb1c 0505 	adds.w	r5, ip, r5
 800077c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000780:	d216      	bcs.n	80007b0 <__udivmoddi4+0x2b0>
 8000782:	42a8      	cmp	r0, r5
 8000784:	d914      	bls.n	80007b0 <__udivmoddi4+0x2b0>
 8000786:	3b02      	subs	r3, #2
 8000788:	4465      	add	r5, ip
 800078a:	1a28      	subs	r0, r5, r0
 800078c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000790:	e738      	b.n	8000604 <__udivmoddi4+0x104>
 8000792:	4631      	mov	r1, r6
 8000794:	4630      	mov	r0, r6
 8000796:	e707      	b.n	80005a8 <__udivmoddi4+0xa8>
 8000798:	462f      	mov	r7, r5
 800079a:	e6e4      	b.n	8000566 <__udivmoddi4+0x66>
 800079c:	4618      	mov	r0, r3
 800079e:	e6f9      	b.n	8000594 <__udivmoddi4+0x94>
 80007a0:	454b      	cmp	r3, r9
 80007a2:	d2a9      	bcs.n	80006f8 <__udivmoddi4+0x1f8>
 80007a4:	ebb9 0802 	subs.w	r8, r9, r2
 80007a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80007ac:	3801      	subs	r0, #1
 80007ae:	e7a3      	b.n	80006f8 <__udivmoddi4+0x1f8>
 80007b0:	4643      	mov	r3, r8
 80007b2:	e7ea      	b.n	800078a <__udivmoddi4+0x28a>
 80007b4:	4628      	mov	r0, r5
 80007b6:	e794      	b.n	80006e2 <__udivmoddi4+0x1e2>
 80007b8:	4641      	mov	r1, r8
 80007ba:	e7d1      	b.n	8000760 <__udivmoddi4+0x260>
 80007bc:	46d0      	mov	r8, sl
 80007be:	e77b      	b.n	80006b8 <__udivmoddi4+0x1b8>
 80007c0:	4464      	add	r4, ip
 80007c2:	3802      	subs	r0, #2
 80007c4:	e747      	b.n	8000656 <__udivmoddi4+0x156>
 80007c6:	3b02      	subs	r3, #2
 80007c8:	4465      	add	r5, ip
 80007ca:	e72f      	b.n	800062c <__udivmoddi4+0x12c>
 80007cc:	4608      	mov	r0, r1
 80007ce:	e706      	b.n	80005de <__udivmoddi4+0xde>
 80007d0:	4631      	mov	r1, r6
 80007d2:	e6e9      	b.n	80005a8 <__udivmoddi4+0xa8>

080007d4 <__aeabi_idiv0>:
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	4b50      	ldr	r3, [pc, #320]	; (8000930 <MX_GPIO_Init+0x158>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	4a4f      	ldr	r2, [pc, #316]	; (8000930 <MX_GPIO_Init+0x158>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	61d3      	str	r3, [r2, #28]
 80007fa:	4b4d      	ldr	r3, [pc, #308]	; (8000930 <MX_GPIO_Init+0x158>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	4b4a      	ldr	r3, [pc, #296]	; (8000930 <MX_GPIO_Init+0x158>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	4a49      	ldr	r2, [pc, #292]	; (8000930 <MX_GPIO_Init+0x158>)
 800080c:	f043 0320 	orr.w	r3, r3, #32
 8000810:	61d3      	str	r3, [r2, #28]
 8000812:	4b47      	ldr	r3, [pc, #284]	; (8000930 <MX_GPIO_Init+0x158>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	f003 0320 	and.w	r3, r3, #32
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b44      	ldr	r3, [pc, #272]	; (8000930 <MX_GPIO_Init+0x158>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a43      	ldr	r2, [pc, #268]	; (8000930 <MX_GPIO_Init+0x158>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b41      	ldr	r3, [pc, #260]	; (8000930 <MX_GPIO_Init+0x158>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b3e      	ldr	r3, [pc, #248]	; (8000930 <MX_GPIO_Init+0x158>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	4a3d      	ldr	r2, [pc, #244]	; (8000930 <MX_GPIO_Init+0x158>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	61d3      	str	r3, [r2, #28]
 8000842:	4b3b      	ldr	r3, [pc, #236]	; (8000930 <MX_GPIO_Init+0x158>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084e:	4b38      	ldr	r3, [pc, #224]	; (8000930 <MX_GPIO_Init+0x158>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	4a37      	ldr	r2, [pc, #220]	; (8000930 <MX_GPIO_Init+0x158>)
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	61d3      	str	r3, [r2, #28]
 800085a:	4b35      	ldr	r3, [pc, #212]	; (8000930 <MX_GPIO_Init+0x158>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f003 0308 	and.w	r3, r3, #8
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_GREEN_Pin|L_D1_Pin|LED_YELLOW_Pin
 8000866:	2200      	movs	r2, #0
 8000868:	f241 51ef 	movw	r1, #5615	; 0x15ef
 800086c:	4831      	ldr	r0, [pc, #196]	; (8000934 <MX_GPIO_Init+0x15c>)
 800086e:	f001 ffd9 	bl	8002824 <HAL_GPIO_WritePin>
                          |Czlon4_D1_Pin|Czlon3_D2_Pin|Czlon2_D2_Pin|Czlon3_D1_Pin
                          |L_D2_Pin|R_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Czlon1_D2_Pin|Czlon2_D1_Pin|Czlon5_D1_Pin
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 8000878:	482f      	ldr	r0, [pc, #188]	; (8000938 <MX_GPIO_Init+0x160>)
 800087a:	f001 ffd3 	bl	8002824 <HAL_GPIO_WritePin>
                          |Czlon4_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|CSN_Pin|Czlon1_D1_Pin|Czlon5_D2_Pin
 800087e:	2200      	movs	r2, #0
 8000880:	f241 4136 	movw	r1, #5174	; 0x1436
 8000884:	482d      	ldr	r0, [pc, #180]	; (800093c <MX_GPIO_Init+0x164>)
 8000886:	f001 ffcd 	bl	8002824 <HAL_GPIO_WritePin>
                          |Podstawa_D2_Pin|Podstawa_D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R_D1_GPIO_Port, R_D1_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2104      	movs	r1, #4
 800088e:	482c      	ldr	r0, [pc, #176]	; (8000940 <MX_GPIO_Init+0x168>)
 8000890:	f001 ffc8 	bl	8002824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4822      	ldr	r0, [pc, #136]	; (8000934 <MX_GPIO_Init+0x15c>)
 80008ac:	f001 fe2a 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|L_D1_Pin|LED_YELLOW_Pin
 80008b0:	f241 53ef 	movw	r3, #5615	; 0x15ef
 80008b4:	617b      	str	r3, [r7, #20]
                          |Czlon4_D1_Pin|Czlon3_D2_Pin|Czlon2_D2_Pin|Czlon3_D1_Pin
                          |L_D2_Pin|R_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	481a      	ldr	r0, [pc, #104]	; (8000934 <MX_GPIO_Init+0x15c>)
 80008ca:	f001 fe1b 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Czlon1_D2_Pin|Czlon2_D1_Pin|Czlon5_D1_Pin
 80008ce:	f44f 53d9 	mov.w	r3, #6944	; 0x1b20
 80008d2:	617b      	str	r3, [r7, #20]
                          |Czlon4_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_GPIO_Init+0x160>)
 80008e8:	f001 fe0c 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin|Czlon1_D1_Pin|Czlon5_D2_Pin
 80008ec:	f241 4336 	movw	r3, #5174	; 0x1436
 80008f0:	617b      	str	r3, [r7, #20]
                          |Podstawa_D2_Pin|Podstawa_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_GPIO_Init+0x164>)
 8000906:	f001 fdfd 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = R_D1_Pin;
 800090a:	2304      	movs	r3, #4
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R_D1_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4807      	ldr	r0, [pc, #28]	; (8000940 <MX_GPIO_Init+0x168>)
 8000922:	f001 fdef 	bl	8002504 <HAL_GPIO_Init>

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40020800 	.word	0x40020800
 8000938:	40020000 	.word	0x40020000
 800093c:	40020400 	.word	0x40020400
 8000940:	40020c00 	.word	0x40020c00

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094a:	f001 fc66 	bl	800221a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094e:	f000 fa85 	bl	8000e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000952:	f7ff ff41 	bl	80007d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000956:	f001 fbcd 	bl	80020f4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800095a:	f000 ffad 	bl	80018b8 <MX_SPI2_Init>
  MX_TIM3_Init();
 800095e:	f001 f901 	bl	8001b64 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000962:	f001 f989 	bl	8001c78 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000966:	f001 fa1b 	bl	8001da0 <MX_TIM5_Init>
  MX_TIM2_Init();
 800096a:	f001 f87d 	bl	8001a68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	//nRF initialize and settings
	nRF24_Init(&hspi2);
 800096e:	48ab      	ldr	r0, [pc, #684]	; (8000c1c <main+0x2d8>)
 8000970:	f000 ff5c 	bl	800182c <nRF24_Init>
	nRF24_SetRXAddress(0, "Odb");
 8000974:	49aa      	ldr	r1, [pc, #680]	; (8000c20 <main+0x2dc>)
 8000976:	2000      	movs	r0, #0
 8000978:	f000 fed9 	bl	800172e <nRF24_SetRXAddress>
	nRF24_SetTXAddress("Nad");
 800097c:	48a9      	ldr	r0, [pc, #676]	; (8000c24 <main+0x2e0>)
 800097e:	f000 ff0f 	bl	80017a0 <nRF24_SetTXAddress>
	nRF24_RX_Mode();
 8000982:	f000 fd23 	bl	80013cc <nRF24_RX_Mode>

	//Set timer 2 to PWM function

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000986:	2100      	movs	r1, #0
 8000988:	48a7      	ldr	r0, [pc, #668]	; (8000c28 <main+0x2e4>)
 800098a:	f003 fba5 	bl	80040d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800098e:	2104      	movs	r1, #4
 8000990:	48a5      	ldr	r0, [pc, #660]	; (8000c28 <main+0x2e4>)
 8000992:	f003 fba1 	bl	80040d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000996:	2108      	movs	r1, #8
 8000998:	48a3      	ldr	r0, [pc, #652]	; (8000c28 <main+0x2e4>)
 800099a:	f003 fb9d 	bl	80040d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800099e:	210c      	movs	r1, #12
 80009a0:	48a1      	ldr	r0, [pc, #644]	; (8000c28 <main+0x2e4>)
 80009a2:	f003 fb99 	bl	80040d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80009a6:	2100      	movs	r1, #0
 80009a8:	48a0      	ldr	r0, [pc, #640]	; (8000c2c <main+0x2e8>)
 80009aa:	f003 fb95 	bl	80040d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80009ae:	2104      	movs	r1, #4
 80009b0:	489e      	ldr	r0, [pc, #632]	; (8000c2c <main+0x2e8>)
 80009b2:	f003 fb91 	bl	80040d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80009b6:	2108      	movs	r1, #8
 80009b8:	489c      	ldr	r0, [pc, #624]	; (8000c2c <main+0x2e8>)
 80009ba:	f003 fb8d 	bl	80040d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80009be:	2104      	movs	r1, #4
 80009c0:	489b      	ldr	r0, [pc, #620]	; (8000c30 <main+0x2ec>)
 80009c2:	f003 fb89 	bl	80040d8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009c6:	2100      	movs	r1, #0
 80009c8:	489a      	ldr	r0, [pc, #616]	; (8000c34 <main+0x2f0>)
 80009ca:	f003 fb85 	bl	80040d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80009ce:	210c      	movs	r1, #12
 80009d0:	4898      	ldr	r0, [pc, #608]	; (8000c34 <main+0x2f0>)
 80009d2:	f003 fb81 	bl	80040d8 <HAL_TIM_PWM_Start>
	time = HAL_GetTick();
 80009d6:	f001 fc85 	bl	80022e4 <HAL_GetTick>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a96      	ldr	r2, [pc, #600]	; (8000c38 <main+0x2f4>)
 80009de:	6013      	str	r3, [r2, #0]
	timereset = HAL_GetTick();
 80009e0:	f001 fc80 	bl	80022e4 <HAL_GetTick>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4a95      	ldr	r2, [pc, #596]	; (8000c3c <main+0x2f8>)
 80009e8:	6013      	str	r3, [r2, #0]
	timeauto = HAL_GetTick();
 80009ea:	f001 fc7b 	bl	80022e4 <HAL_GetTick>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4a93      	ldr	r2, [pc, #588]	; (8000c40 <main+0x2fc>)
 80009f2:	6013      	str	r3, [r2, #0]
	timeauto2 = HAL_GetTick();
 80009f4:	f001 fc76 	bl	80022e4 <HAL_GetTick>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4a92      	ldr	r2, [pc, #584]	; (8000c44 <main+0x300>)
 80009fc:	6013      	str	r3, [r2, #0]
	stoppodst();
 80009fe:	f000 faf3 	bl	8000fe8 <stoppodst>
	stopczlon5();
 8000a02:	f000 fb77 	bl	80010f4 <stopczlon5>
	stopczlon1();
 8000a06:	f000 fb03 	bl	8001010 <stopczlon1>
	stopczlon2();
 8000a0a:	f000 fb2d 	bl	8001068 <stopczlon2>
	stopczlon3();
 8000a0e:	f000 fb43 	bl	8001098 <stopczlon3>
	stopczlon4();
 8000a12:	f000 fb57 	bl	80010c4 <stopczlon4>
	servox0();
 8000a16:	f000 fbd1 	bl	80011bc <servox0>
	servoy0();
 8000a1a:	f000 fbdd 	bl	80011d8 <servoy0>

	autoY[2] = ((autoY[0] + autoY[1]) & 0xFF);
 8000a1e:	4b8a      	ldr	r3, [pc, #552]	; (8000c48 <main+0x304>)
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	4b89      	ldr	r3, [pc, #548]	; (8000c48 <main+0x304>)
 8000a24:	785b      	ldrb	r3, [r3, #1]
 8000a26:	4413      	add	r3, r2
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4b87      	ldr	r3, [pc, #540]	; (8000c48 <main+0x304>)
 8000a2c:	709a      	strb	r2, [r3, #2]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2120      	movs	r1, #32
 8000a32:	4886      	ldr	r0, [pc, #536]	; (8000c4c <main+0x308>)
 8000a34:	f001 fef6 	bl	8002824 <HAL_GPIO_WritePin>
		//Check if there is receive message


		//if there is no signal restart nRF24 and stop motor

			HAL_UART_Receive(&huart2, jetsondata4, 5, 500);
 8000a38:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a3c:	2205      	movs	r2, #5
 8000a3e:	4984      	ldr	r1, [pc, #528]	; (8000c50 <main+0x30c>)
 8000a40:	4884      	ldr	r0, [pc, #528]	; (8000c54 <main+0x310>)
 8000a42:	f004 f8ba 	bl	8004bba <HAL_UART_Receive>
			if (jetsondata4[0] == 38)
 8000a46:	4b82      	ldr	r3, [pc, #520]	; (8000c50 <main+0x30c>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b26      	cmp	r3, #38	; 0x26
 8000a4c:	f040 8087 	bne.w	8000b5e <main+0x21a>
					{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2120      	movs	r1, #32
 8000a54:	487d      	ldr	r0, [pc, #500]	; (8000c4c <main+0x308>)
 8000a56:	f001 fee5 	bl	8002824 <HAL_GPIO_WritePin>
						//autonomia po braku anteny

						//HAL_UART_Receive(&huart2, jetsondata4, 4, 1000);
						if (jetsondata4[4] == ((jetsondata4[2]+jetsondata4[1] + jetsondata4[0] + jetsondata4[3]) & 0xFF))
 8000a5a:	4b7d      	ldr	r3, [pc, #500]	; (8000c50 <main+0x30c>)
 8000a5c:	791b      	ldrb	r3, [r3, #4]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4b7b      	ldr	r3, [pc, #492]	; (8000c50 <main+0x30c>)
 8000a62:	789b      	ldrb	r3, [r3, #2]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b7a      	ldr	r3, [pc, #488]	; (8000c50 <main+0x30c>)
 8000a68:	785b      	ldrb	r3, [r3, #1]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a78      	ldr	r2, [pc, #480]	; (8000c50 <main+0x30c>)
 8000a6e:	7812      	ldrb	r2, [r2, #0]
 8000a70:	4413      	add	r3, r2
 8000a72:	4a77      	ldr	r2, [pc, #476]	; (8000c50 <main+0x30c>)
 8000a74:	78d2      	ldrb	r2, [r2, #3]
 8000a76:	4413      	add	r3, r2
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	d16f      	bne.n	8000b5e <main+0x21a>
						{
							timeauto2 = HAL_GetTick();
 8000a7e:	f001 fc31 	bl	80022e4 <HAL_GetTick>
 8000a82:	4603      	mov	r3, r0
 8000a84:	4a6f      	ldr	r2, [pc, #444]	; (8000c44 <main+0x300>)
 8000a86:	6013      	str	r3, [r2, #0]
							HAL_UART_Transmit(&huart2, autoY , 3, HAL_MAX_DELAY);
 8000a88:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	496e      	ldr	r1, [pc, #440]	; (8000c48 <main+0x304>)
 8000a90:	4870      	ldr	r0, [pc, #448]	; (8000c54 <main+0x310>)
 8000a92:	f004 f80f 	bl	8004ab4 <HAL_UART_Transmit>
												pwm1 = map(jetsondata4[1], 32, 127, 0, 1000);
 8000a96:	4b6e      	ldr	r3, [pc, #440]	; (8000c50 <main+0x30c>)
 8000a98:	785b      	ldrb	r3, [r3, #1]
 8000a9a:	b298      	uxth	r0, r3
 8000a9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	227f      	movs	r2, #127	; 0x7f
 8000aa6:	2120      	movs	r1, #32
 8000aa8:	f000 fa26 	bl	8000ef8 <map>
 8000aac:	4603      	mov	r3, r0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fc1a 	bl	80002e8 <__aeabi_ui2f>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4a68      	ldr	r2, [pc, #416]	; (8000c58 <main+0x314>)
 8000ab8:	6013      	str	r3, [r2, #0]
												pwm1 = (pwm1 - 500) * 2;
 8000aba:	4b67      	ldr	r3, [pc, #412]	; (8000c58 <main+0x314>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4967      	ldr	r1, [pc, #412]	; (8000c5c <main+0x318>)
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fb5f 	bl	8000184 <__aeabi_fsub>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fb5c 	bl	8000188 <__addsf3>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b60      	ldr	r3, [pc, #384]	; (8000c58 <main+0x314>)
 8000ad6:	601a      	str	r2, [r3, #0]
												pwm2 = map(jetsondata4[2], 32, 127, 0, 1000);
 8000ad8:	4b5d      	ldr	r3, [pc, #372]	; (8000c50 <main+0x30c>)
 8000ada:	789b      	ldrb	r3, [r3, #2]
 8000adc:	b298      	uxth	r0, r3
 8000ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	227f      	movs	r2, #127	; 0x7f
 8000ae8:	2120      	movs	r1, #32
 8000aea:	f000 fa05 	bl	8000ef8 <map>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fbf9 	bl	80002e8 <__aeabi_ui2f>
 8000af6:	4603      	mov	r3, r0
 8000af8:	4a59      	ldr	r2, [pc, #356]	; (8000c60 <main+0x31c>)
 8000afa:	6013      	str	r3, [r2, #0]
												pwm2 = (pwm2 - 500) * 2;
 8000afc:	4b58      	ldr	r3, [pc, #352]	; (8000c60 <main+0x31c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4956      	ldr	r1, [pc, #344]	; (8000c5c <main+0x318>)
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fb3e 	bl	8000184 <__aeabi_fsub>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fb3b 	bl	8000188 <__addsf3>
 8000b12:	4603      	mov	r3, r0
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b52      	ldr	r3, [pc, #328]	; (8000c60 <main+0x31c>)
 8000b18:	601a      	str	r2, [r3, #0]
												LEDR = (jetsondata4[3] & 0b00000001);
 8000b1a:	4b4d      	ldr	r3, [pc, #308]	; (8000c50 <main+0x30c>)
 8000b1c:	78db      	ldrb	r3, [r3, #3]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b4f      	ldr	r3, [pc, #316]	; (8000c64 <main+0x320>)
 8000b26:	701a      	strb	r2, [r3, #0]
												LEDG = (jetsondata4[3] & 0b00000010) >> 1;
 8000b28:	4b49      	ldr	r3, [pc, #292]	; (8000c50 <main+0x30c>)
 8000b2a:	78db      	ldrb	r3, [r3, #3]
 8000b2c:	105b      	asrs	r3, r3, #1
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4b4c      	ldr	r3, [pc, #304]	; (8000c68 <main+0x324>)
 8000b38:	701a      	strb	r2, [r3, #0]
												LEDY = (jetsondata4[3] & 0b00000100) >> 2;
 8000b3a:	4b45      	ldr	r3, [pc, #276]	; (8000c50 <main+0x30c>)
 8000b3c:	78db      	ldrb	r3, [r3, #3]
 8000b3e:	109b      	asrs	r3, r3, #2
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b48      	ldr	r3, [pc, #288]	; (8000c6c <main+0x328>)
 8000b4a:	701a      	strb	r2, [r3, #0]
												otw = (jetsondata4[3] & 0b00001000) >> 3;
 8000b4c:	4b40      	ldr	r3, [pc, #256]	; (8000c50 <main+0x30c>)
 8000b4e:	78db      	ldrb	r3, [r3, #3]
 8000b50:	10db      	asrs	r3, r3, #3
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b45      	ldr	r3, [pc, #276]	; (8000c70 <main+0x32c>)
 8000b5c:	701a      	strb	r2, [r3, #0]

						}



																		if (pwm1 > pwmRight) {
 8000b5e:	4b3e      	ldr	r3, [pc, #248]	; (8000c58 <main+0x314>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a44      	ldr	r2, [pc, #272]	; (8000c74 <main+0x330>)
 8000b64:	6812      	ldr	r2, [r2, #0]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fc81 	bl	8000470 <__aeabi_fcmpgt>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00c      	beq.n	8000b8e <main+0x24a>
																			pwmRight = pwmRight + step;
 8000b74:	4b3f      	ldr	r3, [pc, #252]	; (8000c74 <main+0x330>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a3f      	ldr	r2, [pc, #252]	; (8000c78 <main+0x334>)
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fb02 	bl	8000188 <__addsf3>
 8000b84:	4603      	mov	r3, r0
 8000b86:	461a      	mov	r2, r3
 8000b88:	4b3a      	ldr	r3, [pc, #232]	; (8000c74 <main+0x330>)
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	e016      	b.n	8000bbc <main+0x278>
																		}
																		else if (pwm1 < pwmRight) {
 8000b8e:	4b32      	ldr	r3, [pc, #200]	; (8000c58 <main+0x314>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a38      	ldr	r2, [pc, #224]	; (8000c74 <main+0x330>)
 8000b94:	6812      	ldr	r2, [r2, #0]
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fc4b 	bl	8000434 <__aeabi_fcmplt>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d00b      	beq.n	8000bbc <main+0x278>
																			pwmRight = pwmRight - step;
 8000ba4:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <main+0x330>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a33      	ldr	r2, [pc, #204]	; (8000c78 <main+0x334>)
 8000baa:	6812      	ldr	r2, [r2, #0]
 8000bac:	4611      	mov	r1, r2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fae8 	bl	8000184 <__aeabi_fsub>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4b2e      	ldr	r3, [pc, #184]	; (8000c74 <main+0x330>)
 8000bba:	601a      	str	r2, [r3, #0]
																		}
																		if (pwm1 > -200 && pwm1 < 200) {
 8000bbc:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <main+0x314>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	492e      	ldr	r1, [pc, #184]	; (8000c7c <main+0x338>)
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fc54 	bl	8000470 <__aeabi_fcmpgt>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d00d      	beq.n	8000bea <main+0x2a6>
 8000bce:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <main+0x314>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	492b      	ldr	r1, [pc, #172]	; (8000c80 <main+0x33c>)
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fc2d 	bl	8000434 <__aeabi_fcmplt>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d004      	beq.n	8000bea <main+0x2a6>
																			PWMval(6, 0);
 8000be0:	2100      	movs	r1, #0
 8000be2:	2006      	movs	r0, #6
 8000be4:	f000 f9ae 	bl	8000f44 <PWMval>
 8000be8:	e065      	b.n	8000cb6 <main+0x372>
																		}
																		else if (pwmRight > 0) {
 8000bea:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <main+0x330>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f04f 0100 	mov.w	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fc3c 	bl	8000470 <__aeabi_fcmpgt>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d042      	beq.n	8000c84 <main+0x340>
																			RmotorF();
 8000bfe:	f000 fab5 	bl	800116c <RmotorF>
																			PWMval(6, (int) pwmRight);
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <main+0x330>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fc3c 	bl	8000484 <__aeabi_f2iz>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	4619      	mov	r1, r3
 8000c12:	2006      	movs	r0, #6
 8000c14:	f000 f996 	bl	8000f44 <PWMval>
 8000c18:	e04d      	b.n	8000cb6 <main+0x372>
 8000c1a:	bf00      	nop
 8000c1c:	20000064 	.word	0x20000064
 8000c20:	08004ff4 	.word	0x08004ff4
 8000c24:	08004ff8 	.word	0x08004ff8
 8000c28:	2000013c 	.word	0x2000013c
 8000c2c:	200000fc 	.word	0x200000fc
 8000c30:	2000017c 	.word	0x2000017c
 8000c34:	200000bc 	.word	0x200000bc
 8000c38:	2000004c 	.word	0x2000004c
 8000c3c:	20000050 	.word	0x20000050
 8000c40:	20000054 	.word	0x20000054
 8000c44:	20000058 	.word	0x20000058
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	20000030 	.word	0x20000030
 8000c54:	200001bc 	.word	0x200001bc
 8000c58:	2000003c 	.word	0x2000003c
 8000c5c:	43fa0000 	.word	0x43fa0000
 8000c60:	20000040 	.word	0x20000040
 8000c64:	20000035 	.word	0x20000035
 8000c68:	20000036 	.word	0x20000036
 8000c6c:	20000037 	.word	0x20000037
 8000c70:	20000038 	.word	0x20000038
 8000c74:	20000044 	.word	0x20000044
 8000c78:	20000004 	.word	0x20000004
 8000c7c:	c3480000 	.word	0xc3480000
 8000c80:	43480000 	.word	0x43480000
																		}
																		else if (pwmRight < 0) {
 8000c84:	4b6a      	ldr	r3, [pc, #424]	; (8000e30 <main+0x4ec>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f04f 0100 	mov.w	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fbd1 	bl	8000434 <__aeabi_fcmplt>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d00e      	beq.n	8000cb6 <main+0x372>
																			RmotorB();
 8000c98:	f000 fa7c 	bl	8001194 <RmotorB>
																			PWMval(6, ((int) pwmRight) * -1);
 8000c9c:	4b64      	ldr	r3, [pc, #400]	; (8000e30 <main+0x4ec>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fbef 	bl	8000484 <__aeabi_f2iz>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	425b      	negs	r3, r3
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	4619      	mov	r1, r3
 8000cb0:	2006      	movs	r0, #6
 8000cb2:	f000 f947 	bl	8000f44 <PWMval>
																		}



																		if (pwm2 > pwmLeft) {
 8000cb6:	4b5f      	ldr	r3, [pc, #380]	; (8000e34 <main+0x4f0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a5f      	ldr	r2, [pc, #380]	; (8000e38 <main+0x4f4>)
 8000cbc:	6812      	ldr	r2, [r2, #0]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fbd5 	bl	8000470 <__aeabi_fcmpgt>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d00c      	beq.n	8000ce6 <main+0x3a2>
																			pwmLeft = pwmLeft + step;
 8000ccc:	4b5a      	ldr	r3, [pc, #360]	; (8000e38 <main+0x4f4>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a5a      	ldr	r2, [pc, #360]	; (8000e3c <main+0x4f8>)
 8000cd2:	6812      	ldr	r2, [r2, #0]
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fa56 	bl	8000188 <__addsf3>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b55      	ldr	r3, [pc, #340]	; (8000e38 <main+0x4f4>)
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	e016      	b.n	8000d14 <main+0x3d0>
																		}
																		else if (pwm2 < pwmLeft) {
 8000ce6:	4b53      	ldr	r3, [pc, #332]	; (8000e34 <main+0x4f0>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a53      	ldr	r2, [pc, #332]	; (8000e38 <main+0x4f4>)
 8000cec:	6812      	ldr	r2, [r2, #0]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fb9f 	bl	8000434 <__aeabi_fcmplt>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d00b      	beq.n	8000d14 <main+0x3d0>
																			pwmLeft = pwmLeft - step;
 8000cfc:	4b4e      	ldr	r3, [pc, #312]	; (8000e38 <main+0x4f4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a4e      	ldr	r2, [pc, #312]	; (8000e3c <main+0x4f8>)
 8000d02:	6812      	ldr	r2, [r2, #0]
 8000d04:	4611      	mov	r1, r2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fa3c 	bl	8000184 <__aeabi_fsub>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4b49      	ldr	r3, [pc, #292]	; (8000e38 <main+0x4f4>)
 8000d12:	601a      	str	r2, [r3, #0]
																		}
																		if (pwm2 > -200 && pwm2 < 200) {
 8000d14:	4b47      	ldr	r3, [pc, #284]	; (8000e34 <main+0x4f0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4949      	ldr	r1, [pc, #292]	; (8000e40 <main+0x4fc>)
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fba8 	bl	8000470 <__aeabi_fcmpgt>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d00d      	beq.n	8000d42 <main+0x3fe>
 8000d26:	4b43      	ldr	r3, [pc, #268]	; (8000e34 <main+0x4f0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4946      	ldr	r1, [pc, #280]	; (8000e44 <main+0x500>)
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fb81 	bl	8000434 <__aeabi_fcmplt>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d004      	beq.n	8000d42 <main+0x3fe>
																			PWMval(7, 0);
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2007      	movs	r0, #7
 8000d3c:	f000 f902 	bl	8000f44 <PWMval>
 8000d40:	e030      	b.n	8000da4 <main+0x460>
																		}
																		else if (pwmLeft > 0) {
 8000d42:	4b3d      	ldr	r3, [pc, #244]	; (8000e38 <main+0x4f4>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f04f 0100 	mov.w	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fb90 	bl	8000470 <__aeabi_fcmpgt>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d00d      	beq.n	8000d72 <main+0x42e>
																			LmotorF();
 8000d56:	f000 f9e5 	bl	8001124 <LmotorF>
																			PWMval(7, (int) pwmLeft);
 8000d5a:	4b37      	ldr	r3, [pc, #220]	; (8000e38 <main+0x4f4>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fb90 	bl	8000484 <__aeabi_f2iz>
 8000d64:	4603      	mov	r3, r0
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	4619      	mov	r1, r3
 8000d6a:	2007      	movs	r0, #7
 8000d6c:	f000 f8ea 	bl	8000f44 <PWMval>
 8000d70:	e018      	b.n	8000da4 <main+0x460>
																		}
																		else if (pwmLeft < 0) {
 8000d72:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <main+0x4f4>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f04f 0100 	mov.w	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fb5a 	bl	8000434 <__aeabi_fcmplt>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d00e      	beq.n	8000da4 <main+0x460>
																			LmotorB();
 8000d86:	f000 f9df 	bl	8001148 <LmotorB>
																			PWMval(7, ((int) pwmLeft) * -1);
 8000d8a:	4b2b      	ldr	r3, [pc, #172]	; (8000e38 <main+0x4f4>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fb78 	bl	8000484 <__aeabi_f2iz>
 8000d94:	4603      	mov	r3, r0
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	425b      	negs	r3, r3
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2007      	movs	r0, #7
 8000da0:	f000 f8d0 	bl	8000f44 <PWMval>
																		}
																			if (otw){
 8000da4:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <main+0x504>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d006      	beq.n	8000dba <main+0x476>
																				//otw chwytaka
																				czlon2L();
 8000dac:	f000 f948 	bl	8001040 <czlon2L>
																				PWMval(2, 1000);
 8000db0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000db4:	2002      	movs	r0, #2
 8000db6:	f000 f8c5 	bl	8000f44 <PWMval>
																			}

																			if (LEDR){
 8000dba:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <main+0x508>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d005      	beq.n	8000dce <main+0x48a>
																				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4822      	ldr	r0, [pc, #136]	; (8000e50 <main+0x50c>)
 8000dc8:	f001 fd2c 	bl	8002824 <HAL_GPIO_WritePin>
 8000dcc:	e008      	b.n	8000de0 <main+0x49c>
																			}
																			else if (!LEDR){
 8000dce:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <main+0x508>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d104      	bne.n	8000de0 <main+0x49c>
																				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2101      	movs	r1, #1
 8000dda:	481d      	ldr	r0, [pc, #116]	; (8000e50 <main+0x50c>)
 8000ddc:	f001 fd22 	bl	8002824 <HAL_GPIO_WritePin>
																			}
																			if (LEDG){
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <main+0x510>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d005      	beq.n	8000df4 <main+0x4b0>
																				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	2102      	movs	r1, #2
 8000dec:	4818      	ldr	r0, [pc, #96]	; (8000e50 <main+0x50c>)
 8000dee:	f001 fd19 	bl	8002824 <HAL_GPIO_WritePin>
 8000df2:	e008      	b.n	8000e06 <main+0x4c2>
																			}
																			else if (!LEDG){
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <main+0x510>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d104      	bne.n	8000e06 <main+0x4c2>
																				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2102      	movs	r1, #2
 8000e00:	4813      	ldr	r0, [pc, #76]	; (8000e50 <main+0x50c>)
 8000e02:	f001 fd0f 	bl	8002824 <HAL_GPIO_WritePin>
																			}
																			if (LEDY){
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <main+0x514>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d005      	beq.n	8000e1a <main+0x4d6>
																				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2108      	movs	r1, #8
 8000e12:	480f      	ldr	r0, [pc, #60]	; (8000e50 <main+0x50c>)
 8000e14:	f001 fd06 	bl	8002824 <HAL_GPIO_WritePin>
 8000e18:	e60e      	b.n	8000a38 <main+0xf4>
																			}
																			else if (!LEDY){
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <main+0x514>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f47f ae0a 	bne.w	8000a38 <main+0xf4>
																				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2108      	movs	r1, #8
 8000e28:	4809      	ldr	r0, [pc, #36]	; (8000e50 <main+0x50c>)
 8000e2a:	f001 fcfb 	bl	8002824 <HAL_GPIO_WritePin>
			HAL_UART_Receive(&huart2, jetsondata4, 5, 500);
 8000e2e:	e603      	b.n	8000a38 <main+0xf4>
 8000e30:	20000044 	.word	0x20000044
 8000e34:	20000040 	.word	0x20000040
 8000e38:	20000048 	.word	0x20000048
 8000e3c:	20000004 	.word	0x20000004
 8000e40:	c3480000 	.word	0xc3480000
 8000e44:	43480000 	.word	0x43480000
 8000e48:	20000038 	.word	0x20000038
 8000e4c:	20000035 	.word	0x20000035
 8000e50:	40020800 	.word	0x40020800
 8000e54:	20000036 	.word	0x20000036
 8000e58:	20000037 	.word	0x20000037

08000e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b092      	sub	sp, #72	; 0x48
 8000e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	2234      	movs	r2, #52	; 0x34
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f004 f8ae 	bl	8004fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e70:	463b      	mov	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <SystemClock_Config+0x98>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000e86:	4a1b      	ldr	r2, [pc, #108]	; (8000ef4 <SystemClock_Config+0x98>)
 8000e88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e8c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e92:	2301      	movs	r3, #1
 8000e94:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e96:	2310      	movs	r3, #16
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ea2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000ea6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000ea8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000eac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f001 fcce 	bl	8002854 <HAL_RCC_OscConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ebe:	f000 f999 	bl	80011f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec2:	230f      	movs	r3, #15
 8000ec4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 ffea 	bl	8002eb4 <HAL_RCC_ClockConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ee6:	f000 f985 	bl	80011f4 <Error_Handler>
  }
}
 8000eea:	bf00      	nop
 8000eec:	3748      	adds	r7, #72	; 0x48
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40007000 	.word	0x40007000

08000ef8 <map>:

/* USER CODE BEGIN 4 */

uint16_t map(uint16_t input_value, uint16_t minRange, uint16_t maxRange,
		uint16_t New_minRange, uint16_t New_maxRange) {
 8000ef8:	b490      	push	{r4, r7}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4604      	mov	r4, r0
 8000f00:	4608      	mov	r0, r1
 8000f02:	4611      	mov	r1, r2
 8000f04:	461a      	mov	r2, r3
 8000f06:	4623      	mov	r3, r4
 8000f08:	80fb      	strh	r3, [r7, #6]
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80bb      	strh	r3, [r7, #4]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	807b      	strh	r3, [r7, #2]
 8000f12:	4613      	mov	r3, r2
 8000f14:	803b      	strh	r3, [r7, #0]
	return (((input_value - minRange) * (New_maxRange - New_minRange))
 8000f16:	88fa      	ldrh	r2, [r7, #6]
 8000f18:	88bb      	ldrh	r3, [r7, #4]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	8a39      	ldrh	r1, [r7, #16]
 8000f1e:	883a      	ldrh	r2, [r7, #0]
 8000f20:	1a8a      	subs	r2, r1, r2
 8000f22:	fb03 f202 	mul.w	r2, r3, r2
			/ (maxRange - minRange) + New_minRange);
 8000f26:	8879      	ldrh	r1, [r7, #2]
 8000f28:	88bb      	ldrh	r3, [r7, #4]
 8000f2a:	1acb      	subs	r3, r1, r3
 8000f2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	883b      	ldrh	r3, [r7, #0]
 8000f34:	4413      	add	r3, r2
 8000f36:	b29b      	uxth	r3, r3
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc90      	pop	{r4, r7}
 8000f40:	4770      	bx	lr
	...

08000f44 <PWMval>:
void PWMval(uint8_t ch, uint16_t val) {
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	460a      	mov	r2, r1
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	80bb      	strh	r3, [r7, #4]
	switch (ch) {
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	2b07      	cmp	r3, #7
 8000f58:	d83a      	bhi.n	8000fd0 <PWMval+0x8c>
 8000f5a:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <PWMval+0x1c>)
 8000f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f60:	08000f81 	.word	0x08000f81
 8000f64:	08000f8b 	.word	0x08000f8b
 8000f68:	08000f95 	.word	0x08000f95
 8000f6c:	08000f9f 	.word	0x08000f9f
 8000f70:	08000fa9 	.word	0x08000fa9
 8000f74:	08000fb3 	.word	0x08000fb3
 8000f78:	08000fbd 	.word	0x08000fbd
 8000f7c:	08000fc7 	.word	0x08000fc7
	case 0:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, val);
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <PWMval+0x98>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	88ba      	ldrh	r2, [r7, #4]
 8000f86:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000f88:	e022      	b.n	8000fd0 <PWMval+0x8c>
	case 1:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, val);
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <PWMval+0x98>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	88ba      	ldrh	r2, [r7, #4]
 8000f90:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8000f92:	e01d      	b.n	8000fd0 <PWMval+0x8c>
	case 2:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, val);
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <PWMval+0x98>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	88ba      	ldrh	r2, [r7, #4]
 8000f9a:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8000f9c:	e018      	b.n	8000fd0 <PWMval+0x8c>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, val);
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <PWMval+0x98>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	88ba      	ldrh	r2, [r7, #4]
 8000fa4:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000fa6:	e013      	b.n	8000fd0 <PWMval+0x8c>
	case 4:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, val);
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <PWMval+0x9c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	88ba      	ldrh	r2, [r7, #4]
 8000fae:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000fb0:	e00e      	b.n	8000fd0 <PWMval+0x8c>
	case 5:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, val);
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <PWMval+0x9c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	88ba      	ldrh	r2, [r7, #4]
 8000fb8:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8000fba:	e009      	b.n	8000fd0 <PWMval+0x8c>
	case 6:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, val);
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <PWMval+0x9c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	88ba      	ldrh	r2, [r7, #4]
 8000fc2:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8000fc4:	e004      	b.n	8000fd0 <PWMval+0x8c>
	case 7:
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, val);
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <PWMval+0xa0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	88ba      	ldrh	r2, [r7, #4]
 8000fcc:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8000fce:	bf00      	nop
	}
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	2000013c 	.word	0x2000013c
 8000fe0:	200000fc 	.word	0x200000fc
 8000fe4:	2000017c 	.word	0x2000017c

08000fe8 <stoppodst>:
void podstL() {
	HAL_GPIO_WritePin(Podstawa_D2_GPIO_Port, Podstawa_D2_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(Podstawa_D1_GPIO_Port, Podstawa_D1_Pin, GPIO_PIN_SET);
}

void stoppodst() {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Podstawa_D1_GPIO_Port, Podstawa_D1_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2120      	movs	r1, #32
 8000ff0:	4806      	ldr	r0, [pc, #24]	; (800100c <stoppodst+0x24>)
 8000ff2:	f001 fc17 	bl	8002824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Podstawa_D2_GPIO_Port, Podstawa_D2_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	4804      	ldr	r0, [pc, #16]	; (800100c <stoppodst+0x24>)
 8000ffc:	f001 fc12 	bl	8002824 <HAL_GPIO_WritePin>
	PWMval(0, 0);
 8001000:	2100      	movs	r1, #0
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff ff9e 	bl	8000f44 <PWMval>
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40020400 	.word	0x40020400

08001010 <stopczlon1>:
}
void czlon1L() {
	HAL_GPIO_WritePin(Czlon1_D1_GPIO_Port, Czlon1_D1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(Czlon1_D2_GPIO_Port, Czlon1_D2_Pin, GPIO_PIN_RESET);
}
void stopczlon1() {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon1_D1_GPIO_Port, Czlon1_D1_Pin, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800101a:	4807      	ldr	r0, [pc, #28]	; (8001038 <stopczlon1+0x28>)
 800101c:	f001 fc02 	bl	8002824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon1_D2_GPIO_Port, Czlon1_D2_Pin, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <stopczlon1+0x2c>)
 8001028:	f001 fbfc 	bl	8002824 <HAL_GPIO_WritePin>
	PWMval(1, 0);
 800102c:	2100      	movs	r1, #0
 800102e:	2001      	movs	r0, #1
 8001030:	f7ff ff88 	bl	8000f44 <PWMval>
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40020400 	.word	0x40020400
 800103c:	40020000 	.word	0x40020000

08001040 <czlon2L>:

void czlon2R() {
	HAL_GPIO_WritePin(Czlon2_D1_GPIO_Port, Czlon2_D1_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(Czlon2_D2_GPIO_Port, Czlon2_D2_Pin, GPIO_PIN_SET);
}
void czlon2L() {
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon2_D1_GPIO_Port, Czlon2_D1_Pin, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <czlon2L+0x20>)
 800104c:	f001 fbea 	bl	8002824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon2_D2_GPIO_Port, Czlon2_D2_Pin, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2180      	movs	r1, #128	; 0x80
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <czlon2L+0x24>)
 8001056:	f001 fbe5 	bl	8002824 <HAL_GPIO_WritePin>
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40020000 	.word	0x40020000
 8001064:	40020800 	.word	0x40020800

08001068 <stopczlon2>:
void stopczlon2() {
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon2_D1_GPIO_Port, Czlon2_D1_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001072:	4807      	ldr	r0, [pc, #28]	; (8001090 <stopczlon2+0x28>)
 8001074:	f001 fbd6 	bl	8002824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon2_D2_GPIO_Port, Czlon2_D2_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2180      	movs	r1, #128	; 0x80
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <stopczlon2+0x2c>)
 800107e:	f001 fbd1 	bl	8002824 <HAL_GPIO_WritePin>
	PWMval(2, 0);
 8001082:	2100      	movs	r1, #0
 8001084:	2002      	movs	r0, #2
 8001086:	f7ff ff5d 	bl	8000f44 <PWMval>
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40020000 	.word	0x40020000
 8001094:	40020800 	.word	0x40020800

08001098 <stopczlon3>:
}
void czlon3L() {
	HAL_GPIO_WritePin(Czlon3_D1_GPIO_Port, Czlon3_D1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(Czlon3_D2_GPIO_Port, Czlon3_D2_Pin, GPIO_PIN_RESET);
}
void stopczlon3() {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon3_D1_GPIO_Port, Czlon3_D1_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a2:	4807      	ldr	r0, [pc, #28]	; (80010c0 <stopczlon3+0x28>)
 80010a4:	f001 fbbe 	bl	8002824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon3_D2_GPIO_Port, Czlon3_D2_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2140      	movs	r1, #64	; 0x40
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <stopczlon3+0x28>)
 80010ae:	f001 fbb9 	bl	8002824 <HAL_GPIO_WritePin>
	PWMval(3, 0);
 80010b2:	2100      	movs	r1, #0
 80010b4:	2003      	movs	r0, #3
 80010b6:	f7ff ff45 	bl	8000f44 <PWMval>
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40020800 	.word	0x40020800

080010c4 <stopczlon4>:
}
void czlon4L() {
	HAL_GPIO_WritePin(Czlon4_D1_GPIO_Port, Czlon4_D1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(Czlon4_D2_GPIO_Port, Czlon4_D2_Pin, GPIO_PIN_RESET);
}
void stopczlon4() {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon4_D1_GPIO_Port, Czlon4_D1_Pin, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2120      	movs	r1, #32
 80010cc:	4807      	ldr	r0, [pc, #28]	; (80010ec <stopczlon4+0x28>)
 80010ce:	f001 fba9 	bl	8002824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon4_D2_GPIO_Port, Czlon4_D2_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <stopczlon4+0x2c>)
 80010da:	f001 fba3 	bl	8002824 <HAL_GPIO_WritePin>
	PWMval(4, 0);
 80010de:	2100      	movs	r1, #0
 80010e0:	2004      	movs	r0, #4
 80010e2:	f7ff ff2f 	bl	8000f44 <PWMval>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020000 	.word	0x40020000

080010f4 <stopczlon5>:
}
void czlon5L() {
	HAL_GPIO_WritePin(Czlon5_D1_GPIO_Port, Czlon5_D1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(Czlon5_D2_GPIO_Port, Czlon5_D2_Pin, GPIO_PIN_RESET);
}
void stopczlon5() {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon5_D1_GPIO_Port, Czlon5_D1_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010fe:	4807      	ldr	r0, [pc, #28]	; (800111c <stopczlon5+0x28>)
 8001100:	f001 fb90 	bl	8002824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon5_D2_GPIO_Port, Czlon5_D2_Pin, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <stopczlon5+0x2c>)
 800110c:	f001 fb8a 	bl	8002824 <HAL_GPIO_WritePin>
	PWMval(5, 0);
 8001110:	2100      	movs	r1, #0
 8001112:	2005      	movs	r0, #5
 8001114:	f7ff ff16 	bl	8000f44 <PWMval>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40020000 	.word	0x40020000
 8001120:	40020400 	.word	0x40020400

08001124 <LmotorF>:

void LmotorF() {
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L_D1_GPIO_Port, L_D1_Pin, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	2104      	movs	r1, #4
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <LmotorF+0x20>)
 800112e:	f001 fb79 	bl	8002824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_D2_GPIO_Port, L_D2_Pin, GPIO_PIN_SET);
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <LmotorF+0x20>)
 800113a:	f001 fb73 	bl	8002824 <HAL_GPIO_WritePin>
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40020800 	.word	0x40020800

08001148 <LmotorB>:
void LmotorB() {
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L_D2_GPIO_Port, L_D2_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <LmotorB+0x20>)
 8001154:	f001 fb66 	bl	8002824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_D1_GPIO_Port, L_D1_Pin, GPIO_PIN_SET);
 8001158:	2201      	movs	r2, #1
 800115a:	2104      	movs	r1, #4
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <LmotorB+0x20>)
 800115e:	f001 fb61 	bl	8002824 <HAL_GPIO_WritePin>
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40020800 	.word	0x40020800

0800116c <RmotorF>:

void RmotorF() {
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R_D1_GPIO_Port, R_D1_Pin, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	2104      	movs	r1, #4
 8001174:	4805      	ldr	r0, [pc, #20]	; (800118c <RmotorF+0x20>)
 8001176:	f001 fb55 	bl	8002824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_D2_GPIO_Port, R_D2_Pin, GPIO_PIN_SET);
 800117a:	2201      	movs	r2, #1
 800117c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001180:	4803      	ldr	r0, [pc, #12]	; (8001190 <RmotorF+0x24>)
 8001182:	f001 fb4f 	bl	8002824 <HAL_GPIO_WritePin>
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40020c00 	.word	0x40020c00
 8001190:	40020800 	.word	0x40020800

08001194 <RmotorB>:
void RmotorB() {
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R_D2_GPIO_Port, R_D2_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <RmotorB+0x20>)
 80011a0:	f001 fb40 	bl	8002824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_D1_GPIO_Port, R_D1_Pin, GPIO_PIN_SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2104      	movs	r1, #4
 80011a8:	4803      	ldr	r0, [pc, #12]	; (80011b8 <RmotorB+0x24>)
 80011aa:	f001 fb3b 	bl	8002824 <HAL_GPIO_WritePin>
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020c00 	.word	0x40020c00

080011bc <servox0>:

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, sx);


}
void servox0() {
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <servox0+0x18>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80011c8:	635a      	str	r2, [r3, #52]	; 0x34

}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	200000bc 	.word	0x200000bc

080011d8 <servoy0>:

	sy = map(byte6, 32, 127, 1000, 2000);
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, sy);

}
void servoy0(){
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1500);
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <servoy0+0x18>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80011e4:	641a      	str	r2, [r3, #64]	; 0x40

}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	200000bc 	.word	0x200000bc

080011f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011fc:	e7fe      	b.n	80011fc <Error_Handler+0x8>
	...

08001200 <nRF24_SendSpi>:
#define NRF24_CE_LOW		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET)

// Spi send and read

static void nRF24_SendSpi(uint8_t *Data, uint8_t length)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, length, 1000);
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <nRF24_SendSpi+0x28>)
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	78fb      	ldrb	r3, [r7, #3]
 8001212:	b29a      	uxth	r2, r3
 8001214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	f002 f99a 	bl	8003552 <HAL_SPI_Transmit>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	2000005c 	.word	0x2000005c

0800122c <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t length)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, length, 1000);
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <nRF24_ReadSpi+0x28>)
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	b29a      	uxth	r2, r3
 8001240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	f002 fac7 	bl	80037d8 <HAL_SPI_Receive>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000005c 	.word	0x2000005c

08001258 <nRF24_ReadRegister>:

//Reading register

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001266:	2200      	movs	r2, #0
 8001268:	2104      	movs	r1, #4
 800126a:	480c      	ldr	r0, [pc, #48]	; (800129c <nRF24_ReadRegister+0x44>)
 800126c:	f001 fada 	bl	8002824 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001270:	1dfb      	adds	r3, r7, #7
 8001272:	2101      	movs	r1, #1
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ffc3 	bl	8001200 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 800127a:	f107 030f 	add.w	r3, r7, #15
 800127e:	2101      	movs	r1, #1
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ffd3 	bl	800122c <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001286:	2201      	movs	r2, #1
 8001288:	2104      	movs	r1, #4
 800128a:	4804      	ldr	r0, [pc, #16]	; (800129c <nRF24_ReadRegister+0x44>)
 800128c:	f001 faca 	bl	8002824 <HAL_GPIO_WritePin>

	return result;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40020400 	.word	0x40020400

080012a0 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* result, uint8_t lenght)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
 80012ac:	4613      	mov	r3, r2
 80012ae:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80012b4:	2200      	movs	r2, #0
 80012b6:	2104      	movs	r1, #4
 80012b8:	480a      	ldr	r0, [pc, #40]	; (80012e4 <nRF24_ReadRegisters+0x44>)
 80012ba:	f001 fab3 	bl	8002824 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	2101      	movs	r1, #1
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff9c 	bl	8001200 <nRF24_SendSpi>
	nRF24_ReadSpi(result, lenght);
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	4619      	mov	r1, r3
 80012cc:	6838      	ldr	r0, [r7, #0]
 80012ce:	f7ff ffad 	bl	800122c <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 80012d2:	2201      	movs	r2, #1
 80012d4:	2104      	movs	r1, #4
 80012d6:	4803      	ldr	r0, [pc, #12]	; (80012e4 <nRF24_ReadRegisters+0x44>)
 80012d8:	f001 faa4 	bl	8002824 <HAL_GPIO_WritePin>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40020400 	.word	0x40020400

080012e8 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t value)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	460a      	mov	r2, r1
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	4613      	mov	r3, r2
 80012f6:	71bb      	strb	r3, [r7, #6]
	uint8_t list[2];

	list[0] = NRF24_CMD_W_REGISTER | reg;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	f043 0320 	orr.w	r3, r3, #32
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	733b      	strb	r3, [r7, #12]
	list[1] = value;
 8001302:	79bb      	ldrb	r3, [r7, #6]
 8001304:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001306:	2200      	movs	r2, #0
 8001308:	2104      	movs	r1, #4
 800130a:	4809      	ldr	r0, [pc, #36]	; (8001330 <nRF24_WriteRegister+0x48>)
 800130c:	f001 fa8a 	bl	8002824 <HAL_GPIO_WritePin>

	nRF24_SendSpi(list, 2);
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	2102      	movs	r1, #2
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ff72 	bl	8001200 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 800131c:	2201      	movs	r2, #1
 800131e:	2104      	movs	r1, #4
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <nRF24_WriteRegister+0x48>)
 8001322:	f001 fa7f 	bl	8002824 <HAL_GPIO_WritePin>
}
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40020400 	.word	0x40020400

08001334 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* result, uint8_t lenght)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	4613      	mov	r3, r2
 8001342:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f043 0320 	orr.w	r3, r3, #32
 800134a:	b2db      	uxtb	r3, r3
 800134c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800134e:	2200      	movs	r2, #0
 8001350:	2104      	movs	r1, #4
 8001352:	480b      	ldr	r0, [pc, #44]	; (8001380 <nRF24_WriteRegisters+0x4c>)
 8001354:	f001 fa66 	bl	8002824 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001358:	1dfb      	adds	r3, r7, #7
 800135a:	2101      	movs	r1, #1
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff4f 	bl	8001200 <nRF24_SendSpi>
	nRF24_SendSpi(result, lenght);
 8001362:	79bb      	ldrb	r3, [r7, #6]
 8001364:	4619      	mov	r1, r3
 8001366:	6838      	ldr	r0, [r7, #0]
 8001368:	f7ff ff4a 	bl	8001200 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 800136c:	2201      	movs	r2, #1
 800136e:	2104      	movs	r1, #4
 8001370:	4803      	ldr	r0, [pc, #12]	; (8001380 <nRF24_WriteRegisters+0x4c>)
 8001372:	f001 fa57 	bl	8002824 <HAL_GPIO_WritePin>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40020400 	.word	0x40020400

08001384 <nRF24_ReadConfig>:

uint8_t nRF24_ReadConfig(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001388:	2000      	movs	r0, #0
 800138a:	f7ff ff65 	bl	8001258 <nRF24_ReadRegister>
 800138e:	4603      	mov	r3, r0
}
 8001390:	4618      	mov	r0, r3
 8001392:	bd80      	pop	{r7, pc}

08001394 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t config)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, config);
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	4619      	mov	r1, r3
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff ffa0 	bl	80012e8 <nRF24_WriteRegister>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <nRF24_WriteStatus>:
{
	return (nRF24_ReadRegister(NRF24_STATUS));
}

void nRF24_WriteStatus(uint8_t st)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	4619      	mov	r1, r3
 80013be:	2007      	movs	r0, #7
 80013c0:	f7ff ff92 	bl	80012e8 <nRF24_WriteRegister>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 80013d2:	f7ff ffd7 	bl	8001384 <nRF24_ReadConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 80013da:	4911      	ldr	r1, [pc, #68]	; (8001420 <nRF24_RX_Mode+0x54>)
 80013dc:	2000      	movs	r0, #0
 80013de:	f000 f9a6 	bl	800172e <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ffcd 	bl	8001394 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 80013fa:	2070      	movs	r0, #112	; 0x70
 80013fc:	f7ff ffd8 	bl	80013b0 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001400:	f000 f858 	bl	80014b4 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001404:	f000 f870 	bl	80014e8 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001408:	2201      	movs	r2, #1
 800140a:	2102      	movs	r1, #2
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <nRF24_RX_Mode+0x58>)
 800140e:	f001 fa09 	bl	8002824 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001412:	2001      	movs	r0, #1
 8001414:	f000 ff70 	bl	80022f8 <HAL_Delay>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000060 	.word	0x20000060
 8001424:	40020400 	.word	0x40020400

08001428 <nRF24_SetPALevel>:




void nRF24_SetPALevel(uint8_t lev)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001432:	2006      	movs	r0, #6
 8001434:	f7ff ff10 	bl	8001258 <nRF24_ReadRegister>
 8001438:	4603      	mov	r3, r0
 800143a:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	f023 0307 	bic.w	r3, r3, #7
 8001442:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	b25a      	sxtb	r2, r3
 800144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144e:	4313      	orrs	r3, r2
 8001450:	b25b      	sxtb	r3, r3
 8001452:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	4619      	mov	r1, r3
 8001458:	2006      	movs	r0, #6
 800145a:	f7ff ff45 	bl	80012e8 <nRF24_WriteRegister>
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b084      	sub	sp, #16
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001470:	2006      	movs	r0, #6
 8001472:	f7ff fef1 	bl	8001258 <nRF24_ReadRegister>
 8001476:	4603      	mov	r3, r0
 8001478:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001480:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d104      	bne.n	8001492 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	f043 0320 	orr.w	r3, r3, #32
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	e006      	b.n	80014a0 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d103      	bne.n	80014a0 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	f043 0308 	orr.w	r3, r3, #8
 800149e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	4619      	mov	r1, r3
 80014a4:	2006      	movs	r0, #6
 80014a6:	f7ff ff1f 	bl	80012e8 <nRF24_WriteRegister>
}
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <nRF24_FlushRX>:



void nRF24_FlushRX(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 80014ba:	23e2      	movs	r3, #226	; 0xe2
 80014bc:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80014be:	2200      	movs	r2, #0
 80014c0:	2104      	movs	r1, #4
 80014c2:	4808      	ldr	r0, [pc, #32]	; (80014e4 <nRF24_FlushRX+0x30>)
 80014c4:	f001 f9ae 	bl	8002824 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80014c8:	1dfb      	adds	r3, r7, #7
 80014ca:	2101      	movs	r1, #1
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fe97 	bl	8001200 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80014d2:	2201      	movs	r2, #1
 80014d4:	2104      	movs	r1, #4
 80014d6:	4803      	ldr	r0, [pc, #12]	; (80014e4 <nRF24_FlushRX+0x30>)
 80014d8:	f001 f9a4 	bl	8002824 <HAL_GPIO_WritePin>
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40020400 	.word	0x40020400

080014e8 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80014ee:	23e1      	movs	r3, #225	; 0xe1
 80014f0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80014f2:	2200      	movs	r2, #0
 80014f4:	2104      	movs	r1, #4
 80014f6:	4808      	ldr	r0, [pc, #32]	; (8001518 <nRF24_FlushTX+0x30>)
 80014f8:	f001 f994 	bl	8002824 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80014fc:	1dfb      	adds	r3, r7, #7
 80014fe:	2101      	movs	r1, #1
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fe7d 	bl	8001200 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8001506:	2201      	movs	r2, #1
 8001508:	2104      	movs	r1, #4
 800150a:	4803      	ldr	r0, [pc, #12]	; (8001518 <nRF24_FlushTX+0x30>)
 800150c:	f001 f98a 	bl	8002824 <HAL_GPIO_WritePin>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40020400 	.word	0x40020400

0800151c <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001526:	f7ff ff2d 	bl	8001384 <nRF24_ReadConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	f043 0308 	orr.w	r3, r3, #8
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	e003      	b.n	8001546 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	f023 0308 	bic.w	r3, r3, #8
 8001544:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff23 	bl	8001394 <nRF24_WriteConfig>
}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b084      	sub	sp, #16
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001560:	f7ff ff10 	bl	8001384 <nRF24_ReadConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d104      	bne.n	8001578 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	73fb      	strb	r3, [r7, #15]
 8001576:	e003      	b.n	8001580 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	f023 0304 	bic.w	r3, r3, #4
 800157e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff06 	bl	8001394 <nRF24_WriteConfig>
}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	460a      	mov	r2, r1
 800159a:	71fb      	strb	r3, [r7, #7]
 800159c:	4613      	mov	r3, r2
 800159e:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	b25a      	sxtb	r2, r3
 80015a6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	b25b      	sxtb	r3, r3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b25b      	sxtb	r3, r3
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	4619      	mov	r1, r3
 80015b8:	2004      	movs	r0, #4
 80015ba:	f7ff fe95 	bl	80012e8 <nRF24_WriteRegister>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	4619      	mov	r1, r3
 80015da:	2005      	movs	r0, #5
 80015dc:	f7ff fe84 	bl	80012e8 <nRF24_WriteRegister>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	460a      	mov	r2, r1
 80015f2:	71fb      	strb	r3, [r7, #7]
 80015f4:	4613      	mov	r3, r2
 80015f6:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	2b05      	cmp	r3, #5
 80015fc:	d901      	bls.n	8001602 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 80015fe:	2305      	movs	r3, #5
 8001600:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	3311      	adds	r3, #17
 8001606:	b2da      	uxtb	r2, r3
 8001608:	79bb      	ldrb	r3, [r7, #6]
 800160a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800160e:	b2db      	uxtb	r3, r3
 8001610:	4619      	mov	r1, r3
 8001612:	4610      	mov	r0, r2
 8001614:	f7ff fe68 	bl	80012e8 <nRF24_WriteRegister>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	460a      	mov	r2, r1
 800162a:	71fb      	strb	r3, [r7, #7]
 800162c:	4613      	mov	r3, r2
 800162e:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	2b05      	cmp	r3, #5
 8001634:	d901      	bls.n	800163a <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8001636:	2305      	movs	r3, #5
 8001638:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800163a:	2002      	movs	r0, #2
 800163c:	f7ff fe0c 	bl	8001258 <nRF24_ReadRegister>
 8001640:	4603      	mov	r3, r0
 8001642:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001644:	79bb      	ldrb	r3, [r7, #6]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d10a      	bne.n	8001660 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	2201      	movs	r2, #1
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	b25a      	sxtb	r2, r3
 8001654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001658:	4313      	orrs	r3, r2
 800165a:	b25b      	sxtb	r3, r3
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	e00b      	b.n	8001678 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2201      	movs	r2, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	b25b      	sxtb	r3, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	b25a      	sxtb	r2, r3
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001672:	4013      	ands	r3, r2
 8001674:	b25b      	sxtb	r3, r3
 8001676:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	4619      	mov	r1, r3
 800167c:	2002      	movs	r0, #2
 800167e:	f7ff fe33 	bl	80012e8 <nRF24_WriteRegister>
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b084      	sub	sp, #16
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	460a      	mov	r2, r1
 8001694:	71fb      	strb	r3, [r7, #7]
 8001696:	4613      	mov	r3, r2
 8001698:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2b05      	cmp	r3, #5
 800169e:	d901      	bls.n	80016a4 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 80016a0:	2305      	movs	r3, #5
 80016a2:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 80016a4:	2001      	movs	r0, #1
 80016a6:	f7ff fdd7 	bl	8001258 <nRF24_ReadRegister>
 80016aa:	4603      	mov	r3, r0
 80016ac:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80016ae:	79bb      	ldrb	r3, [r7, #6]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d10a      	bne.n	80016ca <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	2201      	movs	r2, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	b25a      	sxtb	r2, r3
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	73fb      	strb	r3, [r7, #15]
 80016c8:	e00b      	b.n	80016e2 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2201      	movs	r2, #1
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	b25a      	sxtb	r2, r3
 80016d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016dc:	4013      	ands	r3, r2
 80016de:	b25b      	sxtb	r3, r3
 80016e0:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	4619      	mov	r1, r3
 80016e6:	2001      	movs	r0, #1
 80016e8:	f7ff fdfe 	bl	80012e8 <nRF24_WriteRegister>
}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	2b05      	cmp	r3, #5
 8001702:	d901      	bls.n	8001708 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8001704:	2305      	movs	r3, #5
 8001706:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d801      	bhi.n	8001712 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 800170e:	2303      	movs	r3, #3
 8001710:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	3b02      	subs	r3, #2
 8001716:	b2db      	uxtb	r3, r3
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	4619      	mov	r1, r3
 8001720:	2003      	movs	r0, #3
 8001722:	f7ff fde1 	bl	80012e8 <nRF24_WriteRegister>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	6039      	str	r1, [r7, #0]
 8001738:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <nRF24_SetRXAddress+0x18>
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d11d      	bne.n	8001782 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]
 800174a:	e00d      	b.n	8001768 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	441a      	add	r2, r3
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	f1c3 0302 	rsb	r3, r3, #2
 8001758:	7812      	ldrb	r2, [r2, #0]
 800175a:	3310      	adds	r3, #16
 800175c:	443b      	add	r3, r7
 800175e:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	3301      	adds	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d9ee      	bls.n	800174c <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	330a      	adds	r3, #10
 8001772:	b2db      	uxtb	r3, r3
 8001774:	f107 010c 	add.w	r1, r7, #12
 8001778:	2203      	movs	r2, #3
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fdda 	bl	8001334 <nRF24_WriteRegisters>
	{
 8001780:	e00a      	b.n	8001798 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	330a      	adds	r3, #10
 8001786:	b2da      	uxtb	r2, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	3302      	adds	r3, #2
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	4619      	mov	r1, r3
 8001790:	4610      	mov	r0, r2
 8001792:	f7ff fda9 	bl	80012e8 <nRF24_WriteRegister>
}
 8001796:	bf00      	nop
 8001798:	bf00      	nop
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	2203      	movs	r2, #3
 80017ae:	4619      	mov	r1, r3
 80017b0:	200a      	movs	r0, #10
 80017b2:	f7ff fd75 	bl	80012a0 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	73fb      	strb	r3, [r7, #15]
 80017ba:	e00c      	b.n	80017d6 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 80017bc:	7bfa      	ldrb	r2, [r7, #15]
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	f1c3 0302 	rsb	r3, r3, #2
 80017c4:	3210      	adds	r2, #16
 80017c6:	443a      	add	r2, r7
 80017c8:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80017cc:	4a16      	ldr	r2, [pc, #88]	; (8001828 <nRF24_SetTXAddress+0x88>)
 80017ce:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	3301      	adds	r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d9ef      	bls.n	80017bc <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]
 80017e0:	e00d      	b.n	80017fe <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	441a      	add	r2, r3
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	f1c3 0302 	rsb	r3, r3, #2
 80017ee:	7812      	ldrb	r2, [r2, #0]
 80017f0:	3310      	adds	r3, #16
 80017f2:	443b      	add	r3, r7
 80017f4:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	3301      	adds	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d9ee      	bls.n	80017e2 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	2203      	movs	r2, #3
 800180a:	4619      	mov	r1, r3
 800180c:	200a      	movs	r0, #10
 800180e:	f7ff fd91 	bl	8001334 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	2203      	movs	r2, #3
 8001818:	4619      	mov	r1, r3
 800181a:	2010      	movs	r0, #16
 800181c:	f7ff fd8a 	bl	8001334 <nRF24_WriteRegisters>

}
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000060 	.word	0x20000060

0800182c <nRF24_Init>:
	}
	return 0;
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8001834:	4a1e      	ldr	r2, [pc, #120]	; (80018b0 <nRF24_Init+0x84>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 800183a:	2200      	movs	r2, #0
 800183c:	2102      	movs	r1, #2
 800183e:	481d      	ldr	r0, [pc, #116]	; (80018b4 <nRF24_Init+0x88>)
 8001840:	f000 fff0 	bl	8002824 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8001844:	2201      	movs	r2, #1
 8001846:	2104      	movs	r1, #4
 8001848:	481a      	ldr	r0, [pc, #104]	; (80018b4 <nRF24_Init+0x88>)
 800184a:	f000 ffeb 	bl	8002824 <HAL_GPIO_WritePin>

	HAL_Delay(5);
 800184e:	2005      	movs	r0, #5
 8001850:	f000 fd52 	bl	80022f8 <HAL_Delay>

	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8001854:	2002      	movs	r0, #2
 8001856:	f7ff fe06 	bl	8001466 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 800185a:	2001      	movs	r0, #1
 800185c:	f7ff fe5e 	bl	800151c <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8001860:	2000      	movs	r0, #0
 8001862:	f7ff fe78 	bl	8001556 <nRF24_SetCRCLength>
	nRF24_SetPALevel(NRF24_PA_PWR_0dBM);
 8001866:	2003      	movs	r0, #3
 8001868:	f7ff fdde 	bl	8001428 <nRF24_SetPALevel>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 800186c:	2107      	movs	r1, #7
 800186e:	2004      	movs	r0, #4
 8001870:	f7ff fe8e 	bl	8001590 <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8001874:	2100      	movs	r1, #0
 8001876:	201c      	movs	r0, #28
 8001878:	f7ff fd36 	bl	80012e8 <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 800187c:	200a      	movs	r0, #10
 800187e:	f7ff fea2 	bl	80015c6 <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8001882:	2109      	movs	r1, #9
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff feaf 	bl	80015e8 <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 800188a:	2101      	movs	r1, #1
 800188c:	2000      	movs	r0, #0
 800188e:	f7ff fec7 	bl	8001620 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8001892:	2101      	movs	r1, #1
 8001894:	2000      	movs	r0, #0
 8001896:	f7ff fef8 	bl	800168a <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 800189a:	2003      	movs	r0, #3
 800189c:	f7ff ff2a 	bl	80016f4 <nRF24_SetAddressWidth>

	HAL_Delay(20);
 80018a0:	2014      	movs	r0, #20
 80018a2:	f000 fd29 	bl	80022f8 <HAL_Delay>

}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	2000005c 	.word	0x2000005c
 80018b4:	40020400 	.word	0x40020400

080018b8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80018bc:	4b17      	ldr	r3, [pc, #92]	; (800191c <MX_SPI2_Init+0x64>)
 80018be:	4a18      	ldr	r2, [pc, #96]	; (8001920 <MX_SPI2_Init+0x68>)
 80018c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018c2:	4b16      	ldr	r3, [pc, #88]	; (800191c <MX_SPI2_Init+0x64>)
 80018c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_SPI2_Init+0x64>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <MX_SPI2_Init+0x64>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_SPI2_Init+0x64>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MX_SPI2_Init+0x64>)
 80018de:	2200      	movs	r2, #0
 80018e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_SPI2_Init+0x64>)
 80018e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <MX_SPI2_Init+0x64>)
 80018ec:	2210      	movs	r2, #16
 80018ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <MX_SPI2_Init+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <MX_SPI2_Init+0x64>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <MX_SPI2_Init+0x64>)
 80018fe:	2200      	movs	r2, #0
 8001900:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_SPI2_Init+0x64>)
 8001904:	220a      	movs	r2, #10
 8001906:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001908:	4804      	ldr	r0, [pc, #16]	; (800191c <MX_SPI2_Init+0x64>)
 800190a:	f001 fd99 	bl	8003440 <HAL_SPI_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001914:	f7ff fc6e 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000064 	.word	0x20000064
 8001920:	40003800 	.word	0x40003800

08001924 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a17      	ldr	r2, [pc, #92]	; (80019a0 <HAL_SPI_MspInit+0x7c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d128      	bne.n	8001998 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001946:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <HAL_SPI_MspInit+0x80>)
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	4a16      	ldr	r2, [pc, #88]	; (80019a4 <HAL_SPI_MspInit+0x80>)
 800194c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001950:	6253      	str	r3, [r2, #36]	; 0x24
 8001952:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <HAL_SPI_MspInit+0x80>)
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_SPI_MspInit+0x80>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <HAL_SPI_MspInit+0x80>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	61d3      	str	r3, [r2, #28]
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <HAL_SPI_MspInit+0x80>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001976:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800197a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001988:	2305      	movs	r3, #5
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4619      	mov	r1, r3
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <HAL_SPI_MspInit+0x84>)
 8001994:	f000 fdb6 	bl	8002504 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001998:	bf00      	nop
 800199a:	3728      	adds	r7, #40	; 0x28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40003800 	.word	0x40003800
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020400 	.word	0x40020400

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_MspInit+0x5c>)
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <HAL_MspInit+0x5c>)
 80019b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019bc:	6253      	str	r3, [r2, #36]	; 0x24
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_MspInit+0x5c>)
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <HAL_MspInit+0x5c>)
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <HAL_MspInit+0x5c>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6213      	str	r3, [r2, #32]
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <HAL_MspInit+0x5c>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_MspInit+0x5c>)
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <HAL_MspInit+0x5c>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	6253      	str	r3, [r2, #36]	; 0x24
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_MspInit+0x5c>)
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019fa:	2007      	movs	r0, #7
 80019fc:	f000 fd4e 	bl	800249c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40023800 	.word	0x40023800

08001a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <NMI_Handler+0x4>

08001a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <HardFault_Handler+0x4>

08001a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <MemManage_Handler+0x4>

08001a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <BusFault_Handler+0x4>

08001a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <UsageFault_Handler+0x4>

08001a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr

08001a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr

08001a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr

08001a4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a52:	f000 fc35 	bl	80022c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
	...

08001a68 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0318 	add.w	r3, r7, #24
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	f107 0310 	add.w	r3, r7, #16
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a86:	463b      	mov	r3, r7
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a92:	4b33      	ldr	r3, [pc, #204]	; (8001b60 <MX_TIM2_Init+0xf8>)
 8001a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 30-1;
 8001a9a:	4b31      	ldr	r3, [pc, #196]	; (8001b60 <MX_TIM2_Init+0xf8>)
 8001a9c:	221d      	movs	r2, #29
 8001a9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa0:	4b2f      	ldr	r3, [pc, #188]	; (8001b60 <MX_TIM2_Init+0xf8>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001aa6:	4b2e      	ldr	r3, [pc, #184]	; (8001b60 <MX_TIM2_Init+0xf8>)
 8001aa8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001aac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aae:	4b2c      	ldr	r3, [pc, #176]	; (8001b60 <MX_TIM2_Init+0xf8>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab4:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <MX_TIM2_Init+0xf8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aba:	4829      	ldr	r0, [pc, #164]	; (8001b60 <MX_TIM2_Init+0xf8>)
 8001abc:	f002 fa84 	bl	8003fc8 <HAL_TIM_Base_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001ac6:	f7ff fb95 	bl	80011f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ace:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ad0:	f107 0318 	add.w	r3, r7, #24
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4822      	ldr	r0, [pc, #136]	; (8001b60 <MX_TIM2_Init+0xf8>)
 8001ad8:	f002 fc56 	bl	8004388 <HAL_TIM_ConfigClockSource>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001ae2:	f7ff fb87 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ae6:	481e      	ldr	r0, [pc, #120]	; (8001b60 <MX_TIM2_Init+0xf8>)
 8001ae8:	f002 faad 	bl	8004046 <HAL_TIM_PWM_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001af2:	f7ff fb7f 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001afe:	f107 0310 	add.w	r3, r7, #16
 8001b02:	4619      	mov	r1, r3
 8001b04:	4816      	ldr	r0, [pc, #88]	; (8001b60 <MX_TIM2_Init+0xf8>)
 8001b06:	f002 ff27 	bl	8004958 <HAL_TIMEx_MasterConfigSynchronization>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001b10:	f7ff fb70 	bl	80011f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b14:	2360      	movs	r3, #96	; 0x60
 8001b16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8001b18:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001b1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b26:	463b      	mov	r3, r7
 8001b28:	2200      	movs	r2, #0
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480c      	ldr	r0, [pc, #48]	; (8001b60 <MX_TIM2_Init+0xf8>)
 8001b2e:	f002 fb69 	bl	8004204 <HAL_TIM_PWM_ConfigChannel>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001b38:	f7ff fb5c 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	220c      	movs	r2, #12
 8001b40:	4619      	mov	r1, r3
 8001b42:	4807      	ldr	r0, [pc, #28]	; (8001b60 <MX_TIM2_Init+0xf8>)
 8001b44:	f002 fb5e 	bl	8004204 <HAL_TIM_PWM_ConfigChannel>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8001b4e:	f7ff fb51 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b52:	4803      	ldr	r0, [pc, #12]	; (8001b60 <MX_TIM2_Init+0xf8>)
 8001b54:	f000 f9f0 	bl	8001f38 <HAL_TIM_MspPostInit>

}
 8001b58:	bf00      	nop
 8001b5a:	3728      	adds	r7, #40	; 0x28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200000bc 	.word	0x200000bc

08001b64 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6a:	f107 0318 	add.w	r3, r7, #24
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b82:	463b      	mov	r3, r7
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b8e:	4b38      	ldr	r3, [pc, #224]	; (8001c70 <MX_TIM3_Init+0x10c>)
 8001b90:	4a38      	ldr	r2, [pc, #224]	; (8001c74 <MX_TIM3_Init+0x110>)
 8001b92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001b94:	4b36      	ldr	r3, [pc, #216]	; (8001c70 <MX_TIM3_Init+0x10c>)
 8001b96:	220f      	movs	r2, #15
 8001b98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9a:	4b35      	ldr	r3, [pc, #212]	; (8001c70 <MX_TIM3_Init+0x10c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001ba0:	4b33      	ldr	r3, [pc, #204]	; (8001c70 <MX_TIM3_Init+0x10c>)
 8001ba2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ba6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba8:	4b31      	ldr	r3, [pc, #196]	; (8001c70 <MX_TIM3_Init+0x10c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bae:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <MX_TIM3_Init+0x10c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bb4:	482e      	ldr	r0, [pc, #184]	; (8001c70 <MX_TIM3_Init+0x10c>)
 8001bb6:	f002 fa07 	bl	8003fc8 <HAL_TIM_Base_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001bc0:	f7ff fb18 	bl	80011f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bca:	f107 0318 	add.w	r3, r7, #24
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4827      	ldr	r0, [pc, #156]	; (8001c70 <MX_TIM3_Init+0x10c>)
 8001bd2:	f002 fbd9 	bl	8004388 <HAL_TIM_ConfigClockSource>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001bdc:	f7ff fb0a 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001be0:	4823      	ldr	r0, [pc, #140]	; (8001c70 <MX_TIM3_Init+0x10c>)
 8001be2:	f002 fa30 	bl	8004046 <HAL_TIM_PWM_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001bec:	f7ff fb02 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bf8:	f107 0310 	add.w	r3, r7, #16
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	481c      	ldr	r0, [pc, #112]	; (8001c70 <MX_TIM3_Init+0x10c>)
 8001c00:	f002 feaa 	bl	8004958 <HAL_TIMEx_MasterConfigSynchronization>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001c0a:	f7ff faf3 	bl	80011f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c0e:	2360      	movs	r3, #96	; 0x60
 8001c10:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c1e:	463b      	mov	r3, r7
 8001c20:	2200      	movs	r2, #0
 8001c22:	4619      	mov	r1, r3
 8001c24:	4812      	ldr	r0, [pc, #72]	; (8001c70 <MX_TIM3_Init+0x10c>)
 8001c26:	f002 faed 	bl	8004204 <HAL_TIM_PWM_ConfigChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001c30:	f7ff fae0 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c34:	463b      	mov	r3, r7
 8001c36:	2204      	movs	r2, #4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	480d      	ldr	r0, [pc, #52]	; (8001c70 <MX_TIM3_Init+0x10c>)
 8001c3c:	f002 fae2 	bl	8004204 <HAL_TIM_PWM_ConfigChannel>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001c46:	f7ff fad5 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c4a:	463b      	mov	r3, r7
 8001c4c:	2208      	movs	r2, #8
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4807      	ldr	r0, [pc, #28]	; (8001c70 <MX_TIM3_Init+0x10c>)
 8001c52:	f002 fad7 	bl	8004204 <HAL_TIM_PWM_ConfigChannel>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8001c5c:	f7ff faca 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c60:	4803      	ldr	r0, [pc, #12]	; (8001c70 <MX_TIM3_Init+0x10c>)
 8001c62:	f000 f969 	bl	8001f38 <HAL_TIM_MspPostInit>

}
 8001c66:	bf00      	nop
 8001c68:	3728      	adds	r7, #40	; 0x28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200000fc 	.word	0x200000fc
 8001c74:	40000400 	.word	0x40000400

08001c78 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	; 0x28
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7e:	f107 0318 	add.w	r3, r7, #24
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8c:	f107 0310 	add.w	r3, r7, #16
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c96:	463b      	mov	r3, r7
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <MX_TIM4_Init+0x120>)
 8001ca4:	4a3d      	ldr	r2, [pc, #244]	; (8001d9c <MX_TIM4_Init+0x124>)
 8001ca6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8001ca8:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <MX_TIM4_Init+0x120>)
 8001caa:	220f      	movs	r2, #15
 8001cac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cae:	4b3a      	ldr	r3, [pc, #232]	; (8001d98 <MX_TIM4_Init+0x120>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001cb4:	4b38      	ldr	r3, [pc, #224]	; (8001d98 <MX_TIM4_Init+0x120>)
 8001cb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cbc:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <MX_TIM4_Init+0x120>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc2:	4b35      	ldr	r3, [pc, #212]	; (8001d98 <MX_TIM4_Init+0x120>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cc8:	4833      	ldr	r0, [pc, #204]	; (8001d98 <MX_TIM4_Init+0x120>)
 8001cca:	f002 f97d 	bl	8003fc8 <HAL_TIM_Base_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001cd4:	f7ff fa8e 	bl	80011f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cdc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cde:	f107 0318 	add.w	r3, r7, #24
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	482c      	ldr	r0, [pc, #176]	; (8001d98 <MX_TIM4_Init+0x120>)
 8001ce6:	f002 fb4f 	bl	8004388 <HAL_TIM_ConfigClockSource>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001cf0:	f7ff fa80 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cf4:	4828      	ldr	r0, [pc, #160]	; (8001d98 <MX_TIM4_Init+0x120>)
 8001cf6:	f002 f9a6 	bl	8004046 <HAL_TIM_PWM_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001d00:	f7ff fa78 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	4619      	mov	r1, r3
 8001d12:	4821      	ldr	r0, [pc, #132]	; (8001d98 <MX_TIM4_Init+0x120>)
 8001d14:	f002 fe20 	bl	8004958 <HAL_TIMEx_MasterConfigSynchronization>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001d1e:	f7ff fa69 	bl	80011f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d22:	2360      	movs	r3, #96	; 0x60
 8001d24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d32:	463b      	mov	r3, r7
 8001d34:	2200      	movs	r2, #0
 8001d36:	4619      	mov	r1, r3
 8001d38:	4817      	ldr	r0, [pc, #92]	; (8001d98 <MX_TIM4_Init+0x120>)
 8001d3a:	f002 fa63 	bl	8004204 <HAL_TIM_PWM_ConfigChannel>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001d44:	f7ff fa56 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d48:	463b      	mov	r3, r7
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4812      	ldr	r0, [pc, #72]	; (8001d98 <MX_TIM4_Init+0x120>)
 8001d50:	f002 fa58 	bl	8004204 <HAL_TIM_PWM_ConfigChannel>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8001d5a:	f7ff fa4b 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d5e:	463b      	mov	r3, r7
 8001d60:	2208      	movs	r2, #8
 8001d62:	4619      	mov	r1, r3
 8001d64:	480c      	ldr	r0, [pc, #48]	; (8001d98 <MX_TIM4_Init+0x120>)
 8001d66:	f002 fa4d 	bl	8004204 <HAL_TIM_PWM_ConfigChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM4_Init+0xfc>
  {
    Error_Handler();
 8001d70:	f7ff fa40 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d74:	463b      	mov	r3, r7
 8001d76:	220c      	movs	r2, #12
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4807      	ldr	r0, [pc, #28]	; (8001d98 <MX_TIM4_Init+0x120>)
 8001d7c:	f002 fa42 	bl	8004204 <HAL_TIM_PWM_ConfigChannel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 8001d86:	f7ff fa35 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d8a:	4803      	ldr	r0, [pc, #12]	; (8001d98 <MX_TIM4_Init+0x120>)
 8001d8c:	f000 f8d4 	bl	8001f38 <HAL_TIM_MspPostInit>

}
 8001d90:	bf00      	nop
 8001d92:	3728      	adds	r7, #40	; 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	2000013c 	.word	0x2000013c
 8001d9c:	40000800 	.word	0x40000800

08001da0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08a      	sub	sp, #40	; 0x28
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001da6:	f107 0318 	add.w	r3, r7, #24
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001dca:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <MX_TIM5_Init+0xe0>)
 8001dcc:	4a2d      	ldr	r2, [pc, #180]	; (8001e84 <MX_TIM5_Init+0xe4>)
 8001dce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <MX_TIM5_Init+0xe0>)
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd6:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <MX_TIM5_Init+0xe0>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001ddc:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <MX_TIM5_Init+0xe0>)
 8001dde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001de2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de4:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <MX_TIM5_Init+0xe0>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dea:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <MX_TIM5_Init+0xe0>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001df0:	4823      	ldr	r0, [pc, #140]	; (8001e80 <MX_TIM5_Init+0xe0>)
 8001df2:	f002 f8e9 	bl	8003fc8 <HAL_TIM_Base_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8001dfc:	f7ff f9fa 	bl	80011f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e04:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e06:	f107 0318 	add.w	r3, r7, #24
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	481c      	ldr	r0, [pc, #112]	; (8001e80 <MX_TIM5_Init+0xe0>)
 8001e0e:	f002 fabb 	bl	8004388 <HAL_TIM_ConfigClockSource>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001e18:	f7ff f9ec 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e1c:	4818      	ldr	r0, [pc, #96]	; (8001e80 <MX_TIM5_Init+0xe0>)
 8001e1e:	f002 f912 	bl	8004046 <HAL_TIM_PWM_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001e28:	f7ff f9e4 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4811      	ldr	r0, [pc, #68]	; (8001e80 <MX_TIM5_Init+0xe0>)
 8001e3c:	f002 fd8c 	bl	8004958 <HAL_TIMEx_MasterConfigSynchronization>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8001e46:	f7ff f9d5 	bl	80011f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e4a:	2360      	movs	r3, #96	; 0x60
 8001e4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e5a:	463b      	mov	r3, r7
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4807      	ldr	r0, [pc, #28]	; (8001e80 <MX_TIM5_Init+0xe0>)
 8001e62:	f002 f9cf 	bl	8004204 <HAL_TIM_PWM_ConfigChannel>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8001e6c:	f7ff f9c2 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e70:	4803      	ldr	r0, [pc, #12]	; (8001e80 <MX_TIM5_Init+0xe0>)
 8001e72:	f000 f861 	bl	8001f38 <HAL_TIM_MspPostInit>

}
 8001e76:	bf00      	nop
 8001e78:	3728      	adds	r7, #40	; 0x28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	2000017c 	.word	0x2000017c
 8001e84:	40000c00 	.word	0x40000c00

08001e88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e98:	d10c      	bne.n	8001eb4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e9a:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <HAL_TIM_Base_MspInit+0xa0>)
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	4a22      	ldr	r2, [pc, #136]	; (8001f28 <HAL_TIM_Base_MspInit+0xa0>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6253      	str	r3, [r2, #36]	; 0x24
 8001ea6:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <HAL_TIM_Base_MspInit+0xa0>)
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001eb2:	e034      	b.n	8001f1e <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM3)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <HAL_TIM_Base_MspInit+0xa4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <HAL_TIM_Base_MspInit+0xa0>)
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <HAL_TIM_Base_MspInit+0xa0>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6253      	str	r3, [r2, #36]	; 0x24
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <HAL_TIM_Base_MspInit+0xa0>)
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]
}
 8001ed6:	e022      	b.n	8001f1e <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM4)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <HAL_TIM_Base_MspInit+0xa8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d10c      	bne.n	8001efc <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_TIM_Base_MspInit+0xa0>)
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	4a10      	ldr	r2, [pc, #64]	; (8001f28 <HAL_TIM_Base_MspInit+0xa0>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	6253      	str	r3, [r2, #36]	; 0x24
 8001eee:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <HAL_TIM_Base_MspInit+0xa0>)
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
}
 8001efa:	e010      	b.n	8001f1e <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM5)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0c      	ldr	r2, [pc, #48]	; (8001f34 <HAL_TIM_Base_MspInit+0xac>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d10b      	bne.n	8001f1e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f06:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <HAL_TIM_Base_MspInit+0xa0>)
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	4a07      	ldr	r2, [pc, #28]	; (8001f28 <HAL_TIM_Base_MspInit+0xa0>)
 8001f0c:	f043 0308 	orr.w	r3, r3, #8
 8001f10:	6253      	str	r3, [r2, #36]	; 0x24
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_TIM_Base_MspInit+0xa0>)
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
}
 8001f1e:	bf00      	nop
 8001f20:	371c      	adds	r7, #28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40000400 	.word	0x40000400
 8001f30:	40000800 	.word	0x40000800
 8001f34:	40000c00 	.word	0x40000c00

08001f38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08e      	sub	sp, #56	; 0x38
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f58:	d13a      	bne.n	8001fd0 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5a:	4b60      	ldr	r3, [pc, #384]	; (80020dc <HAL_TIM_MspPostInit+0x1a4>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	4a5f      	ldr	r2, [pc, #380]	; (80020dc <HAL_TIM_MspPostInit+0x1a4>)
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	61d3      	str	r3, [r2, #28]
 8001f66:	4b5d      	ldr	r3, [pc, #372]	; (80020dc <HAL_TIM_MspPostInit+0x1a4>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	623b      	str	r3, [r7, #32]
 8001f70:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	4b5a      	ldr	r3, [pc, #360]	; (80020dc <HAL_TIM_MspPostInit+0x1a4>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	4a59      	ldr	r2, [pc, #356]	; (80020dc <HAL_TIM_MspPostInit+0x1a4>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	61d3      	str	r3, [r2, #28]
 8001f7e:	4b57      	ldr	r3, [pc, #348]	; (80020dc <HAL_TIM_MspPostInit+0x1a4>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO_2_Pin;
 8001f8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SERVO_2_GPIO_Port, &GPIO_InitStruct);
 8001fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	484e      	ldr	r0, [pc, #312]	; (80020e0 <HAL_TIM_MspPostInit+0x1a8>)
 8001fa8:	f000 faac 	bl	8002504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SERVO_1_Pin;
 8001fac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SERVO_1_GPIO_Port, &GPIO_InitStruct);
 8001fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4846      	ldr	r0, [pc, #280]	; (80020e4 <HAL_TIM_MspPostInit+0x1ac>)
 8001fca:	f000 fa9b 	bl	8002504 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001fce:	e081      	b.n	80020d4 <HAL_TIM_MspPostInit+0x19c>
  else if(timHandle->Instance==TIM3)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a44      	ldr	r2, [pc, #272]	; (80020e8 <HAL_TIM_MspPostInit+0x1b0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d138      	bne.n	800204c <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	4b40      	ldr	r3, [pc, #256]	; (80020dc <HAL_TIM_MspPostInit+0x1a4>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4a3f      	ldr	r2, [pc, #252]	; (80020dc <HAL_TIM_MspPostInit+0x1a4>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	61d3      	str	r3, [r2, #28]
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	; (80020dc <HAL_TIM_MspPostInit+0x1a4>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	61bb      	str	r3, [r7, #24]
 8001ff0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff2:	4b3a      	ldr	r3, [pc, #232]	; (80020dc <HAL_TIM_MspPostInit+0x1a4>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4a39      	ldr	r2, [pc, #228]	; (80020dc <HAL_TIM_MspPostInit+0x1a4>)
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	61d3      	str	r3, [r2, #28]
 8001ffe:	4b37      	ldr	r3, [pc, #220]	; (80020dc <HAL_TIM_MspPostInit+0x1a4>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Czlon4PWM_Pin|Czlon5PWM_Pin;
 800200a:	23c0      	movs	r3, #192	; 0xc0
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800201a:	2302      	movs	r3, #2
 800201c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002022:	4619      	mov	r1, r3
 8002024:	482f      	ldr	r0, [pc, #188]	; (80020e4 <HAL_TIM_MspPostInit+0x1ac>)
 8002026:	f000 fa6d 	bl	8002504 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R_PWM_Pin;
 800202a:	2301      	movs	r3, #1
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2300      	movs	r3, #0
 8002038:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800203a:	2302      	movs	r3, #2
 800203c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(R_PWM_GPIO_Port, &GPIO_InitStruct);
 800203e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002042:	4619      	mov	r1, r3
 8002044:	4826      	ldr	r0, [pc, #152]	; (80020e0 <HAL_TIM_MspPostInit+0x1a8>)
 8002046:	f000 fa5d 	bl	8002504 <HAL_GPIO_Init>
}
 800204a:	e043      	b.n	80020d4 <HAL_TIM_MspPostInit+0x19c>
  else if(timHandle->Instance==TIM4)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a26      	ldr	r2, [pc, #152]	; (80020ec <HAL_TIM_MspPostInit+0x1b4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d11d      	bne.n	8002092 <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002056:	4b21      	ldr	r3, [pc, #132]	; (80020dc <HAL_TIM_MspPostInit+0x1a4>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4a20      	ldr	r2, [pc, #128]	; (80020dc <HAL_TIM_MspPostInit+0x1a4>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	61d3      	str	r3, [r2, #28]
 8002062:	4b1e      	ldr	r3, [pc, #120]	; (80020dc <HAL_TIM_MspPostInit+0x1a4>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PodstawaPWM_Pin|Czlon1PWM_Pin|Czlon2PWM_Pin|Czlon3PWM_Pin;
 800206e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002080:	2302      	movs	r3, #2
 8002082:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002088:	4619      	mov	r1, r3
 800208a:	4815      	ldr	r0, [pc, #84]	; (80020e0 <HAL_TIM_MspPostInit+0x1a8>)
 800208c:	f000 fa3a 	bl	8002504 <HAL_GPIO_Init>
}
 8002090:	e020      	b.n	80020d4 <HAL_TIM_MspPostInit+0x19c>
  else if(timHandle->Instance==TIM5)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a16      	ldr	r2, [pc, #88]	; (80020f0 <HAL_TIM_MspPostInit+0x1b8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d11b      	bne.n	80020d4 <HAL_TIM_MspPostInit+0x19c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <HAL_TIM_MspPostInit+0x1a4>)
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <HAL_TIM_MspPostInit+0x1a4>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	61d3      	str	r3, [r2, #28]
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <HAL_TIM_MspPostInit+0x1a4>)
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = L_PWM_Pin;
 80020b4:	2302      	movs	r3, #2
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020c4:	2302      	movs	r3, #2
 80020c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(L_PWM_GPIO_Port, &GPIO_InitStruct);
 80020c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020cc:	4619      	mov	r1, r3
 80020ce:	4805      	ldr	r0, [pc, #20]	; (80020e4 <HAL_TIM_MspPostInit+0x1ac>)
 80020d0:	f000 fa18 	bl	8002504 <HAL_GPIO_Init>
}
 80020d4:	bf00      	nop
 80020d6:	3738      	adds	r7, #56	; 0x38
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020400 	.word	0x40020400
 80020e4:	40020000 	.word	0x40020000
 80020e8:	40000400 	.word	0x40000400
 80020ec:	40000800 	.word	0x40000800
 80020f0:	40000c00 	.word	0x40000c00

080020f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 80020fa:	4a12      	ldr	r2, [pc, #72]	; (8002144 <MX_USART2_UART_Init+0x50>)
 80020fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 8002100:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002104:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 800210e:	2200      	movs	r2, #0
 8002110:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 800211a:	220c      	movs	r2, #12
 800211c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800212a:	4805      	ldr	r0, [pc, #20]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 800212c:	f002 fc72 	bl	8004a14 <HAL_UART_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002136:	f7ff f85d 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200001bc 	.word	0x200001bc
 8002144:	40004400 	.word	0x40004400

08002148 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a17      	ldr	r2, [pc, #92]	; (80021c4 <HAL_UART_MspInit+0x7c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d127      	bne.n	80021ba <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800216a:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <HAL_UART_MspInit+0x80>)
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	4a16      	ldr	r2, [pc, #88]	; (80021c8 <HAL_UART_MspInit+0x80>)
 8002170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002174:	6253      	str	r3, [r2, #36]	; 0x24
 8002176:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <HAL_UART_MspInit+0x80>)
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <HAL_UART_MspInit+0x80>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	4a10      	ldr	r2, [pc, #64]	; (80021c8 <HAL_UART_MspInit+0x80>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	61d3      	str	r3, [r2, #28]
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <HAL_UART_MspInit+0x80>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800219a:	230c      	movs	r3, #12
 800219c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a6:	2303      	movs	r3, #3
 80021a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021aa:	2307      	movs	r3, #7
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	4619      	mov	r1, r3
 80021b4:	4805      	ldr	r0, [pc, #20]	; (80021cc <HAL_UART_MspInit+0x84>)
 80021b6:	f000 f9a5 	bl	8002504 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021ba:	bf00      	nop
 80021bc:	3728      	adds	r7, #40	; 0x28
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40004400 	.word	0x40004400
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40020000 	.word	0x40020000

080021d0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80021d0:	f7ff fc43 	bl	8001a5a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021d4:	480b      	ldr	r0, [pc, #44]	; (8002204 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80021d6:	490c      	ldr	r1, [pc, #48]	; (8002208 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80021d8:	4a0c      	ldr	r2, [pc, #48]	; (800220c <LoopFillZerobss+0x16>)
  movs r3, #0
 80021da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021dc:	e002      	b.n	80021e4 <LoopCopyDataInit>

080021de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021e2:	3304      	adds	r3, #4

080021e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e8:	d3f9      	bcc.n	80021de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ea:	4a09      	ldr	r2, [pc, #36]	; (8002210 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80021ec:	4c09      	ldr	r4, [pc, #36]	; (8002214 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f0:	e001      	b.n	80021f6 <LoopFillZerobss>

080021f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f4:	3204      	adds	r2, #4

080021f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f8:	d3fb      	bcc.n	80021f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021fa:	f002 fec3 	bl	8004f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021fe:	f7fe fba1 	bl	8000944 <main>
  bx lr
 8002202:	4770      	bx	lr
  ldr r0, =_sdata
 8002204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002208:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800220c:	08005030 	.word	0x08005030
  ldr r2, =_sbss
 8002210:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002214:	20000208 	.word	0x20000208

08002218 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002218:	e7fe      	b.n	8002218 <ADC1_IRQHandler>

0800221a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002224:	2003      	movs	r0, #3
 8002226:	f000 f939 	bl	800249c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800222a:	2000      	movs	r0, #0
 800222c:	f000 f80e 	bl	800224c <HAL_InitTick>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	71fb      	strb	r3, [r7, #7]
 800223a:	e001      	b.n	8002240 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800223c:	f7ff fbb6 	bl	80019ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002240:	79fb      	ldrb	r3, [r7, #7]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002258:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <HAL_InitTick+0x68>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d022      	beq.n	80022a6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002260:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <HAL_InitTick+0x6c>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <HAL_InitTick+0x68>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800226c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002270:	fbb2 f3f3 	udiv	r3, r2, r3
 8002274:	4618      	mov	r0, r3
 8002276:	f000 f938 	bl	80024ea <HAL_SYSTICK_Config>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10f      	bne.n	80022a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b0f      	cmp	r3, #15
 8002284:	d809      	bhi.n	800229a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002286:	2200      	movs	r2, #0
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	f04f 30ff 	mov.w	r0, #4294967295
 800228e:	f000 f910 	bl	80024b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002292:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <HAL_InitTick+0x70>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	e007      	b.n	80022aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
 800229e:	e004      	b.n	80022aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
 80022a4:	e001      	b.n	80022aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000010 	.word	0x20000010
 80022b8:	20000008 	.word	0x20000008
 80022bc:	2000000c 	.word	0x2000000c

080022c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_IncTick+0x1c>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_IncTick+0x20>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	4a03      	ldr	r2, [pc, #12]	; (80022dc <HAL_IncTick+0x1c>)
 80022d0:	6013      	str	r3, [r2, #0]
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000204 	.word	0x20000204
 80022e0:	20000010 	.word	0x20000010

080022e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return uwTick;
 80022e8:	4b02      	ldr	r3, [pc, #8]	; (80022f4 <HAL_GetTick+0x10>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	20000204 	.word	0x20000204

080022f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002300:	f7ff fff0 	bl	80022e4 <HAL_GetTick>
 8002304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002310:	d004      	beq.n	800231c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <HAL_Delay+0x40>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4413      	add	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800231c:	bf00      	nop
 800231e:	f7ff ffe1 	bl	80022e4 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	429a      	cmp	r2, r3
 800232c:	d8f7      	bhi.n	800231e <HAL_Delay+0x26>
  {
  }
}
 800232e:	bf00      	nop
 8002330:	bf00      	nop
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000010 	.word	0x20000010

0800233c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <__NVIC_SetPriorityGrouping+0x44>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002358:	4013      	ands	r3, r2
 800235a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236e:	4a04      	ldr	r2, [pc, #16]	; (8002380 <__NVIC_SetPriorityGrouping+0x44>)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	60d3      	str	r3, [r2, #12]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <__NVIC_GetPriorityGrouping+0x18>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	f003 0307 	and.w	r3, r3, #7
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	db0a      	blt.n	80023ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	490c      	ldr	r1, [pc, #48]	; (80023ec <__NVIC_SetPriority+0x4c>)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	0112      	lsls	r2, r2, #4
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	440b      	add	r3, r1
 80023c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c8:	e00a      	b.n	80023e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4908      	ldr	r1, [pc, #32]	; (80023f0 <__NVIC_SetPriority+0x50>)
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	3b04      	subs	r3, #4
 80023d8:	0112      	lsls	r2, r2, #4
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	440b      	add	r3, r1
 80023de:	761a      	strb	r2, [r3, #24]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000e100 	.word	0xe000e100
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f1c3 0307 	rsb	r3, r3, #7
 800240e:	2b04      	cmp	r3, #4
 8002410:	bf28      	it	cs
 8002412:	2304      	movcs	r3, #4
 8002414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3304      	adds	r3, #4
 800241a:	2b06      	cmp	r3, #6
 800241c:	d902      	bls.n	8002424 <NVIC_EncodePriority+0x30>
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3b03      	subs	r3, #3
 8002422:	e000      	b.n	8002426 <NVIC_EncodePriority+0x32>
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002428:	f04f 32ff 	mov.w	r2, #4294967295
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43da      	mvns	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	401a      	ands	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800243c:	f04f 31ff 	mov.w	r1, #4294967295
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	43d9      	mvns	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244c:	4313      	orrs	r3, r2
         );
}
 800244e:	4618      	mov	r0, r3
 8002450:	3724      	adds	r7, #36	; 0x24
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002468:	d301      	bcc.n	800246e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800246a:	2301      	movs	r3, #1
 800246c:	e00f      	b.n	800248e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <SysTick_Config+0x40>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002476:	210f      	movs	r1, #15
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	f7ff ff90 	bl	80023a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <SysTick_Config+0x40>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002486:	4b04      	ldr	r3, [pc, #16]	; (8002498 <SysTick_Config+0x40>)
 8002488:	2207      	movs	r2, #7
 800248a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	e000e010 	.word	0xe000e010

0800249c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ff49 	bl	800233c <__NVIC_SetPriorityGrouping>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024c4:	f7ff ff5e 	bl	8002384 <__NVIC_GetPriorityGrouping>
 80024c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	6978      	ldr	r0, [r7, #20]
 80024d0:	f7ff ff90 	bl	80023f4 <NVIC_EncodePriority>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff5f 	bl	80023a0 <__NVIC_SetPriority>
}
 80024e2:	bf00      	nop
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff ffb0 	bl	8002458 <SysTick_Config>
 80024f8:	4603      	mov	r3, r0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002504:	b480      	push	{r7}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002512:	2300      	movs	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002516:	2300      	movs	r3, #0
 8002518:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800251a:	e160      	b.n	80027de <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	2101      	movs	r1, #1
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	fa01 f303 	lsl.w	r3, r1, r3
 8002528:	4013      	ands	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 8152 	beq.w	80027d8 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b01      	cmp	r3, #1
 800253e:	d005      	beq.n	800254c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002548:	2b02      	cmp	r3, #2
 800254a:	d130      	bne.n	80025ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002582:	2201      	movs	r2, #1
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4013      	ands	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	f003 0201 	and.w	r2, r3, #1
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d017      	beq.n	80025ea <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	2203      	movs	r2, #3
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4013      	ands	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d123      	bne.n	800263e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	08da      	lsrs	r2, r3, #3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3208      	adds	r2, #8
 80025fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002602:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	220f      	movs	r2, #15
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	08da      	lsrs	r2, r3, #3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3208      	adds	r2, #8
 8002638:	6939      	ldr	r1, [r7, #16]
 800263a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	2203      	movs	r2, #3
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 0203 	and.w	r2, r3, #3
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 80ac 	beq.w	80027d8 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002680:	4b5e      	ldr	r3, [pc, #376]	; (80027fc <HAL_GPIO_Init+0x2f8>)
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	4a5d      	ldr	r2, [pc, #372]	; (80027fc <HAL_GPIO_Init+0x2f8>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	6213      	str	r3, [r2, #32]
 800268c:	4b5b      	ldr	r3, [pc, #364]	; (80027fc <HAL_GPIO_Init+0x2f8>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002698:	4a59      	ldr	r2, [pc, #356]	; (8002800 <HAL_GPIO_Init+0x2fc>)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	089b      	lsrs	r3, r3, #2
 800269e:	3302      	adds	r3, #2
 80026a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	220f      	movs	r2, #15
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4013      	ands	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a51      	ldr	r2, [pc, #324]	; (8002804 <HAL_GPIO_Init+0x300>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d025      	beq.n	8002710 <HAL_GPIO_Init+0x20c>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a50      	ldr	r2, [pc, #320]	; (8002808 <HAL_GPIO_Init+0x304>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d01f      	beq.n	800270c <HAL_GPIO_Init+0x208>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a4f      	ldr	r2, [pc, #316]	; (800280c <HAL_GPIO_Init+0x308>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d019      	beq.n	8002708 <HAL_GPIO_Init+0x204>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a4e      	ldr	r2, [pc, #312]	; (8002810 <HAL_GPIO_Init+0x30c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d013      	beq.n	8002704 <HAL_GPIO_Init+0x200>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a4d      	ldr	r2, [pc, #308]	; (8002814 <HAL_GPIO_Init+0x310>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d00d      	beq.n	8002700 <HAL_GPIO_Init+0x1fc>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a4c      	ldr	r2, [pc, #304]	; (8002818 <HAL_GPIO_Init+0x314>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d007      	beq.n	80026fc <HAL_GPIO_Init+0x1f8>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a4b      	ldr	r2, [pc, #300]	; (800281c <HAL_GPIO_Init+0x318>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d101      	bne.n	80026f8 <HAL_GPIO_Init+0x1f4>
 80026f4:	2306      	movs	r3, #6
 80026f6:	e00c      	b.n	8002712 <HAL_GPIO_Init+0x20e>
 80026f8:	2307      	movs	r3, #7
 80026fa:	e00a      	b.n	8002712 <HAL_GPIO_Init+0x20e>
 80026fc:	2305      	movs	r3, #5
 80026fe:	e008      	b.n	8002712 <HAL_GPIO_Init+0x20e>
 8002700:	2304      	movs	r3, #4
 8002702:	e006      	b.n	8002712 <HAL_GPIO_Init+0x20e>
 8002704:	2303      	movs	r3, #3
 8002706:	e004      	b.n	8002712 <HAL_GPIO_Init+0x20e>
 8002708:	2302      	movs	r3, #2
 800270a:	e002      	b.n	8002712 <HAL_GPIO_Init+0x20e>
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <HAL_GPIO_Init+0x20e>
 8002710:	2300      	movs	r3, #0
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	f002 0203 	and.w	r2, r2, #3
 8002718:	0092      	lsls	r2, r2, #2
 800271a:	4093      	lsls	r3, r2
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002722:	4937      	ldr	r1, [pc, #220]	; (8002800 <HAL_GPIO_Init+0x2fc>)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	089b      	lsrs	r3, r3, #2
 8002728:	3302      	adds	r3, #2
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002730:	4b3b      	ldr	r3, [pc, #236]	; (8002820 <HAL_GPIO_Init+0x31c>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	43db      	mvns	r3, r3
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002754:	4a32      	ldr	r2, [pc, #200]	; (8002820 <HAL_GPIO_Init+0x31c>)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800275a:	4b31      	ldr	r3, [pc, #196]	; (8002820 <HAL_GPIO_Init+0x31c>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	43db      	mvns	r3, r3
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4013      	ands	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800277e:	4a28      	ldr	r2, [pc, #160]	; (8002820 <HAL_GPIO_Init+0x31c>)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002784:	4b26      	ldr	r3, [pc, #152]	; (8002820 <HAL_GPIO_Init+0x31c>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	43db      	mvns	r3, r3
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027a8:	4a1d      	ldr	r2, [pc, #116]	; (8002820 <HAL_GPIO_Init+0x31c>)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ae:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <HAL_GPIO_Init+0x31c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027d2:	4a13      	ldr	r2, [pc, #76]	; (8002820 <HAL_GPIO_Init+0x31c>)
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	3301      	adds	r3, #1
 80027dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f47f ae97 	bne.w	800251c <HAL_GPIO_Init+0x18>
  }
}
 80027ee:	bf00      	nop
 80027f0:	bf00      	nop
 80027f2:	371c      	adds	r7, #28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40023800 	.word	0x40023800
 8002800:	40010000 	.word	0x40010000
 8002804:	40020000 	.word	0x40020000
 8002808:	40020400 	.word	0x40020400
 800280c:	40020800 	.word	0x40020800
 8002810:	40020c00 	.word	0x40020c00
 8002814:	40021000 	.word	0x40021000
 8002818:	40021400 	.word	0x40021400
 800281c:	40021800 	.word	0x40021800
 8002820:	40010400 	.word	0x40010400

08002824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	807b      	strh	r3, [r7, #2]
 8002830:	4613      	mov	r3, r2
 8002832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002834:	787b      	ldrb	r3, [r7, #1]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002840:	e003      	b.n	800284a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002842:	887b      	ldrh	r3, [r7, #2]
 8002844:	041a      	lsls	r2, r3, #16
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	619a      	str	r2, [r3, #24]
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e31d      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002866:	4b94      	ldr	r3, [pc, #592]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002870:	4b91      	ldr	r3, [pc, #580]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002878:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d07b      	beq.n	800297e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b08      	cmp	r3, #8
 800288a:	d006      	beq.n	800289a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2b0c      	cmp	r3, #12
 8002890:	d10f      	bne.n	80028b2 <HAL_RCC_OscConfig+0x5e>
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002898:	d10b      	bne.n	80028b2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289a:	4b87      	ldr	r3, [pc, #540]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d06a      	beq.n	800297c <HAL_RCC_OscConfig+0x128>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d166      	bne.n	800297c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e2f7      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d106      	bne.n	80028c8 <HAL_RCC_OscConfig+0x74>
 80028ba:	4b7f      	ldr	r3, [pc, #508]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a7e      	ldr	r2, [pc, #504]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	e02d      	b.n	8002924 <HAL_RCC_OscConfig+0xd0>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10c      	bne.n	80028ea <HAL_RCC_OscConfig+0x96>
 80028d0:	4b79      	ldr	r3, [pc, #484]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a78      	ldr	r2, [pc, #480]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80028d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	4b76      	ldr	r3, [pc, #472]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a75      	ldr	r2, [pc, #468]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80028e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	e01c      	b.n	8002924 <HAL_RCC_OscConfig+0xd0>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b05      	cmp	r3, #5
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0xb8>
 80028f2:	4b71      	ldr	r3, [pc, #452]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a70      	ldr	r2, [pc, #448]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80028f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b6e      	ldr	r3, [pc, #440]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a6d      	ldr	r2, [pc, #436]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0xd0>
 800290c:	4b6a      	ldr	r3, [pc, #424]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a69      	ldr	r2, [pc, #420]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b67      	ldr	r3, [pc, #412]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a66      	ldr	r2, [pc, #408]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 800291e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7ff fcda 	bl	80022e4 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002934:	f7ff fcd6 	bl	80022e4 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e2ad      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002946:	4b5c      	ldr	r3, [pc, #368]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0xe0>
 8002952:	e014      	b.n	800297e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7ff fcc6 	bl	80022e4 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800295c:	f7ff fcc2 	bl	80022e4 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e299      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800296e:	4b52      	ldr	r3, [pc, #328]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x108>
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d05a      	beq.n	8002a40 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	2b04      	cmp	r3, #4
 800298e:	d005      	beq.n	800299c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2b0c      	cmp	r3, #12
 8002994:	d119      	bne.n	80029ca <HAL_RCC_OscConfig+0x176>
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d116      	bne.n	80029ca <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299c:	4b46      	ldr	r3, [pc, #280]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_OscConfig+0x160>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e276      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b4:	4b40      	ldr	r3, [pc, #256]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	493d      	ldr	r1, [pc, #244]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c8:	e03a      	b.n	8002a40 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d020      	beq.n	8002a14 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d2:	4b3a      	ldr	r3, [pc, #232]	; (8002abc <HAL_RCC_OscConfig+0x268>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7ff fc84 	bl	80022e4 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e0:	f7ff fc80 	bl	80022e4 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e257      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029f2:	4b31      	ldr	r3, [pc, #196]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fe:	4b2e      	ldr	r3, [pc, #184]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	492a      	ldr	r1, [pc, #168]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	604b      	str	r3, [r1, #4]
 8002a12:	e015      	b.n	8002a40 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a14:	4b29      	ldr	r3, [pc, #164]	; (8002abc <HAL_RCC_OscConfig+0x268>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7ff fc63 	bl	80022e4 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a22:	f7ff fc5f 	bl	80022e4 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e236      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a34:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f0      	bne.n	8002a22 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80b8 	beq.w	8002bbe <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d170      	bne.n	8002b36 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a54:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_OscConfig+0x218>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e21a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1a      	ldr	r2, [r3, #32]
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d921      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fc7d 	bl	8003380 <RCC_SetFlashLatencyFromMSIRange>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e208      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a90:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	4906      	ldr	r1, [pc, #24]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	061b      	lsls	r3, r3, #24
 8002ab0:	4901      	ldr	r1, [pc, #4]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	604b      	str	r3, [r1, #4]
 8002ab6:	e020      	b.n	8002afa <HAL_RCC_OscConfig+0x2a6>
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ac0:	4b99      	ldr	r3, [pc, #612]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4996      	ldr	r1, [pc, #600]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ad2:	4b95      	ldr	r3, [pc, #596]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	061b      	lsls	r3, r3, #24
 8002ae0:	4991      	ldr	r1, [pc, #580]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fc48 	bl	8003380 <RCC_SetFlashLatencyFromMSIRange>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e1d3      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	0b5b      	lsrs	r3, r3, #13
 8002b00:	3301      	adds	r3, #1
 8002b02:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002b0a:	4a87      	ldr	r2, [pc, #540]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002b0c:	6892      	ldr	r2, [r2, #8]
 8002b0e:	0912      	lsrs	r2, r2, #4
 8002b10:	f002 020f 	and.w	r2, r2, #15
 8002b14:	4985      	ldr	r1, [pc, #532]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002b16:	5c8a      	ldrb	r2, [r1, r2]
 8002b18:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b1a:	4a85      	ldr	r2, [pc, #532]	; (8002d30 <HAL_RCC_OscConfig+0x4dc>)
 8002b1c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b1e:	4b85      	ldr	r3, [pc, #532]	; (8002d34 <HAL_RCC_OscConfig+0x4e0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fb92 	bl	800224c <HAL_InitTick>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d045      	beq.n	8002bbe <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	e1b5      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d029      	beq.n	8002b92 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b3e:	4b7e      	ldr	r3, [pc, #504]	; (8002d38 <HAL_RCC_OscConfig+0x4e4>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7ff fbce 	bl	80022e4 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b4c:	f7ff fbca 	bl	80022e4 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e1a1      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b5e:	4b72      	ldr	r3, [pc, #456]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b6a:	4b6f      	ldr	r3, [pc, #444]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	496c      	ldr	r1, [pc, #432]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b7c:	4b6a      	ldr	r3, [pc, #424]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	061b      	lsls	r3, r3, #24
 8002b8a:	4967      	ldr	r1, [pc, #412]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]
 8002b90:	e015      	b.n	8002bbe <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b92:	4b69      	ldr	r3, [pc, #420]	; (8002d38 <HAL_RCC_OscConfig+0x4e4>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7ff fba4 	bl	80022e4 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ba0:	f7ff fba0 	bl	80022e4 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e177      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002bb2:	4b5d      	ldr	r3, [pc, #372]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d030      	beq.n	8002c2c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d016      	beq.n	8002c00 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd2:	4b5a      	ldr	r3, [pc, #360]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd8:	f7ff fb84 	bl	80022e4 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be0:	f7ff fb80 	bl	80022e4 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e157      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bf2:	4b4d      	ldr	r3, [pc, #308]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0x38c>
 8002bfe:	e015      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c00:	4b4e      	ldr	r3, [pc, #312]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c06:	f7ff fb6d 	bl	80022e4 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c0e:	f7ff fb69 	bl	80022e4 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e140      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c20:	4b41      	ldr	r3, [pc, #260]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f0      	bne.n	8002c0e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80b5 	beq.w	8002da4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3e:	4b3a      	ldr	r3, [pc, #232]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10d      	bne.n	8002c66 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4a:	4b37      	ldr	r3, [pc, #220]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	4a36      	ldr	r2, [pc, #216]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c54:	6253      	str	r3, [r2, #36]	; 0x24
 8002c56:	4b34      	ldr	r3, [pc, #208]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c62:	2301      	movs	r3, #1
 8002c64:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c66:	4b36      	ldr	r3, [pc, #216]	; (8002d40 <HAL_RCC_OscConfig+0x4ec>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d118      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c72:	4b33      	ldr	r3, [pc, #204]	; (8002d40 <HAL_RCC_OscConfig+0x4ec>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a32      	ldr	r2, [pc, #200]	; (8002d40 <HAL_RCC_OscConfig+0x4ec>)
 8002c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7e:	f7ff fb31 	bl	80022e4 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c86:	f7ff fb2d 	bl	80022e4 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b64      	cmp	r3, #100	; 0x64
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e104      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	4b29      	ldr	r3, [pc, #164]	; (8002d40 <HAL_RCC_OscConfig+0x4ec>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d106      	bne.n	8002cba <HAL_RCC_OscConfig+0x466>
 8002cac:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb0:	4a1d      	ldr	r2, [pc, #116]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb6:	6353      	str	r3, [r2, #52]	; 0x34
 8002cb8:	e02d      	b.n	8002d16 <HAL_RCC_OscConfig+0x4c2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x488>
 8002cc2:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc6:	4a18      	ldr	r2, [pc, #96]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ccc:	6353      	str	r3, [r2, #52]	; 0x34
 8002cce:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd2:	4a15      	ldr	r2, [pc, #84]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002cd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cd8:	6353      	str	r3, [r2, #52]	; 0x34
 8002cda:	e01c      	b.n	8002d16 <HAL_RCC_OscConfig+0x4c2>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b05      	cmp	r3, #5
 8002ce2:	d10c      	bne.n	8002cfe <HAL_RCC_OscConfig+0x4aa>
 8002ce4:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce8:	4a0f      	ldr	r2, [pc, #60]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cee:	6353      	str	r3, [r2, #52]	; 0x34
 8002cf0:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf4:	4a0c      	ldr	r2, [pc, #48]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfa:	6353      	str	r3, [r2, #52]	; 0x34
 8002cfc:	e00b      	b.n	8002d16 <HAL_RCC_OscConfig+0x4c2>
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d02:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d08:	6353      	str	r3, [r2, #52]	; 0x34
 8002d0a:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0e:	4a06      	ldr	r2, [pc, #24]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002d10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d14:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d024      	beq.n	8002d68 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1e:	f7ff fae1 	bl	80022e4 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d24:	e019      	b.n	8002d5a <HAL_RCC_OscConfig+0x506>
 8002d26:	bf00      	nop
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	08005008 	.word	0x08005008
 8002d30:	20000008 	.word	0x20000008
 8002d34:	2000000c 	.word	0x2000000c
 8002d38:	42470020 	.word	0x42470020
 8002d3c:	42470680 	.word	0x42470680
 8002d40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d44:	f7ff face 	bl	80022e4 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e0a3      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d5a:	4b54      	ldr	r3, [pc, #336]	; (8002eac <HAL_RCC_OscConfig+0x658>)
 8002d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0ee      	beq.n	8002d44 <HAL_RCC_OscConfig+0x4f0>
 8002d66:	e014      	b.n	8002d92 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d68:	f7ff fabc 	bl	80022e4 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d6e:	e00a      	b.n	8002d86 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d70:	f7ff fab8 	bl	80022e4 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e08d      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d86:	4b49      	ldr	r3, [pc, #292]	; (8002eac <HAL_RCC_OscConfig+0x658>)
 8002d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1ee      	bne.n	8002d70 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d92:	7ffb      	ldrb	r3, [r7, #31]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d105      	bne.n	8002da4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d98:	4b44      	ldr	r3, [pc, #272]	; (8002eac <HAL_RCC_OscConfig+0x658>)
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	4a43      	ldr	r2, [pc, #268]	; (8002eac <HAL_RCC_OscConfig+0x658>)
 8002d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d079      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b0c      	cmp	r3, #12
 8002db0:	d056      	beq.n	8002e60 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d13b      	bne.n	8002e32 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dba:	4b3d      	ldr	r3, [pc, #244]	; (8002eb0 <HAL_RCC_OscConfig+0x65c>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7ff fa90 	bl	80022e4 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7ff fa8c 	bl	80022e4 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e063      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dda:	4b34      	ldr	r3, [pc, #208]	; (8002eac <HAL_RCC_OscConfig+0x658>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de6:	4b31      	ldr	r3, [pc, #196]	; (8002eac <HAL_RCC_OscConfig+0x658>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	4319      	orrs	r1, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	492b      	ldr	r1, [pc, #172]	; (8002eac <HAL_RCC_OscConfig+0x658>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e04:	4b2a      	ldr	r3, [pc, #168]	; (8002eb0 <HAL_RCC_OscConfig+0x65c>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7ff fa6b 	bl	80022e4 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e12:	f7ff fa67 	bl	80022e4 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e03e      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e24:	4b21      	ldr	r3, [pc, #132]	; (8002eac <HAL_RCC_OscConfig+0x658>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x5be>
 8002e30:	e036      	b.n	8002ea0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e32:	4b1f      	ldr	r3, [pc, #124]	; (8002eb0 <HAL_RCC_OscConfig+0x65c>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7ff fa54 	bl	80022e4 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e40:	f7ff fa50 	bl	80022e4 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e027      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e52:	4b16      	ldr	r3, [pc, #88]	; (8002eac <HAL_RCC_OscConfig+0x658>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x5ec>
 8002e5e:	e01f      	b.n	8002ea0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e01a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <HAL_RCC_OscConfig+0x658>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d10d      	bne.n	8002e9c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d106      	bne.n	8002e9c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3720      	adds	r7, #32
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	42470060 	.word	0x42470060

08002eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e11a      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b8f      	ldr	r3, [pc, #572]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d919      	bls.n	8002f0a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d105      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x34>
 8002edc:	4b8a      	ldr	r3, [pc, #552]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a89      	ldr	r2, [pc, #548]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 8002ee2:	f043 0304 	orr.w	r3, r3, #4
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	4b87      	ldr	r3, [pc, #540]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f023 0201 	bic.w	r2, r3, #1
 8002ef0:	4985      	ldr	r1, [pc, #532]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef8:	4b83      	ldr	r3, [pc, #524]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d001      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e0f9      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f16:	4b7d      	ldr	r3, [pc, #500]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	497a      	ldr	r1, [pc, #488]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 808e 	beq.w	8003052 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f3e:	4b73      	ldr	r3, [pc, #460]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d121      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e0d7      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f56:	4b6d      	ldr	r3, [pc, #436]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d115      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e0cb      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f6e:	4b67      	ldr	r3, [pc, #412]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e0bf      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f7e:	4b63      	ldr	r3, [pc, #396]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e0b7      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f8e:	4b5f      	ldr	r3, [pc, #380]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f023 0203 	bic.w	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	495c      	ldr	r1, [pc, #368]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa0:	f7ff f9a0 	bl	80022e4 <HAL_GetTick>
 8002fa4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d112      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fae:	e00a      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb0:	f7ff f998 	bl	80022e4 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e09b      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fc6:	4b51      	ldr	r3, [pc, #324]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d1ee      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xfc>
 8002fd2:	e03e      	b.n	8003052 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d112      	bne.n	8003002 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fde:	f7ff f981 	bl	80022e4 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e084      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ff4:	4b45      	ldr	r3, [pc, #276]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 030c 	and.w	r3, r3, #12
 8002ffc:	2b0c      	cmp	r3, #12
 8002ffe:	d1ee      	bne.n	8002fde <HAL_RCC_ClockConfig+0x12a>
 8003000:	e027      	b.n	8003052 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d11d      	bne.n	8003046 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800300a:	e00a      	b.n	8003022 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300c:	f7ff f96a 	bl	80022e4 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	; 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e06d      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003022:	4b3a      	ldr	r3, [pc, #232]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	2b04      	cmp	r3, #4
 800302c:	d1ee      	bne.n	800300c <HAL_RCC_ClockConfig+0x158>
 800302e:	e010      	b.n	8003052 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003030:	f7ff f958 	bl	80022e4 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	; 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e05b      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003046:	4b31      	ldr	r3, [pc, #196]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1ee      	bne.n	8003030 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003052:	4b2d      	ldr	r3, [pc, #180]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d219      	bcs.n	8003094 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d105      	bne.n	8003072 <HAL_RCC_ClockConfig+0x1be>
 8003066:	4b28      	ldr	r3, [pc, #160]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a27      	ldr	r2, [pc, #156]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 800306c:	f043 0304 	orr.w	r3, r3, #4
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	4b25      	ldr	r3, [pc, #148]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 0201 	bic.w	r2, r3, #1
 800307a:	4923      	ldr	r1, [pc, #140]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	4313      	orrs	r3, r2
 8003080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	4b21      	ldr	r3, [pc, #132]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e034      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a0:	4b1a      	ldr	r3, [pc, #104]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4917      	ldr	r1, [pc, #92]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d009      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030be:	4b13      	ldr	r3, [pc, #76]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	490f      	ldr	r1, [pc, #60]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030d2:	f000 f823 	bl	800311c <HAL_RCC_GetSysClockFreq>
 80030d6:	4602      	mov	r2, r0
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	490b      	ldr	r1, [pc, #44]	; (8003110 <HAL_RCC_ClockConfig+0x25c>)
 80030e4:	5ccb      	ldrb	r3, [r1, r3]
 80030e6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ea:	4a0a      	ldr	r2, [pc, #40]	; (8003114 <HAL_RCC_ClockConfig+0x260>)
 80030ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <HAL_RCC_ClockConfig+0x264>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff f8aa 	bl	800224c <HAL_InitTick>
 80030f8:	4603      	mov	r3, r0
 80030fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80030fc:	7afb      	ldrb	r3, [r7, #11]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40023c00 	.word	0x40023c00
 800310c:	40023800 	.word	0x40023800
 8003110:	08005008 	.word	0x08005008
 8003114:	20000008 	.word	0x20000008
 8003118:	2000000c 	.word	0x2000000c

0800311c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800311c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003120:	b092      	sub	sp, #72	; 0x48
 8003122:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003124:	4b79      	ldr	r3, [pc, #484]	; (800330c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800312a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800312c:	f003 030c 	and.w	r3, r3, #12
 8003130:	2b0c      	cmp	r3, #12
 8003132:	d00d      	beq.n	8003150 <HAL_RCC_GetSysClockFreq+0x34>
 8003134:	2b0c      	cmp	r3, #12
 8003136:	f200 80d5 	bhi.w	80032e4 <HAL_RCC_GetSysClockFreq+0x1c8>
 800313a:	2b04      	cmp	r3, #4
 800313c:	d002      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x28>
 800313e:	2b08      	cmp	r3, #8
 8003140:	d003      	beq.n	800314a <HAL_RCC_GetSysClockFreq+0x2e>
 8003142:	e0cf      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003144:	4b72      	ldr	r3, [pc, #456]	; (8003310 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003146:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003148:	e0da      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800314a:	4b72      	ldr	r3, [pc, #456]	; (8003314 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800314c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800314e:	e0d7      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003152:	0c9b      	lsrs	r3, r3, #18
 8003154:	f003 020f 	and.w	r2, r3, #15
 8003158:	4b6f      	ldr	r3, [pc, #444]	; (8003318 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800315a:	5c9b      	ldrb	r3, [r3, r2]
 800315c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800315e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003160:	0d9b      	lsrs	r3, r3, #22
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	3301      	adds	r3, #1
 8003168:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800316a:	4b68      	ldr	r3, [pc, #416]	; (800330c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d05d      	beq.n	8003232 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003178:	2200      	movs	r2, #0
 800317a:	4618      	mov	r0, r3
 800317c:	4611      	mov	r1, r2
 800317e:	4604      	mov	r4, r0
 8003180:	460d      	mov	r5, r1
 8003182:	4622      	mov	r2, r4
 8003184:	462b      	mov	r3, r5
 8003186:	f04f 0000 	mov.w	r0, #0
 800318a:	f04f 0100 	mov.w	r1, #0
 800318e:	0159      	lsls	r1, r3, #5
 8003190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003194:	0150      	lsls	r0, r2, #5
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4621      	mov	r1, r4
 800319c:	1a51      	subs	r1, r2, r1
 800319e:	6139      	str	r1, [r7, #16]
 80031a0:	4629      	mov	r1, r5
 80031a2:	eb63 0301 	sbc.w	r3, r3, r1
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031b4:	4659      	mov	r1, fp
 80031b6:	018b      	lsls	r3, r1, #6
 80031b8:	4651      	mov	r1, sl
 80031ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031be:	4651      	mov	r1, sl
 80031c0:	018a      	lsls	r2, r1, #6
 80031c2:	46d4      	mov	ip, sl
 80031c4:	ebb2 080c 	subs.w	r8, r2, ip
 80031c8:	4659      	mov	r1, fp
 80031ca:	eb63 0901 	sbc.w	r9, r3, r1
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031e2:	4690      	mov	r8, r2
 80031e4:	4699      	mov	r9, r3
 80031e6:	4623      	mov	r3, r4
 80031e8:	eb18 0303 	adds.w	r3, r8, r3
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	462b      	mov	r3, r5
 80031f0:	eb49 0303 	adc.w	r3, r9, r3
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003202:	4629      	mov	r1, r5
 8003204:	024b      	lsls	r3, r1, #9
 8003206:	4620      	mov	r0, r4
 8003208:	4629      	mov	r1, r5
 800320a:	4604      	mov	r4, r0
 800320c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003210:	4601      	mov	r1, r0
 8003212:	024a      	lsls	r2, r1, #9
 8003214:	4610      	mov	r0, r2
 8003216:	4619      	mov	r1, r3
 8003218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321a:	2200      	movs	r2, #0
 800321c:	62bb      	str	r3, [r7, #40]	; 0x28
 800321e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003220:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003224:	f7fd f954 	bl	80004d0 <__aeabi_uldivmod>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4613      	mov	r3, r2
 800322e:	647b      	str	r3, [r7, #68]	; 0x44
 8003230:	e055      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003234:	2200      	movs	r2, #0
 8003236:	623b      	str	r3, [r7, #32]
 8003238:	627a      	str	r2, [r7, #36]	; 0x24
 800323a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800323e:	4642      	mov	r2, r8
 8003240:	464b      	mov	r3, r9
 8003242:	f04f 0000 	mov.w	r0, #0
 8003246:	f04f 0100 	mov.w	r1, #0
 800324a:	0159      	lsls	r1, r3, #5
 800324c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003250:	0150      	lsls	r0, r2, #5
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	46c4      	mov	ip, r8
 8003258:	ebb2 0a0c 	subs.w	sl, r2, ip
 800325c:	4640      	mov	r0, r8
 800325e:	4649      	mov	r1, r9
 8003260:	468c      	mov	ip, r1
 8003262:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003272:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003276:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800327a:	ebb2 040a 	subs.w	r4, r2, sl
 800327e:	eb63 050b 	sbc.w	r5, r3, fp
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	00eb      	lsls	r3, r5, #3
 800328c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003290:	00e2      	lsls	r2, r4, #3
 8003292:	4614      	mov	r4, r2
 8003294:	461d      	mov	r5, r3
 8003296:	4603      	mov	r3, r0
 8003298:	18e3      	adds	r3, r4, r3
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	460b      	mov	r3, r1
 800329e:	eb45 0303 	adc.w	r3, r5, r3
 80032a2:	607b      	str	r3, [r7, #4]
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	f04f 0300 	mov.w	r3, #0
 80032ac:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032b0:	4629      	mov	r1, r5
 80032b2:	028b      	lsls	r3, r1, #10
 80032b4:	4620      	mov	r0, r4
 80032b6:	4629      	mov	r1, r5
 80032b8:	4604      	mov	r4, r0
 80032ba:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80032be:	4601      	mov	r1, r0
 80032c0:	028a      	lsls	r2, r1, #10
 80032c2:	4610      	mov	r0, r2
 80032c4:	4619      	mov	r1, r3
 80032c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c8:	2200      	movs	r2, #0
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	61fa      	str	r2, [r7, #28]
 80032ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032d2:	f7fd f8fd 	bl	80004d0 <__aeabi_uldivmod>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4613      	mov	r3, r2
 80032dc:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80032de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032e0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80032e2:	e00d      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80032e4:	4b09      	ldr	r3, [pc, #36]	; (800330c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	0b5b      	lsrs	r3, r3, #13
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80032f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f2:	3301      	adds	r3, #1
 80032f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80032fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003302:	4618      	mov	r0, r3
 8003304:	3748      	adds	r7, #72	; 0x48
 8003306:	46bd      	mov	sp, r7
 8003308:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800330c:	40023800 	.word	0x40023800
 8003310:	00f42400 	.word	0x00f42400
 8003314:	007a1200 	.word	0x007a1200
 8003318:	08004ffc 	.word	0x08004ffc

0800331c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003320:	4b02      	ldr	r3, [pc, #8]	; (800332c <HAL_RCC_GetHCLKFreq+0x10>)
 8003322:	681b      	ldr	r3, [r3, #0]
}
 8003324:	4618      	mov	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr
 800332c:	20000008 	.word	0x20000008

08003330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003334:	f7ff fff2 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4903      	ldr	r1, [pc, #12]	; (8003354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40023800 	.word	0x40023800
 8003354:	08005018 	.word	0x08005018

08003358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800335c:	f7ff ffde 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8003360:	4602      	mov	r2, r0
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	0adb      	lsrs	r3, r3, #11
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	4903      	ldr	r1, [pc, #12]	; (800337c <HAL_RCC_GetPCLK2Freq+0x24>)
 800336e:	5ccb      	ldrb	r3, [r1, r3]
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40023800 	.word	0x40023800
 800337c:	08005018 	.word	0x08005018

08003380 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003388:	2300      	movs	r3, #0
 800338a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800338c:	4b29      	ldr	r3, [pc, #164]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d12c      	bne.n	80033f2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003398:	4b26      	ldr	r3, [pc, #152]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80033a4:	4b24      	ldr	r3, [pc, #144]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	e016      	b.n	80033de <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b0:	4b20      	ldr	r3, [pc, #128]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	4a1f      	ldr	r2, [pc, #124]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ba:	6253      	str	r3, [r2, #36]	; 0x24
 80033bc:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80033c8:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80033d0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d2:	4b18      	ldr	r3, [pc, #96]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	4a17      	ldr	r2, [pc, #92]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033dc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80033e4:	d105      	bne.n	80033f2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033ec:	d101      	bne.n	80033f2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80033ee:	2301      	movs	r3, #1
 80033f0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d105      	bne.n	8003404 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80033f8:	4b10      	ldr	r3, [pc, #64]	; (800343c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a0f      	ldr	r2, [pc, #60]	; (800343c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033fe:	f043 0304 	orr.w	r3, r3, #4
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	4b0d      	ldr	r3, [pc, #52]	; (800343c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f023 0201 	bic.w	r2, r3, #1
 800340c:	490b      	ldr	r1, [pc, #44]	; (800343c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003414:	4b09      	ldr	r3, [pc, #36]	; (800343c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	429a      	cmp	r2, r3
 8003420:	d001      	beq.n	8003426 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	371c      	adds	r7, #28
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800
 8003438:	40007000 	.word	0x40007000
 800343c:	40023c00 	.word	0x40023c00

08003440 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e07b      	b.n	800354a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	2b00      	cmp	r3, #0
 8003458:	d108      	bne.n	800346c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003462:	d009      	beq.n	8003478 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	61da      	str	r2, [r3, #28]
 800346a:	e005      	b.n	8003478 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fe fa46 	bl	8001924 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fc:	ea42 0103 	orr.w	r1, r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	0c1b      	lsrs	r3, r3, #16
 8003516:	f003 0104 	and.w	r1, r3, #4
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	f003 0210 	and.w	r2, r3, #16
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003538:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b088      	sub	sp, #32
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	4613      	mov	r3, r2
 8003560:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_SPI_Transmit+0x22>
 8003570:	2302      	movs	r3, #2
 8003572:	e12d      	b.n	80037d0 <HAL_SPI_Transmit+0x27e>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800357c:	f7fe feb2 	bl	80022e4 <HAL_GetTick>
 8003580:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b01      	cmp	r3, #1
 8003590:	d002      	beq.n	8003598 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003592:	2302      	movs	r3, #2
 8003594:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003596:	e116      	b.n	80037c6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_SPI_Transmit+0x52>
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d102      	bne.n	80035aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035a8:	e10d      	b.n	80037c6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2203      	movs	r2, #3
 80035ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	88fa      	ldrh	r2, [r7, #6]
 80035c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	88fa      	ldrh	r2, [r7, #6]
 80035c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f0:	d10f      	bne.n	8003612 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003600:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003610:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361c:	2b40      	cmp	r3, #64	; 0x40
 800361e:	d007      	beq.n	8003630 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800362e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003638:	d14f      	bne.n	80036da <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HAL_SPI_Transmit+0xf6>
 8003642:	8afb      	ldrh	r3, [r7, #22]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d142      	bne.n	80036ce <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	881a      	ldrh	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003658:	1c9a      	adds	r2, r3, #2
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800366c:	e02f      	b.n	80036ce <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b02      	cmp	r3, #2
 800367a:	d112      	bne.n	80036a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	881a      	ldrh	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	1c9a      	adds	r2, r3, #2
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	86da      	strh	r2, [r3, #54]	; 0x36
 80036a0:	e015      	b.n	80036ce <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036a2:	f7fe fe1f 	bl	80022e4 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d803      	bhi.n	80036ba <HAL_SPI_Transmit+0x168>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b8:	d102      	bne.n	80036c0 <HAL_SPI_Transmit+0x16e>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d106      	bne.n	80036ce <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80036cc:	e07b      	b.n	80037c6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1ca      	bne.n	800366e <HAL_SPI_Transmit+0x11c>
 80036d8:	e050      	b.n	800377c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_SPI_Transmit+0x196>
 80036e2:	8afb      	ldrh	r3, [r7, #22]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d144      	bne.n	8003772 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	330c      	adds	r3, #12
 80036f2:	7812      	ldrb	r2, [r2, #0]
 80036f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003704:	b29b      	uxth	r3, r3
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800370e:	e030      	b.n	8003772 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b02      	cmp	r3, #2
 800371c:	d113      	bne.n	8003746 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	330c      	adds	r3, #12
 8003728:	7812      	ldrb	r2, [r2, #0]
 800372a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	86da      	strh	r2, [r3, #54]	; 0x36
 8003744:	e015      	b.n	8003772 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003746:	f7fe fdcd 	bl	80022e4 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d803      	bhi.n	800375e <HAL_SPI_Transmit+0x20c>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375c:	d102      	bne.n	8003764 <HAL_SPI_Transmit+0x212>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d106      	bne.n	8003772 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003770:	e029      	b.n	80037c6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1c9      	bne.n	8003710 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	6839      	ldr	r1, [r7, #0]
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 fbdf 	bl	8003f44 <SPI_EndRxTxTransaction>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10a      	bne.n	80037b0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e003      	b.n	80037c6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3720      	adds	r7, #32
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b088      	sub	sp, #32
 80037dc:	af02      	add	r7, sp, #8
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	4613      	mov	r3, r2
 80037e6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d002      	beq.n	80037fe <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80037f8:	2302      	movs	r3, #2
 80037fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037fc:	e0fb      	b.n	80039f6 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003806:	d112      	bne.n	800382e <HAL_SPI_Receive+0x56>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10e      	bne.n	800382e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2204      	movs	r2, #4
 8003814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003818:	88fa      	ldrh	r2, [r7, #6]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	4613      	mov	r3, r2
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f8ef 	bl	8003a08 <HAL_SPI_TransmitReceive>
 800382a:	4603      	mov	r3, r0
 800382c:	e0e8      	b.n	8003a00 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_SPI_Receive+0x64>
 8003838:	2302      	movs	r3, #2
 800383a:	e0e1      	b.n	8003a00 <HAL_SPI_Receive+0x228>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003844:	f7fe fd4e 	bl	80022e4 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <HAL_SPI_Receive+0x7e>
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d102      	bne.n	800385c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	75fb      	strb	r3, [r7, #23]
    goto error;
 800385a:	e0cc      	b.n	80039f6 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2204      	movs	r2, #4
 8003860:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	88fa      	ldrh	r2, [r7, #6]
 8003874:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	88fa      	ldrh	r2, [r7, #6]
 800387a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038a2:	d10f      	bne.n	80038c4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ce:	2b40      	cmp	r3, #64	; 0x40
 80038d0:	d007      	beq.n	80038e2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d16a      	bne.n	80039c0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80038ea:	e032      	b.n	8003952 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d115      	bne.n	8003926 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f103 020c 	add.w	r2, r3, #12
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	7812      	ldrb	r2, [r2, #0]
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003924:	e015      	b.n	8003952 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003926:	f7fe fcdd 	bl	80022e4 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d803      	bhi.n	800393e <HAL_SPI_Receive+0x166>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393c:	d102      	bne.n	8003944 <HAL_SPI_Receive+0x16c>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d106      	bne.n	8003952 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003950:	e051      	b.n	80039f6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1c7      	bne.n	80038ec <HAL_SPI_Receive+0x114>
 800395c:	e035      	b.n	80039ca <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b01      	cmp	r3, #1
 800396a:	d113      	bne.n	8003994 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	b292      	uxth	r2, r2
 8003978:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	1c9a      	adds	r2, r3, #2
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003992:	e015      	b.n	80039c0 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003994:	f7fe fca6 	bl	80022e4 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d803      	bhi.n	80039ac <HAL_SPI_Receive+0x1d4>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039aa:	d102      	bne.n	80039b2 <HAL_SPI_Receive+0x1da>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d106      	bne.n	80039c0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80039be:	e01a      	b.n	80039f6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1c9      	bne.n	800395e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	6839      	ldr	r1, [r7, #0]
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 fa52 	bl	8003e78 <SPI_EndRxTransaction>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2220      	movs	r2, #32
 80039de:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	75fb      	strb	r3, [r7, #23]
 80039ec:	e003      	b.n	80039f6 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08c      	sub	sp, #48	; 0x30
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a16:	2301      	movs	r3, #1
 8003a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_SPI_TransmitReceive+0x26>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e198      	b.n	8003d60 <HAL_SPI_TransmitReceive+0x358>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a36:	f7fe fc55 	bl	80022e4 <HAL_GetTick>
 8003a3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a4c:	887b      	ldrh	r3, [r7, #2]
 8003a4e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d00f      	beq.n	8003a78 <HAL_SPI_TransmitReceive+0x70>
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a5e:	d107      	bne.n	8003a70 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d103      	bne.n	8003a70 <HAL_SPI_TransmitReceive+0x68>
 8003a68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d003      	beq.n	8003a78 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a70:	2302      	movs	r3, #2
 8003a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a76:	e16d      	b.n	8003d54 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <HAL_SPI_TransmitReceive+0x82>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <HAL_SPI_TransmitReceive+0x82>
 8003a84:	887b      	ldrh	r3, [r7, #2]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d103      	bne.n	8003a92 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a90:	e160      	b.n	8003d54 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d003      	beq.n	8003aa6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2205      	movs	r2, #5
 8003aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	887a      	ldrh	r2, [r7, #2]
 8003ab6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	887a      	ldrh	r2, [r7, #2]
 8003abc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	887a      	ldrh	r2, [r7, #2]
 8003ac8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	887a      	ldrh	r2, [r7, #2]
 8003ace:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae6:	2b40      	cmp	r3, #64	; 0x40
 8003ae8:	d007      	beq.n	8003afa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003af8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b02:	d17c      	bne.n	8003bfe <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <HAL_SPI_TransmitReceive+0x10a>
 8003b0c:	8b7b      	ldrh	r3, [r7, #26]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d16a      	bne.n	8003be8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	1c9a      	adds	r2, r3, #2
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b36:	e057      	b.n	8003be8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d11b      	bne.n	8003b7e <HAL_SPI_TransmitReceive+0x176>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d016      	beq.n	8003b7e <HAL_SPI_TransmitReceive+0x176>
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d113      	bne.n	8003b7e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	881a      	ldrh	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	1c9a      	adds	r2, r3, #2
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d119      	bne.n	8003bc0 <HAL_SPI_TransmitReceive+0x1b8>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d014      	beq.n	8003bc0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	b292      	uxth	r2, r2
 8003ba2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	1c9a      	adds	r2, r3, #2
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bc0:	f7fe fb90 	bl	80022e4 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d80b      	bhi.n	8003be8 <HAL_SPI_TransmitReceive+0x1e0>
 8003bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd6:	d007      	beq.n	8003be8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003be6:	e0b5      	b.n	8003d54 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1a2      	bne.n	8003b38 <HAL_SPI_TransmitReceive+0x130>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d19d      	bne.n	8003b38 <HAL_SPI_TransmitReceive+0x130>
 8003bfc:	e080      	b.n	8003d00 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <HAL_SPI_TransmitReceive+0x204>
 8003c06:	8b7b      	ldrh	r3, [r7, #26]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d16f      	bne.n	8003cec <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	330c      	adds	r3, #12
 8003c16:	7812      	ldrb	r2, [r2, #0]
 8003c18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c32:	e05b      	b.n	8003cec <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d11c      	bne.n	8003c7c <HAL_SPI_TransmitReceive+0x274>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d017      	beq.n	8003c7c <HAL_SPI_TransmitReceive+0x274>
 8003c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d114      	bne.n	8003c7c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	330c      	adds	r3, #12
 8003c5c:	7812      	ldrb	r2, [r2, #0]
 8003c5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d119      	bne.n	8003cbe <HAL_SPI_TransmitReceive+0x2b6>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d014      	beq.n	8003cbe <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cbe:	f7fe fb11 	bl	80022e4 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d803      	bhi.n	8003cd6 <HAL_SPI_TransmitReceive+0x2ce>
 8003cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd4:	d102      	bne.n	8003cdc <HAL_SPI_TransmitReceive+0x2d4>
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d107      	bne.n	8003cec <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003cea:	e033      	b.n	8003d54 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d19e      	bne.n	8003c34 <HAL_SPI_TransmitReceive+0x22c>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d199      	bne.n	8003c34 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 f91d 	bl	8003f44 <SPI_EndRxTxTransaction>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d006      	beq.n	8003d1e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d1c:	e01a      	b.n	8003d54 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d4a:	e003      	b.n	8003d54 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3730      	adds	r7, #48	; 0x30
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	4613      	mov	r3, r2
 8003d76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d78:	f7fe fab4 	bl	80022e4 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	4413      	add	r3, r2
 8003d86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d88:	f7fe faac 	bl	80022e4 <HAL_GetTick>
 8003d8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d8e:	4b39      	ldr	r3, [pc, #228]	; (8003e74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	015b      	lsls	r3, r3, #5
 8003d94:	0d1b      	lsrs	r3, r3, #20
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
 8003d9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d9e:	e054      	b.n	8003e4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da6:	d050      	beq.n	8003e4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003da8:	f7fe fa9c 	bl	80022e4 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d902      	bls.n	8003dbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d13d      	bne.n	8003e3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd6:	d111      	bne.n	8003dfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de0:	d004      	beq.n	8003dec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dea:	d107      	bne.n	8003dfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e04:	d10f      	bne.n	8003e26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e017      	b.n	8003e6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4013      	ands	r3, r2
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	bf0c      	ite	eq
 8003e5a:	2301      	moveq	r3, #1
 8003e5c:	2300      	movne	r3, #0
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	461a      	mov	r2, r3
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d19b      	bne.n	8003da0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3720      	adds	r7, #32
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20000008 	.word	0x20000008

08003e78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e8c:	d111      	bne.n	8003eb2 <SPI_EndRxTransaction+0x3a>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e96:	d004      	beq.n	8003ea2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea0:	d107      	bne.n	8003eb2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eba:	d12a      	bne.n	8003f12 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec4:	d012      	beq.n	8003eec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2180      	movs	r1, #128	; 0x80
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f7ff ff49 	bl	8003d68 <SPI_WaitFlagStateUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d02d      	beq.n	8003f38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee0:	f043 0220 	orr.w	r2, r3, #32
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e026      	b.n	8003f3a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7ff ff36 	bl	8003d68 <SPI_WaitFlagStateUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d01a      	beq.n	8003f38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f06:	f043 0220 	orr.w	r2, r3, #32
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e013      	b.n	8003f3a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f7ff ff23 	bl	8003d68 <SPI_WaitFlagStateUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d007      	beq.n	8003f38 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2c:	f043 0220 	orr.w	r2, r3, #32
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e000      	b.n	8003f3a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f50:	4b1b      	ldr	r3, [pc, #108]	; (8003fc0 <SPI_EndRxTxTransaction+0x7c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1b      	ldr	r2, [pc, #108]	; (8003fc4 <SPI_EndRxTxTransaction+0x80>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	0d5b      	lsrs	r3, r3, #21
 8003f5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f60:	fb02 f303 	mul.w	r3, r2, r3
 8003f64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f6e:	d112      	bne.n	8003f96 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2200      	movs	r2, #0
 8003f78:	2180      	movs	r1, #128	; 0x80
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f7ff fef4 	bl	8003d68 <SPI_WaitFlagStateUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d016      	beq.n	8003fb4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	f043 0220 	orr.w	r2, r3, #32
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e00f      	b.n	8003fb6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b80      	cmp	r3, #128	; 0x80
 8003fae:	d0f2      	beq.n	8003f96 <SPI_EndRxTxTransaction+0x52>
 8003fb0:	e000      	b.n	8003fb4 <SPI_EndRxTxTransaction+0x70>
        break;
 8003fb2:	bf00      	nop
  }

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000008 	.word	0x20000008
 8003fc4:	165e9f81 	.word	0x165e9f81

08003fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e031      	b.n	800403e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fd ff4a 	bl	8001e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	4619      	mov	r1, r3
 8004006:	4610      	mov	r0, r2
 8004008:	f000 fa86 	bl	8004518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e031      	b.n	80040bc <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d106      	bne.n	8004072 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f829 	bl	80040c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3304      	adds	r3, #4
 8004082:	4619      	mov	r1, r3
 8004084:	4610      	mov	r0, r2
 8004086:	f000 fa47 	bl	8004518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr
	...

080040d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d109      	bne.n	80040fc <HAL_TIM_PWM_Start+0x24>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	bf14      	ite	ne
 80040f4:	2301      	movne	r3, #1
 80040f6:	2300      	moveq	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	e022      	b.n	8004142 <HAL_TIM_PWM_Start+0x6a>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d109      	bne.n	8004116 <HAL_TIM_PWM_Start+0x3e>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b01      	cmp	r3, #1
 800410c:	bf14      	ite	ne
 800410e:	2301      	movne	r3, #1
 8004110:	2300      	moveq	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	e015      	b.n	8004142 <HAL_TIM_PWM_Start+0x6a>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b08      	cmp	r3, #8
 800411a:	d109      	bne.n	8004130 <HAL_TIM_PWM_Start+0x58>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	bf14      	ite	ne
 8004128:	2301      	movne	r3, #1
 800412a:	2300      	moveq	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	e008      	b.n	8004142 <HAL_TIM_PWM_Start+0x6a>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b01      	cmp	r3, #1
 800413a:	bf14      	ite	ne
 800413c:	2301      	movne	r3, #1
 800413e:	2300      	moveq	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e051      	b.n	80041ee <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d104      	bne.n	800415a <HAL_TIM_PWM_Start+0x82>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004158:	e013      	b.n	8004182 <HAL_TIM_PWM_Start+0xaa>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b04      	cmp	r3, #4
 800415e:	d104      	bne.n	800416a <HAL_TIM_PWM_Start+0x92>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004168:	e00b      	b.n	8004182 <HAL_TIM_PWM_Start+0xaa>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b08      	cmp	r3, #8
 800416e:	d104      	bne.n	800417a <HAL_TIM_PWM_Start+0xa2>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004178:	e003      	b.n	8004182 <HAL_TIM_PWM_Start+0xaa>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2202      	movs	r2, #2
 800417e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2201      	movs	r2, #1
 8004188:	6839      	ldr	r1, [r7, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fbbf 	bl	800490e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004198:	d00e      	beq.n	80041b8 <HAL_TIM_PWM_Start+0xe0>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a16      	ldr	r2, [pc, #88]	; (80041f8 <HAL_TIM_PWM_Start+0x120>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d009      	beq.n	80041b8 <HAL_TIM_PWM_Start+0xe0>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a14      	ldr	r2, [pc, #80]	; (80041fc <HAL_TIM_PWM_Start+0x124>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d004      	beq.n	80041b8 <HAL_TIM_PWM_Start+0xe0>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a13      	ldr	r2, [pc, #76]	; (8004200 <HAL_TIM_PWM_Start+0x128>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d111      	bne.n	80041dc <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b06      	cmp	r3, #6
 80041c8:	d010      	beq.n	80041ec <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0201 	orr.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041da:	e007      	b.n	80041ec <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40000400 	.word	0x40000400
 80041fc:	40000800 	.word	0x40000800
 8004200:	40010800 	.word	0x40010800

08004204 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800421e:	2302      	movs	r3, #2
 8004220:	e0ae      	b.n	8004380 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b0c      	cmp	r3, #12
 800422e:	f200 809f 	bhi.w	8004370 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004232:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	0800426d 	.word	0x0800426d
 800423c:	08004371 	.word	0x08004371
 8004240:	08004371 	.word	0x08004371
 8004244:	08004371 	.word	0x08004371
 8004248:	080042ad 	.word	0x080042ad
 800424c:	08004371 	.word	0x08004371
 8004250:	08004371 	.word	0x08004371
 8004254:	08004371 	.word	0x08004371
 8004258:	080042ef 	.word	0x080042ef
 800425c:	08004371 	.word	0x08004371
 8004260:	08004371 	.word	0x08004371
 8004264:	08004371 	.word	0x08004371
 8004268:	0800432f 	.word	0x0800432f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	4618      	mov	r0, r3
 8004274:	f000 f9c0 	bl	80045f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0208 	orr.w	r2, r2, #8
 8004286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699a      	ldr	r2, [r3, #24]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0204 	bic.w	r2, r2, #4
 8004296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6999      	ldr	r1, [r3, #24]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	619a      	str	r2, [r3, #24]
      break;
 80042aa:	e064      	b.n	8004376 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 f9dc 	bl	8004670 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6999      	ldr	r1, [r3, #24]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	021a      	lsls	r2, r3, #8
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	619a      	str	r2, [r3, #24]
      break;
 80042ec:	e043      	b.n	8004376 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 f9f9 	bl	80046ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69da      	ldr	r2, [r3, #28]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0208 	orr.w	r2, r2, #8
 8004308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69da      	ldr	r2, [r3, #28]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0204 	bic.w	r2, r2, #4
 8004318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69d9      	ldr	r1, [r3, #28]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	61da      	str	r2, [r3, #28]
      break;
 800432c:	e023      	b.n	8004376 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fa16 	bl	8004766 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69da      	ldr	r2, [r3, #28]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69d9      	ldr	r1, [r3, #28]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	021a      	lsls	r2, r3, #8
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	61da      	str	r2, [r3, #28]
      break;
 800436e:	e002      	b.n	8004376 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	75fb      	strb	r3, [r7, #23]
      break;
 8004374:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 800437e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_TIM_ConfigClockSource+0x1c>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e0b4      	b.n	800450e <HAL_TIM_ConfigClockSource+0x186>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043dc:	d03e      	beq.n	800445c <HAL_TIM_ConfigClockSource+0xd4>
 80043de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e2:	f200 8087 	bhi.w	80044f4 <HAL_TIM_ConfigClockSource+0x16c>
 80043e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ea:	f000 8086 	beq.w	80044fa <HAL_TIM_ConfigClockSource+0x172>
 80043ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f2:	d87f      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x16c>
 80043f4:	2b70      	cmp	r3, #112	; 0x70
 80043f6:	d01a      	beq.n	800442e <HAL_TIM_ConfigClockSource+0xa6>
 80043f8:	2b70      	cmp	r3, #112	; 0x70
 80043fa:	d87b      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x16c>
 80043fc:	2b60      	cmp	r3, #96	; 0x60
 80043fe:	d050      	beq.n	80044a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004400:	2b60      	cmp	r3, #96	; 0x60
 8004402:	d877      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004404:	2b50      	cmp	r3, #80	; 0x50
 8004406:	d03c      	beq.n	8004482 <HAL_TIM_ConfigClockSource+0xfa>
 8004408:	2b50      	cmp	r3, #80	; 0x50
 800440a:	d873      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x16c>
 800440c:	2b40      	cmp	r3, #64	; 0x40
 800440e:	d058      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004410:	2b40      	cmp	r3, #64	; 0x40
 8004412:	d86f      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004414:	2b30      	cmp	r3, #48	; 0x30
 8004416:	d064      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004418:	2b30      	cmp	r3, #48	; 0x30
 800441a:	d86b      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x16c>
 800441c:	2b20      	cmp	r3, #32
 800441e:	d060      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004420:	2b20      	cmp	r3, #32
 8004422:	d867      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004424:	2b00      	cmp	r3, #0
 8004426:	d05c      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004428:	2b10      	cmp	r3, #16
 800442a:	d05a      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x15a>
 800442c:	e062      	b.n	80044f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6899      	ldr	r1, [r3, #8]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f000 fa47 	bl	80048d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004450:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	609a      	str	r2, [r3, #8]
      break;
 800445a:	e04f      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	6899      	ldr	r1, [r3, #8]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f000 fa30 	bl	80048d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800447e:	609a      	str	r2, [r3, #8]
      break;
 8004480:	e03c      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	6859      	ldr	r1, [r3, #4]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	461a      	mov	r2, r3
 8004490:	f000 f9a7 	bl	80047e2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2150      	movs	r1, #80	; 0x50
 800449a:	4618      	mov	r0, r3
 800449c:	f000 f9fe 	bl	800489c <TIM_ITRx_SetConfig>
      break;
 80044a0:	e02c      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6859      	ldr	r1, [r3, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	461a      	mov	r2, r3
 80044b0:	f000 f9c5 	bl	800483e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2160      	movs	r1, #96	; 0x60
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f9ee 	bl	800489c <TIM_ITRx_SetConfig>
      break;
 80044c0:	e01c      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6859      	ldr	r1, [r3, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	461a      	mov	r2, r3
 80044d0:	f000 f987 	bl	80047e2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2140      	movs	r1, #64	; 0x40
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 f9de 	bl	800489c <TIM_ITRx_SetConfig>
      break;
 80044e0:	e00c      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4619      	mov	r1, r3
 80044ec:	4610      	mov	r0, r2
 80044ee:	f000 f9d5 	bl	800489c <TIM_ITRx_SetConfig>
      break;
 80044f2:	e003      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
      break;
 80044f8:	e000      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 800450c:	7bfb      	ldrb	r3, [r7, #15]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452e:	d00f      	beq.n	8004550 <TIM_Base_SetConfig+0x38>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a2b      	ldr	r2, [pc, #172]	; (80045e0 <TIM_Base_SetConfig+0xc8>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d00b      	beq.n	8004550 <TIM_Base_SetConfig+0x38>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a2a      	ldr	r2, [pc, #168]	; (80045e4 <TIM_Base_SetConfig+0xcc>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d007      	beq.n	8004550 <TIM_Base_SetConfig+0x38>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a29      	ldr	r2, [pc, #164]	; (80045e8 <TIM_Base_SetConfig+0xd0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d003      	beq.n	8004550 <TIM_Base_SetConfig+0x38>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a28      	ldr	r2, [pc, #160]	; (80045ec <TIM_Base_SetConfig+0xd4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d108      	bne.n	8004562 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004568:	d017      	beq.n	800459a <TIM_Base_SetConfig+0x82>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a1c      	ldr	r2, [pc, #112]	; (80045e0 <TIM_Base_SetConfig+0xc8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d013      	beq.n	800459a <TIM_Base_SetConfig+0x82>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a1b      	ldr	r2, [pc, #108]	; (80045e4 <TIM_Base_SetConfig+0xcc>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00f      	beq.n	800459a <TIM_Base_SetConfig+0x82>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a1a      	ldr	r2, [pc, #104]	; (80045e8 <TIM_Base_SetConfig+0xd0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00b      	beq.n	800459a <TIM_Base_SetConfig+0x82>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a19      	ldr	r2, [pc, #100]	; (80045ec <TIM_Base_SetConfig+0xd4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d007      	beq.n	800459a <TIM_Base_SetConfig+0x82>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a18      	ldr	r2, [pc, #96]	; (80045f0 <TIM_Base_SetConfig+0xd8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d003      	beq.n	800459a <TIM_Base_SetConfig+0x82>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a17      	ldr	r2, [pc, #92]	; (80045f4 <TIM_Base_SetConfig+0xdc>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d108      	bne.n	80045ac <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	615a      	str	r2, [r3, #20]
}
 80045d6:	bf00      	nop
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	bc80      	pop	{r7}
 80045de:	4770      	bx	lr
 80045e0:	40000400 	.word	0x40000400
 80045e4:	40000800 	.word	0x40000800
 80045e8:	40000c00 	.word	0x40000c00
 80045ec:	40010800 	.word	0x40010800
 80045f0:	40010c00 	.word	0x40010c00
 80045f4:	40011000 	.word	0x40011000

080045f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	f023 0201 	bic.w	r2, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 0303 	bic.w	r3, r3, #3
 800462e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f023 0302 	bic.w	r3, r3, #2
 8004640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	621a      	str	r2, [r3, #32]
}
 8004666:	bf00      	nop
 8004668:	371c      	adds	r7, #28
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr

08004670 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	f023 0210 	bic.w	r2, r3, #16
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800469e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	021b      	lsls	r3, r3, #8
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f023 0320 	bic.w	r3, r3, #32
 80046ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	621a      	str	r2, [r3, #32]
}
 80046e2:	bf00      	nop
 80046e4:	371c      	adds	r7, #28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bc80      	pop	{r7}
 80046ea:	4770      	bx	lr

080046ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0303 	bic.w	r3, r3, #3
 8004722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	021b      	lsls	r3, r3, #8
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	621a      	str	r2, [r3, #32]
}
 800475c:	bf00      	nop
 800475e:	371c      	adds	r7, #28
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr

08004766 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004766:	b480      	push	{r7}
 8004768:	b087      	sub	sp, #28
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
 800476e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004794:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	031b      	lsls	r3, r3, #12
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	621a      	str	r2, [r3, #32]
}
 80047d8:	bf00      	nop
 80047da:	371c      	adds	r7, #28
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr

080047e2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b087      	sub	sp, #28
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	f023 0201 	bic.w	r2, r3, #1
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800480c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f023 030a 	bic.w	r3, r3, #10
 800481e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	4313      	orrs	r3, r2
 8004826:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	621a      	str	r2, [r3, #32]
}
 8004834:	bf00      	nop
 8004836:	371c      	adds	r7, #28
 8004838:	46bd      	mov	sp, r7
 800483a:	bc80      	pop	{r7}
 800483c:	4770      	bx	lr

0800483e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800483e:	b480      	push	{r7}
 8004840:	b087      	sub	sp, #28
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	f023 0210 	bic.w	r2, r3, #16
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004868:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	031b      	lsls	r3, r3, #12
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800487a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	621a      	str	r2, [r3, #32]
}
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f043 0307 	orr.w	r3, r3, #7
 80048be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	609a      	str	r2, [r3, #8]
}
 80048c6:	bf00      	nop
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr

080048d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
 80048dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	021a      	lsls	r2, r3, #8
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	609a      	str	r2, [r3, #8]
}
 8004904:	bf00      	nop
 8004906:	371c      	adds	r7, #28
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr

0800490e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800490e:	b480      	push	{r7}
 8004910:	b087      	sub	sp, #28
 8004912:	af00      	add	r7, sp, #0
 8004914:	60f8      	str	r0, [r7, #12]
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f003 031f 	and.w	r3, r3, #31
 8004920:	2201      	movs	r2, #1
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a1a      	ldr	r2, [r3, #32]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	43db      	mvns	r3, r3
 8004930:	401a      	ands	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a1a      	ldr	r2, [r3, #32]
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	f003 031f 	and.w	r3, r3, #31
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	fa01 f303 	lsl.w	r3, r1, r3
 8004946:	431a      	orrs	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	621a      	str	r2, [r3, #32]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	bc80      	pop	{r7}
 8004954:	4770      	bx	lr
	...

08004958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800496c:	2302      	movs	r3, #2
 800496e:	e046      	b.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b2:	d00e      	beq.n	80049d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a13      	ldr	r2, [pc, #76]	; (8004a08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d009      	beq.n	80049d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a12      	ldr	r2, [pc, #72]	; (8004a0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d004      	beq.n	80049d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a10      	ldr	r2, [pc, #64]	; (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d10c      	bne.n	80049ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bc80      	pop	{r7}
 8004a06:	4770      	bx	lr
 8004a08:	40000400 	.word	0x40000400
 8004a0c:	40000800 	.word	0x40000800
 8004a10:	40010800 	.word	0x40010800

08004a14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e042      	b.n	8004aac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fd fb84 	bl	8002148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2224      	movs	r2, #36	; 0x24
 8004a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f9af 	bl	8004dbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	695a      	ldr	r2, [r3, #20]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08a      	sub	sp, #40	; 0x28
 8004ab8:	af02      	add	r7, sp, #8
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d16d      	bne.n	8004bb0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_UART_Transmit+0x2c>
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e066      	b.n	8004bb2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2221      	movs	r2, #33	; 0x21
 8004aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004af2:	f7fd fbf7 	bl	80022e4 <HAL_GetTick>
 8004af6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	88fa      	ldrh	r2, [r7, #6]
 8004afc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	88fa      	ldrh	r2, [r7, #6]
 8004b02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0c:	d108      	bne.n	8004b20 <HAL_UART_Transmit+0x6c>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d104      	bne.n	8004b20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b16:	2300      	movs	r3, #0
 8004b18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	61bb      	str	r3, [r7, #24]
 8004b1e:	e003      	b.n	8004b28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b28:	e02a      	b.n	8004b80 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2200      	movs	r2, #0
 8004b32:	2180      	movs	r1, #128	; 0x80
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 f8d2 	bl	8004cde <UART_WaitOnFlagUntilTimeout>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e036      	b.n	8004bb2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10b      	bne.n	8004b62 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	3302      	adds	r3, #2
 8004b5e:	61bb      	str	r3, [r7, #24]
 8004b60:	e007      	b.n	8004b72 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	781a      	ldrb	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1cf      	bne.n	8004b2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2200      	movs	r2, #0
 8004b92:	2140      	movs	r1, #64	; 0x40
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f8a2 	bl	8004cde <UART_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e006      	b.n	8004bb2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	e000      	b.n	8004bb2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004bb0:	2302      	movs	r3, #2
  }
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b08a      	sub	sp, #40	; 0x28
 8004bbe:	af02      	add	r7, sp, #8
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	603b      	str	r3, [r7, #0]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	d17c      	bne.n	8004cd4 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <HAL_UART_Receive+0x2c>
 8004be0:	88fb      	ldrh	r3, [r7, #6]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e075      	b.n	8004cd6 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2222      	movs	r2, #34	; 0x22
 8004bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bfe:	f7fd fb71 	bl	80022e4 <HAL_GetTick>
 8004c02:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	88fa      	ldrh	r2, [r7, #6]
 8004c08:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	88fa      	ldrh	r2, [r7, #6]
 8004c0e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c18:	d108      	bne.n	8004c2c <HAL_UART_Receive+0x72>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d104      	bne.n	8004c2c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8004c22:	2300      	movs	r3, #0
 8004c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	e003      	b.n	8004c34 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004c34:	e043      	b.n	8004cbe <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2120      	movs	r1, #32
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 f84c 	bl	8004cde <UART_WaitOnFlagUntilTimeout>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e042      	b.n	8004cd6 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10c      	bne.n	8004c70 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	3302      	adds	r3, #2
 8004c6c:	61bb      	str	r3, [r7, #24]
 8004c6e:	e01f      	b.n	8004cb0 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c78:	d007      	beq.n	8004c8a <HAL_UART_Receive+0xd0>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <HAL_UART_Receive+0xde>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	701a      	strb	r2, [r3, #0]
 8004c96:	e008      	b.n	8004caa <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	3301      	adds	r3, #1
 8004cae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1b6      	bne.n	8004c36 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e000      	b.n	8004cd6 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004cd4:	2302      	movs	r3, #2
  }
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3720      	adds	r7, #32
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b090      	sub	sp, #64	; 0x40
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	60f8      	str	r0, [r7, #12]
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	603b      	str	r3, [r7, #0]
 8004cea:	4613      	mov	r3, r2
 8004cec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cee:	e050      	b.n	8004d92 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf6:	d04c      	beq.n	8004d92 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d007      	beq.n	8004d0e <UART_WaitOnFlagUntilTimeout+0x30>
 8004cfe:	f7fd faf1 	bl	80022e4 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d241      	bcs.n	8004d92 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	330c      	adds	r3, #12
 8004d14:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d18:	e853 3f00 	ldrex	r3, [r3]
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	330c      	adds	r3, #12
 8004d2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d2e:	637a      	str	r2, [r7, #52]	; 0x34
 8004d30:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d36:	e841 2300 	strex	r3, r2, [r1]
 8004d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1e5      	bne.n	8004d0e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3314      	adds	r3, #20
 8004d48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	e853 3f00 	ldrex	r3, [r3]
 8004d50:	613b      	str	r3, [r7, #16]
   return(result);
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f023 0301 	bic.w	r3, r3, #1
 8004d58:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3314      	adds	r3, #20
 8004d60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d62:	623a      	str	r2, [r7, #32]
 8004d64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d66:	69f9      	ldr	r1, [r7, #28]
 8004d68:	6a3a      	ldr	r2, [r7, #32]
 8004d6a:	e841 2300 	strex	r3, r2, [r1]
 8004d6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1e5      	bne.n	8004d42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e00f      	b.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	bf0c      	ite	eq
 8004da2:	2301      	moveq	r3, #1
 8004da4:	2300      	movne	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d09f      	beq.n	8004cf0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3740      	adds	r7, #64	; 0x40
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004dfc:	f023 030c 	bic.w	r3, r3, #12
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	68b9      	ldr	r1, [r7, #8]
 8004e06:	430b      	orrs	r3, r1
 8004e08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699a      	ldr	r2, [r3, #24]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a55      	ldr	r2, [pc, #340]	; (8004f7c <UART_SetConfig+0x1c0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d103      	bne.n	8004e32 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e2a:	f7fe fa95 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	e002      	b.n	8004e38 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e32:	f7fe fa7d 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8004e36:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e40:	d14c      	bne.n	8004edc <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	4613      	mov	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	009a      	lsls	r2, r3, #2
 8004e4c:	441a      	add	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e58:	4a49      	ldr	r2, [pc, #292]	; (8004f80 <UART_SetConfig+0x1c4>)
 8004e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5e:	095b      	lsrs	r3, r3, #5
 8004e60:	0119      	lsls	r1, r3, #4
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4613      	mov	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	009a      	lsls	r2, r3, #2
 8004e6c:	441a      	add	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e78:	4b41      	ldr	r3, [pc, #260]	; (8004f80 <UART_SetConfig+0x1c4>)
 8004e7a:	fba3 0302 	umull	r0, r3, r3, r2
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	2064      	movs	r0, #100	; 0x64
 8004e82:	fb00 f303 	mul.w	r3, r0, r3
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	3332      	adds	r3, #50	; 0x32
 8004e8c:	4a3c      	ldr	r2, [pc, #240]	; (8004f80 <UART_SetConfig+0x1c4>)
 8004e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e92:	095b      	lsrs	r3, r3, #5
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e9a:	4419      	add	r1, r3
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	009a      	lsls	r2, r3, #2
 8004ea6:	441a      	add	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eb2:	4b33      	ldr	r3, [pc, #204]	; (8004f80 <UART_SetConfig+0x1c4>)
 8004eb4:	fba3 0302 	umull	r0, r3, r3, r2
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	2064      	movs	r0, #100	; 0x64
 8004ebc:	fb00 f303 	mul.w	r3, r0, r3
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	3332      	adds	r3, #50	; 0x32
 8004ec6:	4a2e      	ldr	r2, [pc, #184]	; (8004f80 <UART_SetConfig+0x1c4>)
 8004ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ecc:	095b      	lsrs	r3, r3, #5
 8004ece:	f003 0207 	and.w	r2, r3, #7
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	440a      	add	r2, r1
 8004ed8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004eda:	e04a      	b.n	8004f72 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009a      	lsls	r2, r3, #2
 8004ee6:	441a      	add	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef2:	4a23      	ldr	r2, [pc, #140]	; (8004f80 <UART_SetConfig+0x1c4>)
 8004ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef8:	095b      	lsrs	r3, r3, #5
 8004efa:	0119      	lsls	r1, r3, #4
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	009a      	lsls	r2, r3, #2
 8004f06:	441a      	add	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f12:	4b1b      	ldr	r3, [pc, #108]	; (8004f80 <UART_SetConfig+0x1c4>)
 8004f14:	fba3 0302 	umull	r0, r3, r3, r2
 8004f18:	095b      	lsrs	r3, r3, #5
 8004f1a:	2064      	movs	r0, #100	; 0x64
 8004f1c:	fb00 f303 	mul.w	r3, r0, r3
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	3332      	adds	r3, #50	; 0x32
 8004f26:	4a16      	ldr	r2, [pc, #88]	; (8004f80 <UART_SetConfig+0x1c4>)
 8004f28:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2c:	095b      	lsrs	r3, r3, #5
 8004f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f32:	4419      	add	r1, r3
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4613      	mov	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009a      	lsls	r2, r3, #2
 8004f3e:	441a      	add	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f4a:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <UART_SetConfig+0x1c4>)
 8004f4c:	fba3 0302 	umull	r0, r3, r3, r2
 8004f50:	095b      	lsrs	r3, r3, #5
 8004f52:	2064      	movs	r0, #100	; 0x64
 8004f54:	fb00 f303 	mul.w	r3, r0, r3
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	3332      	adds	r3, #50	; 0x32
 8004f5e:	4a08      	ldr	r2, [pc, #32]	; (8004f80 <UART_SetConfig+0x1c4>)
 8004f60:	fba2 2303 	umull	r2, r3, r2, r3
 8004f64:	095b      	lsrs	r3, r3, #5
 8004f66:	f003 020f 	and.w	r2, r3, #15
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	440a      	add	r2, r1
 8004f70:	609a      	str	r2, [r3, #8]
}
 8004f72:	bf00      	nop
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40013800 	.word	0x40013800
 8004f80:	51eb851f 	.word	0x51eb851f

08004f84 <__libc_init_array>:
 8004f84:	b570      	push	{r4, r5, r6, lr}
 8004f86:	2600      	movs	r6, #0
 8004f88:	4d0c      	ldr	r5, [pc, #48]	; (8004fbc <__libc_init_array+0x38>)
 8004f8a:	4c0d      	ldr	r4, [pc, #52]	; (8004fc0 <__libc_init_array+0x3c>)
 8004f8c:	1b64      	subs	r4, r4, r5
 8004f8e:	10a4      	asrs	r4, r4, #2
 8004f90:	42a6      	cmp	r6, r4
 8004f92:	d109      	bne.n	8004fa8 <__libc_init_array+0x24>
 8004f94:	f000 f822 	bl	8004fdc <_init>
 8004f98:	2600      	movs	r6, #0
 8004f9a:	4d0a      	ldr	r5, [pc, #40]	; (8004fc4 <__libc_init_array+0x40>)
 8004f9c:	4c0a      	ldr	r4, [pc, #40]	; (8004fc8 <__libc_init_array+0x44>)
 8004f9e:	1b64      	subs	r4, r4, r5
 8004fa0:	10a4      	asrs	r4, r4, #2
 8004fa2:	42a6      	cmp	r6, r4
 8004fa4:	d105      	bne.n	8004fb2 <__libc_init_array+0x2e>
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}
 8004fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fac:	4798      	blx	r3
 8004fae:	3601      	adds	r6, #1
 8004fb0:	e7ee      	b.n	8004f90 <__libc_init_array+0xc>
 8004fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb6:	4798      	blx	r3
 8004fb8:	3601      	adds	r6, #1
 8004fba:	e7f2      	b.n	8004fa2 <__libc_init_array+0x1e>
 8004fbc:	08005028 	.word	0x08005028
 8004fc0:	08005028 	.word	0x08005028
 8004fc4:	08005028 	.word	0x08005028
 8004fc8:	0800502c 	.word	0x0800502c

08004fcc <memset>:
 8004fcc:	4603      	mov	r3, r0
 8004fce:	4402      	add	r2, r0
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d100      	bne.n	8004fd6 <memset+0xa>
 8004fd4:	4770      	bx	lr
 8004fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8004fda:	e7f9      	b.n	8004fd0 <memset+0x4>

08004fdc <_init>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	bf00      	nop
 8004fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe2:	bc08      	pop	{r3}
 8004fe4:	469e      	mov	lr, r3
 8004fe6:	4770      	bx	lr

08004fe8 <_fini>:
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	bf00      	nop
 8004fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fee:	bc08      	pop	{r3}
 8004ff0:	469e      	mov	lr, r3
 8004ff2:	4770      	bx	lr
