
nowyManipulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005000  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005168  08005168  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005168  08005168  00015168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005170  08005170  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005170  08005170  00015170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005174  08005174  00015174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000010  08005188  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08005188  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e780  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000226d  00000000  00000000  0002e7b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00030a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  000318d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d37  00000000  00000000  00032690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a2d  00000000  00000000  000493c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e496  00000000  00000000  00059df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e828a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d1c  00000000  00000000  000e82dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	08005124 	.word	0x08005124

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	08005124 	.word	0x08005124

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__gesf2>:
 8000398:	f04f 3cff 	mov.w	ip, #4294967295
 800039c:	e006      	b.n	80003ac <__cmpsf2+0x4>
 800039e:	bf00      	nop

080003a0 <__lesf2>:
 80003a0:	f04f 0c01 	mov.w	ip, #1
 80003a4:	e002      	b.n	80003ac <__cmpsf2+0x4>
 80003a6:	bf00      	nop

080003a8 <__cmpsf2>:
 80003a8:	f04f 0c01 	mov.w	ip, #1
 80003ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80003b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80003b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003bc:	bf18      	it	ne
 80003be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003c2:	d011      	beq.n	80003e8 <__cmpsf2+0x40>
 80003c4:	b001      	add	sp, #4
 80003c6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80003ca:	bf18      	it	ne
 80003cc:	ea90 0f01 	teqne	r0, r1
 80003d0:	bf58      	it	pl
 80003d2:	ebb2 0003 	subspl.w	r0, r2, r3
 80003d6:	bf88      	it	hi
 80003d8:	17c8      	asrhi	r0, r1, #31
 80003da:	bf38      	it	cc
 80003dc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80003e0:	bf18      	it	ne
 80003e2:	f040 0001 	orrne.w	r0, r0, #1
 80003e6:	4770      	bx	lr
 80003e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003ec:	d102      	bne.n	80003f4 <__cmpsf2+0x4c>
 80003ee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80003f2:	d105      	bne.n	8000400 <__cmpsf2+0x58>
 80003f4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80003f8:	d1e4      	bne.n	80003c4 <__cmpsf2+0x1c>
 80003fa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80003fe:	d0e1      	beq.n	80003c4 <__cmpsf2+0x1c>
 8000400:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop

08000408 <__aeabi_cfrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	4608      	mov	r0, r1
 800040c:	4661      	mov	r1, ip
 800040e:	e7ff      	b.n	8000410 <__aeabi_cfcmpeq>

08000410 <__aeabi_cfcmpeq>:
 8000410:	b50f      	push	{r0, r1, r2, r3, lr}
 8000412:	f7ff ffc9 	bl	80003a8 <__cmpsf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	bf48      	it	mi
 800041a:	f110 0f00 	cmnmi.w	r0, #0
 800041e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000420 <__aeabi_fcmpeq>:
 8000420:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000424:	f7ff fff4 	bl	8000410 <__aeabi_cfcmpeq>
 8000428:	bf0c      	ite	eq
 800042a:	2001      	moveq	r0, #1
 800042c:	2000      	movne	r0, #0
 800042e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000432:	bf00      	nop

08000434 <__aeabi_fcmplt>:
 8000434:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000438:	f7ff ffea 	bl	8000410 <__aeabi_cfcmpeq>
 800043c:	bf34      	ite	cc
 800043e:	2001      	movcc	r0, #1
 8000440:	2000      	movcs	r0, #0
 8000442:	f85d fb08 	ldr.w	pc, [sp], #8
 8000446:	bf00      	nop

08000448 <__aeabi_fcmple>:
 8000448:	f84d ed08 	str.w	lr, [sp, #-8]!
 800044c:	f7ff ffe0 	bl	8000410 <__aeabi_cfcmpeq>
 8000450:	bf94      	ite	ls
 8000452:	2001      	movls	r0, #1
 8000454:	2000      	movhi	r0, #0
 8000456:	f85d fb08 	ldr.w	pc, [sp], #8
 800045a:	bf00      	nop

0800045c <__aeabi_fcmpge>:
 800045c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000460:	f7ff ffd2 	bl	8000408 <__aeabi_cfrcmple>
 8000464:	bf94      	ite	ls
 8000466:	2001      	movls	r0, #1
 8000468:	2000      	movhi	r0, #0
 800046a:	f85d fb08 	ldr.w	pc, [sp], #8
 800046e:	bf00      	nop

08000470 <__aeabi_fcmpgt>:
 8000470:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000474:	f7ff ffc8 	bl	8000408 <__aeabi_cfrcmple>
 8000478:	bf34      	ite	cc
 800047a:	2001      	movcc	r0, #1
 800047c:	2000      	movcs	r0, #0
 800047e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000482:	bf00      	nop

08000484 <__aeabi_f2iz>:
 8000484:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000488:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800048c:	d30f      	bcc.n	80004ae <__aeabi_f2iz+0x2a>
 800048e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000492:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000496:	d90d      	bls.n	80004b4 <__aeabi_f2iz+0x30>
 8000498:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800049c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004a0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80004a4:	fa23 f002 	lsr.w	r0, r3, r2
 80004a8:	bf18      	it	ne
 80004aa:	4240      	negne	r0, r0
 80004ac:	4770      	bx	lr
 80004ae:	f04f 0000 	mov.w	r0, #0
 80004b2:	4770      	bx	lr
 80004b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004b8:	d101      	bne.n	80004be <__aeabi_f2iz+0x3a>
 80004ba:	0242      	lsls	r2, r0, #9
 80004bc:	d105      	bne.n	80004ca <__aeabi_f2iz+0x46>
 80004be:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80004c2:	bf08      	it	eq
 80004c4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80004c8:	4770      	bx	lr
 80004ca:	f04f 0000 	mov.w	r0, #0
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_uldivmod>:
 80004d0:	b953      	cbnz	r3, 80004e8 <__aeabi_uldivmod+0x18>
 80004d2:	b94a      	cbnz	r2, 80004e8 <__aeabi_uldivmod+0x18>
 80004d4:	2900      	cmp	r1, #0
 80004d6:	bf08      	it	eq
 80004d8:	2800      	cmpeq	r0, #0
 80004da:	bf1c      	itt	ne
 80004dc:	f04f 31ff 	movne.w	r1, #4294967295
 80004e0:	f04f 30ff 	movne.w	r0, #4294967295
 80004e4:	f000 b976 	b.w	80007d4 <__aeabi_idiv0>
 80004e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004f0:	f000 f806 	bl	8000500 <__udivmoddi4>
 80004f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004fc:	b004      	add	sp, #16
 80004fe:	4770      	bx	lr

08000500 <__udivmoddi4>:
 8000500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000504:	9e08      	ldr	r6, [sp, #32]
 8000506:	460d      	mov	r5, r1
 8000508:	4604      	mov	r4, r0
 800050a:	4688      	mov	r8, r1
 800050c:	2b00      	cmp	r3, #0
 800050e:	d14d      	bne.n	80005ac <__udivmoddi4+0xac>
 8000510:	428a      	cmp	r2, r1
 8000512:	4694      	mov	ip, r2
 8000514:	d968      	bls.n	80005e8 <__udivmoddi4+0xe8>
 8000516:	fab2 f282 	clz	r2, r2
 800051a:	b152      	cbz	r2, 8000532 <__udivmoddi4+0x32>
 800051c:	fa01 f302 	lsl.w	r3, r1, r2
 8000520:	f1c2 0120 	rsb	r1, r2, #32
 8000524:	fa20 f101 	lsr.w	r1, r0, r1
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	ea41 0803 	orr.w	r8, r1, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000536:	fbb8 f7f1 	udiv	r7, r8, r1
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb01 8817 	mls	r8, r1, r7, r8
 8000542:	fb07 f00e 	mul.w	r0, r7, lr
 8000546:	0c23      	lsrs	r3, r4, #16
 8000548:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800054c:	4298      	cmp	r0, r3
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x66>
 8000550:	eb1c 0303 	adds.w	r3, ip, r3
 8000554:	f107 35ff 	add.w	r5, r7, #4294967295
 8000558:	f080 811e 	bcs.w	8000798 <__udivmoddi4+0x298>
 800055c:	4298      	cmp	r0, r3
 800055e:	f240 811b 	bls.w	8000798 <__udivmoddi4+0x298>
 8000562:	3f02      	subs	r7, #2
 8000564:	4463      	add	r3, ip
 8000566:	1a1b      	subs	r3, r3, r0
 8000568:	fbb3 f0f1 	udiv	r0, r3, r1
 800056c:	fb01 3310 	mls	r3, r1, r0, r3
 8000570:	fb00 fe0e 	mul.w	lr, r0, lr
 8000574:	b2a4      	uxth	r4, r4
 8000576:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057a:	45a6      	cmp	lr, r4
 800057c:	d90a      	bls.n	8000594 <__udivmoddi4+0x94>
 800057e:	eb1c 0404 	adds.w	r4, ip, r4
 8000582:	f100 33ff 	add.w	r3, r0, #4294967295
 8000586:	f080 8109 	bcs.w	800079c <__udivmoddi4+0x29c>
 800058a:	45a6      	cmp	lr, r4
 800058c:	f240 8106 	bls.w	800079c <__udivmoddi4+0x29c>
 8000590:	4464      	add	r4, ip
 8000592:	3802      	subs	r0, #2
 8000594:	2100      	movs	r1, #0
 8000596:	eba4 040e 	sub.w	r4, r4, lr
 800059a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800059e:	b11e      	cbz	r6, 80005a8 <__udivmoddi4+0xa8>
 80005a0:	2300      	movs	r3, #0
 80005a2:	40d4      	lsrs	r4, r2
 80005a4:	e9c6 4300 	strd	r4, r3, [r6]
 80005a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0xc2>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	f000 80ee 	beq.w	8000792 <__udivmoddi4+0x292>
 80005b6:	2100      	movs	r1, #0
 80005b8:	e9c6 0500 	strd	r0, r5, [r6]
 80005bc:	4608      	mov	r0, r1
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	fab3 f183 	clz	r1, r3
 80005c6:	2900      	cmp	r1, #0
 80005c8:	d14a      	bne.n	8000660 <__udivmoddi4+0x160>
 80005ca:	42ab      	cmp	r3, r5
 80005cc:	d302      	bcc.n	80005d4 <__udivmoddi4+0xd4>
 80005ce:	4282      	cmp	r2, r0
 80005d0:	f200 80fc 	bhi.w	80007cc <__udivmoddi4+0x2cc>
 80005d4:	1a84      	subs	r4, r0, r2
 80005d6:	eb65 0303 	sbc.w	r3, r5, r3
 80005da:	2001      	movs	r0, #1
 80005dc:	4698      	mov	r8, r3
 80005de:	2e00      	cmp	r6, #0
 80005e0:	d0e2      	beq.n	80005a8 <__udivmoddi4+0xa8>
 80005e2:	e9c6 4800 	strd	r4, r8, [r6]
 80005e6:	e7df      	b.n	80005a8 <__udivmoddi4+0xa8>
 80005e8:	b902      	cbnz	r2, 80005ec <__udivmoddi4+0xec>
 80005ea:	deff      	udf	#255	; 0xff
 80005ec:	fab2 f282 	clz	r2, r2
 80005f0:	2a00      	cmp	r2, #0
 80005f2:	f040 8091 	bne.w	8000718 <__udivmoddi4+0x218>
 80005f6:	eba1 000c 	sub.w	r0, r1, ip
 80005fa:	2101      	movs	r1, #1
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb0 f3f7 	udiv	r3, r0, r7
 8000608:	fb07 0013 	mls	r0, r7, r3, r0
 800060c:	0c25      	lsrs	r5, r4, #16
 800060e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000612:	fb0e f003 	mul.w	r0, lr, r3
 8000616:	42a8      	cmp	r0, r5
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x12c>
 800061a:	eb1c 0505 	adds.w	r5, ip, r5
 800061e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000622:	d202      	bcs.n	800062a <__udivmoddi4+0x12a>
 8000624:	42a8      	cmp	r0, r5
 8000626:	f200 80ce 	bhi.w	80007c6 <__udivmoddi4+0x2c6>
 800062a:	4643      	mov	r3, r8
 800062c:	1a2d      	subs	r5, r5, r0
 800062e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000632:	fb07 5510 	mls	r5, r7, r0, r5
 8000636:	fb0e fe00 	mul.w	lr, lr, r0
 800063a:	b2a4      	uxth	r4, r4
 800063c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000640:	45a6      	cmp	lr, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x156>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f100 35ff 	add.w	r5, r0, #4294967295
 800064c:	d202      	bcs.n	8000654 <__udivmoddi4+0x154>
 800064e:	45a6      	cmp	lr, r4
 8000650:	f200 80b6 	bhi.w	80007c0 <__udivmoddi4+0x2c0>
 8000654:	4628      	mov	r0, r5
 8000656:	eba4 040e 	sub.w	r4, r4, lr
 800065a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800065e:	e79e      	b.n	800059e <__udivmoddi4+0x9e>
 8000660:	f1c1 0720 	rsb	r7, r1, #32
 8000664:	408b      	lsls	r3, r1
 8000666:	fa22 fc07 	lsr.w	ip, r2, r7
 800066a:	ea4c 0c03 	orr.w	ip, ip, r3
 800066e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000672:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000676:	fbba f8f9 	udiv	r8, sl, r9
 800067a:	fa20 f307 	lsr.w	r3, r0, r7
 800067e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000682:	408d      	lsls	r5, r1
 8000684:	fa1f fe8c 	uxth.w	lr, ip
 8000688:	431d      	orrs	r5, r3
 800068a:	fa00 f301 	lsl.w	r3, r0, r1
 800068e:	fb08 f00e 	mul.w	r0, r8, lr
 8000692:	0c2c      	lsrs	r4, r5, #16
 8000694:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000698:	42a0      	cmp	r0, r4
 800069a:	fa02 f201 	lsl.w	r2, r2, r1
 800069e:	d90b      	bls.n	80006b8 <__udivmoddi4+0x1b8>
 80006a0:	eb1c 0404 	adds.w	r4, ip, r4
 80006a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80006a8:	f080 8088 	bcs.w	80007bc <__udivmoddi4+0x2bc>
 80006ac:	42a0      	cmp	r0, r4
 80006ae:	f240 8085 	bls.w	80007bc <__udivmoddi4+0x2bc>
 80006b2:	f1a8 0802 	sub.w	r8, r8, #2
 80006b6:	4464      	add	r4, ip
 80006b8:	1a24      	subs	r4, r4, r0
 80006ba:	fbb4 f0f9 	udiv	r0, r4, r9
 80006be:	fb09 4410 	mls	r4, r9, r0, r4
 80006c2:	fb00 fe0e 	mul.w	lr, r0, lr
 80006c6:	b2ad      	uxth	r5, r5
 80006c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80006cc:	45a6      	cmp	lr, r4
 80006ce:	d908      	bls.n	80006e2 <__udivmoddi4+0x1e2>
 80006d0:	eb1c 0404 	adds.w	r4, ip, r4
 80006d4:	f100 35ff 	add.w	r5, r0, #4294967295
 80006d8:	d26c      	bcs.n	80007b4 <__udivmoddi4+0x2b4>
 80006da:	45a6      	cmp	lr, r4
 80006dc:	d96a      	bls.n	80007b4 <__udivmoddi4+0x2b4>
 80006de:	3802      	subs	r0, #2
 80006e0:	4464      	add	r4, ip
 80006e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006e6:	fba0 9502 	umull	r9, r5, r0, r2
 80006ea:	eba4 040e 	sub.w	r4, r4, lr
 80006ee:	42ac      	cmp	r4, r5
 80006f0:	46c8      	mov	r8, r9
 80006f2:	46ae      	mov	lr, r5
 80006f4:	d356      	bcc.n	80007a4 <__udivmoddi4+0x2a4>
 80006f6:	d053      	beq.n	80007a0 <__udivmoddi4+0x2a0>
 80006f8:	2e00      	cmp	r6, #0
 80006fa:	d069      	beq.n	80007d0 <__udivmoddi4+0x2d0>
 80006fc:	ebb3 0208 	subs.w	r2, r3, r8
 8000700:	eb64 040e 	sbc.w	r4, r4, lr
 8000704:	fa22 f301 	lsr.w	r3, r2, r1
 8000708:	fa04 f707 	lsl.w	r7, r4, r7
 800070c:	431f      	orrs	r7, r3
 800070e:	40cc      	lsrs	r4, r1
 8000710:	e9c6 7400 	strd	r7, r4, [r6]
 8000714:	2100      	movs	r1, #0
 8000716:	e747      	b.n	80005a8 <__udivmoddi4+0xa8>
 8000718:	fa0c fc02 	lsl.w	ip, ip, r2
 800071c:	f1c2 0120 	rsb	r1, r2, #32
 8000720:	fa25 f301 	lsr.w	r3, r5, r1
 8000724:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000728:	fa20 f101 	lsr.w	r1, r0, r1
 800072c:	4095      	lsls	r5, r2
 800072e:	430d      	orrs	r5, r1
 8000730:	fbb3 f1f7 	udiv	r1, r3, r7
 8000734:	fb07 3311 	mls	r3, r7, r1, r3
 8000738:	fa1f fe8c 	uxth.w	lr, ip
 800073c:	0c28      	lsrs	r0, r5, #16
 800073e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000742:	fb01 f30e 	mul.w	r3, r1, lr
 8000746:	4283      	cmp	r3, r0
 8000748:	fa04 f402 	lsl.w	r4, r4, r2
 800074c:	d908      	bls.n	8000760 <__udivmoddi4+0x260>
 800074e:	eb1c 0000 	adds.w	r0, ip, r0
 8000752:	f101 38ff 	add.w	r8, r1, #4294967295
 8000756:	d22f      	bcs.n	80007b8 <__udivmoddi4+0x2b8>
 8000758:	4283      	cmp	r3, r0
 800075a:	d92d      	bls.n	80007b8 <__udivmoddi4+0x2b8>
 800075c:	3902      	subs	r1, #2
 800075e:	4460      	add	r0, ip
 8000760:	1ac0      	subs	r0, r0, r3
 8000762:	fbb0 f3f7 	udiv	r3, r0, r7
 8000766:	fb07 0013 	mls	r0, r7, r3, r0
 800076a:	b2ad      	uxth	r5, r5
 800076c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000770:	fb03 f00e 	mul.w	r0, r3, lr
 8000774:	42a8      	cmp	r0, r5
 8000776:	d908      	bls.n	800078a <__udivmoddi4+0x28a>
 8000778:	eb1c 0505 	adds.w	r5, ip, r5
 800077c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000780:	d216      	bcs.n	80007b0 <__udivmoddi4+0x2b0>
 8000782:	42a8      	cmp	r0, r5
 8000784:	d914      	bls.n	80007b0 <__udivmoddi4+0x2b0>
 8000786:	3b02      	subs	r3, #2
 8000788:	4465      	add	r5, ip
 800078a:	1a28      	subs	r0, r5, r0
 800078c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000790:	e738      	b.n	8000604 <__udivmoddi4+0x104>
 8000792:	4631      	mov	r1, r6
 8000794:	4630      	mov	r0, r6
 8000796:	e707      	b.n	80005a8 <__udivmoddi4+0xa8>
 8000798:	462f      	mov	r7, r5
 800079a:	e6e4      	b.n	8000566 <__udivmoddi4+0x66>
 800079c:	4618      	mov	r0, r3
 800079e:	e6f9      	b.n	8000594 <__udivmoddi4+0x94>
 80007a0:	454b      	cmp	r3, r9
 80007a2:	d2a9      	bcs.n	80006f8 <__udivmoddi4+0x1f8>
 80007a4:	ebb9 0802 	subs.w	r8, r9, r2
 80007a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80007ac:	3801      	subs	r0, #1
 80007ae:	e7a3      	b.n	80006f8 <__udivmoddi4+0x1f8>
 80007b0:	4643      	mov	r3, r8
 80007b2:	e7ea      	b.n	800078a <__udivmoddi4+0x28a>
 80007b4:	4628      	mov	r0, r5
 80007b6:	e794      	b.n	80006e2 <__udivmoddi4+0x1e2>
 80007b8:	4641      	mov	r1, r8
 80007ba:	e7d1      	b.n	8000760 <__udivmoddi4+0x260>
 80007bc:	46d0      	mov	r8, sl
 80007be:	e77b      	b.n	80006b8 <__udivmoddi4+0x1b8>
 80007c0:	4464      	add	r4, ip
 80007c2:	3802      	subs	r0, #2
 80007c4:	e747      	b.n	8000656 <__udivmoddi4+0x156>
 80007c6:	3b02      	subs	r3, #2
 80007c8:	4465      	add	r5, ip
 80007ca:	e72f      	b.n	800062c <__udivmoddi4+0x12c>
 80007cc:	4608      	mov	r0, r1
 80007ce:	e706      	b.n	80005de <__udivmoddi4+0xde>
 80007d0:	4631      	mov	r1, r6
 80007d2:	e6e9      	b.n	80005a8 <__udivmoddi4+0xa8>

080007d4 <__aeabi_idiv0>:
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	4b50      	ldr	r3, [pc, #320]	; (8000930 <MX_GPIO_Init+0x158>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	4a4f      	ldr	r2, [pc, #316]	; (8000930 <MX_GPIO_Init+0x158>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	61d3      	str	r3, [r2, #28]
 80007fa:	4b4d      	ldr	r3, [pc, #308]	; (8000930 <MX_GPIO_Init+0x158>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	4b4a      	ldr	r3, [pc, #296]	; (8000930 <MX_GPIO_Init+0x158>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	4a49      	ldr	r2, [pc, #292]	; (8000930 <MX_GPIO_Init+0x158>)
 800080c:	f043 0320 	orr.w	r3, r3, #32
 8000810:	61d3      	str	r3, [r2, #28]
 8000812:	4b47      	ldr	r3, [pc, #284]	; (8000930 <MX_GPIO_Init+0x158>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	f003 0320 	and.w	r3, r3, #32
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b44      	ldr	r3, [pc, #272]	; (8000930 <MX_GPIO_Init+0x158>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a43      	ldr	r2, [pc, #268]	; (8000930 <MX_GPIO_Init+0x158>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b41      	ldr	r3, [pc, #260]	; (8000930 <MX_GPIO_Init+0x158>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b3e      	ldr	r3, [pc, #248]	; (8000930 <MX_GPIO_Init+0x158>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	4a3d      	ldr	r2, [pc, #244]	; (8000930 <MX_GPIO_Init+0x158>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	61d3      	str	r3, [r2, #28]
 8000842:	4b3b      	ldr	r3, [pc, #236]	; (8000930 <MX_GPIO_Init+0x158>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084e:	4b38      	ldr	r3, [pc, #224]	; (8000930 <MX_GPIO_Init+0x158>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	4a37      	ldr	r2, [pc, #220]	; (8000930 <MX_GPIO_Init+0x158>)
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	61d3      	str	r3, [r2, #28]
 800085a:	4b35      	ldr	r3, [pc, #212]	; (8000930 <MX_GPIO_Init+0x158>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f003 0308 	and.w	r3, r3, #8
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_GREEN_Pin|L_D1_Pin|LED_YELLOW_Pin
 8000866:	2200      	movs	r2, #0
 8000868:	f241 51ef 	movw	r1, #5615	; 0x15ef
 800086c:	4831      	ldr	r0, [pc, #196]	; (8000934 <MX_GPIO_Init+0x15c>)
 800086e:	f002 f9e7 	bl	8002c40 <HAL_GPIO_WritePin>
                          |Czlon4_D1_Pin|Czlon3_D2_Pin|Czlon2_D2_Pin|Czlon3_D1_Pin
                          |L_D2_Pin|R_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Czlon1_D2_Pin|Czlon2_D1_Pin|Czlon5_D1_Pin
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 8000878:	482f      	ldr	r0, [pc, #188]	; (8000938 <MX_GPIO_Init+0x160>)
 800087a:	f002 f9e1 	bl	8002c40 <HAL_GPIO_WritePin>
                          |Czlon4_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|CSN_Pin|Czlon1_D1_Pin|Czlon5_D2_Pin
 800087e:	2200      	movs	r2, #0
 8000880:	f241 4136 	movw	r1, #5174	; 0x1436
 8000884:	482d      	ldr	r0, [pc, #180]	; (800093c <MX_GPIO_Init+0x164>)
 8000886:	f002 f9db 	bl	8002c40 <HAL_GPIO_WritePin>
                          |Podstawa_D2_Pin|Podstawa_D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R_D1_GPIO_Port, R_D1_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2104      	movs	r1, #4
 800088e:	482c      	ldr	r0, [pc, #176]	; (8000940 <MX_GPIO_Init+0x168>)
 8000890:	f002 f9d6 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4822      	ldr	r0, [pc, #136]	; (8000934 <MX_GPIO_Init+0x15c>)
 80008ac:	f002 f838 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|L_D1_Pin|LED_YELLOW_Pin
 80008b0:	f241 53ef 	movw	r3, #5615	; 0x15ef
 80008b4:	617b      	str	r3, [r7, #20]
                          |Czlon4_D1_Pin|Czlon3_D2_Pin|Czlon2_D2_Pin|Czlon3_D1_Pin
                          |L_D2_Pin|R_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	481a      	ldr	r0, [pc, #104]	; (8000934 <MX_GPIO_Init+0x15c>)
 80008ca:	f002 f829 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Czlon1_D2_Pin|Czlon2_D1_Pin|Czlon5_D1_Pin
 80008ce:	f44f 53d9 	mov.w	r3, #6944	; 0x1b20
 80008d2:	617b      	str	r3, [r7, #20]
                          |Czlon4_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_GPIO_Init+0x160>)
 80008e8:	f002 f81a 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin|Czlon1_D1_Pin|Czlon5_D2_Pin
 80008ec:	f241 4336 	movw	r3, #5174	; 0x1436
 80008f0:	617b      	str	r3, [r7, #20]
                          |Podstawa_D2_Pin|Podstawa_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_GPIO_Init+0x164>)
 8000906:	f002 f80b 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = R_D1_Pin;
 800090a:	2304      	movs	r3, #4
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R_D1_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4807      	ldr	r0, [pc, #28]	; (8000940 <MX_GPIO_Init+0x168>)
 8000922:	f001 fffd 	bl	8002920 <HAL_GPIO_Init>

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40020800 	.word	0x40020800
 8000938:	40020000 	.word	0x40020000
 800093c:	40020400 	.word	0x40020400
 8000940:	40020c00 	.word	0x40020c00

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000948:	f001 fe75 	bl	8002636 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094c:	f000 fa22 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000950:	f7ff ff42 	bl	80007d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000954:	f001 fddc 	bl	8002510 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000958:	f001 fa58 	bl	8001e0c <MX_SPI2_Init>
  MX_TIM3_Init();
 800095c:	f001 fb2e 	bl	8001fbc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000960:	f001 fbc0 	bl	80020e4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000964:	f001 fc52 	bl	800220c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //nRF initialize and settings

  nRF24_Init(&hspi2);
 8000968:	48ab      	ldr	r0, [pc, #684]	; (8000c18 <main+0x2d4>)
 800096a:	f001 fa09 	bl	8001d80 <nRF24_Init>
  nRF24_SetRXAddress(0, "Odb");
 800096e:	49ab      	ldr	r1, [pc, #684]	; (8000c1c <main+0x2d8>)
 8000970:	2000      	movs	r0, #0
 8000972:	f001 f94a 	bl	8001c0a <nRF24_SetRXAddress>
  nRF24_SetTXAddress("Nad");
 8000976:	48aa      	ldr	r0, [pc, #680]	; (8000c20 <main+0x2dc>)
 8000978:	f001 f980 	bl	8001c7c <nRF24_SetTXAddress>
  nRF24_RX_Mode();
 800097c:	f000 ff94 	bl	80018a8 <nRF24_RX_Mode>

  //Set timer 2 to PWM function

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000980:	2100      	movs	r1, #0
 8000982:	48a8      	ldr	r0, [pc, #672]	; (8000c24 <main+0x2e0>)
 8000984:	f003 fdd0 	bl	8004528 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000988:	2104      	movs	r1, #4
 800098a:	48a6      	ldr	r0, [pc, #664]	; (8000c24 <main+0x2e0>)
 800098c:	f003 fdcc 	bl	8004528 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000990:	2108      	movs	r1, #8
 8000992:	48a4      	ldr	r0, [pc, #656]	; (8000c24 <main+0x2e0>)
 8000994:	f003 fdc8 	bl	8004528 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000998:	210c      	movs	r1, #12
 800099a:	48a2      	ldr	r0, [pc, #648]	; (8000c24 <main+0x2e0>)
 800099c:	f003 fdc4 	bl	8004528 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80009a0:	2100      	movs	r1, #0
 80009a2:	48a1      	ldr	r0, [pc, #644]	; (8000c28 <main+0x2e4>)
 80009a4:	f003 fdc0 	bl	8004528 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80009a8:	2104      	movs	r1, #4
 80009aa:	489f      	ldr	r0, [pc, #636]	; (8000c28 <main+0x2e4>)
 80009ac:	f003 fdbc 	bl	8004528 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80009b0:	2108      	movs	r1, #8
 80009b2:	489d      	ldr	r0, [pc, #628]	; (8000c28 <main+0x2e4>)
 80009b4:	f003 fdb8 	bl	8004528 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80009b8:	2104      	movs	r1, #4
 80009ba:	489c      	ldr	r0, [pc, #624]	; (8000c2c <main+0x2e8>)
 80009bc:	f003 fdb4 	bl	8004528 <HAL_TIM_PWM_Start>
  time = HAL_GetTick();
 80009c0:	f001 fe9e 	bl	8002700 <HAL_GetTick>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4a9a      	ldr	r2, [pc, #616]	; (8000c30 <main+0x2ec>)
 80009c8:	6013      	str	r3, [r2, #0]
  timereset = HAL_GetTick();
 80009ca:	f001 fe99 	bl	8002700 <HAL_GetTick>
 80009ce:	4603      	mov	r3, r0
 80009d0:	4a98      	ldr	r2, [pc, #608]	; (8000c34 <main+0x2f0>)
 80009d2:	6013      	str	r3, [r2, #0]
  stoppodst();
 80009d4:	f000 fac4 	bl	8000f60 <stoppodst>
  stopczlon5();
 80009d8:	f000 fbf8 	bl	80011cc <stopczlon5>
  stopczlon1();
 80009dc:	f000 fafc 	bl	8000fd8 <stopczlon1>
  stopczlon2();
 80009e0:	f000 fb3a 	bl	8001058 <stopczlon2>
  stopczlon3();
 80009e4:	f000 fb74 	bl	80010d0 <stopczlon3>
  stopczlon4();
 80009e8:	f000 fbb0 	bl	800114c <stopczlon4>
  stopLmotorF();
 80009ec:	f000 fc2a 	bl	8001244 <stopLmotorF>
  stopRmotorF();
 80009f0:	f000 fc66 	bl	80012c0 <stopRmotorF>
  {


	  //Check if there is receive message

	  if(nRF24_RXAvailible())
 80009f4:	f001 f9a4 	bl	8001d40 <nRF24_RXAvailible>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 80e4 	beq.w	8000bc8 <main+0x284>
	  	  	  {
		  	  //if working blink diode once per second
		  	  	 if (HAL_GetTick()-time >1000)
 8000a00:	f001 fe7e 	bl	8002700 <HAL_GetTick>
 8000a04:	4602      	mov	r2, r0
 8000a06:	4b8a      	ldr	r3, [pc, #552]	; (8000c30 <main+0x2ec>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a10:	d908      	bls.n	8000a24 <main+0xe0>
		  	  	 {
		  	  		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a12:	2120      	movs	r1, #32
 8000a14:	4888      	ldr	r0, [pc, #544]	; (8000c38 <main+0x2f4>)
 8000a16:	f002 f92b 	bl	8002c70 <HAL_GPIO_TogglePin>
		  	  		time = HAL_GetTick();
 8000a1a:	f001 fe71 	bl	8002700 <HAL_GetTick>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	4a83      	ldr	r2, [pc, #524]	; (8000c30 <main+0x2ec>)
 8000a22:	6013      	str	r3, [r2, #0]
		  	  	 }
		  	  	 //read received data and save to nrfdata variable
	  	  		 nRF24_ReadRXPaylaod(nrfdata);
 8000a24:	4885      	ldr	r0, [pc, #532]	; (8000c3c <main+0x2f8>)
 8000a26:	f001 f96f 	bl	8001d08 <nRF24_ReadRXPaylaod>
	  	  		 timereset = HAL_GetTick();
 8000a2a:	f001 fe69 	bl	8002700 <HAL_GetTick>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	4a80      	ldr	r2, [pc, #512]	; (8000c34 <main+0x2f0>)
 8000a32:	6013      	str	r3, [r2, #0]

				 //byte 1
				 button   = nrfdata[0] & 0b00000001; // acsii 1 dec 49
 8000a34:	4b81      	ldr	r3, [pc, #516]	; (8000c3c <main+0x2f8>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b80      	ldr	r3, [pc, #512]	; (8000c40 <main+0x2fc>)
 8000a40:	701a      	strb	r2, [r3, #0]
				 button01 = (nrfdata[0] & 0b00000010) >> 1; // ascii 2 dec 50
 8000a42:	4b7e      	ldr	r3, [pc, #504]	; (8000c3c <main+0x2f8>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	105b      	asrs	r3, r3, #1
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	4b7c      	ldr	r3, [pc, #496]	; (8000c44 <main+0x300>)
 8000a52:	701a      	strb	r2, [r3, #0]
				 button1A = (nrfdata[0] & 0b00000100) >> 2; // ascii 3 dec 51
 8000a54:	4b79      	ldr	r3, [pc, #484]	; (8000c3c <main+0x2f8>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	109b      	asrs	r3, r3, #2
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4b79      	ldr	r3, [pc, #484]	; (8000c48 <main+0x304>)
 8000a64:	701a      	strb	r2, [r3, #0]
				 button1B = (nrfdata[0] & 0b00001000) >> 3; // ascii 4 dec 52
 8000a66:	4b75      	ldr	r3, [pc, #468]	; (8000c3c <main+0x2f8>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	10db      	asrs	r3, r3, #3
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	4b75      	ldr	r3, [pc, #468]	; (8000c4c <main+0x308>)
 8000a76:	701a      	strb	r2, [r3, #0]
				 button2A = (nrfdata[0] & 0b00010000) >> 4; // ascii 5 dec 53
 8000a78:	4b70      	ldr	r3, [pc, #448]	; (8000c3c <main+0x2f8>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	111b      	asrs	r3, r3, #4
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4b72      	ldr	r3, [pc, #456]	; (8000c50 <main+0x30c>)
 8000a88:	701a      	strb	r2, [r3, #0]
				 button2B = (nrfdata[0] & 0b00100000) >> 5; // ascii 6 dec 54
 8000a8a:	4b6c      	ldr	r3, [pc, #432]	; (8000c3c <main+0x2f8>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	115b      	asrs	r3, r3, #5
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b6e      	ldr	r3, [pc, #440]	; (8000c54 <main+0x310>)
 8000a9a:	701a      	strb	r2, [r3, #0]
				 button3A = (nrfdata[0] & 0b01000000) >> 6; // ascii 7 dec 55
 8000a9c:	4b67      	ldr	r3, [pc, #412]	; (8000c3c <main+0x2f8>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	119b      	asrs	r3, r3, #6
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b6b      	ldr	r3, [pc, #428]	; (8000c58 <main+0x314>)
 8000aac:	701a      	strb	r2, [r3, #0]
				 button3B = (nrfdata[0] & 0b10000000) >> 7; // ascii 8 dec 56
 8000aae:	4b63      	ldr	r3, [pc, #396]	; (8000c3c <main+0x2f8>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	09db      	lsrs	r3, r3, #7
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4b69      	ldr	r3, [pc, #420]	; (8000c5c <main+0x318>)
 8000ab8:	701a      	strb	r2, [r3, #0]


				 //byte 2
				 button4A = (nrfdata[1] & 0b00000001); // acsii 9 dec 57
 8000aba:	4b60      	ldr	r3, [pc, #384]	; (8000c3c <main+0x2f8>)
 8000abc:	785b      	ldrb	r3, [r3, #1]
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b66      	ldr	r3, [pc, #408]	; (8000c60 <main+0x31c>)
 8000ac6:	701a      	strb	r2, [r3, #0]
				 button4B = (nrfdata[1] & 0b00000010) >> 1; // ascii : dec 58
 8000ac8:	4b5c      	ldr	r3, [pc, #368]	; (8000c3c <main+0x2f8>)
 8000aca:	785b      	ldrb	r3, [r3, #1]
 8000acc:	105b      	asrs	r3, r3, #1
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b63      	ldr	r3, [pc, #396]	; (8000c64 <main+0x320>)
 8000ad8:	701a      	strb	r2, [r3, #0]
				 moveA    = (nrfdata[1] & 0b00000100) >> 2; // ascii ; dec 59
 8000ada:	4b58      	ldr	r3, [pc, #352]	; (8000c3c <main+0x2f8>)
 8000adc:	785b      	ldrb	r3, [r3, #1]
 8000ade:	109b      	asrs	r3, r3, #2
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	4b5f      	ldr	r3, [pc, #380]	; (8000c68 <main+0x324>)
 8000aea:	701a      	strb	r2, [r3, #0]
				 moveB    = (nrfdata[1] & 0b00001000) >> 3; // ascii < dec 60
 8000aec:	4b53      	ldr	r3, [pc, #332]	; (8000c3c <main+0x2f8>)
 8000aee:	785b      	ldrb	r3, [r3, #1]
 8000af0:	10db      	asrs	r3, r3, #3
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b5c      	ldr	r3, [pc, #368]	; (8000c6c <main+0x328>)
 8000afc:	701a      	strb	r2, [r3, #0]
				 rotateA  = (nrfdata[1] & 0b00010000) >> 4; // ascii > dec 62
 8000afe:	4b4f      	ldr	r3, [pc, #316]	; (8000c3c <main+0x2f8>)
 8000b00:	785b      	ldrb	r3, [r3, #1]
 8000b02:	111b      	asrs	r3, r3, #4
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b58      	ldr	r3, [pc, #352]	; (8000c70 <main+0x32c>)
 8000b0e:	701a      	strb	r2, [r3, #0]
				 rotateB  = (nrfdata[1] & 0b00100000) >> 5; // ascii ? dec 63
 8000b10:	4b4a      	ldr	r3, [pc, #296]	; (8000c3c <main+0x2f8>)
 8000b12:	785b      	ldrb	r3, [r3, #1]
 8000b14:	115b      	asrs	r3, r3, #5
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b55      	ldr	r3, [pc, #340]	; (8000c74 <main+0x330>)
 8000b20:	701a      	strb	r2, [r3, #0]
				 offcon	  = (nrfdata[1] & 0b01000000) >> 6; // ascii 7
 8000b22:	4b46      	ldr	r3, [pc, #280]	; (8000c3c <main+0x2f8>)
 8000b24:	785b      	ldrb	r3, [r3, #1]
 8000b26:	119b      	asrs	r3, r3, #6
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	4b51      	ldr	r3, [pc, #324]	; (8000c78 <main+0x334>)
 8000b32:	701a      	strb	r2, [r3, #0]
				 autonomy = (nrfdata[1] & 0b10000000) >> 7; // ascii 8
 8000b34:	4b41      	ldr	r3, [pc, #260]	; (8000c3c <main+0x2f8>)
 8000b36:	785b      	ldrb	r3, [r3, #1]
 8000b38:	09db      	lsrs	r3, r3, #7
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	4b4f      	ldr	r3, [pc, #316]	; (8000c7c <main+0x338>)
 8000b3e:	701a      	strb	r2, [r3, #0]

				 byte1 = nrfdata[0];
 8000b40:	4b3e      	ldr	r3, [pc, #248]	; (8000c3c <main+0x2f8>)
 8000b42:	781a      	ldrb	r2, [r3, #0]
 8000b44:	4b4e      	ldr	r3, [pc, #312]	; (8000c80 <main+0x33c>)
 8000b46:	701a      	strb	r2, [r3, #0]
				 byte2 = nrfdata[1];
 8000b48:	4b3c      	ldr	r3, [pc, #240]	; (8000c3c <main+0x2f8>)
 8000b4a:	785a      	ldrb	r2, [r3, #1]
 8000b4c:	4b4d      	ldr	r3, [pc, #308]	; (8000c84 <main+0x340>)
 8000b4e:	701a      	strb	r2, [r3, #0]
				 byte3 = nrfdata[2];
 8000b50:	4b3a      	ldr	r3, [pc, #232]	; (8000c3c <main+0x2f8>)
 8000b52:	789a      	ldrb	r2, [r3, #2]
 8000b54:	4b4c      	ldr	r3, [pc, #304]	; (8000c88 <main+0x344>)
 8000b56:	701a      	strb	r2, [r3, #0]
				 byte4 = nrfdata[3];
 8000b58:	4b38      	ldr	r3, [pc, #224]	; (8000c3c <main+0x2f8>)
 8000b5a:	78da      	ldrb	r2, [r3, #3]
 8000b5c:	4b4b      	ldr	r3, [pc, #300]	; (8000c8c <main+0x348>)
 8000b5e:	701a      	strb	r2, [r3, #0]
				 byte5 = nrfdata[4];
 8000b60:	4b36      	ldr	r3, [pc, #216]	; (8000c3c <main+0x2f8>)
 8000b62:	791a      	ldrb	r2, [r3, #4]
 8000b64:	4b4a      	ldr	r3, [pc, #296]	; (8000c90 <main+0x34c>)
 8000b66:	701a      	strb	r2, [r3, #0]
				 byte6 = nrfdata[5];
 8000b68:	4b34      	ldr	r3, [pc, #208]	; (8000c3c <main+0x2f8>)
 8000b6a:	795a      	ldrb	r2, [r3, #5]
 8000b6c:	4b49      	ldr	r3, [pc, #292]	; (8000c94 <main+0x350>)
 8000b6e:	701a      	strb	r2, [r3, #0]
				 byte7 = nrfdata[6]; // nrfdata6
 8000b70:	4b32      	ldr	r3, [pc, #200]	; (8000c3c <main+0x2f8>)
 8000b72:	799a      	ldrb	r2, [r3, #6]
 8000b74:	4b48      	ldr	r3, [pc, #288]	; (8000c98 <main+0x354>)
 8000b76:	701a      	strb	r2, [r3, #0]
				 byte8 = nrfdata[7]; // nrfdata7
 8000b78:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <main+0x2f8>)
 8000b7a:	79da      	ldrb	r2, [r3, #7]
 8000b7c:	4b47      	ldr	r3, [pc, #284]	; (8000c9c <main+0x358>)
 8000b7e:	701a      	strb	r2, [r3, #0]

				 chsm = nrfdata[8];
 8000b80:	4b2e      	ldr	r3, [pc, #184]	; (8000c3c <main+0x2f8>)
 8000b82:	7a1a      	ldrb	r2, [r3, #8]
 8000b84:	4b46      	ldr	r3, [pc, #280]	; (8000ca0 <main+0x35c>)
 8000b86:	701a      	strb	r2, [r3, #0]
				 sum = ((byte1 + byte2 + byte3 + byte4 + byte5 + byte6 + byte7 + byte8) & 0xFF);
 8000b88:	4b3d      	ldr	r3, [pc, #244]	; (8000c80 <main+0x33c>)
 8000b8a:	781a      	ldrb	r2, [r3, #0]
 8000b8c:	4b3d      	ldr	r3, [pc, #244]	; (8000c84 <main+0x340>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4413      	add	r3, r2
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	4b3c      	ldr	r3, [pc, #240]	; (8000c88 <main+0x344>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4413      	add	r3, r2
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b3b      	ldr	r3, [pc, #236]	; (8000c8c <main+0x348>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	4b3a      	ldr	r3, [pc, #232]	; (8000c90 <main+0x34c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4413      	add	r3, r2
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b39      	ldr	r3, [pc, #228]	; (8000c94 <main+0x350>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	4b38      	ldr	r3, [pc, #224]	; (8000c98 <main+0x354>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	4413      	add	r3, r2
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b37      	ldr	r3, [pc, #220]	; (8000c9c <main+0x358>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	4b37      	ldr	r3, [pc, #220]	; (8000ca4 <main+0x360>)
 8000bc6:	701a      	strb	r2, [r3, #0]

	  	  	  }
	  //if there is no signal restart nRF24 and stop motor
	  if(HAL_GetTick()-timereset > 500)
 8000bc8:	f001 fd9a 	bl	8002700 <HAL_GetTick>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <main+0x2f0>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000bd8:	d91b      	bls.n	8000c12 <main+0x2ce>
	  {
		  nRF24_Init(&hspi2);
 8000bda:	480f      	ldr	r0, [pc, #60]	; (8000c18 <main+0x2d4>)
 8000bdc:	f001 f8d0 	bl	8001d80 <nRF24_Init>
		  nRF24_SetRXAddress(0, "Odb");
 8000be0:	490e      	ldr	r1, [pc, #56]	; (8000c1c <main+0x2d8>)
 8000be2:	2000      	movs	r0, #0
 8000be4:	f001 f811 	bl	8001c0a <nRF24_SetRXAddress>
		  nRF24_SetTXAddress("Nad");
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <main+0x2dc>)
 8000bea:	f001 f847 	bl	8001c7c <nRF24_SetTXAddress>
		  nRF24_RX_Mode();
 8000bee:	f000 fe5b 	bl	80018a8 <nRF24_RX_Mode>
		  stoppodst();
 8000bf2:	f000 f9b5 	bl	8000f60 <stoppodst>
		  stopczlon5();
 8000bf6:	f000 fae9 	bl	80011cc <stopczlon5>
		  stopczlon1();
 8000bfa:	f000 f9ed 	bl	8000fd8 <stopczlon1>
		  stopczlon2();
 8000bfe:	f000 fa2b 	bl	8001058 <stopczlon2>
		  stopczlon3();
 8000c02:	f000 fa65 	bl	80010d0 <stopczlon3>
		  stopczlon4();
 8000c06:	f000 faa1 	bl	800114c <stopczlon4>
		  stopLmotorF();
 8000c0a:	f000 fb1b 	bl	8001244 <stopLmotorF>
		  stopRmotorF();
 8000c0e:	f000 fb57 	bl	80012c0 <stopRmotorF>



	  }
	  if(sum == chsm)
 8000c12:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <main+0x360>)
 8000c14:	781a      	ldrb	r2, [r3, #0]
 8000c16:	e047      	b.n	8000ca8 <main+0x364>
 8000c18:	20000070 	.word	0x20000070
 8000c1c:	0800513c 	.word	0x0800513c
 8000c20:	08005140 	.word	0x08005140
 8000c24:	20000108 	.word	0x20000108
 8000c28:	200000c8 	.word	0x200000c8
 8000c2c:	20000148 	.word	0x20000148
 8000c30:	20000060 	.word	0x20000060
 8000c34:	20000064 	.word	0x20000064
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	2000002c 	.word	0x2000002c
 8000c40:	20000035 	.word	0x20000035
 8000c44:	20000036 	.word	0x20000036
 8000c48:	20000037 	.word	0x20000037
 8000c4c:	20000038 	.word	0x20000038
 8000c50:	20000039 	.word	0x20000039
 8000c54:	2000003a 	.word	0x2000003a
 8000c58:	2000003b 	.word	0x2000003b
 8000c5c:	2000003c 	.word	0x2000003c
 8000c60:	2000003d 	.word	0x2000003d
 8000c64:	2000003e 	.word	0x2000003e
 8000c68:	2000003f 	.word	0x2000003f
 8000c6c:	20000040 	.word	0x20000040
 8000c70:	20000041 	.word	0x20000041
 8000c74:	20000042 	.word	0x20000042
 8000c78:	20000043 	.word	0x20000043
 8000c7c:	20000044 	.word	0x20000044
 8000c80:	20000046 	.word	0x20000046
 8000c84:	20000047 	.word	0x20000047
 8000c88:	20000048 	.word	0x20000048
 8000c8c:	20000049 	.word	0x20000049
 8000c90:	2000004a 	.word	0x2000004a
 8000c94:	2000004b 	.word	0x2000004b
 8000c98:	2000004c 	.word	0x2000004c
 8000c9c:	2000004d 	.word	0x2000004d
 8000ca0:	2000004e 	.word	0x2000004e
 8000ca4:	20000045 	.word	0x20000045
 8000ca8:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <main+0x440>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	f47f aea1 	bne.w	80009f4 <main+0xb0>
	  {
		  if (offcon)
 8000cb2:	4b35      	ldr	r3, [pc, #212]	; (8000d88 <main+0x444>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d01f      	beq.n	8000cfa <main+0x3b6>
		  {
			  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4833      	ldr	r0, [pc, #204]	; (8000d8c <main+0x448>)
 8000cc0:	f001 ffbe 	bl	8002c40 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2108      	movs	r1, #8
 8000cc8:	4830      	ldr	r0, [pc, #192]	; (8000d8c <main+0x448>)
 8000cca:	f001 ffb9 	bl	8002c40 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	482e      	ldr	r0, [pc, #184]	; (8000d8c <main+0x448>)
 8000cd4:	f001 ffb4 	bl	8002c40 <HAL_GPIO_WritePin>
			  stoppodst();
 8000cd8:	f000 f942 	bl	8000f60 <stoppodst>
			  stopczlon5();
 8000cdc:	f000 fa76 	bl	80011cc <stopczlon5>
			  stopczlon1();
 8000ce0:	f000 f97a 	bl	8000fd8 <stopczlon1>
			  stopczlon2();
 8000ce4:	f000 f9b8 	bl	8001058 <stopczlon2>
			  stopczlon3();
 8000ce8:	f000 f9f2 	bl	80010d0 <stopczlon3>
			  stopczlon4();
 8000cec:	f000 fa2e 	bl	800114c <stopczlon4>
			  stopLmotorF();
 8000cf0:	f000 faa8 	bl	8001244 <stopLmotorF>
			  stopRmotorF();
 8000cf4:	f000 fae4 	bl	80012c0 <stopRmotorF>
 8000cf8:	e67c      	b.n	80009f4 <main+0xb0>

		  }
		  else if (autonomy)
 8000cfa:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <main+0x44c>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d01f      	beq.n	8000d42 <main+0x3fe>
		  {
			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2101      	movs	r1, #1
 8000d06:	4821      	ldr	r0, [pc, #132]	; (8000d8c <main+0x448>)
 8000d08:	f001 ff9a 	bl	8002c40 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2102      	movs	r1, #2
 8000d10:	481e      	ldr	r0, [pc, #120]	; (8000d8c <main+0x448>)
 8000d12:	f001 ff95 	bl	8002c40 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	2108      	movs	r1, #8
 8000d1a:	481c      	ldr	r0, [pc, #112]	; (8000d8c <main+0x448>)
 8000d1c:	f001 ff90 	bl	8002c40 <HAL_GPIO_WritePin>

			  stoppodst();
 8000d20:	f000 f91e 	bl	8000f60 <stoppodst>
			  stopczlon5();
 8000d24:	f000 fa52 	bl	80011cc <stopczlon5>
			  stopczlon1();
 8000d28:	f000 f956 	bl	8000fd8 <stopczlon1>
			  stopczlon2();
 8000d2c:	f000 f994 	bl	8001058 <stopczlon2>
			  stopczlon3();
 8000d30:	f000 f9ce 	bl	80010d0 <stopczlon3>
			  stopczlon4();
 8000d34:	f000 fa0a 	bl	800114c <stopczlon4>
			  stopLmotorF();
 8000d38:	f000 fa84 	bl	8001244 <stopLmotorF>
			  stopRmotorF();
 8000d3c:	f000 fac0 	bl	80012c0 <stopRmotorF>
 8000d40:	e658      	b.n	80009f4 <main+0xb0>
		  }
		  else
		  {
				// triggergripper();
			  	 HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2108      	movs	r1, #8
 8000d46:	4811      	ldr	r0, [pc, #68]	; (8000d8c <main+0x448>)
 8000d48:	f001 ff7a 	bl	8002c40 <HAL_GPIO_WritePin>
			  	 HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2101      	movs	r1, #1
 8000d50:	480e      	ldr	r0, [pc, #56]	; (8000d8c <main+0x448>)
 8000d52:	f001 ff75 	bl	8002c40 <HAL_GPIO_WritePin>
			  	 HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	2102      	movs	r1, #2
 8000d5a:	480c      	ldr	r0, [pc, #48]	; (8000d8c <main+0x448>)
 8000d5c:	f001 ff70 	bl	8002c40 <HAL_GPIO_WritePin>

				 rightside();
 8000d60:	f000 fac6 	bl	80012f0 <rightside>
				 leftside();
 8000d64:	f000 fb52 	bl	800140c <leftside>
				 motor5control();
 8000d68:	f000 fc88 	bl	800167c <motor5control>
				 motor4control();
 8000d6c:	f000 fc64 	bl	8001638 <motor4control>
				 motor3control();
 8000d70:	f000 fc40 	bl	80015f4 <motor3control>
				 motor2control();
 8000d74:	f000 fc1c 	bl	80015b0 <motor2control>
				 motor1control();
 8000d78:	f000 fbf8 	bl	800156c <motor1control>
				 motor0control();
 8000d7c:	f000 fbd4 	bl	8001528 <motor0control>
	  if(nRF24_RXAvailible())
 8000d80:	e638      	b.n	80009f4 <main+0xb0>
 8000d82:	bf00      	nop
 8000d84:	2000004e 	.word	0x2000004e
 8000d88:	20000043 	.word	0x20000043
 8000d8c:	40020800 	.word	0x40020800
 8000d90:	20000044 	.word	0x20000044

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b092      	sub	sp, #72	; 0x48
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	2234      	movs	r2, #52	; 0x34
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f004 f9b6 	bl	8005114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	463b      	mov	r3, r7
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <SystemClock_Config+0x98>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000dbe:	4a1b      	ldr	r2, [pc, #108]	; (8000e2c <SystemClock_Config+0x98>)
 8000dc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dc4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dce:	2310      	movs	r3, #16
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000dda:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000dde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000de0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000de4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4618      	mov	r0, r3
 8000dec:	f001 ff5a 	bl	8002ca4 <HAL_RCC_OscConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000df6:	f000 fc63 	bl	80016c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfa:	230f      	movs	r3, #15
 8000dfc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e0e:	463b      	mov	r3, r7
 8000e10:	2101      	movs	r1, #1
 8000e12:	4618      	mov	r0, r3
 8000e14:	f002 fa76 	bl	8003304 <HAL_RCC_ClockConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e1e:	f000 fc4f 	bl	80016c0 <Error_Handler>
  }
}
 8000e22:	bf00      	nop
 8000e24:	3748      	adds	r7, #72	; 0x48
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40007000 	.word	0x40007000

08000e30 <map>:

/* USER CODE BEGIN 4 */

uint16_t map(uint16_t input_value, uint16_t minRange, uint16_t maxRange, uint16_t New_minRange, uint16_t New_maxRange)
{
 8000e30:	b490      	push	{r4, r7}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4604      	mov	r4, r0
 8000e38:	4608      	mov	r0, r1
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4623      	mov	r3, r4
 8000e40:	80fb      	strh	r3, [r7, #6]
 8000e42:	4603      	mov	r3, r0
 8000e44:	80bb      	strh	r3, [r7, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	807b      	strh	r3, [r7, #2]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	803b      	strh	r3, [r7, #0]
	return (((input_value - minRange)*(New_maxRange - New_minRange))/(maxRange - minRange) + New_minRange);
 8000e4e:	88fa      	ldrh	r2, [r7, #6]
 8000e50:	88bb      	ldrh	r3, [r7, #4]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	8a39      	ldrh	r1, [r7, #16]
 8000e56:	883a      	ldrh	r2, [r7, #0]
 8000e58:	1a8a      	subs	r2, r1, r2
 8000e5a:	fb03 f202 	mul.w	r2, r3, r2
 8000e5e:	8879      	ldrh	r1, [r7, #2]
 8000e60:	88bb      	ldrh	r3, [r7, #4]
 8000e62:	1acb      	subs	r3, r1, r3
 8000e64:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	883b      	ldrh	r3, [r7, #0]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b29b      	uxth	r3, r3
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc90      	pop	{r4, r7}
 8000e78:	4770      	bx	lr
	...

08000e7c <PWMval>:
void PWMval(uint8_t ch, uint16_t val)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	460a      	mov	r2, r1
 8000e86:	71fb      	strb	r3, [r7, #7]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	80bb      	strh	r3, [r7, #4]
	switch (ch)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	2b07      	cmp	r3, #7
 8000e90:	d83a      	bhi.n	8000f08 <PWMval+0x8c>
 8000e92:	a201      	add	r2, pc, #4	; (adr r2, 8000e98 <PWMval+0x1c>)
 8000e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e98:	08000eb9 	.word	0x08000eb9
 8000e9c:	08000ec3 	.word	0x08000ec3
 8000ea0:	08000ecd 	.word	0x08000ecd
 8000ea4:	08000ed7 	.word	0x08000ed7
 8000ea8:	08000ee1 	.word	0x08000ee1
 8000eac:	08000eeb 	.word	0x08000eeb
 8000eb0:	08000ef5 	.word	0x08000ef5
 8000eb4:	08000eff 	.word	0x08000eff
	{
	case 0:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, val);
 8000eb8:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <PWMval+0x98>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	88ba      	ldrh	r2, [r7, #4]
 8000ebe:	635a      	str	r2, [r3, #52]	; 0x34
	break;
 8000ec0:	e022      	b.n	8000f08 <PWMval+0x8c>
	case 1:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, val);
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <PWMval+0x98>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	88ba      	ldrh	r2, [r7, #4]
 8000ec8:	639a      	str	r2, [r3, #56]	; 0x38
	break;
 8000eca:	e01d      	b.n	8000f08 <PWMval+0x8c>
	case 2:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, val);
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <PWMval+0x98>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	88ba      	ldrh	r2, [r7, #4]
 8000ed2:	63da      	str	r2, [r3, #60]	; 0x3c
	break;
 8000ed4:	e018      	b.n	8000f08 <PWMval+0x8c>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, val);
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <PWMval+0x98>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	88ba      	ldrh	r2, [r7, #4]
 8000edc:	641a      	str	r2, [r3, #64]	; 0x40
	break;
 8000ede:	e013      	b.n	8000f08 <PWMval+0x8c>
	case 4:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, val);
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <PWMval+0x9c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	88ba      	ldrh	r2, [r7, #4]
 8000ee6:	635a      	str	r2, [r3, #52]	; 0x34
	break;
 8000ee8:	e00e      	b.n	8000f08 <PWMval+0x8c>
	case 5:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, val);
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <PWMval+0x9c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	88ba      	ldrh	r2, [r7, #4]
 8000ef0:	639a      	str	r2, [r3, #56]	; 0x38
	break;
 8000ef2:	e009      	b.n	8000f08 <PWMval+0x8c>
	case 6:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, val);
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <PWMval+0x9c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	88ba      	ldrh	r2, [r7, #4]
 8000efa:	63da      	str	r2, [r3, #60]	; 0x3c
	break;
 8000efc:	e004      	b.n	8000f08 <PWMval+0x8c>
	case 7:
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, val);
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <PWMval+0xa0>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	88ba      	ldrh	r2, [r7, #4]
 8000f04:	639a      	str	r2, [r3, #56]	; 0x38
	break;
 8000f06:	bf00      	nop
	}
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000108 	.word	0x20000108
 8000f18:	200000c8 	.word	0x200000c8
 8000f1c:	20000148 	.word	0x20000148

08000f20 <podstR>:
void podstR()
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Podstawa_D1_GPIO_Port, Podstawa_D1_Pin, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2120      	movs	r1, #32
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <podstR+0x1c>)
 8000f2a:	f001 fe89 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Podstawa_D2_GPIO_Port, Podstawa_D2_Pin, GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2110      	movs	r1, #16
 8000f32:	4802      	ldr	r0, [pc, #8]	; (8000f3c <podstR+0x1c>)
 8000f34:	f001 fe84 	bl	8002c40 <HAL_GPIO_WritePin>

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40020400 	.word	0x40020400

08000f40 <podstL>:
void podstL()
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Podstawa_D2_GPIO_Port, Podstawa_D2_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2110      	movs	r1, #16
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <podstL+0x1c>)
 8000f4a:	f001 fe79 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Podstawa_D1_GPIO_Port, Podstawa_D1_Pin, GPIO_PIN_SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2120      	movs	r1, #32
 8000f52:	4802      	ldr	r0, [pc, #8]	; (8000f5c <podstL+0x1c>)
 8000f54:	f001 fe74 	bl	8002c40 <HAL_GPIO_WritePin>
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40020400 	.word	0x40020400

08000f60 <stoppodst>:

void stoppodst()
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Podstawa_D1_GPIO_Port, Podstawa_D1_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2120      	movs	r1, #32
 8000f68:	4806      	ldr	r0, [pc, #24]	; (8000f84 <stoppodst+0x24>)
 8000f6a:	f001 fe69 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Podstawa_D2_GPIO_Port, Podstawa_D2_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2110      	movs	r1, #16
 8000f72:	4804      	ldr	r0, [pc, #16]	; (8000f84 <stoppodst+0x24>)
 8000f74:	f001 fe64 	bl	8002c40 <HAL_GPIO_WritePin>
	PWMval(0,0);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f7ff ff7e 	bl	8000e7c <PWMval>
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40020400 	.word	0x40020400

08000f88 <czlon1R>:

void czlon1R()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon1_D1_GPIO_Port, Czlon1_D1_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <czlon1R+0x20>)
 8000f94:	f001 fe54 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon1_D2_GPIO_Port, Czlon1_D2_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f9e:	4803      	ldr	r0, [pc, #12]	; (8000fac <czlon1R+0x24>)
 8000fa0:	f001 fe4e 	bl	8002c40 <HAL_GPIO_WritePin>
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40020400 	.word	0x40020400
 8000fac:	40020000 	.word	0x40020000

08000fb0 <czlon1L>:
void czlon1L()
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon1_D1_GPIO_Port, Czlon1_D1_Pin, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <czlon1L+0x20>)
 8000fbc:	f001 fe40 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon1_D2_GPIO_Port, Czlon1_D2_Pin, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc6:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <czlon1L+0x24>)
 8000fc8:	f001 fe3a 	bl	8002c40 <HAL_GPIO_WritePin>
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	40020000 	.word	0x40020000

08000fd8 <stopczlon1>:
void stopczlon1()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon1_D1_GPIO_Port, Czlon1_D1_Pin, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe2:	4807      	ldr	r0, [pc, #28]	; (8001000 <stopczlon1+0x28>)
 8000fe4:	f001 fe2c 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon1_D2_GPIO_Port, Czlon1_D2_Pin, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <stopczlon1+0x2c>)
 8000ff0:	f001 fe26 	bl	8002c40 <HAL_GPIO_WritePin>
	PWMval(1,0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f7ff ff40 	bl	8000e7c <PWMval>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40020400 	.word	0x40020400
 8001004:	40020000 	.word	0x40020000

08001008 <czlon2R>:

void czlon2R()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon2_D1_GPIO_Port, Czlon2_D1_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <czlon2R+0x20>)
 8001014:	f001 fe14 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon2_D2_GPIO_Port, Czlon2_D2_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	2180      	movs	r1, #128	; 0x80
 800101c:	4803      	ldr	r0, [pc, #12]	; (800102c <czlon2R+0x24>)
 800101e:	f001 fe0f 	bl	8002c40 <HAL_GPIO_WritePin>
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40020000 	.word	0x40020000
 800102c:	40020800 	.word	0x40020800

08001030 <czlon2L>:
void czlon2L()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon2_D1_GPIO_Port, Czlon2_D1_Pin, GPIO_PIN_SET);
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 7100 	mov.w	r1, #512	; 0x200
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <czlon2L+0x20>)
 800103c:	f001 fe00 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon2_D2_GPIO_Port, Czlon2_D2_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2180      	movs	r1, #128	; 0x80
 8001044:	4803      	ldr	r0, [pc, #12]	; (8001054 <czlon2L+0x24>)
 8001046:	f001 fdfb 	bl	8002c40 <HAL_GPIO_WritePin>
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40020000 	.word	0x40020000
 8001054:	40020800 	.word	0x40020800

08001058 <stopczlon2>:
void stopczlon2()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon2_D1_GPIO_Port, Czlon2_D1_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001062:	4807      	ldr	r0, [pc, #28]	; (8001080 <stopczlon2+0x28>)
 8001064:	f001 fdec 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon2_D2_GPIO_Port, Czlon2_D2_Pin, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <stopczlon2+0x2c>)
 800106e:	f001 fde7 	bl	8002c40 <HAL_GPIO_WritePin>
	PWMval(2,0);
 8001072:	2100      	movs	r1, #0
 8001074:	2002      	movs	r0, #2
 8001076:	f7ff ff01 	bl	8000e7c <PWMval>
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40020000 	.word	0x40020000
 8001084:	40020800 	.word	0x40020800

08001088 <czlon3R>:

void czlon3R()
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon3_D1_GPIO_Port, Czlon3_D1_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <czlon3R+0x20>)
 8001094:	f001 fdd4 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon3_D2_GPIO_Port, Czlon3_D2_Pin, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2140      	movs	r1, #64	; 0x40
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <czlon3R+0x20>)
 800109e:	f001 fdcf 	bl	8002c40 <HAL_GPIO_WritePin>
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40020800 	.word	0x40020800

080010ac <czlon3L>:
void czlon3L()
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon3_D1_GPIO_Port, Czlon3_D1_Pin, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <czlon3L+0x20>)
 80010b8:	f001 fdc2 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon3_D2_GPIO_Port, Czlon3_D2_Pin, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2140      	movs	r1, #64	; 0x40
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <czlon3L+0x20>)
 80010c2:	f001 fdbd 	bl	8002c40 <HAL_GPIO_WritePin>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40020800 	.word	0x40020800

080010d0 <stopczlon3>:
void stopczlon3()
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon3_D1_GPIO_Port, Czlon3_D1_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010da:	4807      	ldr	r0, [pc, #28]	; (80010f8 <stopczlon3+0x28>)
 80010dc:	f001 fdb0 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon3_D2_GPIO_Port, Czlon3_D2_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2140      	movs	r1, #64	; 0x40
 80010e4:	4804      	ldr	r0, [pc, #16]	; (80010f8 <stopczlon3+0x28>)
 80010e6:	f001 fdab 	bl	8002c40 <HAL_GPIO_WritePin>
	PWMval(3,0);
 80010ea:	2100      	movs	r1, #0
 80010ec:	2003      	movs	r0, #3
 80010ee:	f7ff fec5 	bl	8000e7c <PWMval>
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40020800 	.word	0x40020800

080010fc <czlon4R>:

void czlon4R()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon4_D1_GPIO_Port, Czlon4_D1_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	2120      	movs	r1, #32
 8001104:	4805      	ldr	r0, [pc, #20]	; (800111c <czlon4R+0x20>)
 8001106:	f001 fd9b 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon4_D2_GPIO_Port, Czlon4_D2_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001110:	4803      	ldr	r0, [pc, #12]	; (8001120 <czlon4R+0x24>)
 8001112:	f001 fd95 	bl	8002c40 <HAL_GPIO_WritePin>
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40020800 	.word	0x40020800
 8001120:	40020000 	.word	0x40020000

08001124 <czlon4L>:
void czlon4L()
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon4_D1_GPIO_Port, Czlon4_D1_Pin, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	2120      	movs	r1, #32
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <czlon4L+0x20>)
 800112e:	f001 fd87 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon4_D2_GPIO_Port, Czlon4_D2_Pin, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001138:	4803      	ldr	r0, [pc, #12]	; (8001148 <czlon4L+0x24>)
 800113a:	f001 fd81 	bl	8002c40 <HAL_GPIO_WritePin>
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40020800 	.word	0x40020800
 8001148:	40020000 	.word	0x40020000

0800114c <stopczlon4>:
void stopczlon4()
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon4_D1_GPIO_Port, Czlon4_D1_Pin, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	2120      	movs	r1, #32
 8001154:	4807      	ldr	r0, [pc, #28]	; (8001174 <stopczlon4+0x28>)
 8001156:	f001 fd73 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon4_D2_GPIO_Port, Czlon4_D2_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001160:	4805      	ldr	r0, [pc, #20]	; (8001178 <stopczlon4+0x2c>)
 8001162:	f001 fd6d 	bl	8002c40 <HAL_GPIO_WritePin>
	PWMval(4,0);
 8001166:	2100      	movs	r1, #0
 8001168:	2004      	movs	r0, #4
 800116a:	f7ff fe87 	bl	8000e7c <PWMval>
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40020800 	.word	0x40020800
 8001178:	40020000 	.word	0x40020000

0800117c <czlon5R>:

void czlon5R()
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon5_D1_GPIO_Port, Czlon5_D1_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <czlon5R+0x20>)
 8001188:	f001 fd5a 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon5_D2_GPIO_Port, Czlon5_D2_Pin, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001192:	4803      	ldr	r0, [pc, #12]	; (80011a0 <czlon5R+0x24>)
 8001194:	f001 fd54 	bl	8002c40 <HAL_GPIO_WritePin>
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40020000 	.word	0x40020000
 80011a0:	40020400 	.word	0x40020400

080011a4 <czlon5L>:
void czlon5L()
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon5_D1_GPIO_Port, Czlon5_D1_Pin, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <czlon5L+0x20>)
 80011b0:	f001 fd46 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon5_D2_GPIO_Port, Czlon5_D2_Pin, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ba:	4803      	ldr	r0, [pc, #12]	; (80011c8 <czlon5L+0x24>)
 80011bc:	f001 fd40 	bl	8002c40 <HAL_GPIO_WritePin>
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40020000 	.word	0x40020000
 80011c8:	40020400 	.word	0x40020400

080011cc <stopczlon5>:
void stopczlon5()
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Czlon5_D1_GPIO_Port, Czlon5_D1_Pin, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d6:	4807      	ldr	r0, [pc, #28]	; (80011f4 <stopczlon5+0x28>)
 80011d8:	f001 fd32 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Czlon5_D2_GPIO_Port, Czlon5_D2_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <stopczlon5+0x2c>)
 80011e4:	f001 fd2c 	bl	8002c40 <HAL_GPIO_WritePin>
	PWMval(5,0);
 80011e8:	2100      	movs	r1, #0
 80011ea:	2005      	movs	r0, #5
 80011ec:	f7ff fe46 	bl	8000e7c <PWMval>
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40020000 	.word	0x40020000
 80011f8:	40020400 	.word	0x40020400

080011fc <LmotorF>:

void LmotorF()
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L_D1_GPIO_Port,L_D1_Pin , GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	2104      	movs	r1, #4
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <LmotorF+0x20>)
 8001206:	f001 fd1b 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_D2_GPIO_Port,L_D2_Pin , GPIO_PIN_SET);
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <LmotorF+0x20>)
 8001212:	f001 fd15 	bl	8002c40 <HAL_GPIO_WritePin>
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40020800 	.word	0x40020800

08001220 <LmotorB>:
void LmotorB()
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L_D2_GPIO_Port, L_D2_Pin, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <LmotorB+0x20>)
 800122c:	f001 fd08 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_D1_GPIO_Port, L_D1_Pin, GPIO_PIN_SET);
 8001230:	2201      	movs	r2, #1
 8001232:	2104      	movs	r1, #4
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <LmotorB+0x20>)
 8001236:	f001 fd03 	bl	8002c40 <HAL_GPIO_WritePin>
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40020800 	.word	0x40020800

08001244 <stopLmotorF>:
void stopLmotorF()
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L_D1_GPIO_Port, L_D1_Pin, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	2104      	movs	r1, #4
 800124c:	4807      	ldr	r0, [pc, #28]	; (800126c <stopLmotorF+0x28>)
 800124e:	f001 fcf7 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_D2_GPIO_Port,L_D2_Pin , GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <stopLmotorF+0x28>)
 800125a:	f001 fcf1 	bl	8002c40 <HAL_GPIO_WritePin>
	PWMval(7,0);
 800125e:	2100      	movs	r1, #0
 8001260:	2007      	movs	r0, #7
 8001262:	f7ff fe0b 	bl	8000e7c <PWMval>
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40020800 	.word	0x40020800

08001270 <RmotorF>:
void RmotorF()
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R_D1_GPIO_Port,R_D1_Pin , GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2104      	movs	r1, #4
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <RmotorF+0x20>)
 800127a:	f001 fce1 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_D2_GPIO_Port,R_D2_Pin , GPIO_PIN_SET);
 800127e:	2201      	movs	r2, #1
 8001280:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <RmotorF+0x24>)
 8001286:	f001 fcdb 	bl	8002c40 <HAL_GPIO_WritePin>
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40020c00 	.word	0x40020c00
 8001294:	40020800 	.word	0x40020800

08001298 <RmotorB>:
void RmotorB()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R_D2_GPIO_Port,R_D2_Pin , GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <RmotorB+0x20>)
 80012a4:	f001 fccc 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_D1_GPIO_Port,R_D1_Pin , GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2104      	movs	r1, #4
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <RmotorB+0x24>)
 80012ae:	f001 fcc7 	bl	8002c40 <HAL_GPIO_WritePin>
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40020c00 	.word	0x40020c00

080012c0 <stopRmotorF>:
void stopRmotorF()
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R_D1_GPIO_Port,R_D1_Pin , GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2104      	movs	r1, #4
 80012c8:	4807      	ldr	r0, [pc, #28]	; (80012e8 <stopRmotorF+0x28>)
 80012ca:	f001 fcb9 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_D2_GPIO_Port, R_D2_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d4:	4805      	ldr	r0, [pc, #20]	; (80012ec <stopRmotorF+0x2c>)
 80012d6:	f001 fcb3 	bl	8002c40 <HAL_GPIO_WritePin>
	PWMval(6,0);
 80012da:	2100      	movs	r1, #0
 80012dc:	2006      	movs	r0, #6
 80012de:	f7ff fdcd 	bl	8000e7c <PWMval>
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40020800 	.word	0x40020800

080012f0 <rightside>:
				PWMval(7, ((int)pwmLeft)*-1);
			}

}
void rightside()
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af02      	add	r7, sp, #8
	pwm1 = map(byte7,32,127,0,1000);
 80012f6:	4b40      	ldr	r3, [pc, #256]	; (80013f8 <rightside+0x108>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b298      	uxth	r0, r3
 80012fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2300      	movs	r3, #0
 8001304:	227f      	movs	r2, #127	; 0x7f
 8001306:	2120      	movs	r1, #32
 8001308:	f7ff fd92 	bl	8000e30 <map>
 800130c:	4603      	mov	r3, r0
 800130e:	4618      	mov	r0, r3
 8001310:	f7fe ffea 	bl	80002e8 <__aeabi_ui2f>
 8001314:	4603      	mov	r3, r0
 8001316:	4a39      	ldr	r2, [pc, #228]	; (80013fc <rightside+0x10c>)
 8001318:	6013      	str	r3, [r2, #0]
	if (button)
 800131a:	4b39      	ldr	r3, [pc, #228]	; (8001400 <rightside+0x110>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <rightside+0x3e>
		{
		pwm1 = pwm1*-1;
 8001322:	4b36      	ldr	r3, [pc, #216]	; (80013fc <rightside+0x10c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800132a:	4a34      	ldr	r2, [pc, #208]	; (80013fc <rightside+0x10c>)
 800132c:	6013      	str	r3, [r2, #0]
		}

		if (pwm1 > pwmRight)
 800132e:	4b33      	ldr	r3, [pc, #204]	; (80013fc <rightside+0x10c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a34      	ldr	r2, [pc, #208]	; (8001404 <rightside+0x114>)
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f899 	bl	8000470 <__aeabi_fcmpgt>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00c      	beq.n	800135e <rightside+0x6e>
		{
			pwmRight = pwmRight + step;
 8001344:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <rightside+0x114>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a2f      	ldr	r2, [pc, #188]	; (8001408 <rightside+0x118>)
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f7fe ff1a 	bl	8000188 <__addsf3>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <rightside+0x114>)
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e016      	b.n	800138c <rightside+0x9c>
		}
		else if (pwm1 < pwmRight)
 800135e:	4b27      	ldr	r3, [pc, #156]	; (80013fc <rightside+0x10c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a28      	ldr	r2, [pc, #160]	; (8001404 <rightside+0x114>)
 8001364:	6812      	ldr	r2, [r2, #0]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f863 	bl	8000434 <__aeabi_fcmplt>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00b      	beq.n	800138c <rightside+0x9c>
		{
			pwmRight = pwmRight - step;
 8001374:	4b23      	ldr	r3, [pc, #140]	; (8001404 <rightside+0x114>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a23      	ldr	r2, [pc, #140]	; (8001408 <rightside+0x118>)
 800137a:	6812      	ldr	r2, [r2, #0]
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f7fe ff00 	bl	8000184 <__aeabi_fsub>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <rightside+0x114>)
 800138a:	601a      	str	r2, [r3, #0]
		}
		if (pwmRight > 0)
 800138c:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <rightside+0x114>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f04f 0100 	mov.w	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f86b 	bl	8000470 <__aeabi_fcmpgt>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00d      	beq.n	80013bc <rightside+0xcc>
			{
				RmotorF();
 80013a0:	f7ff ff66 	bl	8001270 <RmotorF>
				PWMval(6, (int)pwmRight);
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <rightside+0x114>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f86b 	bl	8000484 <__aeabi_f2iz>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	4619      	mov	r1, r3
 80013b4:	2006      	movs	r0, #6
 80013b6:	f7ff fd61 	bl	8000e7c <PWMval>
		}




}
 80013ba:	e019      	b.n	80013f0 <rightside+0x100>
		else if (pwmRight < 0)
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <rightside+0x114>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f04f 0100 	mov.w	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f835 	bl	8000434 <__aeabi_fcmplt>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d100      	bne.n	80013d2 <rightside+0xe2>
}
 80013d0:	e00e      	b.n	80013f0 <rightside+0x100>
			RmotorB();
 80013d2:	f7ff ff61 	bl	8001298 <RmotorB>
			PWMval(6, ((int)pwmRight)*-1);
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <rightside+0x114>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f852 	bl	8000484 <__aeabi_f2iz>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	425b      	negs	r3, r3
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	4619      	mov	r1, r3
 80013ea:	2006      	movs	r0, #6
 80013ec:	f7ff fd46 	bl	8000e7c <PWMval>
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000004c 	.word	0x2000004c
 80013fc:	20000050 	.word	0x20000050
 8001400:	20000035 	.word	0x20000035
 8001404:	20000058 	.word	0x20000058
 8001408:	20000000 	.word	0x20000000

0800140c <leftside>:
void leftside()
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af02      	add	r7, sp, #8

	pwm2 = map(byte8,32,127,0,1000);
 8001412:	4b40      	ldr	r3, [pc, #256]	; (8001514 <leftside+0x108>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b298      	uxth	r0, r3
 8001418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2300      	movs	r3, #0
 8001420:	227f      	movs	r2, #127	; 0x7f
 8001422:	2120      	movs	r1, #32
 8001424:	f7ff fd04 	bl	8000e30 <map>
 8001428:	4603      	mov	r3, r0
 800142a:	4618      	mov	r0, r3
 800142c:	f7fe ff5c 	bl	80002e8 <__aeabi_ui2f>
 8001430:	4603      	mov	r3, r0
 8001432:	4a39      	ldr	r2, [pc, #228]	; (8001518 <leftside+0x10c>)
 8001434:	6013      	str	r3, [r2, #0]


	if (button01)
 8001436:	4b39      	ldr	r3, [pc, #228]	; (800151c <leftside+0x110>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d005      	beq.n	800144a <leftside+0x3e>
	{
		pwm2 = pwm2 *-1;
 800143e:	4b36      	ldr	r3, [pc, #216]	; (8001518 <leftside+0x10c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001446:	4a34      	ldr	r2, [pc, #208]	; (8001518 <leftside+0x10c>)
 8001448:	6013      	str	r3, [r2, #0]
	}

		if (pwm2 > pwmLeft)
 800144a:	4b33      	ldr	r3, [pc, #204]	; (8001518 <leftside+0x10c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a34      	ldr	r2, [pc, #208]	; (8001520 <leftside+0x114>)
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f80b 	bl	8000470 <__aeabi_fcmpgt>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00c      	beq.n	800147a <leftside+0x6e>
			{
				pwmLeft = pwmLeft+step;
 8001460:	4b2f      	ldr	r3, [pc, #188]	; (8001520 <leftside+0x114>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a2f      	ldr	r2, [pc, #188]	; (8001524 <leftside+0x118>)
 8001466:	6812      	ldr	r2, [r2, #0]
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f7fe fe8c 	bl	8000188 <__addsf3>
 8001470:	4603      	mov	r3, r0
 8001472:	461a      	mov	r2, r3
 8001474:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <leftside+0x114>)
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	e016      	b.n	80014a8 <leftside+0x9c>
			}
			else if (pwm2 < pwmLeft)
 800147a:	4b27      	ldr	r3, [pc, #156]	; (8001518 <leftside+0x10c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a28      	ldr	r2, [pc, #160]	; (8001520 <leftside+0x114>)
 8001480:	6812      	ldr	r2, [r2, #0]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ffd5 	bl	8000434 <__aeabi_fcmplt>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00b      	beq.n	80014a8 <leftside+0x9c>
			{
				pwmLeft = pwmLeft-step;
 8001490:	4b23      	ldr	r3, [pc, #140]	; (8001520 <leftside+0x114>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a23      	ldr	r2, [pc, #140]	; (8001524 <leftside+0x118>)
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f7fe fe72 	bl	8000184 <__aeabi_fsub>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <leftside+0x114>)
 80014a6:	601a      	str	r2, [r3, #0]
			}
			if (pwmLeft > 0)
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <leftside+0x114>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f04f 0100 	mov.w	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe ffdd 	bl	8000470 <__aeabi_fcmpgt>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00d      	beq.n	80014d8 <leftside+0xcc>
			{
				LmotorF();
 80014bc:	f7ff fe9e 	bl	80011fc <LmotorF>
				PWMval(7, (int)pwmLeft);
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <leftside+0x114>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe ffdd 	bl	8000484 <__aeabi_f2iz>
 80014ca:	4603      	mov	r3, r0
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	4619      	mov	r1, r3
 80014d0:	2007      	movs	r0, #7
 80014d2:	f7ff fcd3 	bl	8000e7c <PWMval>





}
 80014d6:	e019      	b.n	800150c <leftside+0x100>
			else if (pwmLeft < 0)
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <leftside+0x114>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f04f 0100 	mov.w	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7fe ffa7 	bl	8000434 <__aeabi_fcmplt>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d100      	bne.n	80014ee <leftside+0xe2>
}
 80014ec:	e00e      	b.n	800150c <leftside+0x100>
				LmotorB();
 80014ee:	f7ff fe97 	bl	8001220 <LmotorB>
				PWMval(7, ((int)pwmLeft)*-1);
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <leftside+0x114>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7fe ffc4 	bl	8000484 <__aeabi_f2iz>
 80014fc:	4603      	mov	r3, r0
 80014fe:	b29b      	uxth	r3, r3
 8001500:	425b      	negs	r3, r3
 8001502:	b29b      	uxth	r3, r3
 8001504:	4619      	mov	r1, r3
 8001506:	2007      	movs	r0, #7
 8001508:	f7ff fcb8 	bl	8000e7c <PWMval>
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000004d 	.word	0x2000004d
 8001518:	20000054 	.word	0x20000054
 800151c:	20000036 	.word	0x20000036
 8001520:	2000005c 	.word	0x2000005c
 8001524:	20000000 	.word	0x20000000

08001528 <motor0control>:


void motor0control()
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	if(button1A)
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <motor0control+0x3c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d007      	beq.n	8001544 <motor0control+0x1c>
				{
					podstL();
 8001534:	f7ff fd04 	bl	8000f40 <podstL>
					PWMval(0, 1000);
 8001538:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800153c:	2000      	movs	r0, #0
 800153e:	f7ff fc9d 	bl	8000e7c <PWMval>
				}
	else
	{
		stoppodst();
	}
}
 8001542:	e00d      	b.n	8001560 <motor0control+0x38>
	else if(button1B)
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <motor0control+0x40>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d007      	beq.n	800155c <motor0control+0x34>
					podstR();
 800154c:	f7ff fce8 	bl	8000f20 <podstR>
					PWMval(0, 1000);
 8001550:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001554:	2000      	movs	r0, #0
 8001556:	f7ff fc91 	bl	8000e7c <PWMval>
}
 800155a:	e001      	b.n	8001560 <motor0control+0x38>
		stoppodst();
 800155c:	f7ff fd00 	bl	8000f60 <stoppodst>
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000037 	.word	0x20000037
 8001568:	20000038 	.word	0x20000038

0800156c <motor1control>:

void motor1control()
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	if(button2A)
 8001570:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <motor1control+0x3c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d007      	beq.n	8001588 <motor1control+0x1c>
				{
					czlon1L();
 8001578:	f7ff fd1a 	bl	8000fb0 <czlon1L>
					PWMval(1, 1000);
 800157c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001580:	2001      	movs	r0, #1
 8001582:	f7ff fc7b 	bl	8000e7c <PWMval>
				}
	else
	{
		stopczlon1();
	}
}
 8001586:	e00d      	b.n	80015a4 <motor1control+0x38>
	else if(button2B)
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <motor1control+0x40>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d007      	beq.n	80015a0 <motor1control+0x34>
					czlon1R();
 8001590:	f7ff fcfa 	bl	8000f88 <czlon1R>
					PWMval(1, 1000);
 8001594:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001598:	2001      	movs	r0, #1
 800159a:	f7ff fc6f 	bl	8000e7c <PWMval>
}
 800159e:	e001      	b.n	80015a4 <motor1control+0x38>
		stopczlon1();
 80015a0:	f7ff fd1a 	bl	8000fd8 <stopczlon1>
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000039 	.word	0x20000039
 80015ac:	2000003a 	.word	0x2000003a

080015b0 <motor2control>:

void motor2control()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	if(button3A)
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <motor2control+0x3c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d007      	beq.n	80015cc <motor2control+0x1c>
				{
					czlon2L();
 80015bc:	f7ff fd38 	bl	8001030 <czlon2L>
					PWMval(2, 1000);
 80015c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015c4:	2002      	movs	r0, #2
 80015c6:	f7ff fc59 	bl	8000e7c <PWMval>
				}
	else
	{
		stopczlon2();
	}
}
 80015ca:	e00d      	b.n	80015e8 <motor2control+0x38>
	else if(button3B)
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <motor2control+0x40>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d007      	beq.n	80015e4 <motor2control+0x34>
					czlon2R();
 80015d4:	f7ff fd18 	bl	8001008 <czlon2R>
					PWMval(2, 1000);
 80015d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015dc:	2002      	movs	r0, #2
 80015de:	f7ff fc4d 	bl	8000e7c <PWMval>
}
 80015e2:	e001      	b.n	80015e8 <motor2control+0x38>
		stopczlon2();
 80015e4:	f7ff fd38 	bl	8001058 <stopczlon2>
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	2000003b 	.word	0x2000003b
 80015f0:	2000003c 	.word	0x2000003c

080015f4 <motor3control>:

void motor3control()
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	if(button4A)
 80015f8:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <motor3control+0x3c>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d007      	beq.n	8001610 <motor3control+0x1c>
				{
					czlon3L();
 8001600:	f7ff fd54 	bl	80010ac <czlon3L>
					PWMval(3, 1000);
 8001604:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001608:	2003      	movs	r0, #3
 800160a:	f7ff fc37 	bl	8000e7c <PWMval>
				}
	else
	{
		stopczlon3();
	}
}
 800160e:	e00d      	b.n	800162c <motor3control+0x38>
	else if(button4B)
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <motor3control+0x40>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d007      	beq.n	8001628 <motor3control+0x34>
					czlon3R();
 8001618:	f7ff fd36 	bl	8001088 <czlon3R>
					PWMval(3, 1000);
 800161c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001620:	2003      	movs	r0, #3
 8001622:	f7ff fc2b 	bl	8000e7c <PWMval>
}
 8001626:	e001      	b.n	800162c <motor3control+0x38>
		stopczlon3();
 8001628:	f7ff fd52 	bl	80010d0 <stopczlon3>
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2000003d 	.word	0x2000003d
 8001634:	2000003e 	.word	0x2000003e

08001638 <motor4control>:

void motor4control()
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	if(moveA)
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <motor4control+0x3c>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d007      	beq.n	8001654 <motor4control+0x1c>
				{
					czlon4L();
 8001644:	f7ff fd6e 	bl	8001124 <czlon4L>
					PWMval(4, 1000);
 8001648:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800164c:	2004      	movs	r0, #4
 800164e:	f7ff fc15 	bl	8000e7c <PWMval>
				}
	else
	{
		stopczlon4();
	}
}
 8001652:	e00d      	b.n	8001670 <motor4control+0x38>
	else if(moveB)
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <motor4control+0x40>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d007      	beq.n	800166c <motor4control+0x34>
					czlon4R();
 800165c:	f7ff fd4e 	bl	80010fc <czlon4R>
					PWMval(4, 1000);
 8001660:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001664:	2004      	movs	r0, #4
 8001666:	f7ff fc09 	bl	8000e7c <PWMval>
}
 800166a:	e001      	b.n	8001670 <motor4control+0x38>
		stopczlon4();
 800166c:	f7ff fd6e 	bl	800114c <stopczlon4>
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	2000003f 	.word	0x2000003f
 8001678:	20000040 	.word	0x20000040

0800167c <motor5control>:

void motor5control()
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	if(rotateA)
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <motor5control+0x3c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d007      	beq.n	8001698 <motor5control+0x1c>
				{
					czlon5L();
 8001688:	f7ff fd8c 	bl	80011a4 <czlon5L>
					PWMval(5, 1000);
 800168c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001690:	2005      	movs	r0, #5
 8001692:	f7ff fbf3 	bl	8000e7c <PWMval>
				}
	else
	{
		stopczlon5();
	}
}
 8001696:	e00d      	b.n	80016b4 <motor5control+0x38>
	else if(rotateB)
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <motor5control+0x40>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d007      	beq.n	80016b0 <motor5control+0x34>
					czlon5R();
 80016a0:	f7ff fd6c 	bl	800117c <czlon5R>
					PWMval(5, 1000);
 80016a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016a8:	2005      	movs	r0, #5
 80016aa:	f7ff fbe7 	bl	8000e7c <PWMval>
}
 80016ae:	e001      	b.n	80016b4 <motor5control+0x38>
		stopczlon5();
 80016b0:	f7ff fd8c 	bl	80011cc <stopczlon5>
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000041 	.word	0x20000041
 80016bc:	20000042 	.word	0x20000042

080016c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c4:	b672      	cpsid	i
}
 80016c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <Error_Handler+0x8>
	...

080016cc <nRF24_SendSpi>:
#define NRF24_CE_LOW		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET)

// Spi send and read

static void nRF24_SendSpi(uint8_t *Data, uint8_t length)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, length, 1000);
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <nRF24_SendSpi+0x28>)
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	b29a      	uxth	r2, r3
 80016e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	f002 f95c 	bl	80039a2 <HAL_SPI_Transmit>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000068 	.word	0x20000068

080016f8 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t length)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, length, 1000);
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <nRF24_ReadSpi+0x28>)
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	b29a      	uxth	r2, r3
 800170c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	f002 fa89 	bl	8003c28 <HAL_SPI_Receive>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000068 	.word	0x20000068

08001724 <nRF24_ReadRegister>:

//Reading register

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001732:	2200      	movs	r2, #0
 8001734:	2104      	movs	r1, #4
 8001736:	480c      	ldr	r0, [pc, #48]	; (8001768 <nRF24_ReadRegister+0x44>)
 8001738:	f001 fa82 	bl	8002c40 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 800173c:	1dfb      	adds	r3, r7, #7
 800173e:	2101      	movs	r1, #1
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ffc3 	bl	80016cc <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001746:	f107 030f 	add.w	r3, r7, #15
 800174a:	2101      	movs	r1, #1
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ffd3 	bl	80016f8 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001752:	2201      	movs	r2, #1
 8001754:	2104      	movs	r1, #4
 8001756:	4804      	ldr	r0, [pc, #16]	; (8001768 <nRF24_ReadRegister+0x44>)
 8001758:	f001 fa72 	bl	8002c40 <HAL_GPIO_WritePin>

	return result;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40020400 	.word	0x40020400

0800176c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* result, uint8_t lenght)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	6039      	str	r1, [r7, #0]
 8001776:	71fb      	strb	r3, [r7, #7]
 8001778:	4613      	mov	r3, r2
 800177a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001780:	2200      	movs	r2, #0
 8001782:	2104      	movs	r1, #4
 8001784:	480a      	ldr	r0, [pc, #40]	; (80017b0 <nRF24_ReadRegisters+0x44>)
 8001786:	f001 fa5b 	bl	8002c40 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 800178a:	1dfb      	adds	r3, r7, #7
 800178c:	2101      	movs	r1, #1
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff ff9c 	bl	80016cc <nRF24_SendSpi>
	nRF24_ReadSpi(result, lenght);
 8001794:	79bb      	ldrb	r3, [r7, #6]
 8001796:	4619      	mov	r1, r3
 8001798:	6838      	ldr	r0, [r7, #0]
 800179a:	f7ff ffad 	bl	80016f8 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 800179e:	2201      	movs	r2, #1
 80017a0:	2104      	movs	r1, #4
 80017a2:	4803      	ldr	r0, [pc, #12]	; (80017b0 <nRF24_ReadRegisters+0x44>)
 80017a4:	f001 fa4c 	bl	8002c40 <HAL_GPIO_WritePin>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40020400 	.word	0x40020400

080017b4 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t value)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	460a      	mov	r2, r1
 80017be:	71fb      	strb	r3, [r7, #7]
 80017c0:	4613      	mov	r3, r2
 80017c2:	71bb      	strb	r3, [r7, #6]
	uint8_t list[2];

	list[0] = NRF24_CMD_W_REGISTER | reg;
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	f043 0320 	orr.w	r3, r3, #32
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	733b      	strb	r3, [r7, #12]
	list[1] = value;
 80017ce:	79bb      	ldrb	r3, [r7, #6]
 80017d0:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 80017d2:	2200      	movs	r2, #0
 80017d4:	2104      	movs	r1, #4
 80017d6:	4809      	ldr	r0, [pc, #36]	; (80017fc <nRF24_WriteRegister+0x48>)
 80017d8:	f001 fa32 	bl	8002c40 <HAL_GPIO_WritePin>

	nRF24_SendSpi(list, 2);
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	2102      	movs	r1, #2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff72 	bl	80016cc <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80017e8:	2201      	movs	r2, #1
 80017ea:	2104      	movs	r1, #4
 80017ec:	4803      	ldr	r0, [pc, #12]	; (80017fc <nRF24_WriteRegister+0x48>)
 80017ee:	f001 fa27 	bl	8002c40 <HAL_GPIO_WritePin>
}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40020400 	.word	0x40020400

08001800 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* result, uint8_t lenght)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
 800180c:	4613      	mov	r3, r2
 800180e:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	f043 0320 	orr.w	r3, r3, #32
 8001816:	b2db      	uxtb	r3, r3
 8001818:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800181a:	2200      	movs	r2, #0
 800181c:	2104      	movs	r1, #4
 800181e:	480b      	ldr	r0, [pc, #44]	; (800184c <nRF24_WriteRegisters+0x4c>)
 8001820:	f001 fa0e 	bl	8002c40 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001824:	1dfb      	adds	r3, r7, #7
 8001826:	2101      	movs	r1, #1
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff4f 	bl	80016cc <nRF24_SendSpi>
	nRF24_SendSpi(result, lenght);
 800182e:	79bb      	ldrb	r3, [r7, #6]
 8001830:	4619      	mov	r1, r3
 8001832:	6838      	ldr	r0, [r7, #0]
 8001834:	f7ff ff4a 	bl	80016cc <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001838:	2201      	movs	r2, #1
 800183a:	2104      	movs	r1, #4
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <nRF24_WriteRegisters+0x4c>)
 800183e:	f001 f9ff 	bl	8002c40 <HAL_GPIO_WritePin>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40020400 	.word	0x40020400

08001850 <nRF24_ReadConfig>:

uint8_t nRF24_ReadConfig(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff ff65 	bl	8001724 <nRF24_ReadRegister>
 800185a:	4603      	mov	r3, r0
}
 800185c:	4618      	mov	r0, r3
 800185e:	bd80      	pop	{r7, pc}

08001860 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t config)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, config);
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	4619      	mov	r1, r3
 800186e:	2000      	movs	r0, #0
 8001870:	f7ff ffa0 	bl	80017b4 <nRF24_WriteRegister>
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8001880:	2007      	movs	r0, #7
 8001882:	f7ff ff4f 	bl	8001724 <nRF24_ReadRegister>
 8001886:	4603      	mov	r3, r0
}
 8001888:	4618      	mov	r0, r3
 800188a:	bd80      	pop	{r7, pc}

0800188c <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	4619      	mov	r1, r3
 800189a:	2007      	movs	r0, #7
 800189c:	f7ff ff8a 	bl	80017b4 <nRF24_WriteRegister>
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 80018ae:	f7ff ffcf 	bl	8001850 <nRF24_ReadConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 80018b6:	4911      	ldr	r1, [pc, #68]	; (80018fc <nRF24_RX_Mode+0x54>)
 80018b8:	2000      	movs	r0, #0
 80018ba:	f000 f9a6 	bl	8001c0a <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ffc5 	bl	8001860 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 80018d6:	2070      	movs	r0, #112	; 0x70
 80018d8:	f7ff ffd8 	bl	800188c <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 80018dc:	f000 f858 	bl	8001990 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 80018e0:	f000 f870 	bl	80019c4 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 80018e4:	2201      	movs	r2, #1
 80018e6:	2102      	movs	r1, #2
 80018e8:	4805      	ldr	r0, [pc, #20]	; (8001900 <nRF24_RX_Mode+0x58>)
 80018ea:	f001 f9a9 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80018ee:	2001      	movs	r0, #1
 80018f0:	f000 ff10 	bl	8002714 <HAL_Delay>
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	2000006c 	.word	0x2000006c
 8001900:	40020400 	.word	0x40020400

08001904 <nRF24_SetPALevel>:




void nRF24_SetPALevel(uint8_t lev)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800190e:	2006      	movs	r0, #6
 8001910:	f7ff ff08 	bl	8001724 <nRF24_ReadRegister>
 8001914:	4603      	mov	r3, r0
 8001916:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	f023 0307 	bic.w	r3, r3, #7
 800191e:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	b25a      	sxtb	r2, r3
 8001926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192a:	4313      	orrs	r3, r2
 800192c:	b25b      	sxtb	r3, r3
 800192e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	4619      	mov	r1, r3
 8001934:	2006      	movs	r0, #6
 8001936:	f7ff ff3d 	bl	80017b4 <nRF24_WriteRegister>
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b084      	sub	sp, #16
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800194c:	2006      	movs	r0, #6
 800194e:	f7ff fee9 	bl	8001724 <nRF24_ReadRegister>
 8001952:	4603      	mov	r3, r0
 8001954:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800195c:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d104      	bne.n	800196e <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	f043 0320 	orr.w	r3, r3, #32
 800196a:	73fb      	strb	r3, [r7, #15]
 800196c:	e006      	b.n	800197c <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d103      	bne.n	800197c <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	f043 0308 	orr.w	r3, r3, #8
 800197a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	4619      	mov	r1, r3
 8001980:	2006      	movs	r0, #6
 8001982:	f7ff ff17 	bl	80017b4 <nRF24_WriteRegister>
}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <nRF24_FlushRX>:



void nRF24_FlushRX(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8001996:	23e2      	movs	r3, #226	; 0xe2
 8001998:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800199a:	2200      	movs	r2, #0
 800199c:	2104      	movs	r1, #4
 800199e:	4808      	ldr	r0, [pc, #32]	; (80019c0 <nRF24_FlushRX+0x30>)
 80019a0:	f001 f94e 	bl	8002c40 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80019a4:	1dfb      	adds	r3, r7, #7
 80019a6:	2101      	movs	r1, #1
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fe8f 	bl	80016cc <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80019ae:	2201      	movs	r2, #1
 80019b0:	2104      	movs	r1, #4
 80019b2:	4803      	ldr	r0, [pc, #12]	; (80019c0 <nRF24_FlushRX+0x30>)
 80019b4:	f001 f944 	bl	8002c40 <HAL_GPIO_WritePin>
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40020400 	.word	0x40020400

080019c4 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80019ca:	23e1      	movs	r3, #225	; 0xe1
 80019cc:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80019ce:	2200      	movs	r2, #0
 80019d0:	2104      	movs	r1, #4
 80019d2:	4808      	ldr	r0, [pc, #32]	; (80019f4 <nRF24_FlushTX+0x30>)
 80019d4:	f001 f934 	bl	8002c40 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80019d8:	1dfb      	adds	r3, r7, #7
 80019da:	2101      	movs	r1, #1
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fe75 	bl	80016cc <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80019e2:	2201      	movs	r2, #1
 80019e4:	2104      	movs	r1, #4
 80019e6:	4803      	ldr	r0, [pc, #12]	; (80019f4 <nRF24_FlushTX+0x30>)
 80019e8:	f001 f92a 	bl	8002c40 <HAL_GPIO_WritePin>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40020400 	.word	0x40020400

080019f8 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001a02:	f7ff ff25 	bl	8001850 <nRF24_ReadConfig>
 8001a06:	4603      	mov	r3, r0
 8001a08:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d004      	beq.n	8001a1a <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	f043 0308 	orr.w	r3, r3, #8
 8001a16:	73fb      	strb	r3, [r7, #15]
 8001a18:	e003      	b.n	8001a22 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	f023 0308 	bic.w	r3, r3, #8
 8001a20:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff1b 	bl	8001860 <nRF24_WriteConfig>
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001a3c:	f7ff ff08 	bl	8001850 <nRF24_ReadConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d104      	bne.n	8001a54 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	73fb      	strb	r3, [r7, #15]
 8001a52:	e003      	b.n	8001a5c <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	f023 0304 	bic.w	r3, r3, #4
 8001a5a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fefe 	bl	8001860 <nRF24_WriteConfig>
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	460a      	mov	r2, r1
 8001a76:	71fb      	strb	r3, [r7, #7]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	b25a      	sxtb	r2, r3
 8001a82:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	b25b      	sxtb	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	4619      	mov	r1, r3
 8001a94:	2004      	movs	r0, #4
 8001a96:	f7ff fe8d 	bl	80017b4 <nRF24_WriteRegister>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	2005      	movs	r0, #5
 8001ab8:	f7ff fe7c 	bl	80017b4 <nRF24_WriteRegister>
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	460a      	mov	r2, r1
 8001ace:	71fb      	strb	r3, [r7, #7]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	2b05      	cmp	r3, #5
 8001ad8:	d901      	bls.n	8001ade <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 8001ada:	2305      	movs	r3, #5
 8001adc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	3311      	adds	r3, #17
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	79bb      	ldrb	r3, [r7, #6]
 8001ae6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	4619      	mov	r1, r3
 8001aee:	4610      	mov	r0, r2
 8001af0:	f7ff fe60 	bl	80017b4 <nRF24_WriteRegister>
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	460a      	mov	r2, r1
 8001b06:	71fb      	strb	r3, [r7, #7]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	2b05      	cmp	r3, #5
 8001b10:	d901      	bls.n	8001b16 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8001b12:	2305      	movs	r3, #5
 8001b14:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8001b16:	2002      	movs	r0, #2
 8001b18:	f7ff fe04 	bl	8001724 <nRF24_ReadRegister>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001b20:	79bb      	ldrb	r3, [r7, #6]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d10a      	bne.n	8001b3c <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	b25a      	sxtb	r2, r3
 8001b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b25b      	sxtb	r3, r3
 8001b38:	73fb      	strb	r3, [r7, #15]
 8001b3a:	e00b      	b.n	8001b54 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	b25a      	sxtb	r2, r3
 8001b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	b25b      	sxtb	r3, r3
 8001b52:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	4619      	mov	r1, r3
 8001b58:	2002      	movs	r0, #2
 8001b5a:	f7ff fe2b 	bl	80017b4 <nRF24_WriteRegister>
}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	460a      	mov	r2, r1
 8001b70:	71fb      	strb	r3, [r7, #7]
 8001b72:	4613      	mov	r3, r2
 8001b74:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	2b05      	cmp	r3, #5
 8001b7a:	d901      	bls.n	8001b80 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8001b7c:	2305      	movs	r3, #5
 8001b7e:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8001b80:	2001      	movs	r0, #1
 8001b82:	f7ff fdcf 	bl	8001724 <nRF24_ReadRegister>
 8001b86:	4603      	mov	r3, r0
 8001b88:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001b8a:	79bb      	ldrb	r3, [r7, #6]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d10a      	bne.n	8001ba6 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	2201      	movs	r2, #1
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	b25a      	sxtb	r2, r3
 8001b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	b25b      	sxtb	r3, r3
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	e00b      	b.n	8001bbe <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	b25b      	sxtb	r3, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	b25a      	sxtb	r2, r3
 8001bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	b25b      	sxtb	r3, r3
 8001bbc:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	f7ff fdf6 	bl	80017b4 <nRF24_WriteRegister>
}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	2b05      	cmp	r3, #5
 8001bde:	d901      	bls.n	8001be4 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8001be0:	2305      	movs	r3, #5
 8001be2:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d801      	bhi.n	8001bee <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8001bea:	2303      	movs	r3, #3
 8001bec:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	3b02      	subs	r3, #2
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	f7ff fdd9 	bl	80017b4 <nRF24_WriteRegister>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b084      	sub	sp, #16
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	6039      	str	r1, [r7, #0]
 8001c14:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <nRF24_SetRXAddress+0x18>
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d11d      	bne.n	8001c5e <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	73fb      	strb	r3, [r7, #15]
 8001c26:	e00d      	b.n	8001c44 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	441a      	add	r2, r3
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	f1c3 0302 	rsb	r3, r3, #2
 8001c34:	7812      	ldrb	r2, [r2, #0]
 8001c36:	3310      	adds	r3, #16
 8001c38:	443b      	add	r3, r7
 8001c3a:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	3301      	adds	r3, #1
 8001c42:	73fb      	strb	r3, [r7, #15]
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d9ee      	bls.n	8001c28 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	330a      	adds	r3, #10
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f107 010c 	add.w	r1, r7, #12
 8001c54:	2203      	movs	r2, #3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fdd2 	bl	8001800 <nRF24_WriteRegisters>
	{
 8001c5c:	e00a      	b.n	8001c74 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	330a      	adds	r3, #10
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	3302      	adds	r3, #2
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	f7ff fda1 	bl	80017b4 <nRF24_WriteRegister>
}
 8001c72:	bf00      	nop
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	2203      	movs	r2, #3
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	200a      	movs	r0, #10
 8001c8e:	f7ff fd6d 	bl	800176c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	73fb      	strb	r3, [r7, #15]
 8001c96:	e00c      	b.n	8001cb2 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	f1c3 0302 	rsb	r3, r3, #2
 8001ca0:	3210      	adds	r2, #16
 8001ca2:	443a      	add	r2, r7
 8001ca4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8001ca8:	4a16      	ldr	r2, [pc, #88]	; (8001d04 <nRF24_SetTXAddress+0x88>)
 8001caa:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d9ef      	bls.n	8001c98 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	73fb      	strb	r3, [r7, #15]
 8001cbc:	e00d      	b.n	8001cda <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	441a      	add	r2, r3
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	f1c3 0302 	rsb	r3, r3, #2
 8001cca:	7812      	ldrb	r2, [r2, #0]
 8001ccc:	3310      	adds	r3, #16
 8001cce:	443b      	add	r3, r7
 8001cd0:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	73fb      	strb	r3, [r7, #15]
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d9ee      	bls.n	8001cbe <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	200a      	movs	r0, #10
 8001cea:	f7ff fd89 	bl	8001800 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	2010      	movs	r0, #16
 8001cf8:	f7ff fd82 	bl	8001800 <nRF24_WriteRegisters>

}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2000006c 	.word	0x2000006c

08001d08 <nRF24_ReadRXPaylaod>:
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));

}

void nRF24_ReadRXPaylaod(uint8_t *data)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8001d10:	2209      	movs	r2, #9
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	2061      	movs	r0, #97	; 0x61
 8001d16:	f7ff fd29 	bl	800176c <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	2007      	movs	r0, #7
 8001d1e:	f7ff fd49 	bl	80017b4 <nRF24_WriteRegister>
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
 8001d22:	f7ff fdab 	bl	800187c <nRF24_ReadStatus>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8001d30:	2120      	movs	r1, #32
 8001d32:	2007      	movs	r0, #7
 8001d34:	f7ff fd3e 	bl	80017b4 <nRF24_WriteRegister>
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <nRF24_RXAvailible>:


uint8_t nRF24_RXAvailible(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8001d46:	f7ff fd99 	bl	800187c <nRF24_ReadStatus>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]

	// RX FIFO Interrupt
	if ((status & (1 << 6)))
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00c      	beq.n	8001d72 <nRF24_RXAvailible+0x32>
	{
		nrf24_rx_flag = 1;
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <nRF24_RXAvailible+0x3c>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	701a      	strb	r2, [r3, #0]
		status |= (1<<6); // Interrupt flag clear
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d64:	71fb      	strb	r3, [r7, #7]
		nRF24_WriteStatus(status);
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fd8f 	bl	800188c <nRF24_WriteStatus>
		return 1;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <nRF24_RXAvailible+0x34>
	}
	return 0;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	2000006f 	.word	0x2000006f

08001d80 <nRF24_Init>:

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8001d88:	4a1e      	ldr	r2, [pc, #120]	; (8001e04 <nRF24_Init+0x84>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2102      	movs	r1, #2
 8001d92:	481d      	ldr	r0, [pc, #116]	; (8001e08 <nRF24_Init+0x88>)
 8001d94:	f000 ff54 	bl	8002c40 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	2104      	movs	r1, #4
 8001d9c:	481a      	ldr	r0, [pc, #104]	; (8001e08 <nRF24_Init+0x88>)
 8001d9e:	f000 ff4f 	bl	8002c40 <HAL_GPIO_WritePin>

	HAL_Delay(5);
 8001da2:	2005      	movs	r0, #5
 8001da4:	f000 fcb6 	bl	8002714 <HAL_Delay>

	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8001da8:	2002      	movs	r0, #2
 8001daa:	f7ff fdca 	bl	8001942 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8001dae:	2001      	movs	r0, #1
 8001db0:	f7ff fe22 	bl	80019f8 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7ff fe3c 	bl	8001a32 <nRF24_SetCRCLength>
	nRF24_SetPALevel(NRF24_PA_PWR_0dBM);
 8001dba:	2003      	movs	r0, #3
 8001dbc:	f7ff fda2 	bl	8001904 <nRF24_SetPALevel>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8001dc0:	2107      	movs	r1, #7
 8001dc2:	2004      	movs	r0, #4
 8001dc4:	f7ff fe52 	bl	8001a6c <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8001dc8:	2100      	movs	r1, #0
 8001dca:	201c      	movs	r0, #28
 8001dcc:	f7ff fcf2 	bl	80017b4 <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8001dd0:	200a      	movs	r0, #10
 8001dd2:	f7ff fe66 	bl	8001aa2 <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8001dd6:	2109      	movs	r1, #9
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f7ff fe73 	bl	8001ac4 <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8001dde:	2101      	movs	r1, #1
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff fe8b 	bl	8001afc <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8001de6:	2101      	movs	r1, #1
 8001de8:	2000      	movs	r0, #0
 8001dea:	f7ff febc 	bl	8001b66 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8001dee:	2003      	movs	r0, #3
 8001df0:	f7ff feee 	bl	8001bd0 <nRF24_SetAddressWidth>

	HAL_Delay(20);
 8001df4:	2014      	movs	r0, #20
 8001df6:	f000 fc8d 	bl	8002714 <HAL_Delay>

}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000068 	.word	0x20000068
 8001e08:	40020400 	.word	0x40020400

08001e0c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001e10:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <MX_SPI2_Init+0x64>)
 8001e12:	4a18      	ldr	r2, [pc, #96]	; (8001e74 <MX_SPI2_Init+0x68>)
 8001e14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e16:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <MX_SPI2_Init+0x64>)
 8001e18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e1e:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <MX_SPI2_Init+0x64>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <MX_SPI2_Init+0x64>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <MX_SPI2_Init+0x64>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <MX_SPI2_Init+0x64>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <MX_SPI2_Init+0x64>)
 8001e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e3c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <MX_SPI2_Init+0x64>)
 8001e40:	2210      	movs	r2, #16
 8001e42:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e44:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <MX_SPI2_Init+0x64>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <MX_SPI2_Init+0x64>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e50:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <MX_SPI2_Init+0x64>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <MX_SPI2_Init+0x64>)
 8001e58:	220a      	movs	r2, #10
 8001e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e5c:	4804      	ldr	r0, [pc, #16]	; (8001e70 <MX_SPI2_Init+0x64>)
 8001e5e:	f001 fd17 	bl	8003890 <HAL_SPI_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e68:	f7ff fc2a 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000070 	.word	0x20000070
 8001e74:	40003800 	.word	0x40003800

08001e78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	; 0x28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a17      	ldr	r2, [pc, #92]	; (8001ef4 <HAL_SPI_MspInit+0x7c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d128      	bne.n	8001eec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <HAL_SPI_MspInit+0x80>)
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	4a16      	ldr	r2, [pc, #88]	; (8001ef8 <HAL_SPI_MspInit+0x80>)
 8001ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea4:	6253      	str	r3, [r2, #36]	; 0x24
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <HAL_SPI_MspInit+0x80>)
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <HAL_SPI_MspInit+0x80>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	4a10      	ldr	r2, [pc, #64]	; (8001ef8 <HAL_SPI_MspInit+0x80>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	61d3      	str	r3, [r2, #28]
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <HAL_SPI_MspInit+0x80>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001eca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001edc:	2305      	movs	r3, #5
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4805      	ldr	r0, [pc, #20]	; (8001efc <HAL_SPI_MspInit+0x84>)
 8001ee8:	f000 fd1a 	bl	8002920 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001eec:	bf00      	nop
 8001eee:	3728      	adds	r7, #40	; 0x28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40003800 	.word	0x40003800
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40020400 	.word	0x40020400

08001f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <HAL_MspInit+0x5c>)
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	4a14      	ldr	r2, [pc, #80]	; (8001f5c <HAL_MspInit+0x5c>)
 8001f0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f10:	6253      	str	r3, [r2, #36]	; 0x24
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_MspInit+0x5c>)
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <HAL_MspInit+0x5c>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4a0e      	ldr	r2, [pc, #56]	; (8001f5c <HAL_MspInit+0x5c>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6213      	str	r3, [r2, #32]
 8001f2a:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <HAL_MspInit+0x5c>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_MspInit+0x5c>)
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	4a08      	ldr	r2, [pc, #32]	; (8001f5c <HAL_MspInit+0x5c>)
 8001f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f40:	6253      	str	r3, [r2, #36]	; 0x24
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_MspInit+0x5c>)
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f4e:	2007      	movs	r0, #7
 8001f50:	f000 fcb2 	bl	80028b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40023800 	.word	0x40023800

08001f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <NMI_Handler+0x4>

08001f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f6a:	e7fe      	b.n	8001f6a <HardFault_Handler+0x4>

08001f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <MemManage_Handler+0x4>

08001f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <BusFault_Handler+0x4>

08001f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <UsageFault_Handler+0x4>

08001f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr

08001f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa6:	f000 fb99 	bl	80026dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}

08001fae <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr
	...

08001fbc <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	; 0x28
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fc2:	f107 0318 	add.w	r3, r7, #24
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd0:	f107 0310 	add.w	r3, r7, #16
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fda:	463b      	mov	r3, r7
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	; (80020dc <MX_TIM3_Init+0x120>)
 8001fe8:	4a3d      	ldr	r2, [pc, #244]	; (80020e0 <MX_TIM3_Init+0x124>)
 8001fea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001fec:	4b3b      	ldr	r3, [pc, #236]	; (80020dc <MX_TIM3_Init+0x120>)
 8001fee:	220f      	movs	r2, #15
 8001ff0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff2:	4b3a      	ldr	r3, [pc, #232]	; (80020dc <MX_TIM3_Init+0x120>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001ff8:	4b38      	ldr	r3, [pc, #224]	; (80020dc <MX_TIM3_Init+0x120>)
 8001ffa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ffe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002000:	4b36      	ldr	r3, [pc, #216]	; (80020dc <MX_TIM3_Init+0x120>)
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002006:	4b35      	ldr	r3, [pc, #212]	; (80020dc <MX_TIM3_Init+0x120>)
 8002008:	2200      	movs	r2, #0
 800200a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800200c:	4833      	ldr	r0, [pc, #204]	; (80020dc <MX_TIM3_Init+0x120>)
 800200e:	f002 fa03 	bl	8004418 <HAL_TIM_Base_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002018:	f7ff fb52 	bl	80016c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800201c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002020:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002022:	f107 0318 	add.w	r3, r7, #24
 8002026:	4619      	mov	r1, r3
 8002028:	482c      	ldr	r0, [pc, #176]	; (80020dc <MX_TIM3_Init+0x120>)
 800202a:	f002 fbd5 	bl	80047d8 <HAL_TIM_ConfigClockSource>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002034:	f7ff fb44 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002038:	4828      	ldr	r0, [pc, #160]	; (80020dc <MX_TIM3_Init+0x120>)
 800203a:	f002 fa2c 	bl	8004496 <HAL_TIM_PWM_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002044:	f7ff fb3c 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002050:	f107 0310 	add.w	r3, r7, #16
 8002054:	4619      	mov	r1, r3
 8002056:	4821      	ldr	r0, [pc, #132]	; (80020dc <MX_TIM3_Init+0x120>)
 8002058:	f002 fea6 	bl	8004da8 <HAL_TIMEx_MasterConfigSynchronization>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002062:	f7ff fb2d 	bl	80016c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002066:	2360      	movs	r3, #96	; 0x60
 8002068:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800206e:	2300      	movs	r3, #0
 8002070:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002076:	463b      	mov	r3, r7
 8002078:	2200      	movs	r2, #0
 800207a:	4619      	mov	r1, r3
 800207c:	4817      	ldr	r0, [pc, #92]	; (80020dc <MX_TIM3_Init+0x120>)
 800207e:	f002 fae9 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002088:	f7ff fb1a 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800208c:	463b      	mov	r3, r7
 800208e:	2204      	movs	r2, #4
 8002090:	4619      	mov	r1, r3
 8002092:	4812      	ldr	r0, [pc, #72]	; (80020dc <MX_TIM3_Init+0x120>)
 8002094:	f002 fade 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800209e:	f7ff fb0f 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020a2:	463b      	mov	r3, r7
 80020a4:	2208      	movs	r2, #8
 80020a6:	4619      	mov	r1, r3
 80020a8:	480c      	ldr	r0, [pc, #48]	; (80020dc <MX_TIM3_Init+0x120>)
 80020aa:	f002 fad3 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 80020b4:	f7ff fb04 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020b8:	463b      	mov	r3, r7
 80020ba:	220c      	movs	r2, #12
 80020bc:	4619      	mov	r1, r3
 80020be:	4807      	ldr	r0, [pc, #28]	; (80020dc <MX_TIM3_Init+0x120>)
 80020c0:	f002 fac8 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 80020ca:	f7ff faf9 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020ce:	4803      	ldr	r0, [pc, #12]	; (80020dc <MX_TIM3_Init+0x120>)
 80020d0:	f000 f960 	bl	8002394 <HAL_TIM_MspPostInit>

}
 80020d4:	bf00      	nop
 80020d6:	3728      	adds	r7, #40	; 0x28
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	200000c8 	.word	0x200000c8
 80020e0:	40000400 	.word	0x40000400

080020e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08a      	sub	sp, #40	; 0x28
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ea:	f107 0318 	add.w	r3, r7, #24
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f8:	f107 0310 	add.w	r3, r7, #16
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002102:	463b      	mov	r3, r7
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <MX_TIM4_Init+0x120>)
 8002110:	4a3d      	ldr	r2, [pc, #244]	; (8002208 <MX_TIM4_Init+0x124>)
 8002112:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8002114:	4b3b      	ldr	r3, [pc, #236]	; (8002204 <MX_TIM4_Init+0x120>)
 8002116:	220f      	movs	r2, #15
 8002118:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211a:	4b3a      	ldr	r3, [pc, #232]	; (8002204 <MX_TIM4_Init+0x120>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002120:	4b38      	ldr	r3, [pc, #224]	; (8002204 <MX_TIM4_Init+0x120>)
 8002122:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002126:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002128:	4b36      	ldr	r3, [pc, #216]	; (8002204 <MX_TIM4_Init+0x120>)
 800212a:	2200      	movs	r2, #0
 800212c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212e:	4b35      	ldr	r3, [pc, #212]	; (8002204 <MX_TIM4_Init+0x120>)
 8002130:	2200      	movs	r2, #0
 8002132:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002134:	4833      	ldr	r0, [pc, #204]	; (8002204 <MX_TIM4_Init+0x120>)
 8002136:	f002 f96f 	bl	8004418 <HAL_TIM_Base_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002140:	f7ff fabe 	bl	80016c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002148:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800214a:	f107 0318 	add.w	r3, r7, #24
 800214e:	4619      	mov	r1, r3
 8002150:	482c      	ldr	r0, [pc, #176]	; (8002204 <MX_TIM4_Init+0x120>)
 8002152:	f002 fb41 	bl	80047d8 <HAL_TIM_ConfigClockSource>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800215c:	f7ff fab0 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002160:	4828      	ldr	r0, [pc, #160]	; (8002204 <MX_TIM4_Init+0x120>)
 8002162:	f002 f998 	bl	8004496 <HAL_TIM_PWM_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800216c:	f7ff faa8 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002170:	2300      	movs	r3, #0
 8002172:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002178:	f107 0310 	add.w	r3, r7, #16
 800217c:	4619      	mov	r1, r3
 800217e:	4821      	ldr	r0, [pc, #132]	; (8002204 <MX_TIM4_Init+0x120>)
 8002180:	f002 fe12 	bl	8004da8 <HAL_TIMEx_MasterConfigSynchronization>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 800218a:	f7ff fa99 	bl	80016c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800218e:	2360      	movs	r3, #96	; 0x60
 8002190:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800219e:	463b      	mov	r3, r7
 80021a0:	2200      	movs	r2, #0
 80021a2:	4619      	mov	r1, r3
 80021a4:	4817      	ldr	r0, [pc, #92]	; (8002204 <MX_TIM4_Init+0x120>)
 80021a6:	f002 fa55 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80021b0:	f7ff fa86 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021b4:	463b      	mov	r3, r7
 80021b6:	2204      	movs	r2, #4
 80021b8:	4619      	mov	r1, r3
 80021ba:	4812      	ldr	r0, [pc, #72]	; (8002204 <MX_TIM4_Init+0x120>)
 80021bc:	f002 fa4a 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 80021c6:	f7ff fa7b 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021ca:	463b      	mov	r3, r7
 80021cc:	2208      	movs	r2, #8
 80021ce:	4619      	mov	r1, r3
 80021d0:	480c      	ldr	r0, [pc, #48]	; (8002204 <MX_TIM4_Init+0x120>)
 80021d2:	f002 fa3f 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM4_Init+0xfc>
  {
    Error_Handler();
 80021dc:	f7ff fa70 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021e0:	463b      	mov	r3, r7
 80021e2:	220c      	movs	r2, #12
 80021e4:	4619      	mov	r1, r3
 80021e6:	4807      	ldr	r0, [pc, #28]	; (8002204 <MX_TIM4_Init+0x120>)
 80021e8:	f002 fa34 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 80021f2:	f7ff fa65 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80021f6:	4803      	ldr	r0, [pc, #12]	; (8002204 <MX_TIM4_Init+0x120>)
 80021f8:	f000 f8cc 	bl	8002394 <HAL_TIM_MspPostInit>

}
 80021fc:	bf00      	nop
 80021fe:	3728      	adds	r7, #40	; 0x28
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000108 	.word	0x20000108
 8002208:	40000800 	.word	0x40000800

0800220c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002212:	f107 0318 	add.w	r3, r7, #24
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002220:	f107 0310 	add.w	r3, r7, #16
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800222a:	463b      	mov	r3, r7
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002236:	4b32      	ldr	r3, [pc, #200]	; (8002300 <MX_TIM5_Init+0xf4>)
 8002238:	4a32      	ldr	r2, [pc, #200]	; (8002304 <MX_TIM5_Init+0xf8>)
 800223a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 800223c:	4b30      	ldr	r3, [pc, #192]	; (8002300 <MX_TIM5_Init+0xf4>)
 800223e:	220f      	movs	r2, #15
 8002240:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002242:	4b2f      	ldr	r3, [pc, #188]	; (8002300 <MX_TIM5_Init+0xf4>)
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8002248:	4b2d      	ldr	r3, [pc, #180]	; (8002300 <MX_TIM5_Init+0xf4>)
 800224a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800224e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002250:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <MX_TIM5_Init+0xf4>)
 8002252:	2200      	movs	r2, #0
 8002254:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002256:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <MX_TIM5_Init+0xf4>)
 8002258:	2200      	movs	r2, #0
 800225a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800225c:	4828      	ldr	r0, [pc, #160]	; (8002300 <MX_TIM5_Init+0xf4>)
 800225e:	f002 f8db 	bl	8004418 <HAL_TIM_Base_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8002268:	f7ff fa2a 	bl	80016c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800226c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002270:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002272:	f107 0318 	add.w	r3, r7, #24
 8002276:	4619      	mov	r1, r3
 8002278:	4821      	ldr	r0, [pc, #132]	; (8002300 <MX_TIM5_Init+0xf4>)
 800227a:	f002 faad 	bl	80047d8 <HAL_TIM_ConfigClockSource>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002284:	f7ff fa1c 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002288:	481d      	ldr	r0, [pc, #116]	; (8002300 <MX_TIM5_Init+0xf4>)
 800228a:	f002 f904 	bl	8004496 <HAL_TIM_PWM_Init>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002294:	f7ff fa14 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80022a0:	f107 0310 	add.w	r3, r7, #16
 80022a4:	4619      	mov	r1, r3
 80022a6:	4816      	ldr	r0, [pc, #88]	; (8002300 <MX_TIM5_Init+0xf4>)
 80022a8:	f002 fd7e 	bl	8004da8 <HAL_TIMEx_MasterConfigSynchronization>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 80022b2:	f7ff fa05 	bl	80016c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022b6:	2360      	movs	r3, #96	; 0x60
 80022b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022be:	2300      	movs	r3, #0
 80022c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022c6:	463b      	mov	r3, r7
 80022c8:	2200      	movs	r2, #0
 80022ca:	4619      	mov	r1, r3
 80022cc:	480c      	ldr	r0, [pc, #48]	; (8002300 <MX_TIM5_Init+0xf4>)
 80022ce:	f002 f9c1 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 80022d8:	f7ff f9f2 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022dc:	463b      	mov	r3, r7
 80022de:	2204      	movs	r2, #4
 80022e0:	4619      	mov	r1, r3
 80022e2:	4807      	ldr	r0, [pc, #28]	; (8002300 <MX_TIM5_Init+0xf4>)
 80022e4:	f002 f9b6 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM5_Init+0xe6>
  {
    Error_Handler();
 80022ee:	f7ff f9e7 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80022f2:	4803      	ldr	r0, [pc, #12]	; (8002300 <MX_TIM5_Init+0xf4>)
 80022f4:	f000 f84e 	bl	8002394 <HAL_TIM_MspPostInit>

}
 80022f8:	bf00      	nop
 80022fa:	3728      	adds	r7, #40	; 0x28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000148 	.word	0x20000148
 8002304:	40000c00 	.word	0x40000c00

08002308 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002308:	b480      	push	{r7}
 800230a:	b087      	sub	sp, #28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a1b      	ldr	r2, [pc, #108]	; (8002384 <HAL_TIM_Base_MspInit+0x7c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d10c      	bne.n	8002334 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800231a:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <HAL_TIM_Base_MspInit+0x80>)
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	4a1a      	ldr	r2, [pc, #104]	; (8002388 <HAL_TIM_Base_MspInit+0x80>)
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	6253      	str	r3, [r2, #36]	; 0x24
 8002326:	4b18      	ldr	r3, [pc, #96]	; (8002388 <HAL_TIM_Base_MspInit+0x80>)
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002332:	e022      	b.n	800237a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a14      	ldr	r2, [pc, #80]	; (800238c <HAL_TIM_Base_MspInit+0x84>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d10c      	bne.n	8002358 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800233e:	4b12      	ldr	r3, [pc, #72]	; (8002388 <HAL_TIM_Base_MspInit+0x80>)
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	4a11      	ldr	r2, [pc, #68]	; (8002388 <HAL_TIM_Base_MspInit+0x80>)
 8002344:	f043 0304 	orr.w	r3, r3, #4
 8002348:	6253      	str	r3, [r2, #36]	; 0x24
 800234a:	4b0f      	ldr	r3, [pc, #60]	; (8002388 <HAL_TIM_Base_MspInit+0x80>)
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]
}
 8002356:	e010      	b.n	800237a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM5)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0c      	ldr	r2, [pc, #48]	; (8002390 <HAL_TIM_Base_MspInit+0x88>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d10b      	bne.n	800237a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <HAL_TIM_Base_MspInit+0x80>)
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	4a08      	ldr	r2, [pc, #32]	; (8002388 <HAL_TIM_Base_MspInit+0x80>)
 8002368:	f043 0308 	orr.w	r3, r3, #8
 800236c:	6253      	str	r3, [r2, #36]	; 0x24
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_TIM_Base_MspInit+0x80>)
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
}
 800237a:	bf00      	nop
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	40000400 	.word	0x40000400
 8002388:	40023800 	.word	0x40023800
 800238c:	40000800 	.word	0x40000800
 8002390:	40000c00 	.word	0x40000c00

08002394 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08c      	sub	sp, #48	; 0x30
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 031c 	add.w	r3, r7, #28
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a50      	ldr	r2, [pc, #320]	; (80024f4 <HAL_TIM_MspPostInit+0x160>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d155      	bne.n	8002462 <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	4b50      	ldr	r3, [pc, #320]	; (80024f8 <HAL_TIM_MspPostInit+0x164>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	4a4f      	ldr	r2, [pc, #316]	; (80024f8 <HAL_TIM_MspPostInit+0x164>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	61d3      	str	r3, [r2, #28]
 80023c2:	4b4d      	ldr	r3, [pc, #308]	; (80024f8 <HAL_TIM_MspPostInit+0x164>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	61bb      	str	r3, [r7, #24]
 80023cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ce:	4b4a      	ldr	r3, [pc, #296]	; (80024f8 <HAL_TIM_MspPostInit+0x164>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	4a49      	ldr	r2, [pc, #292]	; (80024f8 <HAL_TIM_MspPostInit+0x164>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	61d3      	str	r3, [r2, #28]
 80023da:	4b47      	ldr	r3, [pc, #284]	; (80024f8 <HAL_TIM_MspPostInit+0x164>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e6:	4b44      	ldr	r3, [pc, #272]	; (80024f8 <HAL_TIM_MspPostInit+0x164>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	4a43      	ldr	r2, [pc, #268]	; (80024f8 <HAL_TIM_MspPostInit+0x164>)
 80023ec:	f043 0304 	orr.w	r3, r3, #4
 80023f0:	61d3      	str	r3, [r2, #28]
 80023f2:	4b41      	ldr	r3, [pc, #260]	; (80024f8 <HAL_TIM_MspPostInit+0x164>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Czlon4PWM_Pin|Czlon5PWM_Pin;
 80023fe:	23c0      	movs	r3, #192	; 0xc0
 8002400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800240e:	2302      	movs	r3, #2
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	f107 031c 	add.w	r3, r7, #28
 8002416:	4619      	mov	r1, r3
 8002418:	4838      	ldr	r0, [pc, #224]	; (80024fc <HAL_TIM_MspPostInit+0x168>)
 800241a:	f000 fa81 	bl	8002920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R_PWM_Pin;
 800241e:	2301      	movs	r3, #1
 8002420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800242e:	2302      	movs	r3, #2
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(R_PWM_GPIO_Port, &GPIO_InitStruct);
 8002432:	f107 031c 	add.w	r3, r7, #28
 8002436:	4619      	mov	r1, r3
 8002438:	4831      	ldr	r0, [pc, #196]	; (8002500 <HAL_TIM_MspPostInit+0x16c>)
 800243a:	f000 fa71 	bl	8002920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SERVO_1_Pin;
 800243e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244c:	2300      	movs	r3, #0
 800244e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002450:	2302      	movs	r3, #2
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO_1_GPIO_Port, &GPIO_InitStruct);
 8002454:	f107 031c 	add.w	r3, r7, #28
 8002458:	4619      	mov	r1, r3
 800245a:	482a      	ldr	r0, [pc, #168]	; (8002504 <HAL_TIM_MspPostInit+0x170>)
 800245c:	f000 fa60 	bl	8002920 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002460:	e043      	b.n	80024ea <HAL_TIM_MspPostInit+0x156>
  else if(timHandle->Instance==TIM4)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a28      	ldr	r2, [pc, #160]	; (8002508 <HAL_TIM_MspPostInit+0x174>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d11d      	bne.n	80024a8 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246c:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <HAL_TIM_MspPostInit+0x164>)
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	4a21      	ldr	r2, [pc, #132]	; (80024f8 <HAL_TIM_MspPostInit+0x164>)
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	61d3      	str	r3, [r2, #28]
 8002478:	4b1f      	ldr	r3, [pc, #124]	; (80024f8 <HAL_TIM_MspPostInit+0x164>)
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PodstawaPWM_Pin|Czlon1PWM_Pin|Czlon2PWM_Pin|Czlon3PWM_Pin;
 8002484:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248a:	2302      	movs	r3, #2
 800248c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002496:	2302      	movs	r3, #2
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249a:	f107 031c 	add.w	r3, r7, #28
 800249e:	4619      	mov	r1, r3
 80024a0:	4817      	ldr	r0, [pc, #92]	; (8002500 <HAL_TIM_MspPostInit+0x16c>)
 80024a2:	f000 fa3d 	bl	8002920 <HAL_GPIO_Init>
}
 80024a6:	e020      	b.n	80024ea <HAL_TIM_MspPostInit+0x156>
  else if(timHandle->Instance==TIM5)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a17      	ldr	r2, [pc, #92]	; (800250c <HAL_TIM_MspPostInit+0x178>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d11b      	bne.n	80024ea <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_TIM_MspPostInit+0x164>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	4a10      	ldr	r2, [pc, #64]	; (80024f8 <HAL_TIM_MspPostInit+0x164>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	61d3      	str	r3, [r2, #28]
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <HAL_TIM_MspPostInit+0x164>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO_2_Pin|L_PWM_Pin;
 80024ca:	2303      	movs	r3, #3
 80024cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	2302      	movs	r3, #2
 80024d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d6:	2300      	movs	r3, #0
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80024da:	2302      	movs	r3, #2
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024de:	f107 031c 	add.w	r3, r7, #28
 80024e2:	4619      	mov	r1, r3
 80024e4:	4805      	ldr	r0, [pc, #20]	; (80024fc <HAL_TIM_MspPostInit+0x168>)
 80024e6:	f000 fa1b 	bl	8002920 <HAL_GPIO_Init>
}
 80024ea:	bf00      	nop
 80024ec:	3730      	adds	r7, #48	; 0x30
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40000400 	.word	0x40000400
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40020000 	.word	0x40020000
 8002500:	40020400 	.word	0x40020400
 8002504:	40020800 	.word	0x40020800
 8002508:	40000800 	.word	0x40000800
 800250c:	40000c00 	.word	0x40000c00

08002510 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <MX_USART2_UART_Init+0x4c>)
 8002516:	4a12      	ldr	r2, [pc, #72]	; (8002560 <MX_USART2_UART_Init+0x50>)
 8002518:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <MX_USART2_UART_Init+0x4c>)
 800251c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002520:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <MX_USART2_UART_Init+0x4c>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <MX_USART2_UART_Init+0x4c>)
 800252a:	2200      	movs	r2, #0
 800252c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <MX_USART2_UART_Init+0x4c>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002534:	4b09      	ldr	r3, [pc, #36]	; (800255c <MX_USART2_UART_Init+0x4c>)
 8002536:	220c      	movs	r2, #12
 8002538:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <MX_USART2_UART_Init+0x4c>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <MX_USART2_UART_Init+0x4c>)
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002546:	4805      	ldr	r0, [pc, #20]	; (800255c <MX_USART2_UART_Init+0x4c>)
 8002548:	f002 fc8c 	bl	8004e64 <HAL_UART_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002552:	f7ff f8b5 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000188 	.word	0x20000188
 8002560:	40004400 	.word	0x40004400

08002564 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	; 0x28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a17      	ldr	r2, [pc, #92]	; (80025e0 <HAL_UART_MspInit+0x7c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d127      	bne.n	80025d6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002586:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <HAL_UART_MspInit+0x80>)
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	4a16      	ldr	r2, [pc, #88]	; (80025e4 <HAL_UART_MspInit+0x80>)
 800258c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002590:	6253      	str	r3, [r2, #36]	; 0x24
 8002592:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <HAL_UART_MspInit+0x80>)
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259e:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_UART_MspInit+0x80>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4a10      	ldr	r2, [pc, #64]	; (80025e4 <HAL_UART_MspInit+0x80>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	61d3      	str	r3, [r2, #28]
 80025aa:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <HAL_UART_MspInit+0x80>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025b6:	230c      	movs	r3, #12
 80025b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ba:	2302      	movs	r3, #2
 80025bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c2:	2303      	movs	r3, #3
 80025c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025c6:	2307      	movs	r3, #7
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	4619      	mov	r1, r3
 80025d0:	4805      	ldr	r0, [pc, #20]	; (80025e8 <HAL_UART_MspInit+0x84>)
 80025d2:	f000 f9a5 	bl	8002920 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80025d6:	bf00      	nop
 80025d8:	3728      	adds	r7, #40	; 0x28
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40004400 	.word	0x40004400
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40020000 	.word	0x40020000

080025ec <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80025ec:	f7ff fcdf 	bl	8001fae <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025f0:	480b      	ldr	r0, [pc, #44]	; (8002620 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80025f2:	490c      	ldr	r1, [pc, #48]	; (8002624 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80025f4:	4a0c      	ldr	r2, [pc, #48]	; (8002628 <LoopFillZerobss+0x16>)
  movs r3, #0
 80025f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f8:	e002      	b.n	8002600 <LoopCopyDataInit>

080025fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fe:	3304      	adds	r3, #4

08002600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002604:	d3f9      	bcc.n	80025fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002606:	4a09      	ldr	r2, [pc, #36]	; (800262c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002608:	4c09      	ldr	r4, [pc, #36]	; (8002630 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800260c:	e001      	b.n	8002612 <LoopFillZerobss>

0800260e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002610:	3204      	adds	r2, #4

08002612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002614:	d3fb      	bcc.n	800260e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002616:	f002 fd59 	bl	80050cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800261a:	f7fe f993 	bl	8000944 <main>
  bx lr
 800261e:	4770      	bx	lr
  ldr r0, =_sdata
 8002620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002624:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002628:	08005178 	.word	0x08005178
  ldr r2, =_sbss
 800262c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002630:	200001d4 	.word	0x200001d4

08002634 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002634:	e7fe      	b.n	8002634 <ADC1_IRQHandler>

08002636 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002640:	2003      	movs	r0, #3
 8002642:	f000 f939 	bl	80028b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002646:	2000      	movs	r0, #0
 8002648:	f000 f80e 	bl	8002668 <HAL_InitTick>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	71fb      	strb	r3, [r7, #7]
 8002656:	e001      	b.n	800265c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002658:	f7ff fc52 	bl	8001f00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800265c:	79fb      	ldrb	r3, [r7, #7]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002674:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <HAL_InitTick+0x68>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d022      	beq.n	80026c2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800267c:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <HAL_InitTick+0x6c>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <HAL_InitTick+0x68>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002688:	fbb1 f3f3 	udiv	r3, r1, r3
 800268c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002690:	4618      	mov	r0, r3
 8002692:	f000 f938 	bl	8002906 <HAL_SYSTICK_Config>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10f      	bne.n	80026bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b0f      	cmp	r3, #15
 80026a0:	d809      	bhi.n	80026b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a2:	2200      	movs	r2, #0
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	f04f 30ff 	mov.w	r0, #4294967295
 80026aa:	f000 f910 	bl	80028ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <HAL_InitTick+0x70>)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	e007      	b.n	80026c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	73fb      	strb	r3, [r7, #15]
 80026ba:	e004      	b.n	80026c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	73fb      	strb	r3, [r7, #15]
 80026c0:	e001      	b.n	80026c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	2000000c 	.word	0x2000000c
 80026d4:	20000004 	.word	0x20000004
 80026d8:	20000008 	.word	0x20000008

080026dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_IncTick+0x1c>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_IncTick+0x20>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4413      	add	r3, r2
 80026ea:	4a03      	ldr	r2, [pc, #12]	; (80026f8 <HAL_IncTick+0x1c>)
 80026ec:	6013      	str	r3, [r2, #0]
}
 80026ee:	bf00      	nop
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	200001d0 	.word	0x200001d0
 80026fc:	2000000c 	.word	0x2000000c

08002700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return uwTick;
 8002704:	4b02      	ldr	r3, [pc, #8]	; (8002710 <HAL_GetTick+0x10>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr
 8002710:	200001d0 	.word	0x200001d0

08002714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800271c:	f7ff fff0 	bl	8002700 <HAL_GetTick>
 8002720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d004      	beq.n	8002738 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_Delay+0x40>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4413      	add	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002738:	bf00      	nop
 800273a:	f7ff ffe1 	bl	8002700 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	429a      	cmp	r2, r3
 8002748:	d8f7      	bhi.n	800273a <HAL_Delay+0x26>
  {
  }
}
 800274a:	bf00      	nop
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	2000000c 	.word	0x2000000c

08002758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <__NVIC_SetPriorityGrouping+0x44>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002774:	4013      	ands	r3, r2
 8002776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278a:	4a04      	ldr	r2, [pc, #16]	; (800279c <__NVIC_SetPriorityGrouping+0x44>)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	60d3      	str	r3, [r2, #12]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <__NVIC_GetPriorityGrouping+0x18>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	f003 0307 	and.w	r3, r3, #7
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	6039      	str	r1, [r7, #0]
 80027c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	db0a      	blt.n	80027e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	490c      	ldr	r1, [pc, #48]	; (8002808 <__NVIC_SetPriority+0x4c>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	0112      	lsls	r2, r2, #4
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	440b      	add	r3, r1
 80027e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e4:	e00a      	b.n	80027fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4908      	ldr	r1, [pc, #32]	; (800280c <__NVIC_SetPriority+0x50>)
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	3b04      	subs	r3, #4
 80027f4:	0112      	lsls	r2, r2, #4
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	440b      	add	r3, r1
 80027fa:	761a      	strb	r2, [r3, #24]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	e000e100 	.word	0xe000e100
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	; 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f1c3 0307 	rsb	r3, r3, #7
 800282a:	2b04      	cmp	r3, #4
 800282c:	bf28      	it	cs
 800282e:	2304      	movcs	r3, #4
 8002830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3304      	adds	r3, #4
 8002836:	2b06      	cmp	r3, #6
 8002838:	d902      	bls.n	8002840 <NVIC_EncodePriority+0x30>
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3b03      	subs	r3, #3
 800283e:	e000      	b.n	8002842 <NVIC_EncodePriority+0x32>
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	f04f 32ff 	mov.w	r2, #4294967295
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43da      	mvns	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	401a      	ands	r2, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002858:	f04f 31ff 	mov.w	r1, #4294967295
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	43d9      	mvns	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	4313      	orrs	r3, r2
         );
}
 800286a:	4618      	mov	r0, r3
 800286c:	3724      	adds	r7, #36	; 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002884:	d301      	bcc.n	800288a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002886:	2301      	movs	r3, #1
 8002888:	e00f      	b.n	80028aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288a:	4a0a      	ldr	r2, [pc, #40]	; (80028b4 <SysTick_Config+0x40>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3b01      	subs	r3, #1
 8002890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002892:	210f      	movs	r1, #15
 8002894:	f04f 30ff 	mov.w	r0, #4294967295
 8002898:	f7ff ff90 	bl	80027bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <SysTick_Config+0x40>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a2:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <SysTick_Config+0x40>)
 80028a4:	2207      	movs	r2, #7
 80028a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	e000e010 	.word	0xe000e010

080028b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff ff49 	bl	8002758 <__NVIC_SetPriorityGrouping>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b086      	sub	sp, #24
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	4603      	mov	r3, r0
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e0:	f7ff ff5e 	bl	80027a0 <__NVIC_GetPriorityGrouping>
 80028e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	6978      	ldr	r0, [r7, #20]
 80028ec:	f7ff ff90 	bl	8002810 <NVIC_EncodePriority>
 80028f0:	4602      	mov	r2, r0
 80028f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f6:	4611      	mov	r1, r2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff5f 	bl	80027bc <__NVIC_SetPriority>
}
 80028fe:	bf00      	nop
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff ffb0 	bl	8002874 <SysTick_Config>
 8002914:	4603      	mov	r3, r0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002936:	e160      	b.n	8002bfa <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	2101      	movs	r1, #1
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	fa01 f303 	lsl.w	r3, r1, r3
 8002944:	4013      	ands	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 8152 	beq.w	8002bf4 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2b01      	cmp	r3, #1
 800295a:	d005      	beq.n	8002968 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002964:	2b02      	cmp	r3, #2
 8002966:	d130      	bne.n	80029ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	2203      	movs	r2, #3
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800299e:	2201      	movs	r2, #1
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4013      	ands	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	f003 0201 	and.w	r2, r3, #1
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	d017      	beq.n	8002a06 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	2203      	movs	r2, #3
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4013      	ands	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d123      	bne.n	8002a5a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	08da      	lsrs	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3208      	adds	r2, #8
 8002a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a1e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	220f      	movs	r2, #15
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4013      	ands	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	08da      	lsrs	r2, r3, #3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3208      	adds	r2, #8
 8002a54:	6939      	ldr	r1, [r7, #16]
 8002a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	2203      	movs	r2, #3
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 0203 	and.w	r2, r3, #3
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 80ac 	beq.w	8002bf4 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a9c:	4b5e      	ldr	r3, [pc, #376]	; (8002c18 <HAL_GPIO_Init+0x2f8>)
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	4a5d      	ldr	r2, [pc, #372]	; (8002c18 <HAL_GPIO_Init+0x2f8>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6213      	str	r3, [r2, #32]
 8002aa8:	4b5b      	ldr	r3, [pc, #364]	; (8002c18 <HAL_GPIO_Init+0x2f8>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ab4:	4a59      	ldr	r2, [pc, #356]	; (8002c1c <HAL_GPIO_Init+0x2fc>)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	089b      	lsrs	r3, r3, #2
 8002aba:	3302      	adds	r3, #2
 8002abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	220f      	movs	r2, #15
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a51      	ldr	r2, [pc, #324]	; (8002c20 <HAL_GPIO_Init+0x300>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d025      	beq.n	8002b2c <HAL_GPIO_Init+0x20c>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a50      	ldr	r2, [pc, #320]	; (8002c24 <HAL_GPIO_Init+0x304>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d01f      	beq.n	8002b28 <HAL_GPIO_Init+0x208>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a4f      	ldr	r2, [pc, #316]	; (8002c28 <HAL_GPIO_Init+0x308>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d019      	beq.n	8002b24 <HAL_GPIO_Init+0x204>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a4e      	ldr	r2, [pc, #312]	; (8002c2c <HAL_GPIO_Init+0x30c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d013      	beq.n	8002b20 <HAL_GPIO_Init+0x200>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a4d      	ldr	r2, [pc, #308]	; (8002c30 <HAL_GPIO_Init+0x310>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d00d      	beq.n	8002b1c <HAL_GPIO_Init+0x1fc>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a4c      	ldr	r2, [pc, #304]	; (8002c34 <HAL_GPIO_Init+0x314>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d007      	beq.n	8002b18 <HAL_GPIO_Init+0x1f8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a4b      	ldr	r2, [pc, #300]	; (8002c38 <HAL_GPIO_Init+0x318>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d101      	bne.n	8002b14 <HAL_GPIO_Init+0x1f4>
 8002b10:	2306      	movs	r3, #6
 8002b12:	e00c      	b.n	8002b2e <HAL_GPIO_Init+0x20e>
 8002b14:	2307      	movs	r3, #7
 8002b16:	e00a      	b.n	8002b2e <HAL_GPIO_Init+0x20e>
 8002b18:	2305      	movs	r3, #5
 8002b1a:	e008      	b.n	8002b2e <HAL_GPIO_Init+0x20e>
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	e006      	b.n	8002b2e <HAL_GPIO_Init+0x20e>
 8002b20:	2303      	movs	r3, #3
 8002b22:	e004      	b.n	8002b2e <HAL_GPIO_Init+0x20e>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e002      	b.n	8002b2e <HAL_GPIO_Init+0x20e>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <HAL_GPIO_Init+0x20e>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	f002 0203 	and.w	r2, r2, #3
 8002b34:	0092      	lsls	r2, r2, #2
 8002b36:	4093      	lsls	r3, r2
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b3e:	4937      	ldr	r1, [pc, #220]	; (8002c1c <HAL_GPIO_Init+0x2fc>)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	089b      	lsrs	r3, r3, #2
 8002b44:	3302      	adds	r3, #2
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b4c:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <HAL_GPIO_Init+0x31c>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b70:	4a32      	ldr	r2, [pc, #200]	; (8002c3c <HAL_GPIO_Init+0x31c>)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b76:	4b31      	ldr	r3, [pc, #196]	; (8002c3c <HAL_GPIO_Init+0x31c>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b9a:	4a28      	ldr	r2, [pc, #160]	; (8002c3c <HAL_GPIO_Init+0x31c>)
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ba0:	4b26      	ldr	r3, [pc, #152]	; (8002c3c <HAL_GPIO_Init+0x31c>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002bc4:	4a1d      	ldr	r2, [pc, #116]	; (8002c3c <HAL_GPIO_Init+0x31c>)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bca:	4b1c      	ldr	r3, [pc, #112]	; (8002c3c <HAL_GPIO_Init+0x31c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002bee:	4a13      	ldr	r2, [pc, #76]	; (8002c3c <HAL_GPIO_Init+0x31c>)
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f47f ae97 	bne.w	8002938 <HAL_GPIO_Init+0x18>
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	bf00      	nop
 8002c0e:	371c      	adds	r7, #28
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40010000 	.word	0x40010000
 8002c20:	40020000 	.word	0x40020000
 8002c24:	40020400 	.word	0x40020400
 8002c28:	40020800 	.word	0x40020800
 8002c2c:	40020c00 	.word	0x40020c00
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40021400 	.word	0x40021400
 8002c38:	40021800 	.word	0x40021800
 8002c3c:	40010400 	.word	0x40010400

08002c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	807b      	strh	r3, [r7, #2]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c50:	787b      	ldrb	r3, [r7, #1]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c56:	887a      	ldrh	r2, [r7, #2]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002c5c:	e003      	b.n	8002c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002c5e:	887b      	ldrh	r3, [r7, #2]
 8002c60:	041a      	lsls	r2, r3, #16
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	619a      	str	r2, [r3, #24]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c82:	887a      	ldrh	r2, [r7, #2]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4013      	ands	r3, r2
 8002c88:	041a      	lsls	r2, r3, #16
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	43d9      	mvns	r1, r3
 8002c8e:	887b      	ldrh	r3, [r7, #2]
 8002c90:	400b      	ands	r3, r1
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	619a      	str	r2, [r3, #24]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr
	...

08002ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e31d      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb6:	4b94      	ldr	r3, [pc, #592]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc0:	4b91      	ldr	r3, [pc, #580]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d07b      	beq.n	8002dce <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d006      	beq.n	8002cea <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d10f      	bne.n	8002d02 <HAL_RCC_OscConfig+0x5e>
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce8:	d10b      	bne.n	8002d02 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cea:	4b87      	ldr	r3, [pc, #540]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d06a      	beq.n	8002dcc <HAL_RCC_OscConfig+0x128>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d166      	bne.n	8002dcc <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e2f7      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d106      	bne.n	8002d18 <HAL_RCC_OscConfig+0x74>
 8002d0a:	4b7f      	ldr	r3, [pc, #508]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a7e      	ldr	r2, [pc, #504]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e02d      	b.n	8002d74 <HAL_RCC_OscConfig+0xd0>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10c      	bne.n	8002d3a <HAL_RCC_OscConfig+0x96>
 8002d20:	4b79      	ldr	r3, [pc, #484]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a78      	ldr	r2, [pc, #480]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4b76      	ldr	r3, [pc, #472]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a75      	ldr	r2, [pc, #468]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	e01c      	b.n	8002d74 <HAL_RCC_OscConfig+0xd0>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0xb8>
 8002d42:	4b71      	ldr	r3, [pc, #452]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a70      	ldr	r2, [pc, #448]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	4b6e      	ldr	r3, [pc, #440]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a6d      	ldr	r2, [pc, #436]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0xd0>
 8002d5c:	4b6a      	ldr	r3, [pc, #424]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a69      	ldr	r2, [pc, #420]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	4b67      	ldr	r3, [pc, #412]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a66      	ldr	r2, [pc, #408]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d013      	beq.n	8002da4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7ff fcc0 	bl	8002700 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d84:	f7ff fcbc 	bl	8002700 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e2ad      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d96:	4b5c      	ldr	r3, [pc, #368]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0xe0>
 8002da2:	e014      	b.n	8002dce <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7ff fcac 	bl	8002700 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dac:	f7ff fca8 	bl	8002700 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e299      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dbe:	4b52      	ldr	r3, [pc, #328]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x108>
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d05a      	beq.n	8002e90 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d005      	beq.n	8002dec <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	2b0c      	cmp	r3, #12
 8002de4:	d119      	bne.n	8002e1a <HAL_RCC_OscConfig+0x176>
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d116      	bne.n	8002e1a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dec:	4b46      	ldr	r3, [pc, #280]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_OscConfig+0x160>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e276      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e04:	4b40      	ldr	r3, [pc, #256]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	493d      	ldr	r1, [pc, #244]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e18:	e03a      	b.n	8002e90 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d020      	beq.n	8002e64 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e22:	4b3a      	ldr	r3, [pc, #232]	; (8002f0c <HAL_RCC_OscConfig+0x268>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7ff fc6a 	bl	8002700 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e30:	f7ff fc66 	bl	8002700 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e257      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e42:	4b31      	ldr	r3, [pc, #196]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4e:	4b2e      	ldr	r3, [pc, #184]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	021b      	lsls	r3, r3, #8
 8002e5c:	492a      	ldr	r1, [pc, #168]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]
 8002e62:	e015      	b.n	8002e90 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e64:	4b29      	ldr	r3, [pc, #164]	; (8002f0c <HAL_RCC_OscConfig+0x268>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6a:	f7ff fc49 	bl	8002700 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e72:	f7ff fc45 	bl	8002700 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e236      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e84:	4b20      	ldr	r3, [pc, #128]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f0      	bne.n	8002e72 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 80b8 	beq.w	800300e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d170      	bne.n	8002f86 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ea4:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_OscConfig+0x218>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e21a      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1a      	ldr	r2, [r3, #32]
 8002ec0:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d921      	bls.n	8002f10 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fc7d 	bl	80037d0 <RCC_SetFlashLatencyFromMSIRange>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e208      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ee0:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4906      	ldr	r1, [pc, #24]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	061b      	lsls	r3, r3, #24
 8002f00:	4901      	ldr	r1, [pc, #4]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
 8002f06:	e020      	b.n	8002f4a <HAL_RCC_OscConfig+0x2a6>
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f10:	4b99      	ldr	r3, [pc, #612]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	4996      	ldr	r1, [pc, #600]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f22:	4b95      	ldr	r3, [pc, #596]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	061b      	lsls	r3, r3, #24
 8002f30:	4991      	ldr	r1, [pc, #580]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fc48 	bl	80037d0 <RCC_SetFlashLatencyFromMSIRange>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e1d3      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	0b5b      	lsrs	r3, r3, #13
 8002f50:	3301      	adds	r3, #1
 8002f52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002f5a:	4a87      	ldr	r2, [pc, #540]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8002f5c:	6892      	ldr	r2, [r2, #8]
 8002f5e:	0912      	lsrs	r2, r2, #4
 8002f60:	f002 020f 	and.w	r2, r2, #15
 8002f64:	4985      	ldr	r1, [pc, #532]	; (800317c <HAL_RCC_OscConfig+0x4d8>)
 8002f66:	5c8a      	ldrb	r2, [r1, r2]
 8002f68:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f6a:	4a85      	ldr	r2, [pc, #532]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002f6c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f6e:	4b85      	ldr	r3, [pc, #532]	; (8003184 <HAL_RCC_OscConfig+0x4e0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fb78 	bl	8002668 <HAL_InitTick>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d045      	beq.n	800300e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	e1b5      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d029      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f8e:	4b7e      	ldr	r3, [pc, #504]	; (8003188 <HAL_RCC_OscConfig+0x4e4>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7ff fbb4 	bl	8002700 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f9c:	f7ff fbb0 	bl	8002700 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e1a1      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fae:	4b72      	ldr	r3, [pc, #456]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fba:	4b6f      	ldr	r3, [pc, #444]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	496c      	ldr	r1, [pc, #432]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fcc:	4b6a      	ldr	r3, [pc, #424]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	4967      	ldr	r1, [pc, #412]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
 8002fe0:	e015      	b.n	800300e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fe2:	4b69      	ldr	r3, [pc, #420]	; (8003188 <HAL_RCC_OscConfig+0x4e4>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7ff fb8a 	bl	8002700 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ff0:	f7ff fb86 	bl	8002700 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e177      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003002:	4b5d      	ldr	r3, [pc, #372]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d030      	beq.n	800307c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d016      	beq.n	8003050 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003022:	4b5a      	ldr	r3, [pc, #360]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003028:	f7ff fb6a 	bl	8002700 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003030:	f7ff fb66 	bl	8002700 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e157      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003042:	4b4d      	ldr	r3, [pc, #308]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8003044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0x38c>
 800304e:	e015      	b.n	800307c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003050:	4b4e      	ldr	r3, [pc, #312]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003056:	f7ff fb53 	bl	8002700 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800305e:	f7ff fb4f 	bl	8002700 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e140      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003070:	4b41      	ldr	r3, [pc, #260]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8003072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80b5 	beq.w	80031f4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308a:	2300      	movs	r3, #0
 800308c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308e:	4b3a      	ldr	r3, [pc, #232]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10d      	bne.n	80030b6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309a:	4b37      	ldr	r3, [pc, #220]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	4a36      	ldr	r2, [pc, #216]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 80030a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a4:	6253      	str	r3, [r2, #36]	; 0x24
 80030a6:	4b34      	ldr	r3, [pc, #208]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b2:	2301      	movs	r3, #1
 80030b4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b6:	4b36      	ldr	r3, [pc, #216]	; (8003190 <HAL_RCC_OscConfig+0x4ec>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d118      	bne.n	80030f4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c2:	4b33      	ldr	r3, [pc, #204]	; (8003190 <HAL_RCC_OscConfig+0x4ec>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a32      	ldr	r2, [pc, #200]	; (8003190 <HAL_RCC_OscConfig+0x4ec>)
 80030c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ce:	f7ff fb17 	bl	8002700 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d6:	f7ff fb13 	bl	8002700 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b64      	cmp	r3, #100	; 0x64
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e104      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e8:	4b29      	ldr	r3, [pc, #164]	; (8003190 <HAL_RCC_OscConfig+0x4ec>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d106      	bne.n	800310a <HAL_RCC_OscConfig+0x466>
 80030fc:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 80030fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003100:	4a1d      	ldr	r2, [pc, #116]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8003102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003106:	6353      	str	r3, [r2, #52]	; 0x34
 8003108:	e02d      	b.n	8003166 <HAL_RCC_OscConfig+0x4c2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0x488>
 8003112:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8003114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003116:	4a18      	ldr	r2, [pc, #96]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8003118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800311c:	6353      	str	r3, [r2, #52]	; 0x34
 800311e:	4b16      	ldr	r3, [pc, #88]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8003120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003122:	4a15      	ldr	r2, [pc, #84]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8003124:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003128:	6353      	str	r3, [r2, #52]	; 0x34
 800312a:	e01c      	b.n	8003166 <HAL_RCC_OscConfig+0x4c2>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b05      	cmp	r3, #5
 8003132:	d10c      	bne.n	800314e <HAL_RCC_OscConfig+0x4aa>
 8003134:	4b10      	ldr	r3, [pc, #64]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8003136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003138:	4a0f      	ldr	r2, [pc, #60]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 800313a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800313e:	6353      	str	r3, [r2, #52]	; 0x34
 8003140:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8003142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003144:	4a0c      	ldr	r2, [pc, #48]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8003146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314a:	6353      	str	r3, [r2, #52]	; 0x34
 800314c:	e00b      	b.n	8003166 <HAL_RCC_OscConfig+0x4c2>
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8003150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003152:	4a09      	ldr	r2, [pc, #36]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8003154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003158:	6353      	str	r3, [r2, #52]	; 0x34
 800315a:	4b07      	ldr	r3, [pc, #28]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 800315c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315e:	4a06      	ldr	r2, [pc, #24]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8003160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003164:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d024      	beq.n	80031b8 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316e:	f7ff fac7 	bl	8002700 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003174:	e019      	b.n	80031aa <HAL_RCC_OscConfig+0x506>
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800
 800317c:	08005150 	.word	0x08005150
 8003180:	20000004 	.word	0x20000004
 8003184:	20000008 	.word	0x20000008
 8003188:	42470020 	.word	0x42470020
 800318c:	42470680 	.word	0x42470680
 8003190:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003194:	f7ff fab4 	bl	8002700 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e0a3      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031aa:	4b54      	ldr	r3, [pc, #336]	; (80032fc <HAL_RCC_OscConfig+0x658>)
 80031ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0ee      	beq.n	8003194 <HAL_RCC_OscConfig+0x4f0>
 80031b6:	e014      	b.n	80031e2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b8:	f7ff faa2 	bl	8002700 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c0:	f7ff fa9e 	bl	8002700 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e08d      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031d6:	4b49      	ldr	r3, [pc, #292]	; (80032fc <HAL_RCC_OscConfig+0x658>)
 80031d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1ee      	bne.n	80031c0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031e2:	7ffb      	ldrb	r3, [r7, #31]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d105      	bne.n	80031f4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e8:	4b44      	ldr	r3, [pc, #272]	; (80032fc <HAL_RCC_OscConfig+0x658>)
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	4a43      	ldr	r2, [pc, #268]	; (80032fc <HAL_RCC_OscConfig+0x658>)
 80031ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d079      	beq.n	80032f0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	d056      	beq.n	80032b0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	2b02      	cmp	r3, #2
 8003208:	d13b      	bne.n	8003282 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320a:	4b3d      	ldr	r3, [pc, #244]	; (8003300 <HAL_RCC_OscConfig+0x65c>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7ff fa76 	bl	8002700 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003218:	f7ff fa72 	bl	8002700 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e063      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800322a:	4b34      	ldr	r3, [pc, #208]	; (80032fc <HAL_RCC_OscConfig+0x658>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003236:	4b31      	ldr	r3, [pc, #196]	; (80032fc <HAL_RCC_OscConfig+0x658>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	4319      	orrs	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	430b      	orrs	r3, r1
 800324e:	492b      	ldr	r1, [pc, #172]	; (80032fc <HAL_RCC_OscConfig+0x658>)
 8003250:	4313      	orrs	r3, r2
 8003252:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003254:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <HAL_RCC_OscConfig+0x65c>)
 8003256:	2201      	movs	r2, #1
 8003258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325a:	f7ff fa51 	bl	8002700 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003262:	f7ff fa4d 	bl	8002700 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e03e      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003274:	4b21      	ldr	r3, [pc, #132]	; (80032fc <HAL_RCC_OscConfig+0x658>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x5be>
 8003280:	e036      	b.n	80032f0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003282:	4b1f      	ldr	r3, [pc, #124]	; (8003300 <HAL_RCC_OscConfig+0x65c>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7ff fa3a 	bl	8002700 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003290:	f7ff fa36 	bl	8002700 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e027      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032a2:	4b16      	ldr	r3, [pc, #88]	; (80032fc <HAL_RCC_OscConfig+0x658>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x5ec>
 80032ae:	e01f      	b.n	80032f0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e01a      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <HAL_RCC_OscConfig+0x658>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d10d      	bne.n	80032ec <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032da:	429a      	cmp	r2, r3
 80032dc:	d106      	bne.n	80032ec <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3720      	adds	r7, #32
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800
 8003300:	42470060 	.word	0x42470060

08003304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e11a      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003318:	4b8f      	ldr	r3, [pc, #572]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d919      	bls.n	800335a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d105      	bne.n	8003338 <HAL_RCC_ClockConfig+0x34>
 800332c:	4b8a      	ldr	r3, [pc, #552]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a89      	ldr	r2, [pc, #548]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 8003332:	f043 0304 	orr.w	r3, r3, #4
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	4b87      	ldr	r3, [pc, #540]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f023 0201 	bic.w	r2, r3, #1
 8003340:	4985      	ldr	r1, [pc, #532]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	4313      	orrs	r3, r2
 8003346:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003348:	4b83      	ldr	r3, [pc, #524]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d001      	beq.n	800335a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e0f9      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d008      	beq.n	8003378 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003366:	4b7d      	ldr	r3, [pc, #500]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	497a      	ldr	r1, [pc, #488]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 8003374:	4313      	orrs	r3, r2
 8003376:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 808e 	beq.w	80034a2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d107      	bne.n	800339e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800338e:	4b73      	ldr	r3, [pc, #460]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d121      	bne.n	80033de <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e0d7      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d107      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033a6:	4b6d      	ldr	r3, [pc, #436]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d115      	bne.n	80033de <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e0cb      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d107      	bne.n	80033ce <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033be:	4b67      	ldr	r3, [pc, #412]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d109      	bne.n	80033de <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e0bf      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80033ce:	4b63      	ldr	r3, [pc, #396]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e0b7      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033de:	4b5f      	ldr	r3, [pc, #380]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f023 0203 	bic.w	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	495c      	ldr	r1, [pc, #368]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033f0:	f7ff f986 	bl	8002700 <HAL_GetTick>
 80033f4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d112      	bne.n	8003424 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033fe:	e00a      	b.n	8003416 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003400:	f7ff f97e 	bl	8002700 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f241 3288 	movw	r2, #5000	; 0x1388
 800340e:	4293      	cmp	r3, r2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e09b      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003416:	4b51      	ldr	r3, [pc, #324]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b08      	cmp	r3, #8
 8003420:	d1ee      	bne.n	8003400 <HAL_RCC_ClockConfig+0xfc>
 8003422:	e03e      	b.n	80034a2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b03      	cmp	r3, #3
 800342a:	d112      	bne.n	8003452 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800342c:	e00a      	b.n	8003444 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342e:	f7ff f967 	bl	8002700 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f241 3288 	movw	r2, #5000	; 0x1388
 800343c:	4293      	cmp	r3, r2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e084      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003444:	4b45      	ldr	r3, [pc, #276]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b0c      	cmp	r3, #12
 800344e:	d1ee      	bne.n	800342e <HAL_RCC_ClockConfig+0x12a>
 8003450:	e027      	b.n	80034a2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d11d      	bne.n	8003496 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800345a:	e00a      	b.n	8003472 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800345c:	f7ff f950 	bl	8002700 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	; 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e06d      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003472:	4b3a      	ldr	r3, [pc, #232]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b04      	cmp	r3, #4
 800347c:	d1ee      	bne.n	800345c <HAL_RCC_ClockConfig+0x158>
 800347e:	e010      	b.n	80034a2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003480:	f7ff f93e 	bl	8002700 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	; 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e05b      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003496:	4b31      	ldr	r3, [pc, #196]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1ee      	bne.n	8003480 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034a2:	4b2d      	ldr	r3, [pc, #180]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d219      	bcs.n	80034e4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d105      	bne.n	80034c2 <HAL_RCC_ClockConfig+0x1be>
 80034b6:	4b28      	ldr	r3, [pc, #160]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a27      	ldr	r2, [pc, #156]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 80034bc:	f043 0304 	orr.w	r3, r3, #4
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	4b25      	ldr	r3, [pc, #148]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 0201 	bic.w	r2, r3, #1
 80034ca:	4923      	ldr	r1, [pc, #140]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d2:	4b21      	ldr	r3, [pc, #132]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e034      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f0:	4b1a      	ldr	r3, [pc, #104]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	4917      	ldr	r1, [pc, #92]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d009      	beq.n	8003522 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800350e:	4b13      	ldr	r3, [pc, #76]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	490f      	ldr	r1, [pc, #60]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003522:	f000 f823 	bl	800356c <HAL_RCC_GetSysClockFreq>
 8003526:	4602      	mov	r2, r0
 8003528:	4b0c      	ldr	r3, [pc, #48]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	490b      	ldr	r1, [pc, #44]	; (8003560 <HAL_RCC_ClockConfig+0x25c>)
 8003534:	5ccb      	ldrb	r3, [r1, r3]
 8003536:	fa22 f303 	lsr.w	r3, r2, r3
 800353a:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <HAL_RCC_ClockConfig+0x260>)
 800353c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800353e:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff f890 	bl	8002668 <HAL_InitTick>
 8003548:	4603      	mov	r3, r0
 800354a:	72fb      	strb	r3, [r7, #11]

  return status;
 800354c:	7afb      	ldrb	r3, [r7, #11]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40023c00 	.word	0x40023c00
 800355c:	40023800 	.word	0x40023800
 8003560:	08005150 	.word	0x08005150
 8003564:	20000004 	.word	0x20000004
 8003568:	20000008 	.word	0x20000008

0800356c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800356c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003570:	b092      	sub	sp, #72	; 0x48
 8003572:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003574:	4b79      	ldr	r3, [pc, #484]	; (800375c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800357a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357c:	f003 030c 	and.w	r3, r3, #12
 8003580:	2b0c      	cmp	r3, #12
 8003582:	d00d      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0x34>
 8003584:	2b0c      	cmp	r3, #12
 8003586:	f200 80d5 	bhi.w	8003734 <HAL_RCC_GetSysClockFreq+0x1c8>
 800358a:	2b04      	cmp	r3, #4
 800358c:	d002      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0x28>
 800358e:	2b08      	cmp	r3, #8
 8003590:	d003      	beq.n	800359a <HAL_RCC_GetSysClockFreq+0x2e>
 8003592:	e0cf      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003594:	4b72      	ldr	r3, [pc, #456]	; (8003760 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003596:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003598:	e0da      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800359a:	4b72      	ldr	r3, [pc, #456]	; (8003764 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800359c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800359e:	e0d7      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80035a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a2:	0c9b      	lsrs	r3, r3, #18
 80035a4:	f003 020f 	and.w	r2, r3, #15
 80035a8:	4b6f      	ldr	r3, [pc, #444]	; (8003768 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80035aa:	5c9b      	ldrb	r3, [r3, r2]
 80035ac:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80035ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b0:	0d9b      	lsrs	r3, r3, #22
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	3301      	adds	r3, #1
 80035b8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ba:	4b68      	ldr	r3, [pc, #416]	; (800375c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d05d      	beq.n	8003682 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	2200      	movs	r2, #0
 80035ca:	4618      	mov	r0, r3
 80035cc:	4611      	mov	r1, r2
 80035ce:	4604      	mov	r4, r0
 80035d0:	460d      	mov	r5, r1
 80035d2:	4622      	mov	r2, r4
 80035d4:	462b      	mov	r3, r5
 80035d6:	f04f 0000 	mov.w	r0, #0
 80035da:	f04f 0100 	mov.w	r1, #0
 80035de:	0159      	lsls	r1, r3, #5
 80035e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035e4:	0150      	lsls	r0, r2, #5
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4621      	mov	r1, r4
 80035ec:	1a51      	subs	r1, r2, r1
 80035ee:	6139      	str	r1, [r7, #16]
 80035f0:	4629      	mov	r1, r5
 80035f2:	eb63 0301 	sbc.w	r3, r3, r1
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003604:	4659      	mov	r1, fp
 8003606:	018b      	lsls	r3, r1, #6
 8003608:	4651      	mov	r1, sl
 800360a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800360e:	4651      	mov	r1, sl
 8003610:	018a      	lsls	r2, r1, #6
 8003612:	46d4      	mov	ip, sl
 8003614:	ebb2 080c 	subs.w	r8, r2, ip
 8003618:	4659      	mov	r1, fp
 800361a:	eb63 0901 	sbc.w	r9, r3, r1
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800362a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800362e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003632:	4690      	mov	r8, r2
 8003634:	4699      	mov	r9, r3
 8003636:	4623      	mov	r3, r4
 8003638:	eb18 0303 	adds.w	r3, r8, r3
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	462b      	mov	r3, r5
 8003640:	eb49 0303 	adc.w	r3, r9, r3
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003652:	4629      	mov	r1, r5
 8003654:	024b      	lsls	r3, r1, #9
 8003656:	4620      	mov	r0, r4
 8003658:	4629      	mov	r1, r5
 800365a:	4604      	mov	r4, r0
 800365c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003660:	4601      	mov	r1, r0
 8003662:	024a      	lsls	r2, r1, #9
 8003664:	4610      	mov	r0, r2
 8003666:	4619      	mov	r1, r3
 8003668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800366a:	2200      	movs	r2, #0
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
 800366e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003670:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003674:	f7fc ff2c 	bl	80004d0 <__aeabi_uldivmod>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4613      	mov	r3, r2
 800367e:	647b      	str	r3, [r7, #68]	; 0x44
 8003680:	e055      	b.n	800372e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003684:	2200      	movs	r2, #0
 8003686:	623b      	str	r3, [r7, #32]
 8003688:	627a      	str	r2, [r7, #36]	; 0x24
 800368a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800368e:	4642      	mov	r2, r8
 8003690:	464b      	mov	r3, r9
 8003692:	f04f 0000 	mov.w	r0, #0
 8003696:	f04f 0100 	mov.w	r1, #0
 800369a:	0159      	lsls	r1, r3, #5
 800369c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036a0:	0150      	lsls	r0, r2, #5
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	46c4      	mov	ip, r8
 80036a8:	ebb2 0a0c 	subs.w	sl, r2, ip
 80036ac:	4640      	mov	r0, r8
 80036ae:	4649      	mov	r1, r9
 80036b0:	468c      	mov	ip, r1
 80036b2:	eb63 0b0c 	sbc.w	fp, r3, ip
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036c2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036c6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036ca:	ebb2 040a 	subs.w	r4, r2, sl
 80036ce:	eb63 050b 	sbc.w	r5, r3, fp
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	00eb      	lsls	r3, r5, #3
 80036dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036e0:	00e2      	lsls	r2, r4, #3
 80036e2:	4614      	mov	r4, r2
 80036e4:	461d      	mov	r5, r3
 80036e6:	4603      	mov	r3, r0
 80036e8:	18e3      	adds	r3, r4, r3
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	460b      	mov	r3, r1
 80036ee:	eb45 0303 	adc.w	r3, r5, r3
 80036f2:	607b      	str	r3, [r7, #4]
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003700:	4629      	mov	r1, r5
 8003702:	028b      	lsls	r3, r1, #10
 8003704:	4620      	mov	r0, r4
 8003706:	4629      	mov	r1, r5
 8003708:	4604      	mov	r4, r0
 800370a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800370e:	4601      	mov	r1, r0
 8003710:	028a      	lsls	r2, r1, #10
 8003712:	4610      	mov	r0, r2
 8003714:	4619      	mov	r1, r3
 8003716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003718:	2200      	movs	r2, #0
 800371a:	61bb      	str	r3, [r7, #24]
 800371c:	61fa      	str	r2, [r7, #28]
 800371e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003722:	f7fc fed5 	bl	80004d0 <__aeabi_uldivmod>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4613      	mov	r3, r2
 800372c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800372e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003730:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003732:	e00d      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003734:	4b09      	ldr	r3, [pc, #36]	; (800375c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	0b5b      	lsrs	r3, r3, #13
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	3301      	adds	r3, #1
 8003744:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800374e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003752:	4618      	mov	r0, r3
 8003754:	3748      	adds	r7, #72	; 0x48
 8003756:	46bd      	mov	sp, r7
 8003758:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800375c:	40023800 	.word	0x40023800
 8003760:	00f42400 	.word	0x00f42400
 8003764:	007a1200 	.word	0x007a1200
 8003768:	08005144 	.word	0x08005144

0800376c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003770:	4b02      	ldr	r3, [pc, #8]	; (800377c <HAL_RCC_GetHCLKFreq+0x10>)
 8003772:	681b      	ldr	r3, [r3, #0]
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr
 800377c:	20000004 	.word	0x20000004

08003780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003784:	f7ff fff2 	bl	800376c <HAL_RCC_GetHCLKFreq>
 8003788:	4602      	mov	r2, r0
 800378a:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	4903      	ldr	r1, [pc, #12]	; (80037a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003796:	5ccb      	ldrb	r3, [r1, r3]
 8003798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800379c:	4618      	mov	r0, r3
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40023800 	.word	0x40023800
 80037a4:	08005160 	.word	0x08005160

080037a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037ac:	f7ff ffde 	bl	800376c <HAL_RCC_GetHCLKFreq>
 80037b0:	4602      	mov	r2, r0
 80037b2:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	0adb      	lsrs	r3, r3, #11
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	4903      	ldr	r1, [pc, #12]	; (80037cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80037be:	5ccb      	ldrb	r3, [r1, r3]
 80037c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40023800 	.word	0x40023800
 80037cc:	08005160 	.word	0x08005160

080037d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037d8:	2300      	movs	r3, #0
 80037da:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80037dc:	4b29      	ldr	r3, [pc, #164]	; (8003884 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d12c      	bne.n	8003842 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037e8:	4b26      	ldr	r3, [pc, #152]	; (8003884 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80037f4:	4b24      	ldr	r3, [pc, #144]	; (8003888 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	e016      	b.n	800382e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003800:	4b20      	ldr	r3, [pc, #128]	; (8003884 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	4a1f      	ldr	r2, [pc, #124]	; (8003884 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380a:	6253      	str	r3, [r2, #36]	; 0x24
 800380c:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003818:	4b1b      	ldr	r3, [pc, #108]	; (8003888 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003820:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003822:	4b18      	ldr	r3, [pc, #96]	; (8003884 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	4a17      	ldr	r2, [pc, #92]	; (8003884 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800382c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003834:	d105      	bne.n	8003842 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800383c:	d101      	bne.n	8003842 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800383e:	2301      	movs	r3, #1
 8003840:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d105      	bne.n	8003854 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003848:	4b10      	ldr	r3, [pc, #64]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a0f      	ldr	r2, [pc, #60]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800384e:	f043 0304 	orr.w	r3, r3, #4
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	4b0d      	ldr	r3, [pc, #52]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f023 0201 	bic.w	r2, r3, #1
 800385c:	490b      	ldr	r1, [pc, #44]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003864:	4b09      	ldr	r3, [pc, #36]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	429a      	cmp	r2, r3
 8003870:	d001      	beq.n	8003876 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	371c      	adds	r7, #28
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40023800 	.word	0x40023800
 8003888:	40007000 	.word	0x40007000
 800388c:	40023c00 	.word	0x40023c00

08003890 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e07b      	b.n	800399a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d108      	bne.n	80038bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038b2:	d009      	beq.n	80038c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	61da      	str	r2, [r3, #28]
 80038ba:	e005      	b.n	80038c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d106      	bne.n	80038e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fe fac8 	bl	8001e78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394c:	ea42 0103 	orr.w	r1, r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	0c1b      	lsrs	r3, r3, #16
 8003966:	f003 0104 	and.w	r1, r3, #4
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	f003 0210 	and.w	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003988:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b088      	sub	sp, #32
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	603b      	str	r3, [r7, #0]
 80039ae:	4613      	mov	r3, r2
 80039b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_SPI_Transmit+0x22>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e12d      	b.n	8003c20 <HAL_SPI_Transmit+0x27e>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039cc:	f7fe fe98 	bl	8002700 <HAL_GetTick>
 80039d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d002      	beq.n	80039e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039e2:	2302      	movs	r3, #2
 80039e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039e6:	e116      	b.n	8003c16 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_SPI_Transmit+0x52>
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d102      	bne.n	80039fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039f8:	e10d      	b.n	8003c16 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2203      	movs	r2, #3
 80039fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	88fa      	ldrh	r2, [r7, #6]
 8003a12:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	88fa      	ldrh	r2, [r7, #6]
 8003a18:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a40:	d10f      	bne.n	8003a62 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6c:	2b40      	cmp	r3, #64	; 0x40
 8003a6e:	d007      	beq.n	8003a80 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a88:	d14f      	bne.n	8003b2a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_SPI_Transmit+0xf6>
 8003a92:	8afb      	ldrh	r3, [r7, #22]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d142      	bne.n	8003b1e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	881a      	ldrh	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	1c9a      	adds	r2, r3, #2
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003abc:	e02f      	b.n	8003b1e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d112      	bne.n	8003af2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	881a      	ldrh	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	1c9a      	adds	r2, r3, #2
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	86da      	strh	r2, [r3, #54]	; 0x36
 8003af0:	e015      	b.n	8003b1e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003af2:	f7fe fe05 	bl	8002700 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d803      	bhi.n	8003b0a <HAL_SPI_Transmit+0x168>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b08:	d102      	bne.n	8003b10 <HAL_SPI_Transmit+0x16e>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d106      	bne.n	8003b1e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003b1c:	e07b      	b.n	8003c16 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1ca      	bne.n	8003abe <HAL_SPI_Transmit+0x11c>
 8003b28:	e050      	b.n	8003bcc <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_SPI_Transmit+0x196>
 8003b32:	8afb      	ldrh	r3, [r7, #22]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d144      	bne.n	8003bc2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	330c      	adds	r3, #12
 8003b42:	7812      	ldrb	r2, [r2, #0]
 8003b44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b5e:	e030      	b.n	8003bc2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d113      	bne.n	8003b96 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	330c      	adds	r3, #12
 8003b78:	7812      	ldrb	r2, [r2, #0]
 8003b7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b94:	e015      	b.n	8003bc2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b96:	f7fe fdb3 	bl	8002700 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d803      	bhi.n	8003bae <HAL_SPI_Transmit+0x20c>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d102      	bne.n	8003bb4 <HAL_SPI_Transmit+0x212>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d106      	bne.n	8003bc2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003bc0:	e029      	b.n	8003c16 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1c9      	bne.n	8003b60 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	6839      	ldr	r1, [r7, #0]
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 fbdf 	bl	8004394 <SPI_EndRxTxTransaction>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2220      	movs	r2, #32
 8003be0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10a      	bne.n	8003c00 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bea:	2300      	movs	r3, #0
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	77fb      	strb	r3, [r7, #31]
 8003c0c:	e003      	b.n	8003c16 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3720      	adds	r7, #32
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	4613      	mov	r3, r2
 8003c36:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d002      	beq.n	8003c4e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c4c:	e0fb      	b.n	8003e46 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c56:	d112      	bne.n	8003c7e <HAL_SPI_Receive+0x56>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10e      	bne.n	8003c7e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2204      	movs	r2, #4
 8003c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c68:	88fa      	ldrh	r2, [r7, #6]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	68b9      	ldr	r1, [r7, #8]
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f8ef 	bl	8003e58 <HAL_SPI_TransmitReceive>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	e0e8      	b.n	8003e50 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_SPI_Receive+0x64>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e0e1      	b.n	8003e50 <HAL_SPI_Receive+0x228>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c94:	f7fe fd34 	bl	8002700 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <HAL_SPI_Receive+0x7e>
 8003ca0:	88fb      	ldrh	r3, [r7, #6]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d102      	bne.n	8003cac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003caa:	e0cc      	b.n	8003e46 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2204      	movs	r2, #4
 8003cb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	88fa      	ldrh	r2, [r7, #6]
 8003cc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	88fa      	ldrh	r2, [r7, #6]
 8003cca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf2:	d10f      	bne.n	8003d14 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d12:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d007      	beq.n	8003d32 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d30:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d16a      	bne.n	8003e10 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d3a:	e032      	b.n	8003da2 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d115      	bne.n	8003d76 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f103 020c 	add.w	r2, r3, #12
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	7812      	ldrb	r2, [r2, #0]
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d74:	e015      	b.n	8003da2 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d76:	f7fe fcc3 	bl	8002700 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d803      	bhi.n	8003d8e <HAL_SPI_Receive+0x166>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8c:	d102      	bne.n	8003d94 <HAL_SPI_Receive+0x16c>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d106      	bne.n	8003da2 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003da0:	e051      	b.n	8003e46 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1c7      	bne.n	8003d3c <HAL_SPI_Receive+0x114>
 8003dac:	e035      	b.n	8003e1a <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d113      	bne.n	8003de4 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	b292      	uxth	r2, r2
 8003dc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	1c9a      	adds	r2, r3, #2
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003de2:	e015      	b.n	8003e10 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003de4:	f7fe fc8c 	bl	8002700 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d803      	bhi.n	8003dfc <HAL_SPI_Receive+0x1d4>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfa:	d102      	bne.n	8003e02 <HAL_SPI_Receive+0x1da>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003e0e:	e01a      	b.n	8003e46 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1c9      	bne.n	8003dae <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	6839      	ldr	r1, [r7, #0]
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 fa52 	bl	80042c8 <SPI_EndRxTransaction>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	75fb      	strb	r3, [r7, #23]
 8003e3c:	e003      	b.n	8003e46 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08c      	sub	sp, #48	; 0x30
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e66:	2301      	movs	r3, #1
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_SPI_TransmitReceive+0x26>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e198      	b.n	80041b0 <HAL_SPI_TransmitReceive+0x358>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e86:	f7fe fc3b 	bl	8002700 <HAL_GetTick>
 8003e8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e9c:	887b      	ldrh	r3, [r7, #2]
 8003e9e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ea0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d00f      	beq.n	8003ec8 <HAL_SPI_TransmitReceive+0x70>
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eae:	d107      	bne.n	8003ec0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d103      	bne.n	8003ec0 <HAL_SPI_TransmitReceive+0x68>
 8003eb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d003      	beq.n	8003ec8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ec6:	e16d      	b.n	80041a4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <HAL_SPI_TransmitReceive+0x82>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_SPI_TransmitReceive+0x82>
 8003ed4:	887b      	ldrh	r3, [r7, #2]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d103      	bne.n	8003ee2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ee0:	e160      	b.n	80041a4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d003      	beq.n	8003ef6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2205      	movs	r2, #5
 8003ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	887a      	ldrh	r2, [r7, #2]
 8003f06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	887a      	ldrh	r2, [r7, #2]
 8003f0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	887a      	ldrh	r2, [r7, #2]
 8003f18:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	887a      	ldrh	r2, [r7, #2]
 8003f1e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f36:	2b40      	cmp	r3, #64	; 0x40
 8003f38:	d007      	beq.n	8003f4a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f52:	d17c      	bne.n	800404e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <HAL_SPI_TransmitReceive+0x10a>
 8003f5c:	8b7b      	ldrh	r3, [r7, #26]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d16a      	bne.n	8004038 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	881a      	ldrh	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	1c9a      	adds	r2, r3, #2
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f86:	e057      	b.n	8004038 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d11b      	bne.n	8003fce <HAL_SPI_TransmitReceive+0x176>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d016      	beq.n	8003fce <HAL_SPI_TransmitReceive+0x176>
 8003fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d113      	bne.n	8003fce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	881a      	ldrh	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	1c9a      	adds	r2, r3, #2
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d119      	bne.n	8004010 <HAL_SPI_TransmitReceive+0x1b8>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d014      	beq.n	8004010 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	b292      	uxth	r2, r2
 8003ff2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff8:	1c9a      	adds	r2, r3, #2
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800400c:	2301      	movs	r3, #1
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004010:	f7fe fb76 	bl	8002700 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800401c:	429a      	cmp	r2, r3
 800401e:	d80b      	bhi.n	8004038 <HAL_SPI_TransmitReceive+0x1e0>
 8004020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004026:	d007      	beq.n	8004038 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004036:	e0b5      	b.n	80041a4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1a2      	bne.n	8003f88 <HAL_SPI_TransmitReceive+0x130>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004046:	b29b      	uxth	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d19d      	bne.n	8003f88 <HAL_SPI_TransmitReceive+0x130>
 800404c:	e080      	b.n	8004150 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <HAL_SPI_TransmitReceive+0x204>
 8004056:	8b7b      	ldrh	r3, [r7, #26]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d16f      	bne.n	800413c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	7812      	ldrb	r2, [r2, #0]
 8004068:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004082:	e05b      	b.n	800413c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b02      	cmp	r3, #2
 8004090:	d11c      	bne.n	80040cc <HAL_SPI_TransmitReceive+0x274>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d017      	beq.n	80040cc <HAL_SPI_TransmitReceive+0x274>
 800409c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d114      	bne.n	80040cc <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	330c      	adds	r3, #12
 80040ac:	7812      	ldrb	r2, [r2, #0]
 80040ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d119      	bne.n	800410e <HAL_SPI_TransmitReceive+0x2b6>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d014      	beq.n	800410e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800410a:	2301      	movs	r3, #1
 800410c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800410e:	f7fe faf7 	bl	8002700 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800411a:	429a      	cmp	r2, r3
 800411c:	d803      	bhi.n	8004126 <HAL_SPI_TransmitReceive+0x2ce>
 800411e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d102      	bne.n	800412c <HAL_SPI_TransmitReceive+0x2d4>
 8004126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004128:	2b00      	cmp	r3, #0
 800412a:	d107      	bne.n	800413c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800413a:	e033      	b.n	80041a4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d19e      	bne.n	8004084 <HAL_SPI_TransmitReceive+0x22c>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800414a:	b29b      	uxth	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d199      	bne.n	8004084 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004152:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f91d 	bl	8004394 <SPI_EndRxTxTransaction>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d006      	beq.n	800416e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2220      	movs	r2, #32
 800416a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800416c:	e01a      	b.n	80041a4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800419a:	e003      	b.n	80041a4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3730      	adds	r7, #48	; 0x30
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	4613      	mov	r3, r2
 80041c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041c8:	f7fe fa9a 	bl	8002700 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d0:	1a9b      	subs	r3, r3, r2
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	4413      	add	r3, r2
 80041d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041d8:	f7fe fa92 	bl	8002700 <HAL_GetTick>
 80041dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041de:	4b39      	ldr	r3, [pc, #228]	; (80042c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	015b      	lsls	r3, r3, #5
 80041e4:	0d1b      	lsrs	r3, r3, #20
 80041e6:	69fa      	ldr	r2, [r7, #28]
 80041e8:	fb02 f303 	mul.w	r3, r2, r3
 80041ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ee:	e054      	b.n	800429a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f6:	d050      	beq.n	800429a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041f8:	f7fe fa82 	bl	8002700 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	429a      	cmp	r2, r3
 8004206:	d902      	bls.n	800420e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d13d      	bne.n	800428a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800421c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004226:	d111      	bne.n	800424c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004230:	d004      	beq.n	800423c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800423a:	d107      	bne.n	800424c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800424a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004254:	d10f      	bne.n	8004276 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004274:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e017      	b.n	80042ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	3b01      	subs	r3, #1
 8004298:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4013      	ands	r3, r2
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	bf0c      	ite	eq
 80042aa:	2301      	moveq	r3, #1
 80042ac:	2300      	movne	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	461a      	mov	r2, r3
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d19b      	bne.n	80041f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000004 	.word	0x20000004

080042c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042dc:	d111      	bne.n	8004302 <SPI_EndRxTransaction+0x3a>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e6:	d004      	beq.n	80042f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f0:	d107      	bne.n	8004302 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004300:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800430a:	d12a      	bne.n	8004362 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004314:	d012      	beq.n	800433c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2200      	movs	r2, #0
 800431e:	2180      	movs	r1, #128	; 0x80
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f7ff ff49 	bl	80041b8 <SPI_WaitFlagStateUntilTimeout>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d02d      	beq.n	8004388 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004330:	f043 0220 	orr.w	r2, r3, #32
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e026      	b.n	800438a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2200      	movs	r2, #0
 8004344:	2101      	movs	r1, #1
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f7ff ff36 	bl	80041b8 <SPI_WaitFlagStateUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d01a      	beq.n	8004388 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004356:	f043 0220 	orr.w	r2, r3, #32
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e013      	b.n	800438a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2200      	movs	r2, #0
 800436a:	2101      	movs	r1, #1
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f7ff ff23 	bl	80041b8 <SPI_WaitFlagStateUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d007      	beq.n	8004388 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437c:	f043 0220 	orr.w	r2, r3, #32
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e000      	b.n	800438a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af02      	add	r7, sp, #8
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043a0:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <SPI_EndRxTxTransaction+0x7c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1b      	ldr	r2, [pc, #108]	; (8004414 <SPI_EndRxTxTransaction+0x80>)
 80043a6:	fba2 2303 	umull	r2, r3, r2, r3
 80043aa:	0d5b      	lsrs	r3, r3, #21
 80043ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043b0:	fb02 f303 	mul.w	r3, r2, r3
 80043b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043be:	d112      	bne.n	80043e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2200      	movs	r2, #0
 80043c8:	2180      	movs	r1, #128	; 0x80
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f7ff fef4 	bl	80041b8 <SPI_WaitFlagStateUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d016      	beq.n	8004404 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	f043 0220 	orr.w	r2, r3, #32
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e00f      	b.n	8004406 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00a      	beq.n	8004402 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fc:	2b80      	cmp	r3, #128	; 0x80
 80043fe:	d0f2      	beq.n	80043e6 <SPI_EndRxTxTransaction+0x52>
 8004400:	e000      	b.n	8004404 <SPI_EndRxTxTransaction+0x70>
        break;
 8004402:	bf00      	nop
  }

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20000004 	.word	0x20000004
 8004414:	165e9f81 	.word	0x165e9f81

08004418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e031      	b.n	800448e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fd ff62 	bl	8002308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3304      	adds	r3, #4
 8004454:	4619      	mov	r1, r3
 8004456:	4610      	mov	r0, r2
 8004458:	f000 fa86 	bl	8004968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e031      	b.n	800450c <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d106      	bne.n	80044c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f829 	bl	8004514 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2202      	movs	r2, #2
 80044c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3304      	adds	r3, #4
 80044d2:	4619      	mov	r1, r3
 80044d4:	4610      	mov	r0, r2
 80044d6:	f000 fa47 	bl	8004968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr
	...

08004528 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d109      	bne.n	800454c <HAL_TIM_PWM_Start+0x24>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b01      	cmp	r3, #1
 8004542:	bf14      	ite	ne
 8004544:	2301      	movne	r3, #1
 8004546:	2300      	moveq	r3, #0
 8004548:	b2db      	uxtb	r3, r3
 800454a:	e022      	b.n	8004592 <HAL_TIM_PWM_Start+0x6a>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2b04      	cmp	r3, #4
 8004550:	d109      	bne.n	8004566 <HAL_TIM_PWM_Start+0x3e>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b01      	cmp	r3, #1
 800455c:	bf14      	ite	ne
 800455e:	2301      	movne	r3, #1
 8004560:	2300      	moveq	r3, #0
 8004562:	b2db      	uxtb	r3, r3
 8004564:	e015      	b.n	8004592 <HAL_TIM_PWM_Start+0x6a>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b08      	cmp	r3, #8
 800456a:	d109      	bne.n	8004580 <HAL_TIM_PWM_Start+0x58>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b01      	cmp	r3, #1
 8004576:	bf14      	ite	ne
 8004578:	2301      	movne	r3, #1
 800457a:	2300      	moveq	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	e008      	b.n	8004592 <HAL_TIM_PWM_Start+0x6a>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	bf14      	ite	ne
 800458c:	2301      	movne	r3, #1
 800458e:	2300      	moveq	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e051      	b.n	800463e <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d104      	bne.n	80045aa <HAL_TIM_PWM_Start+0x82>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80045a8:	e013      	b.n	80045d2 <HAL_TIM_PWM_Start+0xaa>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d104      	bne.n	80045ba <HAL_TIM_PWM_Start+0x92>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80045b8:	e00b      	b.n	80045d2 <HAL_TIM_PWM_Start+0xaa>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d104      	bne.n	80045ca <HAL_TIM_PWM_Start+0xa2>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80045c8:	e003      	b.n	80045d2 <HAL_TIM_PWM_Start+0xaa>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2202      	movs	r2, #2
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2201      	movs	r2, #1
 80045d8:	6839      	ldr	r1, [r7, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fbbf 	bl	8004d5e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e8:	d00e      	beq.n	8004608 <HAL_TIM_PWM_Start+0xe0>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a16      	ldr	r2, [pc, #88]	; (8004648 <HAL_TIM_PWM_Start+0x120>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d009      	beq.n	8004608 <HAL_TIM_PWM_Start+0xe0>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a14      	ldr	r2, [pc, #80]	; (800464c <HAL_TIM_PWM_Start+0x124>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d004      	beq.n	8004608 <HAL_TIM_PWM_Start+0xe0>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a13      	ldr	r2, [pc, #76]	; (8004650 <HAL_TIM_PWM_Start+0x128>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d111      	bne.n	800462c <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b06      	cmp	r3, #6
 8004618:	d010      	beq.n	800463c <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 0201 	orr.w	r2, r2, #1
 8004628:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462a:	e007      	b.n	800463c <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40000400 	.word	0x40000400
 800464c:	40000800 	.word	0x40000800
 8004650:	40010800 	.word	0x40010800

08004654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800466e:	2302      	movs	r3, #2
 8004670:	e0ae      	b.n	80047d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b0c      	cmp	r3, #12
 800467e:	f200 809f 	bhi.w	80047c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004682:	a201      	add	r2, pc, #4	; (adr r2, 8004688 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004688:	080046bd 	.word	0x080046bd
 800468c:	080047c1 	.word	0x080047c1
 8004690:	080047c1 	.word	0x080047c1
 8004694:	080047c1 	.word	0x080047c1
 8004698:	080046fd 	.word	0x080046fd
 800469c:	080047c1 	.word	0x080047c1
 80046a0:	080047c1 	.word	0x080047c1
 80046a4:	080047c1 	.word	0x080047c1
 80046a8:	0800473f 	.word	0x0800473f
 80046ac:	080047c1 	.word	0x080047c1
 80046b0:	080047c1 	.word	0x080047c1
 80046b4:	080047c1 	.word	0x080047c1
 80046b8:	0800477f 	.word	0x0800477f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 f9c0 	bl	8004a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0208 	orr.w	r2, r2, #8
 80046d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0204 	bic.w	r2, r2, #4
 80046e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6999      	ldr	r1, [r3, #24]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	619a      	str	r2, [r3, #24]
      break;
 80046fa:	e064      	b.n	80047c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 f9dc 	bl	8004ac0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6999      	ldr	r1, [r3, #24]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	021a      	lsls	r2, r3, #8
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	619a      	str	r2, [r3, #24]
      break;
 800473c:	e043      	b.n	80047c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	4618      	mov	r0, r3
 8004746:	f000 f9f9 	bl	8004b3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0208 	orr.w	r2, r2, #8
 8004758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69da      	ldr	r2, [r3, #28]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0204 	bic.w	r2, r2, #4
 8004768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69d9      	ldr	r1, [r3, #28]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	61da      	str	r2, [r3, #28]
      break;
 800477c:	e023      	b.n	80047c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fa16 	bl	8004bb6 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69d9      	ldr	r1, [r3, #28]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	021a      	lsls	r2, r3, #8
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	61da      	str	r2, [r3, #28]
      break;
 80047be:	e002      	b.n	80047c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	75fb      	strb	r3, [r7, #23]
      break;
 80047c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80047ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d101      	bne.n	80047f4 <HAL_TIM_ConfigClockSource+0x1c>
 80047f0:	2302      	movs	r3, #2
 80047f2:	e0b4      	b.n	800495e <HAL_TIM_ConfigClockSource+0x186>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800481a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800482c:	d03e      	beq.n	80048ac <HAL_TIM_ConfigClockSource+0xd4>
 800482e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004832:	f200 8087 	bhi.w	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 8004836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800483a:	f000 8086 	beq.w	800494a <HAL_TIM_ConfigClockSource+0x172>
 800483e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004842:	d87f      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 8004844:	2b70      	cmp	r3, #112	; 0x70
 8004846:	d01a      	beq.n	800487e <HAL_TIM_ConfigClockSource+0xa6>
 8004848:	2b70      	cmp	r3, #112	; 0x70
 800484a:	d87b      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 800484c:	2b60      	cmp	r3, #96	; 0x60
 800484e:	d050      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0x11a>
 8004850:	2b60      	cmp	r3, #96	; 0x60
 8004852:	d877      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 8004854:	2b50      	cmp	r3, #80	; 0x50
 8004856:	d03c      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0xfa>
 8004858:	2b50      	cmp	r3, #80	; 0x50
 800485a:	d873      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 800485c:	2b40      	cmp	r3, #64	; 0x40
 800485e:	d058      	beq.n	8004912 <HAL_TIM_ConfigClockSource+0x13a>
 8004860:	2b40      	cmp	r3, #64	; 0x40
 8004862:	d86f      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 8004864:	2b30      	cmp	r3, #48	; 0x30
 8004866:	d064      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x15a>
 8004868:	2b30      	cmp	r3, #48	; 0x30
 800486a:	d86b      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 800486c:	2b20      	cmp	r3, #32
 800486e:	d060      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x15a>
 8004870:	2b20      	cmp	r3, #32
 8004872:	d867      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 8004874:	2b00      	cmp	r3, #0
 8004876:	d05c      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x15a>
 8004878:	2b10      	cmp	r3, #16
 800487a:	d05a      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x15a>
 800487c:	e062      	b.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6899      	ldr	r1, [r3, #8]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f000 fa47 	bl	8004d20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	609a      	str	r2, [r3, #8]
      break;
 80048aa:	e04f      	b.n	800494c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6818      	ldr	r0, [r3, #0]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	6899      	ldr	r1, [r3, #8]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f000 fa30 	bl	8004d20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048ce:	609a      	str	r2, [r3, #8]
      break;
 80048d0:	e03c      	b.n	800494c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6818      	ldr	r0, [r3, #0]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	6859      	ldr	r1, [r3, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	461a      	mov	r2, r3
 80048e0:	f000 f9a7 	bl	8004c32 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2150      	movs	r1, #80	; 0x50
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 f9fe 	bl	8004cec <TIM_ITRx_SetConfig>
      break;
 80048f0:	e02c      	b.n	800494c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6818      	ldr	r0, [r3, #0]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6859      	ldr	r1, [r3, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	461a      	mov	r2, r3
 8004900:	f000 f9c5 	bl	8004c8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2160      	movs	r1, #96	; 0x60
 800490a:	4618      	mov	r0, r3
 800490c:	f000 f9ee 	bl	8004cec <TIM_ITRx_SetConfig>
      break;
 8004910:	e01c      	b.n	800494c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6818      	ldr	r0, [r3, #0]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	6859      	ldr	r1, [r3, #4]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	461a      	mov	r2, r3
 8004920:	f000 f987 	bl	8004c32 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2140      	movs	r1, #64	; 0x40
 800492a:	4618      	mov	r0, r3
 800492c:	f000 f9de 	bl	8004cec <TIM_ITRx_SetConfig>
      break;
 8004930:	e00c      	b.n	800494c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4619      	mov	r1, r3
 800493c:	4610      	mov	r0, r2
 800493e:	f000 f9d5 	bl	8004cec <TIM_ITRx_SetConfig>
      break;
 8004942:	e003      	b.n	800494c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
      break;
 8004948:	e000      	b.n	800494c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800494a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 800495c:	7bfb      	ldrb	r3, [r7, #15]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497e:	d00f      	beq.n	80049a0 <TIM_Base_SetConfig+0x38>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a2b      	ldr	r2, [pc, #172]	; (8004a30 <TIM_Base_SetConfig+0xc8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00b      	beq.n	80049a0 <TIM_Base_SetConfig+0x38>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a2a      	ldr	r2, [pc, #168]	; (8004a34 <TIM_Base_SetConfig+0xcc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d007      	beq.n	80049a0 <TIM_Base_SetConfig+0x38>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a29      	ldr	r2, [pc, #164]	; (8004a38 <TIM_Base_SetConfig+0xd0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d003      	beq.n	80049a0 <TIM_Base_SetConfig+0x38>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a28      	ldr	r2, [pc, #160]	; (8004a3c <TIM_Base_SetConfig+0xd4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d108      	bne.n	80049b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b8:	d017      	beq.n	80049ea <TIM_Base_SetConfig+0x82>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a1c      	ldr	r2, [pc, #112]	; (8004a30 <TIM_Base_SetConfig+0xc8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d013      	beq.n	80049ea <TIM_Base_SetConfig+0x82>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a1b      	ldr	r2, [pc, #108]	; (8004a34 <TIM_Base_SetConfig+0xcc>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00f      	beq.n	80049ea <TIM_Base_SetConfig+0x82>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a1a      	ldr	r2, [pc, #104]	; (8004a38 <TIM_Base_SetConfig+0xd0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00b      	beq.n	80049ea <TIM_Base_SetConfig+0x82>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a19      	ldr	r2, [pc, #100]	; (8004a3c <TIM_Base_SetConfig+0xd4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d007      	beq.n	80049ea <TIM_Base_SetConfig+0x82>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a18      	ldr	r2, [pc, #96]	; (8004a40 <TIM_Base_SetConfig+0xd8>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d003      	beq.n	80049ea <TIM_Base_SetConfig+0x82>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a17      	ldr	r2, [pc, #92]	; (8004a44 <TIM_Base_SetConfig+0xdc>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d108      	bne.n	80049fc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	615a      	str	r2, [r3, #20]
}
 8004a26:	bf00      	nop
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800
 8004a38:	40000c00 	.word	0x40000c00
 8004a3c:	40010800 	.word	0x40010800
 8004a40:	40010c00 	.word	0x40010c00
 8004a44:	40011000 	.word	0x40011000

08004a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	f023 0201 	bic.w	r2, r3, #1
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0303 	bic.w	r3, r3, #3
 8004a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 0302 	bic.w	r3, r3, #2
 8004a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	621a      	str	r2, [r3, #32]
}
 8004ab6:	bf00      	nop
 8004ab8:	371c      	adds	r7, #28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr

08004ac0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	f023 0210 	bic.w	r2, r3, #16
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	021b      	lsls	r3, r3, #8
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f023 0320 	bic.w	r3, r3, #32
 8004b0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	621a      	str	r2, [r3, #32]
}
 8004b32:	bf00      	nop
 8004b34:	371c      	adds	r7, #28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr

08004b3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0303 	bic.w	r3, r3, #3
 8004b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	021b      	lsls	r3, r3, #8
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	621a      	str	r2, [r3, #32]
}
 8004bac:	bf00      	nop
 8004bae:	371c      	adds	r7, #28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr

08004bb6 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b087      	sub	sp, #28
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	021b      	lsls	r3, r3, #8
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	031b      	lsls	r3, r3, #12
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	621a      	str	r2, [r3, #32]
}
 8004c28:	bf00      	nop
 8004c2a:	371c      	adds	r7, #28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr

08004c32 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b087      	sub	sp, #28
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	f023 0201 	bic.w	r2, r3, #1
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f023 030a 	bic.w	r3, r3, #10
 8004c6e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	621a      	str	r2, [r3, #32]
}
 8004c84:	bf00      	nop
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc80      	pop	{r7}
 8004c8c:	4770      	bx	lr

08004c8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b087      	sub	sp, #28
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	f023 0210 	bic.w	r2, r3, #16
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	031b      	lsls	r3, r3, #12
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	621a      	str	r2, [r3, #32]
}
 8004ce2:	bf00      	nop
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr

08004cec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f043 0307 	orr.w	r3, r3, #7
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	609a      	str	r2, [r3, #8]
}
 8004d16:	bf00      	nop
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr

08004d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	021a      	lsls	r2, r3, #8
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	431a      	orrs	r2, r3
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	609a      	str	r2, [r3, #8]
}
 8004d54:	bf00      	nop
 8004d56:	371c      	adds	r7, #28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bc80      	pop	{r7}
 8004d5c:	4770      	bx	lr

08004d5e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b087      	sub	sp, #28
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f003 031f 	and.w	r3, r3, #31
 8004d70:	2201      	movs	r2, #1
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a1a      	ldr	r2, [r3, #32]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	401a      	ands	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a1a      	ldr	r2, [r3, #32]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f003 031f 	and.w	r3, r3, #31
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	fa01 f303 	lsl.w	r3, r1, r3
 8004d96:	431a      	orrs	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	621a      	str	r2, [r3, #32]
}
 8004d9c:	bf00      	nop
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr
	...

08004da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e046      	b.n	8004e4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e02:	d00e      	beq.n	8004e22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a13      	ldr	r2, [pc, #76]	; (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d009      	beq.n	8004e22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a12      	ldr	r2, [pc, #72]	; (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d004      	beq.n	8004e22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a10      	ldr	r2, [pc, #64]	; (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d10c      	bne.n	8004e3c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr
 8004e58:	40000400 	.word	0x40000400
 8004e5c:	40000800 	.word	0x40000800
 8004e60:	40010800 	.word	0x40010800

08004e64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e042      	b.n	8004efc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d106      	bne.n	8004e90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7fd fb6a 	bl	8002564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2224      	movs	r2, #36	; 0x24
 8004e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f82b 	bl	8004f04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695a      	ldr	r2, [r3, #20]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004edc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	431a      	orrs	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004f44:	f023 030c 	bic.w	r3, r3, #12
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6812      	ldr	r2, [r2, #0]
 8004f4c:	68b9      	ldr	r1, [r7, #8]
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699a      	ldr	r2, [r3, #24]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a55      	ldr	r2, [pc, #340]	; (80050c4 <UART_SetConfig+0x1c0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d103      	bne.n	8004f7a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f72:	f7fe fc19 	bl	80037a8 <HAL_RCC_GetPCLK2Freq>
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	e002      	b.n	8004f80 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f7a:	f7fe fc01 	bl	8003780 <HAL_RCC_GetPCLK1Freq>
 8004f7e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f88:	d14c      	bne.n	8005024 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	009a      	lsls	r2, r3, #2
 8004f94:	441a      	add	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa0:	4a49      	ldr	r2, [pc, #292]	; (80050c8 <UART_SetConfig+0x1c4>)
 8004fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	0119      	lsls	r1, r3, #4
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009a      	lsls	r2, r3, #2
 8004fb4:	441a      	add	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fc0:	4b41      	ldr	r3, [pc, #260]	; (80050c8 <UART_SetConfig+0x1c4>)
 8004fc2:	fba3 0302 	umull	r0, r3, r3, r2
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	2064      	movs	r0, #100	; 0x64
 8004fca:	fb00 f303 	mul.w	r3, r0, r3
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	3332      	adds	r3, #50	; 0x32
 8004fd4:	4a3c      	ldr	r2, [pc, #240]	; (80050c8 <UART_SetConfig+0x1c4>)
 8004fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fe2:	4419      	add	r1, r3
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	009a      	lsls	r2, r3, #2
 8004fee:	441a      	add	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ffa:	4b33      	ldr	r3, [pc, #204]	; (80050c8 <UART_SetConfig+0x1c4>)
 8004ffc:	fba3 0302 	umull	r0, r3, r3, r2
 8005000:	095b      	lsrs	r3, r3, #5
 8005002:	2064      	movs	r0, #100	; 0x64
 8005004:	fb00 f303 	mul.w	r3, r0, r3
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	3332      	adds	r3, #50	; 0x32
 800500e:	4a2e      	ldr	r2, [pc, #184]	; (80050c8 <UART_SetConfig+0x1c4>)
 8005010:	fba2 2303 	umull	r2, r3, r2, r3
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	f003 0207 	and.w	r2, r3, #7
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	440a      	add	r2, r1
 8005020:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005022:	e04a      	b.n	80050ba <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4613      	mov	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	009a      	lsls	r2, r3, #2
 800502e:	441a      	add	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	fbb2 f3f3 	udiv	r3, r2, r3
 800503a:	4a23      	ldr	r2, [pc, #140]	; (80050c8 <UART_SetConfig+0x1c4>)
 800503c:	fba2 2303 	umull	r2, r3, r2, r3
 8005040:	095b      	lsrs	r3, r3, #5
 8005042:	0119      	lsls	r1, r3, #4
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4613      	mov	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	009a      	lsls	r2, r3, #2
 800504e:	441a      	add	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	fbb2 f2f3 	udiv	r2, r2, r3
 800505a:	4b1b      	ldr	r3, [pc, #108]	; (80050c8 <UART_SetConfig+0x1c4>)
 800505c:	fba3 0302 	umull	r0, r3, r3, r2
 8005060:	095b      	lsrs	r3, r3, #5
 8005062:	2064      	movs	r0, #100	; 0x64
 8005064:	fb00 f303 	mul.w	r3, r0, r3
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	3332      	adds	r3, #50	; 0x32
 800506e:	4a16      	ldr	r2, [pc, #88]	; (80050c8 <UART_SetConfig+0x1c4>)
 8005070:	fba2 2303 	umull	r2, r3, r2, r3
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800507a:	4419      	add	r1, r3
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4613      	mov	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	009a      	lsls	r2, r3, #2
 8005086:	441a      	add	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <UART_SetConfig+0x1c4>)
 8005094:	fba3 0302 	umull	r0, r3, r3, r2
 8005098:	095b      	lsrs	r3, r3, #5
 800509a:	2064      	movs	r0, #100	; 0x64
 800509c:	fb00 f303 	mul.w	r3, r0, r3
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	3332      	adds	r3, #50	; 0x32
 80050a6:	4a08      	ldr	r2, [pc, #32]	; (80050c8 <UART_SetConfig+0x1c4>)
 80050a8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ac:	095b      	lsrs	r3, r3, #5
 80050ae:	f003 020f 	and.w	r2, r3, #15
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	440a      	add	r2, r1
 80050b8:	609a      	str	r2, [r3, #8]
}
 80050ba:	bf00      	nop
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	40013800 	.word	0x40013800
 80050c8:	51eb851f 	.word	0x51eb851f

080050cc <__libc_init_array>:
 80050cc:	b570      	push	{r4, r5, r6, lr}
 80050ce:	2600      	movs	r6, #0
 80050d0:	4d0c      	ldr	r5, [pc, #48]	; (8005104 <__libc_init_array+0x38>)
 80050d2:	4c0d      	ldr	r4, [pc, #52]	; (8005108 <__libc_init_array+0x3c>)
 80050d4:	1b64      	subs	r4, r4, r5
 80050d6:	10a4      	asrs	r4, r4, #2
 80050d8:	42a6      	cmp	r6, r4
 80050da:	d109      	bne.n	80050f0 <__libc_init_array+0x24>
 80050dc:	f000 f822 	bl	8005124 <_init>
 80050e0:	2600      	movs	r6, #0
 80050e2:	4d0a      	ldr	r5, [pc, #40]	; (800510c <__libc_init_array+0x40>)
 80050e4:	4c0a      	ldr	r4, [pc, #40]	; (8005110 <__libc_init_array+0x44>)
 80050e6:	1b64      	subs	r4, r4, r5
 80050e8:	10a4      	asrs	r4, r4, #2
 80050ea:	42a6      	cmp	r6, r4
 80050ec:	d105      	bne.n	80050fa <__libc_init_array+0x2e>
 80050ee:	bd70      	pop	{r4, r5, r6, pc}
 80050f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f4:	4798      	blx	r3
 80050f6:	3601      	adds	r6, #1
 80050f8:	e7ee      	b.n	80050d8 <__libc_init_array+0xc>
 80050fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80050fe:	4798      	blx	r3
 8005100:	3601      	adds	r6, #1
 8005102:	e7f2      	b.n	80050ea <__libc_init_array+0x1e>
 8005104:	08005170 	.word	0x08005170
 8005108:	08005170 	.word	0x08005170
 800510c:	08005170 	.word	0x08005170
 8005110:	08005174 	.word	0x08005174

08005114 <memset>:
 8005114:	4603      	mov	r3, r0
 8005116:	4402      	add	r2, r0
 8005118:	4293      	cmp	r3, r2
 800511a:	d100      	bne.n	800511e <memset+0xa>
 800511c:	4770      	bx	lr
 800511e:	f803 1b01 	strb.w	r1, [r3], #1
 8005122:	e7f9      	b.n	8005118 <memset+0x4>

08005124 <_init>:
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	bf00      	nop
 8005128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512a:	bc08      	pop	{r3}
 800512c:	469e      	mov	lr, r3
 800512e:	4770      	bx	lr

08005130 <_fini>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	bf00      	nop
 8005134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005136:	bc08      	pop	{r3}
 8005138:	469e      	mov	lr, r3
 800513a:	4770      	bx	lr
